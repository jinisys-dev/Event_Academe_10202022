-- MySQL dump 10.10
--
-- Host: localhost    Database: hotelmgtsystem
-- ------------------------------------------------------
-- Server version	5.0.27-community-nt

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `_temprsvc_blockedrooms`
--

DROP TABLE IF EXISTS `_temprsvc_blockedrooms`;
CREATE TABLE `_temprsvc_blockedrooms` (
  `folioid` varchar(20) default NULL,
  `roomtypecode` varchar(50) default '0',
  `BlockedRooms` bigint(21) NOT NULL default '0'
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `_temprsvc_blockedrooms`
--

LOCK TABLES `_temprsvc_blockedrooms` WRITE;
/*!40000 ALTER TABLE `_temprsvc_blockedrooms` DISABLE KEYS */;
/*!40000 ALTER TABLE `_temprsvc_blockedrooms` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `accountingadjustments`
--

DROP TABLE IF EXISTS `accountingadjustments`;
CREATE TABLE `accountingadjustments` (
  `transactionId` bigint(20) NOT NULL auto_increment,
  `hotelID` int(5) NOT NULL,
  `postingDate` datetime NOT NULL default '2008-01-01 01:01:01',
  `transactionDate` date NOT NULL default '2008-01-01',
  `transactionCode` varchar(20) NOT NULL,
  `subAccount` varchar(100) default NULL,
  `referenceNo` varchar(100) default NULL,
  `transactionSource` varchar(20) default NULL,
  `memo` varchar(500) default NULL,
  `acctSide` varchar(10) default NULL,
  `currencyCode` varchar(10) default NULL,
  `conversionRate` decimal(12,5) default NULL,
  `currencyAmount` decimal(12,5) default NULL,
  `baseAmount` decimal(12,5) default NULL,
  `grossAmount` decimal(12,5) default NULL,
  `discount` decimal(12,5) default NULL,
  `serviceCharge` decimal(12,5) default NULL,
  `serviceChargeInclusive` tinyint(1) default '1',
  `governmentTax` decimal(12,5) default NULL,
  `governmentTaxInclusive` tinyint(1) default '1',
  `localTax` decimal(12,5) default NULL,
  `localTaxInclusive` tinyint(1) default '1',
  `netBaseAmount` decimal(12,5) default NULL,
  `netAmount` decimal(12,5) default '0.00000',
  `referenceFolioId` varchar(20) default 'FILLER',
  `roomNumber` varchar(20) default 'FILLER',
  `accountId` varchar(20) default 'FILLER',
  `guestName` varchar(200) default 'FILLER',
  `companyName` varchar(20) default 'FILLER',
  `arrivalDate` datetime NOT NULL default '2008-01-01 00:01:01',
  `departureDate` datetime NOT NULL default '2008-01-01 00:01:01',
  `referenceDriverId` varchar(20) default NULL,
  `carCompany` varchar(100) default NULL,
  `makeModel` varchar(100) default NULL,
  `plateNumber` varchar(10) default NULL,
  `creditCardNo` varchar(20) default NULL,
  `chequeNo` varchar(20) default NULL,
  `accountName` varchar(100) default NULL,
  `bankName` varchar(100) default NULL,
  `chequeDate` date default '1900-01-01',
  `FOCGrantedBy` varchar(100) default NULL,
  `creditCardType` varchar(20) default NULL,
  `approvalSlip` varchar(20) default NULL,
  `creditCardExpiry` datetime default '2008-08-08 00:01:01',
  `terminalID` varchar(10) default NULL,
  `shiftCode` varchar(10) default NULL,
  `statusFlag` varchar(10) default NULL,
  `postedToLedger` char(1) default '1',
  `auditFlag` char(1) default '0',
  `createdDate` datetime default '2001-01-01 01:01:01',
  `createdBy` varchar(20) default NULL,
  `updatedDate` datetime default '2001-01-01 01:01:01',
  `updatedBy` varchar(20) default NULL,
  PRIMARY KEY  (`transactionId`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `accountingadjustments`
--

LOCK TABLES `accountingadjustments` WRITE;
/*!40000 ALTER TABLE `accountingadjustments` DISABLE KEYS */;
/*!40000 ALTER TABLE `accountingadjustments` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `accountprivileges`
--

DROP TABLE IF EXISTS `accountprivileges`;
CREATE TABLE `accountprivileges` (
  `HotelID` int(4) NOT NULL default '1',
  `AccountID` varchar(20) NOT NULL,
  `PrivilegeID` varchar(100) NOT NULL,
  `stateFlag` varchar(25) default NULL,
  `CreatedDate` datetime default '2001-01-01 01:01:01',
  `CreatedBy` varchar(20) default NULL,
  `UpdatedDate` datetime default '2001-01-01 01:01:01',
  `UpdatedBy` varchar(20) default NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `accountprivileges`
--

LOCK TABLES `accountprivileges` WRITE;
/*!40000 ALTER TABLE `accountprivileges` DISABLE KEYS */;
/*!40000 ALTER TABLE `accountprivileges` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `agentcommission`
--

DROP TABLE IF EXISTS `agentcommission`;
CREATE TABLE `agentcommission` (
  `AccountID` varchar(11) NOT NULL,
  `TranCode` varchar(7) NOT NULL,
  `percentcommission` decimal(3,2) NOT NULL default '0.00',
  `HOTELID` int(5) NOT NULL,
  `CREATETIME` datetime default '2001-01-01 01:01:01',
  `CREATEDBY` varchar(20) default NULL,
  `UPDATETIME` datetime default '2001-01-01 01:01:01',
  `UPDATEDBY` varchar(20) default NULL,
  PRIMARY KEY  (`AccountID`,`HOTELID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `agentcommission`
--

LOCK TABLES `agentcommission` WRITE;
/*!40000 ALTER TABLE `agentcommission` DISABLE KEYS */;
/*!40000 ALTER TABLE `agentcommission` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `agents`
--

DROP TABLE IF EXISTS `agents`;
CREATE TABLE `agents` (
  `AgentID` bigint(10) NOT NULL auto_increment,
  `Agency` varchar(50) default NULL,
  `ContactPerson` varchar(100) default NULL,
  `Address` text,
  `ContactNumber` varchar(50) default NULL,
  `HOTEL_ID` int(5) NOT NULL,
  `CREATED_DATE` datetime default '2001-01-01 01:01:01',
  `CREATED_BY` varchar(20) default NULL,
  `UPDATED_DATE` datetime default '2001-01-01 01:01:01',
  `UPDATED_BY` varchar(20) default NULL,
  PRIMARY KEY  (`AgentID`,`HOTEL_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `agents`
--

LOCK TABLES `agents` WRITE;
/*!40000 ALTER TABLE `agents` DISABLE KEYS */;
/*!40000 ALTER TABLE `agents` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `amenities`
--

DROP TABLE IF EXISTS `amenities`;
CREATE TABLE `amenities` (
  `amenityid` varchar(12) NOT NULL,
  `name` varchar(50) NOT NULL,
  `description` varchar(100) NOT NULL,
  `stateflag` varchar(10) NOT NULL default 'ACTIVE',
  `HOTELID` int(5) NOT NULL,
  `CREATETIME` datetime default '2001-01-01 01:01:01',
  `CREATEDBY` varchar(20) default NULL,
  `UPDATETIME` datetime default '2001-01-01 01:01:01',
  `UPDATEDBY` varchar(20) default NULL,
  PRIMARY KEY  (`amenityid`,`HOTELID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `amenities`
--

LOCK TABLES `amenities` WRITE;
/*!40000 ALTER TABLE `amenities` DISABLE KEYS */;
INSERT INTO `amenities` VALUES ('01','BATH TUB','BATH TUB','ASSIGNED',1,'2008-11-08 17:36:55','JINISYS','2008-11-08 17:36:55','JINISYS'),('02','REFRIGERATOR','REFRIGERATOR','ASSIGNED',1,'2008-11-08 17:36:55','JINISYS','2008-11-08 17:36:55','JINISYS'),('03','FLAT SCREEN TV','FLAT SCREEN TV','ASSIGNED',1,'2008-11-08 17:36:55','JINISYS','2008-11-08 17:36:55','JINISYS'),('04','MICROWAVE','MICROWAVE','ASSIGNED',1,'2008-11-08 17:36:55','JINISYS','2008-11-08 17:36:55','JINISYS'),('05','HOT & COLD SHOWER','HOT & COLD SHOWER','ASSIGNED',1,'2008-11-08 17:36:55','JINISYS','2008-11-08 17:36:55','JINISYS');
/*!40000 ALTER TABLE `amenities` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `apledger`
--

DROP TABLE IF EXISTS `apledger`;
CREATE TABLE `apledger` (
  `acctid` varchar(20) NOT NULL,
  `date` date NOT NULL,
  `refno` varchar(11) default NULL,
  `debit` decimal(9,2) default '0.00',
  `credit` decimal(9,2) default '0.00',
  `reffolio` varchar(20) NOT NULL,
  `subfolio` varchar(1) NOT NULL,
  `HOTELID` int(5) NOT NULL,
  `CREATETIME` datetime default '2001-01-01 01:01:01',
  `CREATEDBY` varchar(20) default NULL,
  `UPDATETIME` datetime default '2001-01-01 01:01:01',
  `UPDATEDBY` varchar(20) default NULL,
  `posttoacctng` varchar(1) default '0',
  PRIMARY KEY  (`acctid`,`reffolio`,`subfolio`,`HOTELID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `apledger`
--

LOCK TABLES `apledger` WRITE;
/*!40000 ALTER TABLE `apledger` DISABLE KEYS */;
/*!40000 ALTER TABLE `apledger` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `appliedrates`
--

DROP TABLE IF EXISTS `appliedrates`;
CREATE TABLE `appliedrates` (
  `appliedRateID` bigint(10) NOT NULL auto_increment,
  `description` text,
  `rateType` varchar(20) default NULL,
  `noOfOccupants` int(5) default NULL,
  `status` enum('active','deleted') default 'active',
  `hotelID` int(10) default NULL,
  `CREATEDBY` varchar(20) default NULL,
  `CREATETIME` datetime default NULL,
  `UPDATEDBY` varchar(20) default NULL,
  `UPDATETIME` datetime default NULL,
  PRIMARY KEY  (`appliedRateID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `appliedrates`
--

LOCK TABLES `appliedrates` WRITE;
/*!40000 ALTER TABLE `appliedrates` DISABLE KEYS */;
INSERT INTO `appliedrates` VALUES (1,'SGL OCC.','ROOM RATES',1,'active',1,'ADMIN','2008-06-12 19:30:20','ADMIN','2008-09-11 14:33:02'),(2,'DBL OCCUPANCY','ROOM RATES',2,'active',1,'ADMIN','2008-06-12 19:30:30','ADMIN','2008-09-11 19:38:21'),(3,'TRIPLE OCCUPANCY','ROOM RATES',3,'active',1,'ADMIN','2008-06-12 19:30:40','ADMIN','2008-07-07 15:59:23'),(4,'FOUR SHARING OCCUPANCY','ROOM RATES',4,'active',1,'ADMIN','2008-06-13 15:36:40','ADMIN','2008-07-07 15:59:36'),(5,'FIVE SHARING OCCUPANCY','ROOM RATES',5,'active',1,'ADMIN','2008-06-13 15:36:51','ADMIN','2008-07-07 15:59:40'),(6,'SIX SHARING OCCUPANCY','ROOM RATES',6,'active',1,'ADMIN','2008-06-13 15:37:01','ADMIN','2008-07-07 15:59:45'),(7,'SEVEN SHARING OCCUPANCY','ROOM RATES',7,'active',1,'ADMIN','2008-06-13 15:37:12','ADMIN','2008-07-07 15:59:49'),(8,'EIGHT SHARING OCCUPANCY','ROOM RATES',8,'active',1,'ADMIN','2008-06-13 15:37:27','ADMIN','2008-09-11 19:40:46'),(9,'BREAKFAST LIVE-IN','MEAL RATES',0,'active',1,'ADMIN','2008-07-07 16:00:12','ADMIN','2008-07-07 16:00:12'),(10,'BREAKFAST LIVE-OUT','MEAL RATES',0,'active',1,'ADMIN','2008-07-07 16:00:24','ADMIN','2008-07-07 16:00:24'),(11,'AM SNACKS LIVE-IN','MEAL RATES',0,'active',1,'ADMIN','2008-07-07 16:01:11','ADMIN','2008-07-07 16:01:28'),(12,'AM SNACKS LIVE-OUT','MEAL RATES',0,'active',1,'ADMIN','2008-07-07 16:01:38','ADMIN','2008-07-07 16:01:38'),(13,'LUNCH LIVE-IN','MEAL RATES',0,'active',1,'ADMIN','2008-07-07 16:01:51','ADMIN','2008-09-11 19:43:01'),(14,'LUNCH LIVE-OUT','MEAL RATES',0,'active',1,'ADMIN','2008-07-07 16:02:02','ADMIN','2008-07-07 16:02:02'),(15,'PM SNACKS LIVE-IN','MEAL RATES',0,'active',1,'ADMIN','2008-07-07 16:02:16','ADMIN','2008-07-07 16:02:16'),(16,'PM SNACKS LIVE-OUT','MEAL RATES',0,'active',1,'ADMIN','2008-07-07 16:02:27','ADMIN','2008-07-07 16:02:27'),(17,'DINNER LIVE-IN','MEAL RATES',0,'active',1,'ADMIN','2008-07-07 16:02:49','ADMIN','2008-07-07 16:02:49'),(18,'DINNER LIVE-OUT','MEAL RATES',0,'active',1,'ADMIN','2008-07-07 16:02:58','ADMIN','2008-07-07 16:02:58');
/*!40000 ALTER TABLE `appliedrates` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `arledger`
--

DROP TABLE IF EXISTS `arledger`;
CREATE TABLE `arledger` (
  `acctid` varchar(20) NOT NULL,
  `date` date default NULL,
  `refno` varchar(11) default NULL,
  `debit` decimal(9,2) default '0.00',
  `credit` decimal(9,2) default '0.00',
  `reffolio` varchar(20) NOT NULL,
  `subfolio` varchar(1) NOT NULL,
  `HOTELID` int(5) NOT NULL,
  `CREATETIME` datetime default '2001-01-01 01:01:01',
  `CREATEDBY` varchar(20) default NULL,
  `UPDATETIME` datetime default '2001-01-01 01:01:01',
  `UPDATEDBY` varchar(20) default NULL,
  `posttoacctng` varchar(1) default '0',
  PRIMARY KEY  (`acctid`,`reffolio`,`subfolio`,`HOTELID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `arledger`
--

LOCK TABLES `arledger` WRITE;
/*!40000 ALTER TABLE `arledger` DISABLE KEYS */;
/*!40000 ALTER TABLE `arledger` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `auditdatetable`
--

DROP TABLE IF EXISTS `auditdatetable`;
CREATE TABLE `auditdatetable` (
  `AuditDate` varchar(20) NOT NULL,
  `ShiftCode` int(3) default NULL,
  `Meridian` varchar(10) default NULL,
  `SystemDate` datetime default '2006-01-01 00:00:01',
  `TriggeredBy` varchar(30) default NULL,
  PRIMARY KEY  (`AuditDate`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `auditdatetable`
--

LOCK TABLES `auditdatetable` WRITE;
/*!40000 ALTER TABLE `auditdatetable` DISABLE KEYS */;
INSERT INTO `auditdatetable` VALUES ('2010-10-12',0,'PROCESSED','2010-10-12 17:47:58','ADMIN'),('2010-10-13',0,'AM','2010-10-13 17:47:58','ADMIN');
/*!40000 ALTER TABLE `auditdatetable` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `back_office_config`
--

DROP TABLE IF EXISTS `back_office_config`;
CREATE TABLE `back_office_config` (
  `BACK_OFFICE_CODE` varchar(100) NOT NULL,
  `BACK_OFFICE_NAME` varchar(200) default NULL,
  `BACK_OFFICE_VERSION` varchar(150) default NULL,
  `POSTING_SCHEDULE` enum('DAILY','WEEKLY','MONTHLY','ANNUAL','') default 'DAILY',
  `POSTING_SCHEDULE_YEAR` varchar(10) default NULL,
  `POSTING_SCHEDULE_MONTH` varchar(10) default NULL,
  `POSTING_SCHEDULE_DAY` varchar(10) default NULL,
  `POSTING_SCHEDULE_TIME` varchar(12) default '01:01:01 AM',
  `CONNECTION_STRING` text,
  `HOTEL_ID` int(4) default '1',
  `CREATED_BY` varchar(50) default NULL,
  `CREATE_TIME` datetime default '2001-01-01 00:01:01',
  `UPDATED_BY` varchar(50) default NULL,
  `UPDATE_TIME` datetime default '2001-01-01 00:01:01',
  PRIMARY KEY  (`BACK_OFFICE_CODE`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `back_office_config`
--

LOCK TABLES `back_office_config` WRITE;
/*!40000 ALTER TABLE `back_office_config` DISABLE KEYS */;
INSERT INTO `back_office_config` VALUES ('SAP-Business 1','SAP-Business 1','','DAILY','2010','April','1','11:02:00 AM','',1,'ADMIN','2010-04-27 11:00:23','ADMIN','2010-04-27 11:00:23');
/*!40000 ALTER TABLE `back_office_config` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `blockingdetails`
--

DROP TABLE IF EXISTS `blockingdetails`;
CREATE TABLE `blockingdetails` (
  `blockid` int(11) NOT NULL,
  `roomid` varchar(12) NOT NULL,
  `blockfrom` varchar(30) NOT NULL,
  `blockto` varchar(30) NOT NULL,
  `CREATETIME` datetime default '2001-01-01 01:01:01',
  `CREATEDBY` varchar(20) default NULL,
  `UPDATETIME` datetime default '2001-01-01 01:01:01',
  `UPDATEDBY` varchar(20) default NULL,
  PRIMARY KEY  (`blockid`,`roomid`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `blockingdetails`
--

LOCK TABLES `blockingdetails` WRITE;
/*!40000 ALTER TABLE `blockingdetails` DISABLE KEYS */;
/*!40000 ALTER TABLE `blockingdetails` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `cardco`
--

DROP TABLE IF EXISTS `cardco`;
CREATE TABLE `cardco` (
  `VendorID` varchar(20) NOT NULL,
  `Name` varchar(100) NOT NULL,
  `HOTELID` int(5) NOT NULL default '0',
  `CREATETIME` datetime default '2001-01-01 01:01:01',
  `CREATEDBY` varchar(20) default NULL,
  `UPDATETIME` datetime default '2001-01-01 01:01:01',
  `UPDATEDBY` varchar(20) default NULL,
  PRIMARY KEY  (`VendorID`,`Name`,`HOTELID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `cardco`
--

LOCK TABLES `cardco` WRITE;
/*!40000 ALTER TABLE `cardco` DISABLE KEYS */;
/*!40000 ALTER TABLE `cardco` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `cashiers`
--

DROP TABLE IF EXISTS `cashiers`;
CREATE TABLE `cashiers` (
  `terminalid` int(4) NOT NULL,
  `terminal` varchar(30) default NULL,
  `cashierid` varchar(10) default NULL,
  `shiftcode` varchar(10) default NULL,
  `openingbalance` double(12,2) default '0.00',
  `openingadjustment` double(12,2) default '0.00',
  `beginningbalance` double(12,2) default '0.00',
  `chargeinamount` double(12,2) default '0.00',
  `cash` double(12,2) default '0.00',
  `creditcard` double(12,2) default '0.00',
  `cheque` double(12,2) default '0.00',
  `others` double(12,2) default '0.00',
  `adjustment` double(12,2) default '0.00',
  `amountremitted` double(12,2) default '0.00',
  `netamount` double(12,2) default '0.00',
  `STATUS` enum('OPEN','CLOSE') default 'CLOSE',
  `HOTELID` int(5) NOT NULL default '0',
  `CREATETIME` datetime default '2001-01-01 01:01:01',
  `CREATEDBY` varchar(20) default NULL,
  `UPDATETIME` datetime default '2001-01-01 01:01:01',
  `UPDATEDBY` varchar(20) default NULL,
  `REMARKS` text,
  PRIMARY KEY  (`terminalid`,`HOTELID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `cashiers`
--

LOCK TABLES `cashiers` WRITE;
/*!40000 ALTER TABLE `cashiers` DISABLE KEYS */;
INSERT INTO `cashiers` VALUES (1,'Cash Terminal 1','1','1',0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,'CLOSE',1,'2001-01-01 01:01:01','ADMIN','2010-06-01 00:00:00','ADMIN','');
/*!40000 ALTER TABLE `cashiers` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `cashiers_logs`
--

DROP TABLE IF EXISTS `cashiers_logs`;
CREATE TABLE `cashiers_logs` (
  `transactiondate` date NOT NULL default '2006-01-01',
  `type` enum('OPEN','CLOSE') NOT NULL default 'OPEN',
  `terminalid` int(4) NOT NULL,
  `cashierid` varchar(10) default NULL,
  `shiftcode` varchar(10) NOT NULL,
  `openingbalance` double(12,2) default '0.00',
  `openingadjustment` double(12,2) default '0.00',
  `beginningbalance` double(12,2) default '0.00',
  `chargeinamount` double(12,2) default '0.00',
  `cash` double(12,2) default '0.00',
  `creditcard` double(12,2) default '0.00',
  `cheque` double(12,2) default '0.00',
  `others` double(12,2) default '0.00',
  `adjustment` double(12,2) default '0.00',
  `amountremitted` double(12,2) default '0.00',
  `netamount` double(12,2) default '0.00',
  `HOTELID` int(5) NOT NULL default '1',
  `CREATETIME` datetime default '2001-01-01 01:01:01',
  `CREATEDBY` varchar(20) default NULL,
  `UPDATETIME` datetime default '2001-01-01 01:01:01',
  `UPDATEDBY` varchar(20) default NULL,
  `REMARKS` text,
  PRIMARY KEY  (`transactiondate`,`type`,`terminalid`,`shiftcode`,`HOTELID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `cashiers_logs`
--

LOCK TABLES `cashiers_logs` WRITE;
/*!40000 ALTER TABLE `cashiers_logs` DISABLE KEYS */;
/*!40000 ALTER TABLE `cashiers_logs` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `changes_log`
--

DROP TABLE IF EXISTS `changes_log`;
CREATE TABLE `changes_log` (
  `ID` bigint(20) NOT NULL auto_increment,
  `TERMINAL_ID` varchar(20) default NULL,
  `SHIFT_CODE` varchar(20) default NULL,
  `USER_ID` varchar(100) default NULL,
  `SUPERVISOR_ID` varchar(100) default NULL,
  `REMARKS` text,
  `TABLE_NAME` varchar(100) default NULL,
  `FIELD_CHANGED` varchar(100) default NULL,
  `OLD_VALUE` text,
  `NEW_VALUE` text,
  `DATE_CHANGED` datetime default '2008-08-08 00:00:08',
  PRIMARY KEY  (`ID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `changes_log`
--

LOCK TABLES `changes_log` WRITE;
/*!40000 ALTER TABLE `changes_log` DISABLE KEYS */;
INSERT INTO `changes_log` VALUES (1,'1','0','ADMIN','','CREATE FOLIO','FOLIO','FOLIO ID','','F-0000000001','2010-10-13 14:10:27'),(2,'1','0','ADMIN','','CHANGED FOLIO ROOMID : F-0000000001','FOLIO SCHEDULE','ROOMID','','904','2010-10-13 14:10:27'),(3,'1','0','ADMIN','','CHANGED FOLIO RATETYPE : F-0000000001','FOLIO SCHEDULE','RATETYPE','','STANDARD','2010-10-13 14:10:27'),(4,'1','0','ADMIN','','CHANGED FOLIO RATE : F-0000000001','FOLIO SCHEDULE','RATE','','0.00','2010-10-13 14:10:27'),(5,'1','0','ADMIN','','CHANGED FOLIO BREAKFAST : F-0000000001','FOLIO SCHEDULE','BREAKFAST','','N','2010-10-13 14:10:27'),(6,'1','0','ADMIN','','CREATE FOLIO','FOLIO','FOLIO ID','','F-0000000002','2010-10-13 14:10:58'),(7,'1','0','ADMIN','','CHANGED FOLIO ROOMID : F-0000000002','FOLIO SCHEDULE','ROOMID','','905','2010-10-13 14:10:58'),(8,'1','0','ADMIN','','CHANGED FOLIO RATETYPE : F-0000000002','FOLIO SCHEDULE','RATETYPE','','STANDARD','2010-10-13 14:10:58'),(9,'1','0','ADMIN','','CHANGED FOLIO RATE : F-0000000002','FOLIO SCHEDULE','RATE','','0.00','2010-10-13 14:10:58'),(10,'1','0','ADMIN','','CHANGED FOLIO BREAKFAST : F-0000000002','FOLIO SCHEDULE','BREAKFAST','','N','2010-10-13 14:10:58');
/*!40000 ALTER TABLE `changes_log` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `cityledger`
--

DROP TABLE IF EXISTS `cityledger`;
CREATE TABLE `cityledger` (
  `id` int(11) NOT NULL auto_increment,
  `AcctID` varchar(20) NOT NULL,
  `Date` date default NULL,
  `refno` varchar(20) default NULL,
  `debit` double(12,2) default '0.00',
  `credit` double(12,2) default '0.00',
  `reffolio` varchar(20) NOT NULL,
  `subfolio` varchar(1) NOT NULL,
  `HOTELID` int(5) NOT NULL default '0',
  `CREATETIME` datetime NOT NULL default '2001-01-01 01:01:01',
  `CREATEDBY` varchar(20) default NULL,
  `UPDATETIME` datetime default '2001-01-01 01:01:01',
  `UPDATEDBY` varchar(20) default NULL,
  `posttoacctng` varchar(1) default NULL,
  `closed` varchar(1) default '0',
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `cityledger`
--

LOCK TABLES `cityledger` WRITE;
/*!40000 ALTER TABLE `cityledger` DISABLE KEYS */;
/*!40000 ALTER TABLE `cityledger` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `cleaningtype`
--

DROP TABLE IF EXISTS `cleaningtype`;
CREATE TABLE `cleaningtype` (
  `TypeId` varchar(20) default NULL,
  `Description` varchar(20) default NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `cleaningtype`
--

LOCK TABLES `cleaningtype` WRITE;
/*!40000 ALTER TABLE `cleaningtype` DISABLE KEYS */;
INSERT INTO `cleaningtype` VALUES ('T-0001','Checkout'),('T-0002','Daily');
/*!40000 ALTER TABLE `cleaningtype` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `comledger`
--

DROP TABLE IF EXISTS `comledger`;
CREATE TABLE `comledger` (
  `acctid` varchar(20) NOT NULL,
  `date` date default NULL,
  `refno` varchar(11) default NULL,
  `debit` decimal(9,2) default '0.00',
  `credit` decimal(9,2) default '0.00',
  `reffolio` varchar(20) NOT NULL,
  `subfolio` varchar(1) NOT NULL,
  `HOTELID` int(5) NOT NULL,
  `CREATETIME` datetime default '2001-01-01 01:01:01',
  `CREATEDBY` varchar(20) default NULL,
  `UPDATETIME` datetime default '2001-01-01 01:01:01',
  `UPDATEDBY` varchar(20) default NULL,
  `posttoacctng` varchar(1) default '0',
  PRIMARY KEY  (`acctid`,`reffolio`,`subfolio`,`HOTELID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `comledger`
--

LOCK TABLES `comledger` WRITE;
/*!40000 ALTER TABLE `comledger` DISABLE KEYS */;
/*!40000 ALTER TABLE `comledger` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `company`
--

DROP TABLE IF EXISTS `company`;
CREATE TABLE `company` (
  `companyid` varchar(20) NOT NULL,
  `companycode` text,
  `companyname` text,
  `companyURL` text,
  `contactperson` varchar(200) default NULL,
  `designation` varchar(200) default NULL,
  `street1` varchar(50) default NULL,
  `city1` varchar(50) default NULL,
  `country1` varchar(30) default NULL,
  `zip1` varchar(10) default NULL,
  `street2` varchar(50) default NULL,
  `city2` varchar(30) default NULL,
  `country2` varchar(30) default NULL,
  `zip2` varchar(10) default NULL,
  `street3` varchar(50) default NULL,
  `city3` varchar(30) default NULL,
  `country3` varchar(30) default NULL,
  `zip3` varchar(10) default NULL,
  `email1` varchar(50) default NULL,
  `email2` varchar(50) default NULL,
  `email3` varchar(50) default NULL,
  `contactnumber1` varchar(15) default NULL,
  `contactnumber2` varchar(15) default NULL,
  `contactnumber3` varchar(15) default NULL,
  `contacttype1` varchar(15) default NULL,
  `contacttype2` varchar(15) default NULL,
  `contacttype3` varchar(15) default NULL,
  `stateflag` varchar(10) NOT NULL default 'ACTIVE',
  `HOTELID` int(5) NOT NULL default '0',
  `CREATETIME` datetime default '2001-01-01 01:01:01',
  `CREATEDBY` varchar(20) default NULL,
  `UPDATETIME` datetime default '2001-01-01 01:01:01',
  `UPDATEDBY` varchar(20) default NULL,
  `ACCOUNT_TYPE` varchar(100) default 'NONE',
  `CARD_NO` varchar(100) default NULL,
  `THRESHOLD_VALUE` double(12,2) default '10000.00',
  `NO_OF_VISIT` int(4) default '0',
  `TOTAL_SALES_CONTRIBUTION` double(12,2) default '0.00',
  `X_DEAL_AMOUNT` double(12,2) default '0.00',
  `REMARKS` text,
  PRIMARY KEY  (`companyid`,`HOTELID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `company`
--

LOCK TABLES `company` WRITE;
/*!40000 ALTER TABLE `company` DISABLE KEYS */;
INSERT INTO `company` VALUES ('G-0000000001','JINISYS SOFTWARE, INC','JINISYS SOFTWARE, INC','','DE LA CRUZ, JUAN','','','','','','','','','','','','','','','','','','','','PHONE','FAX','MOBILE','ACTIVE',1,'2010-05-28 15:23:56','ADMIN','2010-05-28 15:24:40','ADMIN','','',0.00,1,0.00,0.00,''),('G-0000000002','COMPANY, INC.','JINISYS SOFTWARE, INC.','','RUSSEL VALENZUELA','SALES AND MARKETING','KASAMBAGAN','CEBU','PHILIPPINES','6000','','','','','','','','','rvalenzuela@broadnet.biz','','','232-0485 (105)','','09107982588','PHONE','FAX','MOBILE','ACTIVE',1,'2010-05-31 12:15:36','ADMIN','2010-06-26 13:04:50','ADMIN','','',0.00,3,9300.00,0.00,''),('G-0000000003','BROADCOM, INC.','BROADCOM, INC.','','','','','','','','','','','','','','','','','','','','','','','','','ACTIVE',1,'2010-05-21 15:20:33','ADMIN','2010-05-21 15:20:33','ADMIN','','',0.00,0,0.00,0.00,''),('G-0000000004','SDASDSADASDASD','SDASDSADASDASD','','','','','','','','','','','','','','','','','','','','','','PHONE','FAX','MOBILE','ACTIVE',1,'2010-10-13 14:10:27','ADMIN','2010-10-13 14:10:27','ADMIN','','',0.00,0,0.00,0.00,''),('G-0000000005','AAAAA','AAAAA','','','','','','','','','','','','','','','','','','','','','','PHONE','FAX','MOBILE','ACTIVE',1,'2010-10-13 14:10:58','ADMIN','2010-10-13 14:11:02','ADMIN','','',0.00,0,0.00,0.00,'');
/*!40000 ALTER TABLE `company` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `contacts`
--

DROP TABLE IF EXISTS `contacts`;
CREATE TABLE `contacts` (
  `id` bigint(20) unsigned NOT NULL auto_increment,
  `contactNumber` varchar(100) default NULL,
  `contactType` varchar(20) default NULL,
  `contactName` varchar(100) default NULL,
  `fullName` varchar(200) default NULL,
  `designation` varchar(50) default NULL,
  `company` varchar(100) default NULL,
  `address` varchar(200) default NULL,
  `emailAddress` varchar(100) default NULL,
  `remarks` varchar(500) default NULL,
  `statusFlag` varchar(10) default 'ACTIVE',
  `createdBy` varchar(20) default 'admin',
  `createTime` datetime default '2008-08-08 00:00:01',
  `updatedBy` varchar(20) default 'admin',
  `updateTime` datetime default '2008-08-08 00:00:01',
  `hotelId` int(4) default '1',
  PRIMARY KEY  (`id`),
  UNIQUE KEY `contactNumber` (`contactNumber`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `contacts`
--

LOCK TABLES `contacts` WRITE;
/*!40000 ALTER TABLE `contacts` DISABLE KEYS */;
/*!40000 ALTER TABLE `contacts` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `contractammendments`
--

DROP TABLE IF EXISTS `contractammendments`;
CREATE TABLE `contractammendments` (
  `id` bigint(12) NOT NULL auto_increment,
  `AmmendmentID` varchar(50) default NULL,
  `FolioID` varchar(30) default NULL,
  `OldValue` text,
  `NewValue` text,
  `CreatedBy` varchar(30) default NULL,
  `CreateTime` datetime default NULL,
  `UpdatedBy` varchar(30) default NULL,
  `UpdateTime` datetime default NULL,
  `HotelID` int(5) default NULL,
  `StateFlag` enum('ACTIVE','DELETED') default 'ACTIVE',
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `contractammendments`
--

LOCK TABLES `contractammendments` WRITE;
/*!40000 ALTER TABLE `contractammendments` DISABLE KEYS */;
/*!40000 ALTER TABLE `contractammendments` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `countries`
--

DROP TABLE IF EXISTS `countries`;
CREATE TABLE `countries` (
  `countryName` varchar(200) NOT NULL,
  `nationality` varchar(200) NOT NULL,
  `statusFlag` varchar(10) default 'ACTIVE',
  `createdBy` varchar(50) default 'ADMIN',
  `createdDate` datetime default '2008-08-08 08:08:08',
  `updatedBy` varchar(50) default NULL,
  `updatedDate` datetime default '2008-08-08 08:08:08',
  PRIMARY KEY  (`countryName`,`nationality`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `countries`
--

LOCK TABLES `countries` WRITE;
/*!40000 ALTER TABLE `countries` DISABLE KEYS */;
INSERT INTO `countries` VALUES ('AFGHANISTAN','AFGHAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('ALBANIA','ALBANIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('ALGERIA','ALGERIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('ANDORRA','ANDORRAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('ANGOLA','ANGOLAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('ARGENTINA','ARGENTINIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('ARMENIA','ARMENIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('AUSTRALIA','AUSTRALIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('AUSTRIA','AUSTRIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('AZERBAIJAN','AZERBAIJANI','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('BAHAMAS','BAHAMIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('BAHRAIN','BAHRAINI','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('BANGLADESH','BANGLADESHI','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('BARBADOS','BARBADIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('BELARUS','BELORUSSIAN OR A BYELORUSSIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('BELGIUM','BELGIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('BELIZE','BELIZIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('BENIN','BENINESE','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('BHUTAN','BHUTANESE','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('BOLIVIA','BOLIVIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('BOSNIA-HERZEGOVINA','BOSNIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('BOTSWANA','TSWANA','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('BRAZIL','BRAZILIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('BRITAIN','BRITON','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('BRUNEI','BRUNEIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('BULGARIA','BULGARIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('BURKINA','BURKINESE','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('BURMA','BURMESE','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('BURUNDI','BURUNDIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('CAMBODIA','CAMBODIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('CAMEROON','CAMEROONIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('CANADA','CANADIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('CAPE VERDE ISLANDS','CAPE VERDEAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('CHAD','CHADIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('CHILE','CHILEAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('CHINA','CHINESE','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('COLOMBIA','COLOMBIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('CONGO','CONGOLESE','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('COSTA RICA','COSTA RICAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('CROATIA','CROAT OR A CROATIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('CUBA','CUBAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('CYPRUS','CYPRIOT','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('CZECH REPUBLIC','CZECH','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('DENMARK','DANE','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('DJIBOUTI','DJIBOUTIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('DOMINICA','DOMINICAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('DOMINICAN REPUBLIC','DOMINICAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('ECUADOR','ECUADOREAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('EGYPT','EGYPTIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('EL SALVADOR','SALVADOREAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('ENGLAND','ENGLISHMAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('ERITREA','ERITREAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('ESTONIA','ESTONIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('ETHIOPIA','ETHIOPIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('FIJI','FIJIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('FINLAND','FINN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('FRANCE','FRENCHMAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('GABON','GABONESE','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('GAMBIA, THE','GAMBIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('GEORGIA','GEORGIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('GERMANY','GERMAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('GHANA','GHANAIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('GREECE','GREEK','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('GRENADA','GRENADIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('GUATEMALA','GUATEMALAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('GUINEA','GUINEAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('GUYANA','GUYANESE','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('HAITI','HAITIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('HOLLAND (ALSO NETHERLANDS)','DUTCHMAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('HONDURAS','HONDURAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('HUNGARY','HUNGARIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('ICELAND','ICELANDER','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('INDIA','INDIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('INDONESIA','INDONESIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('IRAN','IRANIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('IRAQ','IRAQI','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('IRELAND, REPUBLIC OF','IRISHMAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('ISRAEL','ISRAELI','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('ITALY','ITALIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('JAMAICA','JAMAICAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('JAPAN','JAPANESE','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('JORDAN','JORDANIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('KAZAKHSTAN','KAZAKH','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('KENYA','KENYAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('KOREA','KOREAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('KUWAIT','KUWAITI','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('LAOS','LAOTIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('LATVIA','LATVIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('LEBANON','LEBANESE','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('LIBERIA','LIBERIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('LIBYA','LIBYAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('LIECHTENSTEIN','LIECHTENSTEINER','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('LITHUANIA','LITHUANIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('LUXEMBOURG','LUXEMBOURGER','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('MACEDONIA','MACEDONIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('MADAGASCAR','MALAGASAY','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('MALAWI','MALAWIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('MALAYSIA','MALAY','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('MALDIVES','MALDIVIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('MALI','MALIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('MALTA','MALTESE','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('MAURITANIA','MAURITANIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('MAURITIUS','MAURITIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('MEXICO','MEXICAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('MOLDOVA','MOLDOVAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('MONACO','MON?GASQUE OR MONACAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('MONGOLIA','MONGOLIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('MONTENEGRO','MONTENEGRIN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('MOROCCO','MOROCCAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('MOZAMBIQUE','MOZAMBICAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('MYANMAR','BURMESE','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('NAMIBIA','NAMIBIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('NEPAL','NEPALESE','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('NETHERLANDS','DUTCHMAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('NEW ZEALAND','NEW ZEALANDER','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('NICARAGUA','NICARAGUAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('NIGER','NIGERIEN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('NIGERIA','NIGERIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('NORTH KOREA','NORTH KOREAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('NORWAY','NORWEGIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('OMAN','OMANI','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('PAKISTAN','PAKISTANI','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('PANAMA','PANAMANIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('PAPUA NEW GUINEA','PAPUA NEW GUINEAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('PARAGUAY','PARAGUAYAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('PERU','PERUVIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('PHILIPPINES','FILIPINO','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('POLAND','POLE','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('PORTUGAL','PORTUGUESE','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('QATAR','QATARI','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('ROMANIA','ROMANIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('RUSSIA','RUSSIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('RWANDA','RWANDAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('SAUDI ARABIA','SAUDI ARABIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('SCOTLAND','SCOT','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('SENEGAL','SENEGALESE','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('SERBIA','SERBIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('SEYCHELLES, THE','SEYCHELLOIS','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('SIERRA LEONE','SIERRA LEONIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('SINGAPORE','SINGAPOREAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('SLOVAKIA','SLOVAK','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('SLOVENIA','SLOVENIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('SOLOMON ISLANDS','SOLOMON ISLANDER','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('SOMALIA','SOMALI','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('SOUTH AFRICA','SOUTH AFRICAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('SOUTH KOREA','SOUTH KOREAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('SPAIN','SPANIARD','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('SRI LANKA','SRI LANKAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('SUDAN','SUDANESE','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('SURINAME','SURINAMESE','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('SWAZILAND','SWAZI','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('SWEDEN','SWEDE','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('SWITZERLAND','SWISS','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('SYRIA','SYRIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('TAIWAN','TAIWANESE','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('TAJIKISTAN','TAJIK','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('TANZANIA','TANZANIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('THAILAND','THAI','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('TOGO','TOGOLESE','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('TRINIDAD AND TOBAGO','TRINIDADIAN/TOBAGONIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('TUNISIA','TUNISIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('TURKEY','TURK','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('TURKMENISTAN','TURKMEN OR A TURKOMAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('TUVALI','TUVALUAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('UGANDA','UGANDAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('UKRAINE','UKRAINIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('UNITED ARAB EMIRATES (UAE)','UAE','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('UNITED KINGDOM (UK)','BRITON','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('UNITED STATES OF AMERICA (USA)','AMERICAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('URUGUAY','URUGUAYAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('UZBEKISTAN','UZBEK','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('VANUATA','VANUATUAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('VATICAN CITY','VATICAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('VENEZUELA','VENEZUELAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('VIETNAM','VIETNAMESE','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('WALES','WELSHMAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('WESTERN SAMOA','WESTERN SAMOAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('YEMEN','YEMENI','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('YUGOSLAVIA','YUGOSLAV','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('ZAIRE','ZA?REAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('ZAMBIA','ZAMBIAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08'),('ZIMBABWE','ZIMBABWEAN','ACTIVE','ADMIN','2008-08-08 08:08:08',NULL,'2008-08-08 08:08:08');
/*!40000 ALTER TABLE `countries` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `creditcardledger`
--

DROP TABLE IF EXISTS `creditcardledger`;
CREATE TABLE `creditcardledger` (
  `id` bigint(10) NOT NULL auto_increment,
  `acctid` varchar(20) NOT NULL,
  `date` date default NULL,
  `refno` varchar(11) default NULL,
  `debit` decimal(9,2) default '0.00',
  `credit` decimal(9,2) default '0.00',
  `reffolio` varchar(20) NOT NULL,
  `subfolio` varchar(1) NOT NULL,
  `HOTELID` int(5) NOT NULL,
  `CREATETIME` datetime default '2001-01-01 01:01:01',
  `CREATEDBY` varchar(20) default NULL,
  `UPDATETIME` datetime default '2001-01-01 01:01:01',
  `UPDATEDBY` varchar(20) default NULL,
  `posttoacctng` varchar(1) default '0',
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `creditcardledger`
--

LOCK TABLES `creditcardledger` WRITE;
/*!40000 ALTER TABLE `creditcardledger` DISABLE KEYS */;
/*!40000 ALTER TABLE `creditcardledger` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `csledger`
--

DROP TABLE IF EXISTS `csledger`;
CREATE TABLE `csledger` (
  `id` bigint(10) NOT NULL auto_increment,
  `AcctID` varchar(20) NOT NULL,
  `date` date default '2001-01-01',
  `refNo` varchar(11) default NULL,
  `debit` decimal(12,2) default '0.00',
  `credit` decimal(12,2) default '0.00',
  `discount` decimal(12,2) default '0.00',
  `cashcredit` decimal(12,2) default '0.00',
  `cashdebit` decimal(12,2) default '0.00',
  `refFolio` varchar(20) NOT NULL,
  `subfolio` varchar(1) NOT NULL,
  `HOTELID` int(5) NOT NULL default '0',
  `CREATETIME` datetime default '2001-01-01 01:01:01',
  `CREATEDBY` varchar(20) default NULL,
  `UPDATETIME` datetime default '2001-01-01 01:01:01',
  `UPDATEDBY` varchar(20) default NULL,
  `posttoacctng` varchar(1) default '0',
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `csledger`
--

LOCK TABLES `csledger` WRITE;
/*!40000 ALTER TABLE `csledger` DISABLE KEYS */;
/*!40000 ALTER TABLE `csledger` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `currencycodes`
--

DROP TABLE IF EXISTS `currencycodes`;
CREATE TABLE `currencycodes` (
  `currencycode` varchar(10) NOT NULL,
  `currency` varchar(20) default NULL,
  `conversionrate` decimal(12,2) NOT NULL default '0.00',
  `stateFlag` varchar(20) default NULL,
  `HOTELID` int(5) NOT NULL default '0',
  `CREATETIME` datetime default '2001-01-01 01:01:01',
  `CREATEDBY` varchar(20) default NULL,
  `UPDATETIME` datetime default '2001-01-01 01:01:01',
  `UPDATEDBY` varchar(20) default NULL,
  PRIMARY KEY  (`currencycode`,`HOTELID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `currencycodes`
--

LOCK TABLES `currencycodes` WRITE;
/*!40000 ALTER TABLE `currencycodes` DISABLE KEYS */;
INSERT INTO `currencycodes` VALUES ('PHP','PHILIPPINES PESO','1.00','ACTIVE',1,'2001-01-01 01:01:01','ADMIN','2006-10-17 14:25:27','ADMIN'),('USD','US DOLLAR','42.00','ACTIVE',1,'2001-01-01 01:01:01','ADMIN','2008-09-04 10:54:09','ADMIN'),('YEN','JAPANESE YEN','0.00','ACTIVE',1,'2001-01-01 01:01:01','ADMIN','2008-09-04 10:54:16','ADMIN');
/*!40000 ALTER TABLE `currencycodes` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `dayendprocessconfig`
--

DROP TABLE IF EXISTS `dayendprocessconfig`;
CREATE TABLE `dayendprocessconfig` (
  `hotelId` int(4) NOT NULL,
  `processType` enum('MANUAL','SCHEDULED') default 'MANUAL',
  `scheduleTime` varchar(15) default '11:59:00 PM',
  `terminalNo` int(2) default '1',
  `notifySchedule` int(10) default NULL,
  `reportsToGenerate` text,
  `backupDatabase` tinyint(1) default '1',
  `statusFlag` varchar(10) default 'ACTIVE',
  `createdBy` varchar(50) default NULL,
  `createdDate` datetime default '2008-08-08 08:08:08',
  `updatedBy` varchar(50) default NULL,
  `updatedDate` datetime default '2008-08-08 08:08:08',
  PRIMARY KEY  (`hotelId`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `dayendprocessconfig`
--

LOCK TABLES `dayendprocessconfig` WRITE;
/*!40000 ALTER TABLE `dayendprocessconfig` DISABLE KEYS */;
INSERT INTO `dayendprocessconfig` VALUES (1,'MANUAL','02:45:00 PM',1,20,'getInHouseGuests, getActualArrivalReport, getActualDepartureReport, getExpectedArrivalReport, getExpectedDepartureReport, getCancelledReservation, getGuestLedger, getRoomOccupancy, getRoomAvailability, getRoomTransferReport, getTransactionRegisterReport, getVoidedTransactionsReport, getSalesReport, getSalesSummary, getCityLedger, getCityTransferTransactions, getAllCashierShiftTransaction, getHousekeepingJobs, getRoomingList, ',1,'ACTIVE','ADMIN','2008-08-08 08:08:08','ADMIN','2010-04-06 15:11:47');
/*!40000 ALTER TABLE `dayendprocessconfig` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `department`
--

DROP TABLE IF EXISTS `department`;
CREATE TABLE `department` (
  `DeptId` varchar(20) NOT NULL,
  `Name` varchar(100) default NULL,
  `HotelId` int(5) NOT NULL,
  `stateFlag` varchar(20) default 'ACTIVE',
  `CreatedBy` varchar(30) default NULL,
  `CreateTime` datetime default '2001-01-01 01:01:01',
  `UpdatedBy` varchar(30) default NULL,
  `UpdateTime` datetime default '2001-01-01 01:01:01',
  PRIMARY KEY  (`DeptId`,`HotelId`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `department`
--

LOCK TABLES `department` WRITE;
/*!40000 ALTER TABLE `department` DISABLE KEYS */;
INSERT INTO `department` VALUES ('100','SALES & MARKETING',1,'ACTIVE','ADMIN','2001-01-01 01:01:01','ADMIN','2006-11-08 17:54:58'),('101','HOUSEKEEPING',1,'ACTIVE','ADMIN','2001-01-01 01:01:01','ADMIN','2006-11-14 15:03:31'),('102','FOOD AND BEVERAGE',1,'ACTIVE','ADMIN','2001-01-01 01:01:01','ADMIN','2001-01-01 01:01:01'),('103','LINEN',1,'ACTIVE','ADMIN','2001-01-01 01:01:01','ADMIN','2001-01-01 01:01:01'),('104','ACCOUNTING',1,'ACTIVE','ADMIN','2001-01-01 01:01:01','ADMIN','2006-11-14 14:47:41'),('105','FRONTDESK',1,'ACTIVE','ADMIN','2001-01-01 01:01:01','ADMIN','2006-11-14 14:51:25'),('106','ADMINISTRATION',1,'ACTIVE','ADMIN','2008-09-04 10:16:38','ADMIN','2008-09-04 10:16:38'),('107','PURCHASING',1,'ACTIVE','ADMIN','2006-05-30 14:34:06','ADMIN','2006-11-14 15:03:54'),('108','ADMISSION',1,'ACTIVE','ADMIN','2008-09-01 13:32:50','ADMIN','2008-09-01 13:32:50');
/*!40000 ALTER TABLE `department` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `depledger`
--

DROP TABLE IF EXISTS `depledger`;
CREATE TABLE `depledger` (
  `acctid` varchar(20) NOT NULL,
  `date` date default NULL,
  `refno` varchar(11) default NULL,
  `debit` decimal(9,2) default '0.00',
  `credit` decimal(9,2) default '0.00',
  `reffolio` varchar(20) default NULL,
  `subfolio` varchar(1) default NULL,
  `HOTELID` int(5) NOT NULL,
  `CREATETIME` datetime default '2001-01-01 01:01:01',
  `CREATEDBY` varchar(20) default NULL,
  `UPDATETIME` datetime default '2001-01-01 01:01:01',
  `UPDATEDBY` varchar(20) default NULL,
  `posttoacctng` varchar(1) default '0'
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `depledger`
--

LOCK TABLES `depledger` WRITE;
/*!40000 ALTER TABLE `depledger` DISABLE KEYS */;
/*!40000 ALTER TABLE `depledger` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `drivers`
--

DROP TABLE IF EXISTS `drivers`;
CREATE TABLE `drivers` (
  `driverId` int(10) NOT NULL auto_increment,
  `licenseNumber` varchar(100) default NULL,
  `lastName` varchar(50) default NULL,
  `firstName` varchar(50) default NULL,
  `middleName` varchar(100) default NULL,
  `totalCommission` double(12,2) default '0.00',
  `STATUS_FLAG` varchar(10) default 'ACTIVE',
  `CREATED_DATE` datetime default '2008-08-08 00:01:01',
  `CREATED_BY` varchar(50) default NULL,
  `UPDATED_DATE` datetime default '2008-08-08 00:01:01',
  `UPDATED_BY` varchar(50) default NULL,
  `HOTEL_ID` int(4) default '1',
  `company` varchar(60) default NULL,
  `carModel` varchar(50) default NULL,
  `brand` varchar(50) default NULL,
  `plateNumber` varchar(10) default NULL,
  PRIMARY KEY  (`driverId`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `drivers`
--

LOCK TABLES `drivers` WRITE;
/*!40000 ALTER TABLE `drivers` DISABLE KEYS */;
INSERT INTO `drivers` VALUES (1,'1205-SDV','DE LA CRUZ','JUAN','',650.00,'ACTIVE','2010-05-27 15:26:55','FRONTDESK','2010-05-27 16:01:43','ADMIN',1,'','XXX','XXX','XXX');
/*!40000 ALTER TABLE `drivers` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `drivers_commission`
--

DROP TABLE IF EXISTS `drivers_commission`;
CREATE TABLE `drivers_commission` (
  `commissionId` int(12) unsigned NOT NULL auto_increment,
  `driverId` int(10) default NULL,
  `referenceNumber` varchar(100) default NULL,
  `roomNumber` varchar(20) default NULL,
  `folioId` varchar(20) default NULL,
  `guestName` varchar(100) default NULL,
  `arrivalDate` datetime default '2008-08-08 00:01:01',
  `departureDate` datetime default '2008-08-08 00:01:01',
  `carCompany` varchar(50) default NULL,
  `makeModel` varchar(50) default NULL,
  `plateNumber` varchar(10) default NULL,
  `amount` double(12,2) default '0.00',
  `CREATED_DATE` datetime default '2008-08-08 00:01:01',
  `CREATED_BY` varchar(50) default NULL,
  PRIMARY KEY  (`commissionId`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `drivers_commission`
--

LOCK TABLES `drivers_commission` WRITE;
/*!40000 ALTER TABLE `drivers_commission` DISABLE KEYS */;
/*!40000 ALTER TABLE `drivers_commission` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `engineeringjobs`
--

DROP TABLE IF EXISTS `engineeringjobs`;
CREATE TABLE `engineeringjobs` (
  `enggjobno` varchar(20) NOT NULL,
  `enggserviceid` varchar(20) NOT NULL,
  `assignedperson` varchar(50) default NULL,
  `roomid` varchar(10) default '0',
  `startdate` varchar(15) default '2001-01-01',
  `enddate` varchar(15) default '2001-01-01',
  `starttime` varchar(15) default '01:01:01',
  `endtime` varchar(15) default '01:01:01',
  `stateflag` varchar(10) default 'ACTIVE',
  `HOTELID` int(5) NOT NULL default '0',
  `CREATETIME` datetime default '2001-01-01 01:01:01',
  `CREATEDBY` varchar(20) default NULL,
  `UPDATETIME` datetime default '2001-01-01 01:01:01',
  `UPDATEDBY` varchar(20) default NULL,
  PRIMARY KEY  (`enggjobno`,`HOTELID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `engineeringjobs`
--

LOCK TABLES `engineeringjobs` WRITE;
/*!40000 ALTER TABLE `engineeringjobs` DISABLE KEYS */;
/*!40000 ALTER TABLE `engineeringjobs` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `engineeringservices`
--

DROP TABLE IF EXISTS `engineeringservices`;
CREATE TABLE `engineeringservices` (
  `hotelId` int(5) unsigned zerofill NOT NULL,
  `enggserviceid` varchar(20) NOT NULL,
  `servicename` varchar(50) NOT NULL,
  `description` varchar(100) default NULL,
  `stateflag` varchar(10) default 'ACTIVE',
  `CREATETIME` datetime NOT NULL default '2001-01-01 01:01:01',
  `CREATEDBY` varchar(20) default NULL,
  `UPDATETIME` datetime default '2001-01-01 01:01:01',
  `UPDATEDBY` varchar(20) default NULL,
  PRIMARY KEY  (`hotelId`,`enggserviceid`),
  UNIQUE KEY `enggserviceid` (`enggserviceid`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 ROW_FORMAT=DYNAMIC;

--
-- Dumping data for table `engineeringservices`
--

LOCK TABLES `engineeringservices` WRITE;
/*!40000 ALTER TABLE `engineeringservices` DISABLE KEYS */;
INSERT INTO `engineeringservices` VALUES (00001,'1','AIRCON REPAIR','AIRCON REPAIR','ACTIVE','2008-02-21 19:21:46','ADMIN','2008-02-21 19:21:46','ADMIN'),(00001,'2','REFREGERATOR','MAINTENANCE CLEANING','ACTIVE','2008-08-20 15:32:06','ADMIN','2008-08-20 15:32:06','ADMIN'),(00001,'3','TELEVISION','MAINTENANCE CHECKING','ACTIVE','2008-08-23 15:08:40','ADMIN','2008-08-23 15:08:40','ADMIN'),(00001,'4','PLUMBING ','PLUMBING ','ACTIVE','2008-09-04 15:24:51','ALLAN','2008-09-04 15:24:51','ALLAN'),(00001,'5','ELECTRICAL','ELECTRICAL','ACTIVE','2008-09-04 15:25:13','ALLAN','2008-09-04 15:25:13','ALLAN'),(00001,'6','REPAINTING','REPAINTING','ACTIVE','2008-09-04 15:26:03','ALLAN','2008-09-04 15:26:03','ALLAN'),(00001,'7','BATHROOM LEAKING','BATHROOM LEAKING','ACTIVE','2008-09-04 15:27:29','ALLAN','2008-09-04 15:27:29','ALLAN'),(00001,'8','RE-TILING','RE-TILING','ACTIVE','2009-06-25 16:23:45','ALLAN','2009-06-25 16:23:45','ALLAN'),(00001,'9','HEATER REPAIR','HEATER REPAIR','ACTIVE','2009-06-25 16:24:13','ALLAN','2009-06-25 16:24:13','ALLAN');
/*!40000 ALTER TABLE `engineeringservices` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `event_applied_rates`
--

DROP TABLE IF EXISTS `event_applied_rates`;
CREATE TABLE `event_applied_rates` (
  `folioID` varchar(20) NOT NULL,
  `rateType` varchar(20) default NULL,
  `description` text,
  `rateAmount` double(10,2) default NULL,
  `noOfOccupants` int(5) default NULL,
  `CREATEDBY` varchar(20) default NULL,
  `CREATETIME` datetime default NULL,
  `UPDATEDBY` varchar(20) default NULL,
  `UPDATETIME` datetime default NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `event_applied_rates`
--

LOCK TABLES `event_applied_rates` WRITE;
/*!40000 ALTER TABLE `event_applied_rates` DISABLE KEYS */;
/*!40000 ALTER TABLE `event_applied_rates` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `event_attributes`
--

DROP TABLE IF EXISTS `event_attributes`;
CREATE TABLE `event_attributes` (
  `eventID` bigint(10) default NULL,
  `key` varchar(40) default NULL,
  `CREATETIME` datetime default NULL,
  `CREATEDBY` varchar(20) default NULL,
  `UPDATETIME` datetime default NULL,
  `UPDATEDBY` varchar(20) default NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `event_attributes`
--

LOCK TABLES `event_attributes` WRITE;
/*!40000 ALTER TABLE `event_attributes` DISABLE KEYS */;
/*!40000 ALTER TABLE `event_attributes` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `event_booking_info`
--

DROP TABLE IF EXISTS `event_booking_info`;
CREATE TABLE `event_booking_info` (
  `folioID` varchar(20) default NULL,
  `eventType` varchar(40) default NULL,
  `bookingDate` datetime default NULL,
  `noOfPaxLiveIn` int(5) default NULL,
  `noOfPaxLiveOut` int(5) default NULL,
  `noOfPaxGuaranteed` int(5) default NULL,
  `billingArrangement` text,
  `authorizedSignatory` text,
  `lobbyPosting` text,
  `hotelID` int(2) default NULL,
  `CREATETIME` datetime default NULL,
  `CREATEDBY` varchar(20) default NULL,
  `UPDATETIME` datetime default NULL,
  `UPDATEDBY` varchar(20) default NULL,
  `eventPackage` bigint(10) default NULL,
  `packageAmount` double(12,2) default '0.00',
  `contactPerson` text,
  `contactAddress` text,
  `contactPosition` varchar(200) default NULL,
  `contactNumber` varchar(20) default NULL,
  `mobileNumber` varchar(30) default NULL,
  `faxNumber` varchar(20) default NULL,
  `totalEstimatedCost` double(12,2) default '0.00',
  `packagePosted` tinyint(1) default '0',
  `emailAddress` varchar(100) default NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `event_booking_info`
--

LOCK TABLES `event_booking_info` WRITE;
/*!40000 ALTER TABLE `event_booking_info` DISABLE KEYS */;
INSERT INTO `event_booking_info` VALUES ('F-0000000001','PARTY','2010-10-13 00:00:00',50,50,100,'','','',1,'2010-10-13 14:10:27','ADMIN','2010-10-13 14:10:27','ADMIN',5,14900.00,'',', , , ','','','','',14900.00,0,'');
/*!40000 ALTER TABLE `event_booking_info` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `event_details`
--

DROP TABLE IF EXISTS `event_details`;
CREATE TABLE `event_details` (
  `folioID` varchar(20) NOT NULL,
  `eventDetailHeader` varchar(20) default NULL,
  `description` text,
  `CREATETIME` datetime default NULL,
  `CREATEDBY` varchar(20) default NULL,
  `UPDATETIME` datetime default NULL,
  `UPDATEDBY` varchar(20) default NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `event_details`
--

LOCK TABLES `event_details` WRITE;
/*!40000 ALTER TABLE `event_details` DISABLE KEYS */;
/*!40000 ALTER TABLE `event_details` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `event_meal_details`
--

DROP TABLE IF EXISTS `event_meal_details`;
CREATE TABLE `event_meal_details` (
  `id` bigint(10) NOT NULL auto_increment,
  `mealID` bigint(20) NOT NULL default '0',
  `menuCode` varchar(20) NOT NULL,
  `menuItemCode` varchar(20) NOT NULL,
  `description` text,
  `remarks` text,
  `price` double(12,2) default NULL,
  `CREATETIME` datetime default NULL,
  `CREATEDBY` varchar(20) default NULL,
  `UPDATETIME` datetime default NULL,
  `UPDATEDBY` varchar(20) default NULL,
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `event_meal_details`
--

LOCK TABLES `event_meal_details` WRITE;
/*!40000 ALTER TABLE `event_meal_details` DISABLE KEYS */;
/*!40000 ALTER TABLE `event_meal_details` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `event_meal_requirements`
--

DROP TABLE IF EXISTS `event_meal_requirements`;
CREATE TABLE `event_meal_requirements` (
  `folioID` varchar(20) NOT NULL,
  `eventDate` datetime NOT NULL,
  `venue` varchar(30) default NULL,
  `pax` int(5) default NULL,
  `startTime` time default NULL,
  `endTime` time default NULL,
  `over` text,
  `setup` text,
  `remarks` text,
  `totalMealCost` double(12,2) default NULL,
  `CREATETIME` datetime default NULL,
  `CREATEDBY` varchar(20) default NULL,
  `UPDATETIME` datetime default NULL,
  `UPDATEDBY` varchar(20) default NULL,
  `mealID` bigint(10) NOT NULL,
  `mealType` varchar(30) NOT NULL,
  `liveInPax` int(5) default NULL,
  `liveOutPax` int(5) default NULL,
  PRIMARY KEY  (`folioID`,`eventDate`,`mealType`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `event_meal_requirements`
--

LOCK TABLES `event_meal_requirements` WRITE;
/*!40000 ALTER TABLE `event_meal_requirements` DISABLE KEYS */;
/*!40000 ALTER TABLE `event_meal_requirements` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `event_package_detail`
--

DROP TABLE IF EXISTS `event_package_detail`;
CREATE TABLE `event_package_detail` (
  `packageID` bigint(20) default NULL,
  `transactionCode` int(10) default NULL,
  `description` text,
  `amount` double(12,2) default NULL,
  `subAccount` varchar(50) default NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `event_package_detail`
--

LOCK TABLES `event_package_detail` WRITE;
/*!40000 ALTER TABLE `event_package_detail` DISABLE KEYS */;
INSERT INTO `event_package_detail` VALUES (2,1000,'RM CHG_Classic_SSKT w/BFast',2580.00,''),(2,1300,'BUSINESS CENTER_Tarpaulin',528.00,''),(2,1300,'BUSINESS CENTER_Fruit Basket',70.00,''),(2,1201,'RESTAURANT- Wedding Classic - BANQUET',33142.00,'BANQUET'),(2,1000,'RM CHG_Classic_STDT',1680.00,''),(3,1000,'ROOM CHARGE_STSK w/BFast',2580.00,''),(3,1300,'BUSINESS CENTER-Flowers',360.00,''),(3,1300,'BUSINESS CENTER-Candles',360.00,''),(3,1300,'BUSINESS CENTER-Wine',250.00,''),(3,1300,'BUSINESS CENTER-Invitation Cards',2250.00,''),(3,1300,'BUSINESS CENTER-Give aways',2250.00,''),(3,1300,'BUSINESS CENTER-Guest Book',200.00,''),(3,1300,'BUSINESS CENTER-Cake',2000.00,''),(3,1300,'BUSINESS CENTER-Tarpaulin',528.00,''),(3,1201,'RESTAURANT - Debut Party - BANQUET',27222.00,'BANQUET'),(3,1200,'FOOD',1000.00,''),(4,1300,'BUSINESS CENTER-Tarpaulin',528.00,''),(4,1201,'RESTAURANT - 30pax Party Buffet - BANQUET',9972.00,'BANQUET'),(5,1300,'BUSINESS CENTER-Tarpaulin',528.00,''),(5,1201,'RESTAURANT - 50pax Party Buffet -  BANQUET',14372.00,'BANQUET'),(6,1000,'ROOM CHARGE_Standard',1680.00,''),(6,1300,'BUSINESS CENTER_Tarpaulin',528.00,''),(6,1201,'RESTAURANT - 100pax Party Buffet-BANQUET',27592.00,'BANQUET'),(1,1300,'BUSINESS CENTER - video & photo',7000.00,''),(1,1300,'BUSINESS CENTER - flowers',4000.00,''),(1,1000,'RM CHG_HassleFree_SSKTw/Bfast',2580.00,''),(1,1000,'RM CHG_HassleFree_STDT',1680.00,''),(1,1302,'CAR RENTAL-van',1600.00,''),(1,1302,'CAR RENTAL - bridal car',1250.00,''),(1,1300,'BUSINESS CENTER-Poppers',260.00,''),(1,1300,'BUSINESS CENTER-Picture Frame',100.00,''),(1,1205,'MINI-BAR-Fruit Basket',280.00,''),(1,1300,'BUSINESS CENTER-Cake',2000.00,''),(1,1300,'BUSINESS CENTER-Invitation',2250.00,''),(1,1300,'BUSINESS CENTER-Dove',300.00,''),(1,1300,'BUSINESS CENTER-Guest Book & Pen',200.00,''),(1,1300,'BUSINESS CENTER-wine',250.00,''),(1,1300,'BUSINESS CENTER-Tarpaulin',528.00,''),(1,1201,'RESTAURANT-HassleFree Wedding -BANQUET',45522.00,'BANQUET');
/*!40000 ALTER TABLE `event_package_detail` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `event_package_header`
--

DROP TABLE IF EXISTS `event_package_header`;
CREATE TABLE `event_package_header` (
  `packageID` bigint(20) NOT NULL auto_increment,
  `description` text,
  `daysApplied` int(5) default NULL,
  `eventType` varchar(40) default NULL,
  `packageAmount` double(12,2) default NULL,
  `hotelID` int(10) default NULL,
  `status` enum('active','deleted') default 'active',
  `CREATEDBY` varchar(20) default NULL,
  `CREATETIME` datetime default NULL,
  `UPDATEDBY` varchar(20) default NULL,
  `UPDATETIME` datetime default NULL,
  `MinimumPax` int(5) default '0',
  `MaximumPax` int(5) default '0',
  PRIMARY KEY  (`packageID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `event_package_header`
--

LOCK TABLES `event_package_header` WRITE;
/*!40000 ALTER TABLE `event_package_header` DISABLE KEYS */;
INSERT INTO `event_package_header` VALUES (1,'WEDDING - HASSLE FREE',2,'1',69800.00,1,'active','ADMIN','2008-06-04 16:02:38','ADMIN','2010-06-19 15:32:15',0,0),(2,'WEDDING   - CLASSIC',3,'1',38000.00,1,'active','ADMIN','2008-06-06 15:03:44','ALLAN','2009-10-26 15:20:59',0,0),(3,'DEBUT PACKAGE',1,'4',39000.00,1,'active','ADMIN','2008-07-18 18:47:00','ADMIN','2010-03-12 11:29:42',0,0),(4,'PARTY - BUFFET 30 PAX',0,'4',10500.00,1,'active','THESS','2008-09-13 09:27:55','ADMIN','2010-05-26 11:42:07',30,30),(5,'PARTY - BUFFET 50 PAX',0,'4',14900.00,1,'active','THESS','2008-09-13 10:11:22','ADMIN','2010-05-26 11:42:14',50,50),(6,'SEMINAR PACKAGE',0,'3',29800.00,1,'active','THESS','2008-09-13 10:12:34','ADMIN','2010-05-26 11:42:22',100,100),(7,'TEST PACKAGE',0,'1',30000.00,1,'deleted','ADMIN','2010-04-17 11:57:15','ADMIN','2010-04-17 11:57:15',0,0);
/*!40000 ALTER TABLE `event_package_header` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `event_package_requirement`
--

DROP TABLE IF EXISTS `event_package_requirement`;
CREATE TABLE `event_package_requirement` (
  `packageID` bigint(20) default NULL,
  `requirementHeader` text,
  `requirementDetail` text
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `event_package_requirement`
--

LOCK TABLES `event_package_requirement` WRITE;
/*!40000 ALTER TABLE `event_package_requirement` DISABLE KEYS */;
INSERT INTO `event_package_requirement` VALUES (2,'ENGINEERING REQUIREMENTS','PA system with microphone'),(3,'ENGINEERING REQUIREMENTS','TV Monitor and DVD player'),(3,'ENGINEERING REQUIREMENTS','Overhead Projector with screen'),(3,'ENGINEERING REQUIREMENTS','Free one tarpaulin'),(3,'ENGINEERING REQUIREMENTS','Sound system, spotlights, videoke'),(3,'OTHER REQUIREMENTS','Digital Video & Photo coverage in DVD format (4 rolls of film) with studio shots'),(3,'BEVERAGE REQUIREMENTS','One (1) round of softdrinks'),(3,'SET-UP AND OTHER ARRANGEMENTS','Registration table for 2 persons'),(3,'FUNCTION ROOM ARRANGEMENT','Table centerpiece'),(3,'OTHER REQUIREMENTS','Presidential Table w/ floral Centerpiece'),(3,'OTHER REQUIREMENTS','Breakfast for the Celebrant'),(3,'OTHER REQUIREMENTS','Tarpaulin Backdrop'),(3,'OTHER REQUIREMENTS','A Four Layer Wedding Cake'),(3,'OTHER REQUIREMENTS','18 candles'),(3,'OTHER REQUIREMENTS','18 roses'),(3,'OTHER REQUIREMENTS','One (1) bottle of wine'),(3,'OTHER REQUIREMENTS','Picture Frame'),(3,'OTHER REQUIREMENTS','50 pcs. give-aways'),(3,'OTHER REQUIREMENTS','50 pcs. invitations'),(4,'OTHER REQUIREMENTS','Tarpaulin Backdrop'),(4,'ENGINEERING REQUIREMENTS','PA system with microphone'),(4,'ENGINEERING REQUIREMENTS','TV Monitor and DVD player'),(4,'ENGINEERING REQUIREMENTS','microphones, love songs'),(4,'BEVERAGE REQUIREMENTS','One (1) round of softdrinks'),(6,'ENGINEERING REQUIREMENTS','PA system with microphone'),(6,'ENGINEERING REQUIREMENTS','Whiteboard with marker and eraser'),(6,'ENGINEERING REQUIREMENTS','TV Monitor and DVD player'),(6,'ENGINEERING REQUIREMENTS','Overhead Projector with screen'),(6,'ENGINEERING REQUIREMENTS','Table for LCD'),(6,'ENGINEERING REQUIREMENTS','Free one tarpaulin'),(6,'ENGINEERING REQUIREMENTS','Sound system, spotlights, videoke'),(6,'BEVERAGE REQUIREMENTS','One (1) round of softdrinks'),(6,'SET-UP & OTHER ARRANGEMENTS','Registration table for 3 persons'),(6,'SET-UP & OTHER ARRANGEMENTS','Flowing coffee'),(6,'SET-UP & OTHER ARRANGEMENTS','Free corkage of 1st two (2) lechon and 1st two (2) bottles of wine brought-in'),(6,'SET-UP & OTHER ARRANGEMENTS','Corkage of Lechon: P500.00/Lechon'),(6,'SET-UP & OTHER ARRANGEMENTS','Corkage of Wine: P350.00/bottle'),(6,'SET-UP & OTHER ARRANGEMENTS','Excess hours: P1,000.00/hour'),(6,'FUNCTION ROOM ARRANGEMENT','Personalized tarpaulin'),(1,'BEVERAGE REQUIREMENTS','One (1) round of softdrinks'),(1,'FUNCTION ROOM ARRANGEMENT','Table centerpiece'),(1,'OTHER REQUIREMENTS','Picture Frame'),(1,'OTHER REQUIREMENTS','50 pcs. give-aways'),(1,'OTHER REQUIREMENTS','50 pcs. invitations'),(1,'OTHER REQUIREMENTS','Video & Photo coverage in DVD format (4 rolls of film) with studio shots'),(1,'OTHER REQUIREMENTS','Guest Book and Pen'),(1,'OTHER REQUIREMENTS','Poppers and colorful confetti'),(1,'OTHER REQUIREMENTS','One (1) bottle of wine'),(1,'OTHER REQUIREMENTS','will bring 2 lechon without corkage fee'),(1,'OTHER REQUIREMENTS','Church Floral Arrangements & bouquet for the Bride, Entourage, Corsage for the Parents & Sponsors'),(1,'OTHER REQUIREMENTS','Bridal Car w/ Decorations'),(1,'OTHER REQUIREMENTS','Car Service for Entourage'),(1,'OTHER REQUIREMENTS','FOC breakfast for two (2) pax'),(1,'OTHER REQUIREMENTS','Presidential Table w/ floral Centerpiece'),(1,'OTHER REQUIREMENTS','Breakfast for the Celebrant'),(1,'OTHER REQUIREMENTS','Tarpaulin Backdrop'),(1,'OTHER REQUIREMENTS','Welcome Fruit Basket'),(1,'OTHER REQUIREMENTS','A Four Layer Wedding Cake'),(1,'ENGINEERING REQUIREMENTS','PA SYSTEM WITH TWO (2) MICROPHONES');
/*!40000 ALTER TABLE `event_package_requirement` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `event_requirements`
--

DROP TABLE IF EXISTS `event_requirements`;
CREATE TABLE `event_requirements` (
  `folioID` varchar(20) NOT NULL,
  `requirementID` varchar(50) default NULL,
  `description` text,
  `transactionCode` varchar(20) default NULL,
  `remarks` text,
  `CREATETIME` datetime default NULL,
  `CREATEDBY` varchar(20) default NULL,
  `UPDATETIME` datetime default NULL,
  `UPDATEDBY` varchar(20) default NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `event_requirements`
--

LOCK TABLES `event_requirements` WRITE;
/*!40000 ALTER TABLE `event_requirements` DISABLE KEYS */;
/*!40000 ALTER TABLE `event_requirements` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `event_room_venues`
--

DROP TABLE IF EXISTS `event_room_venues`;
CREATE TABLE `event_room_venues` (
  `folioID` varchar(20) default NULL,
  `roomVenue` varchar(35) default NULL,
  `fromDate` date default NULL,
  `toDate` date default NULL,
  `startTime` varchar(15) default NULL,
  `endTime` varchar(15) default NULL,
  `CREATEDBY` varchar(30) default NULL,
  `CREATETIME` datetime default NULL,
  `UPDATEDBY` varchar(30) default NULL,
  `UPDATETIME` datetime default NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `event_room_venues`
--

LOCK TABLES `event_room_venues` WRITE;
/*!40000 ALTER TABLE `event_room_venues` DISABLE KEYS */;
/*!40000 ALTER TABLE `event_room_venues` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `event_rooms`
--

DROP TABLE IF EXISTS `event_rooms`;
CREATE TABLE `event_rooms` (
  `roomReqID` bigint(10) NOT NULL auto_increment,
  `folioID` varchar(20) NOT NULL,
  `roomType` varchar(30) default NULL,
  `noOfPax` int(5) default NULL,
  `guaranteedPax` int(5) default NULL,
  `noOfRooms` int(5) default NULL,
  `guaranteedRooms` int(5) default NULL,
  `blockedRooms` int(5) NOT NULL default '0',
  `remarks` text,
  `CREATEDBY` varchar(30) default NULL,
  `CREATETIME` datetime default '2001-01-01 00:00:00',
  `UPDATEDBY` varchar(30) default NULL,
  `UPDATETIME` datetime default '2001-01-01 00:00:00',
  PRIMARY KEY  (`roomReqID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `event_rooms`
--

LOCK TABLES `event_rooms` WRITE;
/*!40000 ALTER TABLE `event_rooms` DISABLE KEYS */;
INSERT INTO `event_rooms` VALUES (1,'F-0000000001','DELUXE',0,0,0,0,0,'','ADMIN','2010-10-13 14:10:27','ADMIN','2010-10-13 14:10:27'),(2,'F-0000000001','MATRIMONIAL',0,0,0,0,0,'','ADMIN','2010-10-13 14:10:27','ADMIN','2010-10-13 14:10:27'),(3,'F-0000000001','STANDARD',0,0,0,0,0,'','ADMIN','2010-10-13 14:10:27','ADMIN','2010-10-13 14:10:27'),(4,'F-0000000001','SUPERIOR',0,0,0,0,0,'','ADMIN','2010-10-13 14:10:27','ADMIN','2010-10-13 14:10:27');
/*!40000 ALTER TABLE `event_rooms` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `event_type`
--

DROP TABLE IF EXISTS `event_type`;
CREATE TABLE `event_type` (
  `typeID` bigint(10) NOT NULL auto_increment,
  `eventType` varchar(40) default NULL,
  `description` text,
  `status` enum('ACTIVE','DELETED') default 'ACTIVE',
  `CREATETIME` datetime default NULL,
  `CREATEDBY` varchar(20) default NULL,
  `UPDATETIME` datetime default NULL,
  `UPDATEDBY` varchar(20) default NULL,
  `banquetType` int(5) default '0',
  PRIMARY KEY  (`typeID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `event_type`
--

LOCK TABLES `event_type` WRITE;
/*!40000 ALTER TABLE `event_type` DISABLE KEYS */;
INSERT INTO `event_type` VALUES (1,'PARTY','PARTY','ACTIVE','2010-07-02 17:18:21','ADMIN','2010-07-02 17:18:21','ADMIN',1),(2,'SEMINAR','SEMINAR','ACTIVE','2010-07-02 17:21:19','ROOT','2010-07-02 17:21:19','ROOT',0),(3,'WEDDING','WEDDING','ACTIVE','2010-07-02 17:21:28','ROOT','2010-07-02 17:21:28','ROOT',1);
/*!40000 ALTER TABLE `event_type` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `exact_costcenter`
--

DROP TABLE IF EXISTS `exact_costcenter`;
CREATE TABLE `exact_costcenter` (
  `CostCenterCode` varchar(20) NOT NULL,
  `Description` varchar(50) default NULL,
  `StatusFlag` varchar(10) default NULL,
  `CreatedDate` datetime default '2008-08-08 00:00:08',
  `CreatedBy` varchar(20) default NULL,
  `UpdatedDate` datetime default '2008-08-08 00:00:08',
  `UpdatedBy` varchar(20) default NULL,
  PRIMARY KEY  (`CostCenterCode`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `exact_costcenter`
--

LOCK TABLES `exact_costcenter` WRITE;
/*!40000 ALTER TABLE `exact_costcenter` DISABLE KEYS */;
/*!40000 ALTER TABLE `exact_costcenter` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `exact_glaccounts`
--

DROP TABLE IF EXISTS `exact_glaccounts`;
CREATE TABLE `exact_glaccounts` (
  `AccountID` varchar(30) NOT NULL,
  `Description` varchar(50) default NULL,
  `CostCenterCode` varchar(30) default NULL,
  `AccountNature` varchar(10) default NULL,
  `StatusFlag` varchar(10) default NULL,
  `CreatedDate` datetime default '2008-08-08 00:00:01',
  `CreatedBy` varchar(30) default NULL,
  `UpdatedDate` datetime default '2008-08-08 00:00:01',
  `UpdatedBy` varchar(30) default NULL,
  PRIMARY KEY  (`AccountID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `exact_glaccounts`
--

LOCK TABLES `exact_glaccounts` WRITE;
/*!40000 ALTER TABLE `exact_glaccounts` DISABLE KEYS */;
/*!40000 ALTER TABLE `exact_glaccounts` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `exact_gltofoliomapping`
--

DROP TABLE IF EXISTS `exact_gltofoliomapping`;
CREATE TABLE `exact_gltofoliomapping` (
  `FolioPlus_TranCode` varchar(30) NOT NULL,
  `Exact_GLAccountID` varchar(30) NOT NULL,
  `LineNo` int(2) default NULL,
  `AmountColumnInFolioTrans` varchar(50) default NULL,
  `CostCenterCode` varchar(30) default NULL,
  `JournalEntryCode` varchar(30) default NULL,
  `StatuFlag` varchar(10) default NULL,
  `CreatedBy` varchar(30) default NULL,
  `CreatedDate` datetime default '2008-08-08 00:00:01',
  `UpdatedBy` varchar(30) default NULL,
  `UpdatedDate` datetime default '2008-08-08 00:00:01',
  PRIMARY KEY  (`FolioPlus_TranCode`,`Exact_GLAccountID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `exact_gltofoliomapping`
--

LOCK TABLES `exact_gltofoliomapping` WRITE;
/*!40000 ALTER TABLE `exact_gltofoliomapping` DISABLE KEYS */;
/*!40000 ALTER TABLE `exact_gltofoliomapping` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `exact_journalentrycodes`
--

DROP TABLE IF EXISTS `exact_journalentrycodes`;
CREATE TABLE `exact_journalentrycodes` (
  `JournalEntryCode` varchar(30) NOT NULL,
  `Description` varchar(50) default NULL,
  `StatusFlag` varchar(10) default NULL,
  `CreatedBy` varchar(30) default NULL,
  `CreatedDate` datetime default '2008-08-08 00:00:01',
  `UpdatedBy` varchar(30) default NULL,
  `UpdatedDate` datetime default '2008-08-08 00:00:01',
  PRIMARY KEY  (`JournalEntryCode`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `exact_journalentrycodes`
--

LOCK TABLES `exact_journalentrycodes` WRITE;
/*!40000 ALTER TABLE `exact_journalentrycodes` DISABLE KEYS */;
/*!40000 ALTER TABLE `exact_journalentrycodes` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `floors`
--

DROP TABLE IF EXISTS `floors`;
CREATE TABLE `floors` (
  `HotelID` int(2) NOT NULL,
  `Floor` varchar(25) NOT NULL,
  `FloorLayoutImage` text,
  `stateflag` varchar(15) default 'ACTIVE',
  `CREATETIME` datetime default '2001-01-01 01:01:01',
  `CREATEDBY` varchar(20) default NULL,
  `UPDATETIME` datetime default '2001-01-01 01:01:01',
  `UPDATEDBY` varchar(20) default NULL,
  PRIMARY KEY  (`HotelID`,`Floor`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `floors`
--

LOCK TABLES `floors` WRITE;
/*!40000 ALTER TABLE `floors` DISABLE KEYS */;
INSERT INTO `floors` VALUES (1,'1','C:\\PROGRAM FILES\\JINISYS SOFTWARE, INC\\FOLIO PLUS\\MAIN\\FLOORS\\2ND_FLOOR.JPG','ACTIVE','2001-01-01 01:01:01','ADMIN','2010-03-11 17:52:31',''),(1,'2','C:\\PROGRAM FILES\\JINISYS SOFTWARE, INC\\FOLIO PLUS\\MAIN\\FLOORS\\2ND_FLOOR.JPG','ACTIVE','2006-12-27 18:24:42','ADMIN','2010-03-11 17:53:09',''),(1,'3','C:\\DOCUMENTS AND SETTINGS\\JELLOS\\DESKTOP\\FOLIO PLUS\\MAIN\\FLOORS\\ANNEX_1.JPG','ACTIVE','2006-12-27 18:24:48','ADMIN','2008-10-18 14:25:53',''),(1,'4','C:\\DOCUMENTS AND SETTINGS\\JELLOS\\DESKTOP\\FOLIO PLUS\\MAIN\\FLOORS\\5TH_FLOOR.JPG','ACTIVE','2001-01-01 01:01:01','ADMIN','2010-04-17 09:52:21',''),(1,'5','C:\\DOCUMENTS AND SETTINGS\\JELLOS\\DESKTOP\\FOLIO PLUS\\MAIN\\FLOORS\\5TH_FLOOR.JPG','ACTIVE','2006-12-27 18:24:56','ADMIN','2010-04-17 09:52:27','');
/*!40000 ALTER TABLE `floors` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `folio`
--

DROP TABLE IF EXISTS `folio`;
CREATE TABLE `folio` (
  `hotelID` int(5) NOT NULL default '0',
  `folioID` varchar(20) NOT NULL default '0',
  `accountID` varchar(20) default '0',
  `folioType` varchar(25) NOT NULL,
  `groupName` varchar(100) default 'FILLER',
  `accountType` varchar(25) NOT NULL default 'PERSONAL',
  `noOfAdults` int(2) default '0',
  `noOfChild` int(2) default '0',
  `masterFolio` varchar(20) default NULL,
  `companyID` varchar(20) default NULL,
  `agentID` varchar(20) default NULL,
  `source` varchar(50) default NULL,
  `fromDate` datetime default '2001-01-01 01:01:01',
  `toDate` datetime default '2001-01-01 01:01:01',
  `arrivalDate` datetime default '2001-01-01 01:01:01',
  `departureDate` datetime default '2001-01-01 01:01:01',
  `packageId` varchar(20) default '0',
  `Status` varchar(15) default 'FILLER',
  `remarks` text,
  `terminal_Id` varchar(20) default NULL,
  `shift_Code` varchar(20) default NULL,
  `supervisor_Id` varchar(50) default NULL,
  `sales_Executive` varchar(20) default 'NONE' COMMENT 'record Sales Executive',
  `payment_Mode` varchar(20) default 'CASH' COMMENT 'Cash, Charge, Cheque, etc',
  `purpose` varchar(20) default 'TOURIST' COMMENT 'Balikbayan, business, etc',
  `reason_For_Cancel` text,
  `taxExempted` tinyint(1) default '0',
  `folioETA` varchar(10) default NULL,
  `folioETD` varchar(10) default NULL,
  `createTime` datetime default '2008-08-08 00:08:08',
  `createdBy` varchar(20) default NULL,
  `updateTime` datetime default '2008-08-08 00:08:08',
  `updatedBy` varchar(20) default NULL,
  PRIMARY KEY  (`hotelID`,`folioID`),
  KEY `folio_index` (`hotelID`,`folioID`),
  KEY `FolioID` (`folioID`),
  KEY `FolioType` (`folioType`),
  KEY `Status` (`Status`),
  KEY `CompanyID` (`companyID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `folio`
--

LOCK TABLES `folio` WRITE;
/*!40000 ALTER TABLE `folio` DISABLE KEYS */;
INSERT INTO `folio` VALUES (1,'F-0000000001','','GROUP','SDADASDSAD','CORPORATE',0,0,'','G-0000000004','','Walk-In','2010-10-14 00:00:00','2010-10-15 00:00:00','2010-10-14 00:00:00','2010-10-15 00:00:00','','TENTATIVE','ASDASDSADSAD','1','0','','','CASH','BUSINESS','',0,'08:00 AM','05:00 PM','2010-10-13 14:10:27','ADMIN','2010-10-13 14:10:27','ADMIN'),(1,'F-0000000002','','GROUP','AAAA','CORPORATE',0,0,'','G-0000000005','','Travel Agency','2010-10-14 00:00:00','2010-10-15 00:00:00','2010-10-14 00:00:00','2010-10-15 00:00:00','','TENTATIVE','AAAAA','1','0','','','CASH','BUSINESS','',0,'08:00 AM','05:00 PM','2010-10-13 14:10:58','ADMIN','2010-10-13 14:10:58','ADMIN');
/*!40000 ALTER TABLE `folio` ENABLE KEYS */;
UNLOCK TABLES;

/*!50003 SET @OLD_SQL_MODE=@@SQL_MODE*/;
DELIMITER ;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION" */;;
/*!50003 CREATE */ /*!50017 DEFINER=`root`@`localhost` */ /*!50003 TRIGGER `tgr_InsertFolio_ChangesLog` AFTER INSERT ON `folio` FOR EACH ROW begin
insert into `hotel_test`.`changes_log` 
(TERMINAL_ID, SHIFT_CODE, USER_ID, 
SUPERVISOR_ID,REMARKS, TABLE_NAME, FIELD_CHANGED, 
OLD_VALUE, NEW_VALUE, DATE_CHANGED)
values
(NEW.TERMINAL_ID, NEW.SHIFT_CODE, NEW.UPDATEDBY, 
NEW.SUPERVISOR_ID,'CREATE FOLIO','FOLIO', 'FOLIO ID', 
'', NEW.FOLIOID, now());
END */;;

/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION" */;;
/*!50003 CREATE */ /*!50017 DEFINER=`root`@`localhost` */ /*!50003 TRIGGER `tgr_UpdateFolio_ChangesLog` AFTER UPDATE ON `folio` FOR EACH ROW begin
if OLD.AccountId <> NEW.AccountId then
insert into `hotel_test`.`changes_log` 
(TERMINAL_ID, SHIFT_CODE, USER_ID, 
SUPERVISOR_ID, REMARKS ,TABLE_NAME, FIELD_CHANGED, 
OLD_VALUE, NEW_VALUE, DATE_CHANGED)
values
(NEW.TERMINAL_ID, NEW.SHIFT_CODE, NEW.UPDATEDBY, 
NEW.SUPERVISOR_ID,concat('CHANGED FOLIO ACCOUNT : ', new.folioid),'FOLIO', 'ACCOUNT ID', 
OLD.ACCOUNTID, NEW.ACCOUNTID, now());
end if;
if OLD.FolioType <> NEW.FolioType then
insert into `hotel_test`.`changes_log` 
(TERMINAL_ID, SHIFT_CODE, USER_ID, 
SUPERVISOR_ID, REMARKS ,TABLE_NAME, FIELD_CHANGED, 
OLD_VALUE, NEW_VALUE, DATE_CHANGED)
values
(NEW.TERMINAL_ID, NEW.SHIFT_CODE, NEW.UPDATEDBY, 
NEW.SUPERVISOR_ID,concat('CHANGED FOLIO TYPE : ', new.folioid),'FOLIO', 'FOLIO TYPE', 
OLD.FolioType, NEW.FolioType, now());
end if;
if OLD.GroupName <> NEW.GroupName then
insert into `hotel_test`.`changes_log` 
(TERMINAL_ID, SHIFT_CODE, USER_ID, 
SUPERVISOR_ID, REMARKS ,TABLE_NAME, FIELD_CHANGED, 
OLD_VALUE, NEW_VALUE, DATE_CHANGED)
values
(NEW.TERMINAL_ID, NEW.SHIFT_CODE, NEW.UPDATEDBY, 
NEW.SUPERVISOR_ID,concat('CHANGED FOLIO GROUPNAME : ', new.folioid),'FOLIO', 'GROUP NAME', 
OLD.GroupName, NEW.GroupName, now());
end if;
if OLD.AccountType <> NEW.AccountType then
insert into `hotel_test`.`changes_log` 
(TERMINAL_ID, SHIFT_CODE, USER_ID, 
SUPERVISOR_ID, REMARKS ,TABLE_NAME, FIELD_CHANGED, 
OLD_VALUE, NEW_VALUE, DATE_CHANGED)
values
(NEW.TERMINAL_ID, NEW.SHIFT_CODE, NEW.UPDATEDBY, 
NEW.SUPERVISOR_ID,concat('CHANGED FOLIO ACCOUNT TYPE : ', new.folioid),'FOLIO', 'ACCOUNT TYPE', 
OLD.AccountType, NEW.AccountType, now());
end if;
if OLD.NoOfAdults <> NEW.NoOfAdults then
insert into `hotel_test`.`changes_log` 
(TERMINAL_ID, SHIFT_CODE, USER_ID, 
SUPERVISOR_ID, REMARKS ,TABLE_NAME, FIELD_CHANGED, 
OLD_VALUE, NEW_VALUE, DATE_CHANGED)
values
(NEW.TERMINAL_ID, NEW.SHIFT_CODE, NEW.UPDATEDBY, 
NEW.SUPERVISOR_ID,concat('CHANGED FOLIO PAX : ', new.folioid),'FOLIO', 'NO OF ADULTS', 
OLD.NoOfAdults, NEW.NoOfAdults, now());
end if;
if OLD.NoOfCHild <> NEW.NoOfCHild then
insert into `hotel_test`.`changes_log` 
(TERMINAL_ID, SHIFT_CODE, USER_ID, 
SUPERVISOR_ID, REMARKS ,TABLE_NAME, FIELD_CHANGED, 
OLD_VALUE, NEW_VALUE, DATE_CHANGED)
values
(NEW.TERMINAL_ID, NEW.SHIFT_CODE, NEW.UPDATEDBY, 
NEW.SUPERVISOR_ID,concat('CHANGED FOLIO PAX : ', new.folioid),'FOLIO', 'NO OF CHILD', 
OLD.NoOfCHild, NEW.NoOfCHild, now());
end if;
if OLD.MasterFolio <> NEW.MasterFolio then
insert into `hotel_test`.`changes_log` 
(TERMINAL_ID, SHIFT_CODE, USER_ID, 
SUPERVISOR_ID, REMARKS ,TABLE_NAME, FIELD_CHANGED, 
OLD_VALUE, NEW_VALUE, DATE_CHANGED)
values
(NEW.TERMINAL_ID, NEW.SHIFT_CODE, NEW.UPDATEDBY, 
NEW.SUPERVISOR_ID,concat('CHANGED MASTER FOLIO : ', new.folioid),'FOLIO', 'MASTER FOLIO', 
OLD.MasterFolio, NEW.MasterFolio, now());
end if;
if OLD.CompanyID <> NEW.CompanyID then
insert into `hotel_test`.`changes_log` 
(TERMINAL_ID, SHIFT_CODE, USER_ID, 
SUPERVISOR_ID, REMARKS ,TABLE_NAME, FIELD_CHANGED, 
OLD_VALUE, NEW_VALUE, DATE_CHANGED)
values
(NEW.TERMINAL_ID, NEW.SHIFT_CODE, NEW.UPDATEDBY, 
NEW.SUPERVISOR_ID,concat('CHANGED FOLIO COMPANY ID : ', new.folioid),'FOLIO', 'COMPANY ID', 
OLD.CompanyID, NEW.CompanyID, now());
end if;
if OLD.AgentID <> NEW.AgentID then
insert into `hotel_test`.`changes_log` 
(TERMINAL_ID, SHIFT_CODE, USER_ID, 
SUPERVISOR_ID, REMARKS ,TABLE_NAME, FIELD_CHANGED, 
OLD_VALUE, NEW_VALUE, DATE_CHANGED)
values
(NEW.TERMINAL_ID, NEW.SHIFT_CODE, NEW.UPDATEDBY, 
NEW.SUPERVISOR_ID,concat('CHANGED FOLIO AGENT ID : ', new.folioid),'FOLIO', 'AGENT ID', 
OLD.AgentID, NEW.AgentID, now());
end if;
if OLD.Source <> NEW.Source then
insert into `hotel_test`.`changes_log` 
(TERMINAL_ID, SHIFT_CODE, USER_ID, 
SUPERVISOR_ID, REMARKS ,TABLE_NAME, FIELD_CHANGED, 
OLD_VALUE, NEW_VALUE, DATE_CHANGED)
values
(NEW.TERMINAL_ID, NEW.SHIFT_CODE, NEW.UPDATEDBY, 
NEW.SUPERVISOR_ID,concat('CHANGED FOLIO SOURCE : ', new.folioid),'FOLIO', 'SOURCE', 
OLD.Source, NEW.Source, now());
end if;
if OLD.FROMDATE <> NEW.FROMDATE then
insert into `hotel_test`.`changes_log` 
(TERMINAL_ID, SHIFT_CODE, USER_ID, 
SUPERVISOR_ID, REMARKS ,TABLE_NAME, FIELD_CHANGED, 
OLD_VALUE, NEW_VALUE, DATE_CHANGED)
values
(NEW.TERMINAL_ID, NEW.SHIFT_CODE, NEW.UPDATEDBY, 
NEW.SUPERVISOR_ID,concat('CHANGED FOLIO FROMDATE : ', new.folioid),'FOLIO', 'FROMDATE', 
OLD.FROMDATE, NEW.FROMDATE, now());
end if;
if OLD.TODATE <> NEW.TODATE then
insert into `hotel_test`.`changes_log` 
(TERMINAL_ID, SHIFT_CODE, USER_ID, 
SUPERVISOR_ID, REMARKS ,TABLE_NAME, FIELD_CHANGED, 
OLD_VALUE, NEW_VALUE, DATE_CHANGED)
values
(NEW.TERMINAL_ID, NEW.SHIFT_CODE, NEW.UPDATEDBY, 
NEW.SUPERVISOR_ID,concat('CHANGED FOLIO TODATE : ', new.folioid),'FOLIO', 'TODATE', 
OLD.TODATE, NEW.TODATE, now());
end if;
if OLD.ARRIVALDATE <> NEW.ARRIVALDATE then
insert into `hotel_test`.`changes_log` 
(TERMINAL_ID, SHIFT_CODE, USER_ID, 
SUPERVISOR_ID, REMARKS ,TABLE_NAME, FIELD_CHANGED, 
OLD_VALUE, NEW_VALUE, DATE_CHANGED)
values
(NEW.TERMINAL_ID, NEW.SHIFT_CODE, NEW.UPDATEDBY, 
NEW.SUPERVISOR_ID,concat('CHANGED FOLIO ARRIVALDATE : ', new.folioid),'FOLIO', 'ARRIVALDATE', 
OLD.ARRIVALDATE, NEW.ARRIVALDATE, now());
end if;
if OLD.DEPARTUREDATE <> NEW.DEPARTUREDATE then
insert into `hotel_test`.`changes_log` 
(TERMINAL_ID, SHIFT_CODE, USER_ID, 
SUPERVISOR_ID, REMARKS ,TABLE_NAME, FIELD_CHANGED, 
OLD_VALUE, NEW_VALUE, DATE_CHANGED)
values
(NEW.TERMINAL_ID, NEW.SHIFT_CODE, NEW.UPDATEDBY, 
NEW.SUPERVISOR_ID,concat('CHANGED FOLIO DEPARTUREDATE : ', new.folioid),'FOLIO', 'DEPARTUREDATE', 
OLD.DEPARTUREDATE, NEW.DEPARTUREDATE, now());
end if;
if OLD.PACKAGEID <> NEW.PACKAGEID then
insert into `hotel_test`.`changes_log` 
(TERMINAL_ID, SHIFT_CODE, USER_ID, 
SUPERVISOR_ID, REMARKS ,TABLE_NAME, FIELD_CHANGED, 
OLD_VALUE, NEW_VALUE, DATE_CHANGED)
values
(NEW.TERMINAL_ID, NEW.SHIFT_CODE, NEW.UPDATEDBY, 
NEW.SUPERVISOR_ID,concat('CHANGED FOLIO PACKAGEID : ', new.folioid),'FOLIO', 'PACKAGEID', 
OLD.PACKAGEID, NEW.PACKAGEID, now());
end if;
if OLD.Status <> NEW.Status then
insert into `hotel_test`.`changes_log` 
(TERMINAL_ID, SHIFT_CODE, USER_ID, 
SUPERVISOR_ID, REMARKS ,TABLE_NAME, FIELD_CHANGED, 
OLD_VALUE, NEW_VALUE, DATE_CHANGED)
values
(NEW.TERMINAL_ID, NEW.SHIFT_CODE, NEW.UPDATEDBY, 
NEW.SUPERVISOR_ID,concat('CHANGED FOLIO STATUS : ', new.folioid),'FOLIO', 'STATUS', 
OLD.Status, NEW.Status, now());
end if;
if OLD.Remarks <> NEW.Remarks then
insert into `hotel_test`.`changes_log` 
(TERMINAL_ID, SHIFT_CODE, USER_ID, 
SUPERVISOR_ID, REMARKS ,TABLE_NAME, FIELD_CHANGED, 
OLD_VALUE, NEW_VALUE, DATE_CHANGED)
values
(NEW.TERMINAL_ID, NEW.SHIFT_CODE, NEW.UPDATEDBY, 
NEW.SUPERVISOR_ID,concat('CHANGED FOLIO REMARKS : ', new.folioid),'FOLIO', 'REMARKS', 
OLD.Remarks, NEW.Remarks, now());
end if;
END */;;

DELIMITER ;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE */;

--
-- Table structure for table `folio_merge_history`
--

DROP TABLE IF EXISTS `folio_merge_history`;
CREATE TABLE `folio_merge_history` (
  `mergeId` int(10) NOT NULL auto_increment,
  `oldAccountId` varchar(20) default NULL,
  `newAccountId` varchar(20) default NULL,
  `createdBy` varchar(20) default NULL,
  `createdDate` timestamp NULL default NULL,
  PRIMARY KEY  (`mergeId`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `folio_merge_history`
--

LOCK TABLES `folio_merge_history` WRITE;
/*!40000 ALTER TABLE `folio_merge_history` DISABLE KEYS */;
/*!40000 ALTER TABLE `folio_merge_history` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `folioinclusions`
--

DROP TABLE IF EXISTS `folioinclusions`;
CREATE TABLE `folioinclusions` (
  `hotelID` int(5) NOT NULL default '1',
  `FolioID` varchar(30) NOT NULL,
  `memo` text NOT NULL,
  `CreatedBy` varchar(25) default 'ADMIN',
  `CreateTime` datetime default '2001-01-01 12:00:00',
  `UpdatedBy` varchar(25) default 'ADMIN',
  `UpdateTime` datetime default '2001-01-01 12:00:00'
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `folioinclusions`
--

LOCK TABLES `folioinclusions` WRITE;
/*!40000 ALTER TABLE `folioinclusions` DISABLE KEYS */;
/*!40000 ALTER TABLE `folioinclusions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `folioledger`
--

DROP TABLE IF EXISTS `folioledger`;
CREATE TABLE `folioledger` (
  `HOTELID` int(5) NOT NULL,
  `FOLIOID` varchar(20) NOT NULL,
  `SUBFOLIO` varchar(1) NOT NULL,
  `ACCOUNTID` varchar(20) NOT NULL,
  `CHARGES` decimal(12,2) default '0.00',
  `PAYCASH` decimal(12,2) default '0.00',
  `PAYCARD` decimal(12,2) default '0.00',
  `PAYCHEQUE` decimal(12,2) default '0.00',
  `PAYGIFTCHEQUE` decimal(12,2) default '0.00',
  `BALANCEFORWARDED` decimal(12,2) default '0.00',
  `BALANCENET` decimal(12,2) default '0.00',
  `DISCOUNT` decimal(12,2) default '0.00',
  `GOVERNMENTTAX` decimal(12,2) default '0.00',
  `LOCALTAX` decimal(12,2) default '0.00',
  `SERVICECHARGE` decimal(12,2) default '0.00',
  `AGENTCOMMISSION` decimal(12,2) default '0.00',
  `TOTALNET` decimal(12,2) default '0.00',
  `POSTTOLEDGER` varchar(1) default NULL,
  `CREATETIME` datetime default '2001-01-01 01:01:01',
  `CREATEDBY` varchar(20) default NULL,
  `UPDATETIME` datetime default '2001-01-01 01:01:01',
  `UPDATEDBY` varchar(20) default NULL,
  PRIMARY KEY  (`HOTELID`,`FOLIOID`,`SUBFOLIO`,`ACCOUNTID`),
  KEY `FOLIOID` (`FOLIOID`,`SUBFOLIO`),
  KEY `SUBFOLIO` (`SUBFOLIO`),
  KEY `FOLIOID_2` (`FOLIOID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `folioledger`
--

LOCK TABLES `folioledger` WRITE;
/*!40000 ALTER TABLE `folioledger` DISABLE KEYS */;
INSERT INTO `folioledger` VALUES (1,'F-0000000001','A','G-0000000004','0.00','0.00','0.00','0.00','0.00','0.00','0.00','0.00','0.00','0.00','0.00','0.00','0.00','0','2010-10-13 14:10:27','ADMIN','2010-10-13 14:10:27','ADMIN'),(1,'F-0000000002','A','G-0000000005','0.00','0.00','0.00','0.00','0.00','0.00','0.00','0.00','0.00','0.00','0.00','0.00','0.00','0','2010-10-13 14:10:58','ADMIN','2010-10-13 14:10:58','ADMIN');
/*!40000 ALTER TABLE `folioledger` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `foliopackage`
--

DROP TABLE IF EXISTS `foliopackage`;
CREATE TABLE `foliopackage` (
  `HotelID` int(5) NOT NULL,
  `FolioID` varchar(20) NOT NULL,
  `TransactionCode` varchar(20) NOT NULL,
  `Basis` varchar(1) default NULL,
  `PercentOff` decimal(5,2) default '0.00',
  `AmountOff` decimal(12,2) default '0.00',
  `DaysApplied` varchar(50) default NULL,
  `DateFrom` datetime default '1900-01-01 00:00:00',
  `DateTo` datetime default '1900-01-01 00:00:00',
  `CreateTime` datetime default NULL,
  `CreatedBy` varchar(20) default NULL,
  `UpdateTime` datetime default NULL,
  `UpdatedBy` varchar(20) default NULL,
  PRIMARY KEY  (`HotelID`,`FolioID`,`TransactionCode`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `foliopackage`
--

LOCK TABLES `foliopackage` WRITE;
/*!40000 ALTER TABLE `foliopackage` DISABLE KEYS */;
/*!40000 ALTER TABLE `foliopackage` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `folioprivilege`
--

DROP TABLE IF EXISTS `folioprivilege`;
CREATE TABLE `folioprivilege` (
  `HotelID` int(5) NOT NULL,
  `FolioID` varchar(20) NOT NULL,
  `TransactionCode` varchar(20) NOT NULL,
  `Basis` varchar(1) default NULL,
  `Percentoff` decimal(5,2) default NULL,
  `AmountOff` decimal(12,2) default NULL,
  PRIMARY KEY  (`HotelID`,`FolioID`,`TransactionCode`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `folioprivilege`
--

LOCK TABLES `folioprivilege` WRITE;
/*!40000 ALTER TABLE `folioprivilege` DISABLE KEYS */;
/*!40000 ALTER TABLE `folioprivilege` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `foliorecurringcharge`
--

DROP TABLE IF EXISTS `foliorecurringcharge`;
CREATE TABLE `foliorecurringcharge` (
  `HotelID` int(5) NOT NULL,
  `FolioID` varchar(20) NOT NULL,
  `TransactionCode` varchar(20) NOT NULL,
  `Memo` varchar(150) NOT NULL,
  `Amount` decimal(12,2) default NULL,
  `FromDate` datetime default '2001-01-01 01:01:01',
  `Todate` datetime default '2001-01-01 01:01:01',
  `CreateTime` datetime default '2001-01-01 01:01:01',
  `CreatedBy` varchar(20) default NULL,
  `UpdateTime` datetime default '2001-01-01 01:01:01',
  `UpdatedBy` varchar(20) default NULL,
  `summaryFlag` int(2) NOT NULL default '0',
  `packageID` int(5) default '0',
  `subAccount` varchar(50) default NULL,
  PRIMARY KEY  (`HotelID`,`FolioID`,`TransactionCode`,`Memo`,`summaryFlag`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `foliorecurringcharge`
--

LOCK TABLES `foliorecurringcharge` WRITE;
/*!40000 ALTER TABLE `foliorecurringcharge` DISABLE KEYS */;
INSERT INTO `foliorecurringcharge` VALUES (1,'F-0000000001','1201','RESTAURANT - 50pax Party Buffet -  BANQUET','14372.00','2010-10-14 00:00:00','2010-10-14 00:00:00','2010-10-13 14:10:27','ADMIN','2010-10-13 14:10:27','ADMIN',1,5,'BANQUET'),(1,'F-0000000001','1300','BUSINESS CENTER-Tarpaulin','528.00','2010-10-14 00:00:00','2010-10-14 00:00:00','2010-10-13 14:10:27','ADMIN','2010-10-13 14:10:27','ADMIN',1,5,'');
/*!40000 ALTER TABLE `foliorecurringcharge` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `foliorouting`
--

DROP TABLE IF EXISTS `foliorouting`;
CREATE TABLE `foliorouting` (
  `HotelID` int(5) NOT NULL,
  `FolioID` varchar(20) NOT NULL,
  `SubFolio` varchar(1) NOT NULL,
  `TransactionCode` varchar(20) NOT NULL,
  `Basis` varchar(1) default NULL,
  `PercentCharged` decimal(5,2) default '0.00',
  `AmountCharged` decimal(12,2) default '0.00',
  `CreateTime` datetime default '2001-01-01 01:01:01',
  `CreatedBy` varchar(20) default NULL,
  `UpdateTime` datetime default '2001-01-01 01:01:01',
  `UpdatedBy` varchar(20) default NULL,
  PRIMARY KEY  (`HotelID`,`FolioID`,`SubFolio`,`TransactionCode`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `foliorouting`
--

LOCK TABLES `foliorouting` WRITE;
/*!40000 ALTER TABLE `foliorouting` DISABLE KEYS */;
/*!40000 ALTER TABLE `foliorouting` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `folioschedules`
--

DROP TABLE IF EXISTS `folioschedules`;
CREATE TABLE `folioschedules` (
  `HOTELID` int(5) NOT NULL,
  `FolioId` varchar(20) NOT NULL,
  `RoomID` varchar(10) NOT NULL,
  `RoomType` varchar(50) default NULL,
  `FROMDATE` datetime NOT NULL default '2001-01-01 01:01:01',
  `TODATE` datetime NOT NULL default '2001-01-01 01:01:01',
  `Days` int(3) default NULL,
  `RATETYPE` varchar(25) default NULL,
  `RATE` decimal(12,2) NOT NULL default '0.00',
  `BREAKFAST` char(1) default 'N',
  `CREATEDBY` varchar(20) default NULL,
  `UPDATETIME` datetime default '2001-01-01 01:01:01',
  `UPDATEDBY` varchar(20) default NULL,
  `CREATETIME` datetime default '2001-01-01 01:01:01',
  `TERMINAL_ID` varchar(20) default NULL,
  `SHIFT_CODE` varchar(20) default NULL,
  `SUPERVISOR_ID` varchar(50) default NULL,
  `startTime` time default '00:00:00',
  `endTime` time default '00:00:00',
  `venue` text,
  `setup` text,
  `remarks` text,
  `hasTransfered` smallint(1) default '0',
  PRIMARY KEY  (`HOTELID`,`FolioId`,`RoomID`,`FROMDATE`,`TODATE`),
  KEY `FolioId` (`FolioId`),
  KEY `HOTELID` (`HOTELID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `folioschedules`
--

LOCK TABLES `folioschedules` WRITE;
/*!40000 ALTER TABLE `folioschedules` DISABLE KEYS */;
INSERT INTO `folioschedules` VALUES (1,'F-0000000001','904','FUNCTION','2010-10-14 00:00:00','2010-10-15 00:00:00',1,'STANDARD','0.00','N','ADMIN','2010-10-13 14:10:27','ADMIN','2010-10-13 14:10:27','1','0','','08:00:00','17:00:00','','','',0),(1,'F-0000000002','905','FUNCTION','2010-10-14 00:00:00','2010-10-15 00:00:00',1,'STANDARD','0.00','N','ADMIN','2010-10-13 14:10:58','ADMIN','2010-10-13 14:10:58','1','0','','08:00:00','17:00:00','','','',0);
/*!40000 ALTER TABLE `folioschedules` ENABLE KEYS */;
UNLOCK TABLES;

/*!50003 SET @OLD_SQL_MODE=@@SQL_MODE*/;
DELIMITER ;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION" */;;
/*!50003 CREATE */ /*!50017 DEFINER=`root`@`localhost` */ /*!50003 TRIGGER `tgr_InsertFolioSchedules_ChangesLog` AFTER INSERT ON `folioschedules` FOR EACH ROW begin
insert into `hotel_test`.`changes_log` 
(TERMINAL_ID, SHIFT_CODE, USER_ID, 
SUPERVISOR_ID, REMARKS ,TABLE_NAME, FIELD_CHANGED, 
OLD_VALUE, NEW_VALUE, DATE_CHANGED)
values
(NEW.TERMINAL_ID, NEW.SHIFT_CODE, NEW.UPDATEDBY, 
NEW.SUPERVISOR_ID,concat('CHANGED FOLIO ROOMID : ', new.folioid),'FOLIO SCHEDULE', 'ROOMID', 
'', NEW.RoomID, now());
insert into `hotel_test`.`changes_log` 
(TERMINAL_ID, SHIFT_CODE, USER_ID, 
SUPERVISOR_ID, REMARKS ,TABLE_NAME, FIELD_CHANGED, 
OLD_VALUE, NEW_VALUE, DATE_CHANGED)
values
(NEW.TERMINAL_ID, NEW.SHIFT_CODE, NEW.UPDATEDBY, 
NEW.SUPERVISOR_ID,concat('CHANGED FOLIO RATETYPE : ', new.folioid),'FOLIO SCHEDULE', 'RATETYPE', 
'', NEW.RATETYPE, now());
insert into `hotel_test`.`changes_log` 
(TERMINAL_ID, SHIFT_CODE, USER_ID, 
SUPERVISOR_ID, REMARKS ,TABLE_NAME, FIELD_CHANGED, 
OLD_VALUE, NEW_VALUE, DATE_CHANGED)
values
(NEW.TERMINAL_ID, NEW.SHIFT_CODE, NEW.UPDATEDBY, 
NEW.SUPERVISOR_ID,concat('CHANGED FOLIO RATE : ', new.folioid),'FOLIO SCHEDULE', 'RATE', 
'', NEW.RATE, now());
insert into `hotel_test`.`changes_log` 
(TERMINAL_ID, SHIFT_CODE, USER_ID, 
SUPERVISOR_ID, REMARKS ,TABLE_NAME, FIELD_CHANGED, 
OLD_VALUE, NEW_VALUE, DATE_CHANGED)
values
(NEW.TERMINAL_ID, NEW.SHIFT_CODE, NEW.UPDATEDBY, 
NEW.SUPERVISOR_ID,concat('CHANGED FOLIO BREAKFAST : ', new.folioid),'FOLIO SCHEDULE', 'BREAKFAST', 
'', NEW.BREAKFAST, now());
END */;;

/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION" */;;
/*!50003 CREATE */ /*!50017 DEFINER=`root`@`localhost` */ /*!50003 TRIGGER `tgr_DeleteFolioSchedule` BEFORE DELETE ON `folioschedules` FOR EACH ROW begin
insert into `hotel_test`.`changes_log` 
(TERMINAL_ID, SHIFT_CODE, USER_ID, 
SUPERVISOR_ID, REMARKS ,TABLE_NAME, FIELD_CHANGED, 
OLD_VALUE, NEW_VALUE, DATE_CHANGED)
values
(old.TERMINAL_ID, old.SHIFT_CODE, old.UPDATEDBY, 
old.SUPERVISOR_ID,concat('DELETED FOLIO ROOMID : ', old.folioid),'FOLIO SCHEDULE', 'ROOMID', 
'', old.RoomID, now());
insert into `hotel_test`.`changes_log` 
(TERMINAL_ID, SHIFT_CODE, USER_ID, 
SUPERVISOR_ID, REMARKS ,TABLE_NAME, FIELD_CHANGED, 
OLD_VALUE, NEW_VALUE, DATE_CHANGED)
values
(old.TERMINAL_ID, old.SHIFT_CODE, old.UPDATEDBY, 
old.SUPERVISOR_ID,concat('DELETED FOLIO RATETYPE : ', old.folioid),'FOLIO SCHEDULE', 'RATETYPE', 
'', old.RATETYPE, now());
insert into `hotel_test`.`changes_log` 
(TERMINAL_ID, SHIFT_CODE, USER_ID, 
SUPERVISOR_ID, REMARKS ,TABLE_NAME, FIELD_CHANGED, 
OLD_VALUE, NEW_VALUE, DATE_CHANGED)
values
(old.TERMINAL_ID, old.SHIFT_CODE, old.UPDATEDBY, 
old.SUPERVISOR_ID,concat('DELETED FOLIO RATE : ', old.folioid),'FOLIO SCHEDULE', 'RATE', 
'', old.RATE, now());
insert into `hotel_test`.`changes_log` 
(TERMINAL_ID, SHIFT_CODE, USER_ID, 
SUPERVISOR_ID, REMARKS ,TABLE_NAME, FIELD_CHANGED, 
OLD_VALUE, NEW_VALUE, DATE_CHANGED)
values
(old.TERMINAL_ID, old.SHIFT_CODE, old.UPDATEDBY, 
old.SUPERVISOR_ID,concat('DELETED FOLIO BREAKFAST : ', old.folioid),'FOLIO SCHEDULE', 'BREAKFAST', 
'', old.BREAKFAST, now());
END */;;

DELIMITER ;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE */;

--
-- Table structure for table `foliotransactions`
--

DROP TABLE IF EXISTS `foliotransactions`;
CREATE TABLE `foliotransactions` (
  `folioTransactionNo` int(20) unsigned NOT NULL auto_increment,
  `hotelId` int(5) NOT NULL default '1',
  `folioId` varchar(20) NOT NULL,
  `subFolio` varchar(1) NOT NULL,
  `accountId` varchar(20) NOT NULL default 'FILLER',
  `transactionDate` datetime NOT NULL default '2007-01-01 01:01:01',
  `postingDate` datetime NOT NULL default '2006-01-01 01:01:01',
  `transactionCode` varchar(20) NOT NULL,
  `subAccount` varchar(100) NOT NULL,
  `referenceNo` varchar(100) NOT NULL,
  `transactionSource` varchar(20) NOT NULL,
  `memo` varchar(500) NOT NULL,
  `acctSide` varchar(10) NOT NULL,
  `currencyCode` varchar(10) NOT NULL,
  `conversionRate` decimal(12,4) NOT NULL default '0.0000',
  `currencyAmount` decimal(12,2) NOT NULL default '0.00',
  `baseAmount` decimal(12,2) NOT NULL default '0.00',
  `grossAmount` decimal(12,2) NOT NULL default '0.00',
  `discount` decimal(12,2) NOT NULL default '0.00',
  `serviceCharge` decimal(12,2) NOT NULL default '0.00',
  `serviceChargeInclusive` tinyint(1) NOT NULL default '1',
  `governmentTax` decimal(12,2) NOT NULL default '0.00',
  `governmentTaxInclusive` tinyint(1) NOT NULL default '1',
  `localTax` decimal(12,2) NOT NULL default '0.00',
  `localTaxInclusive` tinyint(1) NOT NULL default '1',
  `netBaseAmount` decimal(12,2) NOT NULL default '0.00',
  `netAmount` decimal(12,2) NOT NULL default '0.00',
  `creditCardNo` varchar(20) NOT NULL,
  `chequeNo` varchar(20) NOT NULL,
  `accountName` varchar(100) NOT NULL,
  `bankName` varchar(100) NOT NULL,
  `chequeDate` date NOT NULL default '1900-01-01',
  `FOCGrantedBy` varchar(100) NOT NULL,
  `creditCardType` varchar(20) NOT NULL,
  `approvalSlip` varchar(20) NOT NULL,
  `creditCardExpiry` date NOT NULL default '2008-08-08',
  `routeSequence` varchar(100) NOT NULL default 'FILLER',
  `sourceFolio` varchar(20) NOT NULL default 'FILLER',
  `sourceSubFolio` varchar(1) NOT NULL,
  `terminalID` varchar(10) NOT NULL default 'FILLER',
  `shiftCode` varchar(10) NOT NULL default 'FILLER',
  `status` varchar(10) NOT NULL default 'FILLER',
  `postToLedger` varchar(1) NOT NULL,
  `createTime` datetime NOT NULL default '2001-01-01 01:01:01',
  `createdBy` varchar(20) NOT NULL,
  `updateTime` datetime NOT NULL default '2001-01-01 01:01:01',
  `updatedBy` varchar(20) NOT NULL,
  `auditFlag` varchar(1) NOT NULL default '0',
  `summaryFlag` int(1) NOT NULL default '0',
  `packageID` varchar(5) NOT NULL,
  `mealAmount` decimal(12,2) NOT NULL default '0.00',
  `adjustmentFlag` varchar(1) NOT NULL default '0',
  PRIMARY KEY  (`folioTransactionNo`),
  KEY `FolioID` (`folioId`),
  KEY `SubFolio` (`subFolio`),
  KEY `AccountID` (`accountId`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `foliotransactions`
--

LOCK TABLES `foliotransactions` WRITE;
/*!40000 ALTER TABLE `foliotransactions` DISABLE KEYS */;
/*!40000 ALTER TABLE `foliotransactions` ENABLE KEYS */;
UNLOCK TABLES;

/*!50003 SET @OLD_SQL_MODE=@@SQL_MODE*/;
DELIMITER ;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION" */;;
/*!50003 CREATE */ /*!50017 DEFINER=`root`@`localhost` */ /*!50003 TRIGGER `tgr_InsertFolioTransaction_ChangeLog` AFTER INSERT ON `foliotransactions` FOR EACH ROW begin
insert into `hotel_test`.`changes_log` 
(TERMINAL_ID, SHIFT_CODE, USER_ID, 
SUPERVISOR_ID, REMARKS ,TABLE_NAME, FIELD_CHANGED, 
OLD_VALUE, NEW_VALUE, DATE_CHANGED)
values
(NEW.TERMINALID, NEW.SHIFTCODE, NEW.UPDATEDBY, 
'','INSERT FOLIO TRANSACTION','FOLIO TRANSACTION', 'FOLIO ID', 
'', concat(NEW.FOLIOID,',',NEW.MEMO), now());
END */;;

/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION" */;;
/*!50003 CREATE */ /*!50017 DEFINER=`root`@`localhost` */ /*!50003 TRIGGER `tgr_UpdateFolioTransaction_ChangeLog` AFTER UPDATE ON `foliotransactions` FOR EACH ROW begin
if OLD.FolioID <> NEW.FolioID then
insert into `hotel_test`.`changes_log` 
(TERMINAL_ID, SHIFT_CODE, USER_ID, 
SUPERVISOR_ID, REMARKS ,TABLE_NAME, FIELD_CHANGED, 
OLD_VALUE, NEW_VALUE, DATE_CHANGED)
values
(NEW.TERMINALID, NEW.SHIFTCODE, NEW.UPDATEDBY, 
'','UPDATE FOLIO TRANSACTION','FOLIO TRANSACTION', 'FOLIO ID', 
OLD.FOLIOID, NEW.FOLIOID, now());
end if;
if OLD.SUBFOLIO <> NEW.SUBFOLIO then
insert into `hotel_test`.`changes_log` 
(TERMINAL_ID, SHIFT_CODE, USER_ID, 
SUPERVISOR_ID, REMARKS ,TABLE_NAME, FIELD_CHANGED, 
OLD_VALUE, NEW_VALUE, DATE_CHANGED)
values
(NEW.TERMINALID, NEW.SHIFTCODE, NEW.UPDATEDBY, 
'',concat('UPDATE FOLIO TRANSACTION : ', new.folioid),'FOLIO TRANSACTION', 'SUBFOLIO', 
OLD.SUBFOLIO, NEW.SUBFOLIO, now());
end if;
if OLD.ACCOUNTID <> NEW.ACCOUNTID then
insert into `hotel_test`.`changes_log` 
(TERMINAL_ID, SHIFT_CODE, USER_ID, 
SUPERVISOR_ID, REMARKS ,TABLE_NAME, FIELD_CHANGED, 
OLD_VALUE, NEW_VALUE, DATE_CHANGED)
values
(NEW.TERMINALID, NEW.SHIFTCODE, NEW.UPDATEDBY, 
'',concat('UPDATE FOLIO TRANSACTION : ', new.folioid),'FOLIO TRANSACTION', 'ACCOUNT ID', 
OLD.ACCOUNTID, NEW.ACCOUNTID, now());
end if;
if OLD.TRANSACTIONDATE <> NEW.TRANSACTIONDATE then
insert into `hotel_test`.`changes_log` 
(TERMINAL_ID, SHIFT_CODE, USER_ID, 
SUPERVISOR_ID, REMARKS ,TABLE_NAME, FIELD_CHANGED, 
OLD_VALUE, NEW_VALUE, DATE_CHANGED)
values
(NEW.TERMINALID, NEW.SHIFTCODE, NEW.UPDATEDBY, 
'',concat('UPDATE FOLIO TRANSACTION : ', new.folioid),'FOLIO TRANSACTION', 'TRANSACTION DATE', 
OLD.TRANSACTIONDATE, NEW.TRANSACTIONDATE, now());
end if;
if OLD.TransactionCode <> NEW.TransactionCode then
insert into `hotel_test`.`changes_log` 
(TERMINAL_ID, SHIFT_CODE, USER_ID, 
SUPERVISOR_ID, REMARKS ,TABLE_NAME, FIELD_CHANGED, 
OLD_VALUE, NEW_VALUE, DATE_CHANGED)
values
(NEW.TERMINALID, NEW.SHIFTCODE, NEW.UPDATEDBY, 
'',concat('UPDATE FOLIO TRANSACTION : ', new.folioid),'FOLIO TRANSACTION', 'TRANSACTION CODE', 
OLD.TransactionCode, NEW.TransactionCode, now());
end if;
if OLD.ReferenceNo <> NEW.ReferenceNo then
insert into `hotel_test`.`changes_log` 
(TERMINAL_ID, SHIFT_CODE, USER_ID, 
SUPERVISOR_ID, REMARKS ,TABLE_NAME, FIELD_CHANGED, 
OLD_VALUE, NEW_VALUE, DATE_CHANGED)
values
(NEW.TERMINALID, NEW.SHIFTCODE, NEW.UPDATEDBY, 
'',concat('UPDATE FOLIO TRANSACTION : ', new.folioid),'FOLIO TRANSACTION', 'REFERENCE NO', 
OLD.ReferenceNo, NEW.ReferenceNo, now());
end if;
if OLD.TransactionSource <> NEW.TransactionSource then
insert into `hotel_test`.`changes_log` 
(TERMINAL_ID, SHIFT_CODE, USER_ID, 
SUPERVISOR_ID, REMARKS ,TABLE_NAME, FIELD_CHANGED, 
OLD_VALUE, NEW_VALUE, DATE_CHANGED)
values
(NEW.TERMINALID, NEW.SHIFTCODE, NEW.UPDATEDBY, 
'',concat('UPDATE FOLIO TRANSACTION : ', new.folioid),'FOLIO TRANSACTION', 'TRANSACTION SOURCE', 
OLD.TransactionSource, NEW.TransactionSource, now());
end if;
if OLD.Memo <> NEW.Memo then
insert into `hotel_test`.`changes_log` 
(TERMINAL_ID, SHIFT_CODE, USER_ID, 
SUPERVISOR_ID, REMARKS ,TABLE_NAME, FIELD_CHANGED, 
OLD_VALUE, NEW_VALUE, DATE_CHANGED)
values
(NEW.TERMINALID, NEW.SHIFTCODE, NEW.UPDATEDBY, 
'',concat('UPDATE FOLIO TRANSACTION : ', new.folioid),'FOLIO TRANSACTION', 'MEMO', 
OLD.Memo, NEW.Memo, now());
end if;
if OLD.AcctSide <> NEW.AcctSide then
insert into `hotel_test`.`changes_log` 
(TERMINAL_ID, SHIFT_CODE, USER_ID, 
SUPERVISOR_ID, REMARKS ,TABLE_NAME, FIELD_CHANGED, 
OLD_VALUE, NEW_VALUE, DATE_CHANGED)
values
(NEW.TERMINALID, NEW.SHIFTCODE, NEW.UPDATEDBY, 
'',concat('UPDATE FOLIO TRANSACTION : ', new.folioid),'FOLIO TRANSACTION', 'ACCOUNT SIDE', 
OLD.AcctSide, NEW.AcctSide, now());
end if;
if OLD.CurrencyCode <> NEW.CurrencyCode then
insert into `hotel_test`.`changes_log` 
(TERMINAL_ID, SHIFT_CODE, USER_ID, 
SUPERVISOR_ID, REMARKS ,TABLE_NAME, FIELD_CHANGED, 
OLD_VALUE, NEW_VALUE, DATE_CHANGED)
values
(NEW.TERMINALID, NEW.SHIFTCODE, NEW.UPDATEDBY, 
'',concat('UPDATE FOLIO TRANSACTION : ', new.folioid),'FOLIO TRANSACTION', 'CURRENCY', 
OLD.CurrencyCode, NEW.CurrencyCode, now());
end if;
if OLD.ConversionRate <> NEW.ConversionRate then
insert into `hotel_test`.`changes_log` 
(TERMINAL_ID, SHIFT_CODE, USER_ID, 
SUPERVISOR_ID, REMARKS ,TABLE_NAME, FIELD_CHANGED, 
OLD_VALUE, NEW_VALUE, DATE_CHANGED)
values
(NEW.TERMINALID, NEW.SHIFTCODE, NEW.UPDATEDBY, 
'',concat('UPDATE FOLIO TRANSACTION : ', new.folioid), 'CONVERSION RATE', 
OLD.ConversionRate, NEW.ConversionRate, now());
end if;
if OLD.CurrencyAmount <> NEW.CurrencyAmount then
insert into `hotel_test`.`changes_log` 
(TERMINAL_ID, SHIFT_CODE, USER_ID, 
SUPERVISOR_ID, REMARKS ,TABLE_NAME, FIELD_CHANGED, 
OLD_VALUE, NEW_VALUE, DATE_CHANGED)
values
(NEW.TERMINALID, NEW.SHIFTCODE, NEW.UPDATEDBY, 
'',concat('UPDATE FOLIO TRANSACTION : ', new.folioid),'FOLIO TRANSACTION', 'CURRENCY AMOUNT', 
OLD.CurrencyAmount, NEW.CurrencyAmount, now());
end if;
if OLD.BaseAmount <> NEW.BaseAmount then
insert into `hotel_test`.`changes_log` 
(TERMINAL_ID, SHIFT_CODE, USER_ID, 
SUPERVISOR_ID, REMARKS ,TABLE_NAME, FIELD_CHANGED, 
OLD_VALUE, NEW_VALUE, DATE_CHANGED)
values
(NEW.TERMINALID, NEW.SHIFTCODE, NEW.UPDATEDBY, 
'',concat('UPDATE FOLIO TRANSACTION : ', new.folioid),'FOLIO TRANSACTION', 'BASE AMOUNT', 
OLD.BaseAmount, NEW.BaseAmount, now());
end if;
if OLD.Discount <> NEW.Discount then
insert into `hotel_test`.`changes_log` 
(TERMINAL_ID, SHIFT_CODE, USER_ID, 
SUPERVISOR_ID, REMARKS ,TABLE_NAME, FIELD_CHANGED, 
OLD_VALUE, NEW_VALUE, DATE_CHANGED)
values
(NEW.TERMINALID, NEW.SHIFTCODE, NEW.UPDATEDBY, 
'',concat('UPDATE FOLIO TRANSACTION : ', new.folioid),'FOLIO TRANSACTION', 'DISCOUNT', 
OLD.Discount, NEW.Discount, now());
end if;
if OLD.ServiceCharge <> NEW.ServiceCharge then
insert into `hotel_test`.`changes_log` 
(TERMINAL_ID, SHIFT_CODE, USER_ID, 
SUPERVISOR_ID, REMARKS ,TABLE_NAME, FIELD_CHANGED, 
OLD_VALUE, NEW_VALUE, DATE_CHANGED)
values
(NEW.TERMINALID, NEW.SHIFTCODE, NEW.UPDATEDBY, 
'',concat('UPDATE FOLIO TRANSACTION : ', new.folioid),'FOLIO TRANSACTION', 'SERVICE CHARGE', 
OLD.ServiceCharge, NEW.ServiceCharge, now());
end if;
if OLD.GovernmentTax <> NEW.GovernmentTax then
insert into `hotel_test`.`changes_log` 
(TERMINAL_ID, SHIFT_CODE, USER_ID, 
SUPERVISOR_ID, REMARKS ,TABLE_NAME, FIELD_CHANGED, 
OLD_VALUE, NEW_VALUE, DATE_CHANGED)
values
(NEW.TERMINALID, NEW.SHIFTCODE, NEW.UPDATEDBY, 
'',concat('UPDATE FOLIO TRANSACTION : ', new.folioid),'FOLIO TRANSACTION', 'GOVERNMENT TAX', 
OLD.GovernmentTax, NEW.GovernmentTax, now());
end if;
if OLD.LocalTax <> NEW.LocalTax then
insert into `hotel_test`.`changes_log` 
(TERMINAL_ID, SHIFT_CODE, USER_ID, 
SUPERVISOR_ID, REMARKS ,TABLE_NAME, FIELD_CHANGED, 
OLD_VALUE, NEW_VALUE, DATE_CHANGED)
values
(NEW.TERMINALID, NEW.SHIFTCODE, NEW.UPDATEDBY, 
'',concat('UPDATE FOLIO TRANSACTION : ', new.folioid),'FOLIO TRANSACTION', 'LOCAL TAX', 
OLD.LocalTax, NEW.LocalTax, now());
end if;
if OLD.NetBaseAmount <> NEW.NetBaseAmount then
insert into `hotel_test`.`changes_log` 
(TERMINAL_ID, SHIFT_CODE, USER_ID, 
SUPERVISOR_ID, REMARKS ,TABLE_NAME, FIELD_CHANGED, 
OLD_VALUE, NEW_VALUE, DATE_CHANGED)
values
(NEW.TERMINALID, NEW.SHIFTCODE, NEW.UPDATEDBY, 
'',concat('UPDATE FOLIO TRANSACTION : ', new.folioid),'FOLIO TRANSACTION', 'NET BASE AMOUNT', 
OLD.NetBaseAmount, NEW.NetBaseAmount, now());
end if;
if OLD.RouteSequence <> NEW.RouteSequence then
insert into `hotel_test`.`changes_log` 
(TERMINAL_ID, SHIFT_CODE, USER_ID, 
SUPERVISOR_ID, REMARKS ,TABLE_NAME, FIELD_CHANGED, 
OLD_VALUE, NEW_VALUE, DATE_CHANGED)
values
(NEW.TERMINALID, NEW.SHIFTCODE, NEW.UPDATEDBY, 
'',concat('UPDATE FOLIO TRANSACTION : ', new.folioid),'FOLIO TRANSACTION', 'ROUTE SEQUENCE', 
OLD.RouteSequence, NEW.RouteSequence, now());
end if;
if OLD.Status <> NEW.Status then
insert into `hotel_test`.`changes_log` 
(TERMINAL_ID, SHIFT_CODE, USER_ID, 
SUPERVISOR_ID, REMARKS ,TABLE_NAME, FIELD_CHANGED, 
OLD_VALUE, NEW_VALUE, DATE_CHANGED)
values
(NEW.TERMINALID, NEW.SHIFTCODE, NEW.UPDATEDBY, 
'',concat('UPDATE FOLIO TRANSACTION : ', new.folioid),'FOLIO TRANSACTION', 'STATUS', 
OLD.Status, NEW.Status, now());
end if;
END */;;

DELIMITER ;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE */;

--
-- Table structure for table `groupbookingdropdown`
--

DROP TABLE IF EXISTS `groupbookingdropdown`;
CREATE TABLE `groupbookingdropdown` (
  `ID` int(10) NOT NULL auto_increment,
  `FieldName` varchar(50) default NULL,
  `Value` varchar(150) default NULL,
  `StatusFlag` varchar(10) default 'ACTIVE',
  `CreatedDate` datetime default NULL,
  `CreatedBy` varchar(50) default NULL,
  `UpdatedDate` datetime default NULL,
  `UpdatedBy` varchar(50) default NULL,
  PRIMARY KEY  (`ID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `groupbookingdropdown`
--

LOCK TABLES `groupbookingdropdown` WRITE;
/*!40000 ALTER TABLE `groupbookingdropdown` DISABLE KEYS */;
INSERT INTO `groupbookingdropdown` VALUES (1,'BookingSource','Walk-In','ACTIVE','2009-11-03 18:49:30','ADMIN','2009-11-03 18:49:30','ADMIN'),(2,'BookingSource','Phone / Fax','ACTIVE','2009-11-03 18:49:30','ADMIN','2009-11-03 18:49:30','ADMIN'),(3,'BookingSource','Internet','ACTIVE','2009-11-03 18:49:30','ADMIN','2009-11-03 18:49:30','ADMIN'),(4,'BookingSource','Travel Agency','ACTIVE','2009-11-03 18:49:30','ADMIN','2009-11-03 18:49:30','ADMIN'),(5,'BookingSource','Online TA','ACTIVE','2009-11-03 18:49:30','ADMIN','2009-11-03 18:49:30','ADMIN'),(6,'BookingSource','Sales Efforts','ACTIVE','2009-11-03 18:49:30','ADMIN','2009-11-03 18:49:30','ADMIN'),(7,'BookingSource','Employee Referrals','ACTIVE','2009-11-03 18:49:30','ADMIN','2009-11-03 18:49:30','ADMIN'),(8,'BookingSource','Other Referrals','ACTIVE','2009-11-03 18:49:30','ADMIN','2009-11-03 18:49:30','ADMIN'),(9,'FoodSetUp','Theater','ACTIVE','2009-11-03 18:49:30','ADMIN','2009-11-03 18:49:30','ADMIN'),(10,'FoodSetUp','Classroom','ACTIVE','2009-11-03 18:49:30','ADMIN','2009-11-03 18:49:30','ADMIN'),(11,'FoodSetUp','U-shape','ACTIVE','2009-11-03 18:49:30','ADMIN','2009-11-03 18:49:30','ADMIN'),(12,'FoodSetUp','Boardroom','ACTIVE','2009-11-03 18:49:30','ADMIN','2009-11-03 18:49:30','ADMIN'),(13,'FoodSetUp','Rectangular','ACTIVE','2009-11-03 18:49:30','ADMIN','2009-11-03 18:49:30','ADMIN'),(14,'FoodSetUp','Hollow Square','ACTIVE','2009-11-03 18:49:30','ADMIN','2009-11-03 18:49:30','ADMIN'),(15,'FoodSetUp','Round Tables','ACTIVE','2009-11-03 18:49:30','ADMIN','2009-11-03 18:49:30','ADMIN'),(16,'FoodSetUp','Cocktail','ACTIVE','2009-11-03 18:49:30','ADMIN','2009-11-03 18:49:30','ADMIN'),(17,'FoodSetUp','Others','ACTIVE','2009-11-03 18:49:30','ADMIN','2009-11-03 18:49:30','ADMIN'),(18,'BillingArrangement','Personal Account (Cash or Credit Card)','ACTIVE','2009-11-03 18:49:30','ADMIN','2009-11-03 18:49:30','ADMIN'),(19,'BillingArrangement','Company check (4 working days in advance)','ACTIVE','2009-11-03 18:49:30','ADMIN','2009-11-03 18:49:30','ADMIN'),(20,'BillingArrangement','Bank transfer prior to event','ACTIVE','2009-11-03 18:49:30','ADMIN','2009-11-03 18:49:30','ADMIN'),(21,'BillingArrangement','Company account via send-bill arrangement (LOA required)','ACTIVE','2009-11-03 18:49:30','ADMIN','2009-11-03 18:49:30','ADMIN'),(22,'BillingArrangement','Full payment immediately after the function','ACTIVE','2009-11-03 18:49:30','ADMIN','2009-11-03 18:49:30','ADMIN'),(23,'BillingArrangement','Full payment upon contract signing and incidentals to be settled after the function','ACTIVE','2009-11-03 18:49:30','ADMIN','2009-11-03 18:49:30','ADMIN'),(24,'BillingArrangement','50% downpayment upon contract signing and balance to be settled after the function','ACTIVE','2009-11-03 18:49:30','ADMIN','2009-11-03 18:49:30','ADMIN'),(25,'BillingArrangement','Room charges on guests` personal account.? Function charges on company account via send-bill arrangement (LOA required)','ACTIVE','2009-11-03 18:49:30','ADMIN','2009-11-03 18:49:30','ADMIN'),(26,'BillingArrangement','Others','ACTIVE','2009-11-03 18:49:30','ADMIN','2009-11-03 18:49:30','ADMIN'),(27,'RoomInclusions','Breakfast','ACTIVE','2009-11-03 18:49:30','ADMIN','2009-11-03 18:49:30','ADMIN'),(28,'RoomInclusions','Roundtrip airport transfers','ACTIVE','2009-11-03 18:49:30','ADMIN','2009-11-03 18:49:30','ADMIN'),(29,'RoomInclusions','Scheduled office drop-off','ACTIVE','2009-11-03 18:49:30','ADMIN','2009-11-03 18:49:30','ADMIN'),(30,'RoomInclusions','Scheduled office pick-up','ACTIVE','2009-11-03 18:49:30','ADMIN','2009-11-03 18:49:30','ADMIN'),(31,'RoomInclusions','Roundtrip scheduled transfers to CICC','ACTIVE','2009-11-03 18:49:30','ADMIN','2009-11-03 18:49:30','ADMIN'),(32,'RoomInclusions','Welcome drink','ACTIVE','2009-11-03 18:49:30','ADMIN','2009-11-03 18:49:30','ADMIN'),(33,'RoomInclusions','2 Bottled water daily','ACTIVE','2009-11-03 18:49:30','ADMIN','2009-11-03 18:49:30','ADMIN'),(34,'RoomInclusions','Free pressing for one set daily (pants & polo OR blouse & skirt)','ACTIVE','2009-11-03 18:49:30','ADMIN','2009-11-03 18:49:30','ADMIN'),(35,'RoomInclusions','20% off Laundry Service','ACTIVE','2009-11-03 18:49:30','ADMIN','2009-11-03 18:49:30','ADMIN'),(36,'RoomInclusions','20% off Business Center Services','ACTIVE','2009-11-03 18:49:30','ADMIN','2009-11-03 18:49:30','ADMIN'),(37,'RoomInclusions','20% off Local Calls','ACTIVE','2009-11-03 18:49:30','ADMIN','2009-11-03 18:49:30','ADMIN'),(38,'SpecialInstructions','Pull-out mini bar','ACTIVE','2009-11-03 18:49:30','ADMIN','2009-11-03 18:49:30','ADMIN'),(39,'SpecialInstructions','Request for fruit platter','ACTIVE','2009-11-03 18:49:30','ADMIN','2009-11-03 18:49:30','ADMIN'),(40,'SpecialInstructions','Request for fruit basket','ACTIVE','2009-11-03 18:49:30','ADMIN','2009-11-03 18:49:30','ADMIN'),(41,'SpecialInstructions','Rate is CONFIDENTIAL. Do NOT divulge to guest/s.','ACTIVE','2009-11-03 18:49:30','ADMIN','2009-11-03 18:49:30','ADMIN'),(42,'HardCopy','Asst. F&B Manager','ACTIVE','2009-11-03 18:49:30','ADMIN','2009-11-03 18:49:30','ADMIN'),(43,'HardCopy','Kitchen','ACTIVE','2009-11-03 18:49:30','ADMIN','2009-11-03 18:49:30','ADMIN'),(44,'HardCopy','Amo`s Cafe','ACTIVE','2009-11-03 18:49:30','ADMIN','2009-11-03 18:49:30','ADMIN'),(45,'HardCopy','Asst. FO Manager','ACTIVE','2009-11-03 18:49:30','ADMIN','2009-11-03 18:49:30','ADMIN'),(46,'HardCopy','Concierge','ACTIVE','2009-11-03 18:49:30','ADMIN','2009-11-03 18:49:30','ADMIN'),(47,'HardCopy','Receiving','ACTIVE','2009-11-03 18:49:30','ADMIN','2009-11-03 18:49:30','ADMIN'),(48,'HardCopy','Finance (signed by Client)','ACTIVE','2009-11-03 18:49:30','ADMIN','2009-11-03 18:49:30','ADMIN'),(49,'HardCopy','Purchasing','ACTIVE','2009-11-03 18:49:30','ADMIN','2009-11-03 18:49:30','ADMIN'),(50,'HardCopy','Housekeeping & Maintenance','ACTIVE','2009-11-03 18:49:30','ADMIN','2009-11-03 18:49:30','ADMIN'),(51,'SoftCopy','I.T.','ACTIVE','2009-11-03 18:49:30','ADMIN','2009-11-03 18:49:30','ADMIN'),(52,'SoftCopy','Reservations','ACTIVE','2009-11-03 18:49:30','ADMIN','2009-11-03 18:49:30','ADMIN'),(53,'SoftCopy','Operations Manager','ACTIVE','2009-11-03 18:49:30','ADMIN','2009-11-03 18:49:30','ADMIN'),(54,'SoftCopy','Admin Assistant','ACTIVE','2009-11-03 18:49:30','ADMIN','2009-11-03 18:49:30','ADMIN'),(55,'SoftCopy','Income Auditor','ACTIVE','2009-11-03 18:49:30','ADMIN','2009-11-03 18:49:30','ADMIN'),(56,'SoftCopy','H.R.D.','ACTIVE','2009-11-03 18:49:30','ADMIN','2009-11-03 18:49:30','ADMIN');
/*!40000 ALTER TABLE `groupbookingdropdown` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `guestlistdefaults`
--

DROP TABLE IF EXISTS `guestlistdefaults`;
CREATE TABLE `guestlistdefaults` (
  `tableLineID` int(4) NOT NULL auto_increment,
  `folioStatusSelected` varchar(50) default NULL,
  `folioTypeSelected` varchar(50) default NULL,
  `availableFolioTypes` varchar(150) default NULL,
  PRIMARY KEY  (`tableLineID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `guestlistdefaults`
--

LOCK TABLES `guestlistdefaults` WRITE;
/*!40000 ALTER TABLE `guestlistdefaults` DISABLE KEYS */;
INSERT INTO `guestlistdefaults` VALUES (1,'ALL','ALL','ALL,INDIVIDUAL,GROUP,DEPENDENT,SHARE,JOINER,INDIVIDUAL + DEPENDENT + GROUP,ALL MASTER FOLIOS'),(2,'CHECKED IN','ALL MASTER FOLIOS','ALL,INDIVIDUAL,GROUP,DEPENDENT,SHARE,JOINER,INDIVIDUAL + DEPENDENT + GROUP,ALL MASTER FOLIOS'),(3,'CONFIRMED','ALL MASTER FOLIOS','ALL,INDIVIDUAL,DEPENDENT,SHARE,JOINER,INDIVIDUAL + DEPENDENT,ALL MASTER FOLIOS'),(4,'TENTATIVE','ALL MASTER FOLIOS','ALL,INDIVIDUAL,DEPENDENT,SHARE,JOINER,INDIVIDUAL + DEPENDENT,ALL MASTER FOLIOS'),(5,'WAIT LIST','ALL MASTER FOLIOS','ALL,INDIVIDUAL,DEPENDENT,SHARE,JOINER,INDIVIDUAL + DEPENDENT,ALL MASTER FOLIOS'),(6,'ALL RESERVATIONS','ALL MASTER FOLIOS','ALL,INDIVIDUAL,DEPENDENT,SHARE,JOINER,INDIVIDUAL + DEPENDENT,ALL MASTER FOLIOS'),(7,'CHECKED OUT','ALL MASTER FOLIOS','ALL,INDIVIDUAL,GROUP,DEPENDENT,SHARE,JOINER,INDIVIDUAL + DEPENDENT + GROUP,ALL MASTER FOLIOS'),(8,'NO SHOW','ALL MASTER FOLIOS','ALL,INDIVIDUAL,GROUP,DEPENDENT,SHARE,JOINER,INDIVIDUAL + DEPENDENT + GROUP,ALL MASTER FOLIOS'),(9,'CANCELLED','ALL MASTER FOLIOS','ALL,INDIVIDUAL,GROUP,DEPENDENT,SHARE,JOINER,INDIVIDUAL + DEPENDENT + GROUP,ALL MASTER FOLIOS');
/*!40000 ALTER TABLE `guestlistdefaults` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Temporary table structure for view `guestnoofvisit`
--

DROP TABLE IF EXISTS `guestnoofvisit`;
/*!50001 DROP VIEW IF EXISTS `guestnoofvisit`*/;
/*!50001 CREATE TABLE `guestnoofvisit` (
  `accountid` varchar(20),
  `total` bigint(21)
) */;

--
-- Table structure for table `guests`
--

DROP TABLE IF EXISTS `guests`;
CREATE TABLE `guests` (
  `accountid` varchar(20) NOT NULL,
  `accountname` varchar(50) default NULL,
  `title` varchar(5) default NULL,
  `lastname` varchar(50) default NULL,
  `firstname` varchar(50) default NULL,
  `middlename` varchar(50) default NULL,
  `sex` varchar(6) default NULL,
  `street` varchar(100) default NULL,
  `city` varchar(100) default NULL,
  `country` varchar(100) default NULL,
  `zip` varchar(10) default NULL,
  `emailaddress` varchar(100) default NULL,
  `citizenship` varchar(100) default 'FIL',
  `passportid` varchar(30) default NULL,
  `TelephoneNo` varchar(50) default NULL,
  `MobileNo` varchar(50) default NULL,
  `FaxNo` varchar(50) default NULL,
  `guestImage` text,
  `noofvisits` int(4) default '0',
  `memo` text,
  `concierge` text,
  `remark` text,
  `stateflag` varchar(15) NOT NULL default 'ACTIVE',
  `HOTELID` int(5) NOT NULL default '0',
  `CREATETIME` datetime default '2001-01-01 01:01:01',
  `CREATEDBY` varchar(20) default NULL,
  `UPDATETIME` datetime default '2001-01-01 01:01:01',
  `UPDATEDBY` varchar(20) default NULL,
  `BIRTH_DATE` date default '1900-01-01',
  `ACCOUNT_TYPE` varchar(50) default 'NONE',
  `CARD_NO` varchar(100) default NULL,
  `THRESHOLD_VALUE` double(12,2) default '0.00',
  `TOTAL_SALES_CONTRIBUTION` double(12,2) default '0.00',
  `creditCardType` varchar(50) default NULL,
  `creditCardNo` varchar(50) default NULL,
  `creditCardExpiry` varchar(10) NOT NULL default '2001-01-01',
  `taxExempted` tinyint(1) default '0',
  PRIMARY KEY  (`accountid`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `guests`
--

LOCK TABLES `guests` WRITE;
/*!40000 ALTER TABLE `guests` DISABLE KEYS */;
INSERT INTO `guests` VALUES ('I-0000000005','DE LA CRUZ_JUANA','','DE LA CRUZ','JUANA','','','','','PHILIPPINES','','','FILIPINO','','','','','',4,'','','','ACTIVE',1,'0001-01-01 12:00:00','ADMIN','2010-05-31 16:35:20','ADMIN','2010-05-24','EXECUTIVE','',2000.00,3000.00,'','','',0),('I-0000000006','DE LA CRUZ_JUAN','','DE LA CRUZ','JUAN','','MALE','GUADALUPE','CEBU','PHILIPPINES','6000','','FILIPINO','','253-2085','639288522223','','',6,'','','','ACTIVE',1,'2010-05-20 10:36:51','ADMIN','2010-06-26 12:53:02','ADMIN','1900-01-01','EXECUTIVE','',2000.00,9900.00,'','','',0),('I-0000000007','DE LA CERNA_JESSEL','','DE LA CERNA','JESSEL','','FEMALE','','','PHILIPPINES','','','FILIPINO','','','','','',2,'','','','ACTIVE',1,'2010-05-20 11:42:24','ADMIN','2010-05-21 15:12:18','ADMIN','1900-01-01','','',2000.00,1800.00,'','','',0),('I-0000000008','AMARILLO_PAULO','','AMARILLO','PAULO','','MALE','','','PHILIPPINES','','','FILIPINO','','','','','',2,'','','','ACTIVE',1,'2010-05-20 11:44:01','ADMIN','2010-05-26 12:11:05','ADMIN','1900-01-01','','',2000.00,1650.00,'','','',0),('I-0000000009','JACABAN_MARIA','','JACABAN','MARIA','','FEMALE','','','PHILIPPINES','','','FILIPINO','','','','','',2,'','','','ACTIVE',1,'2010-05-21 10:47:06','ADMIN','2010-05-21 15:18:52','ADMIN','1900-01-01','','',2000.00,0.00,'','','',0),('I-0000000010','ABADILLA_JAMES','','ABADILLA','JAMES','','MALE','','','PHILIPPINES','','','FILIPINO','','','','','',1,'','','','ACTIVE',1,'2010-05-21 10:50:30','ADMIN','2010-05-31 10:58:33','ADMIN','1900-01-01','','',2000.00,1650.00,'','','',0),('I-0000000011','GEMANA_MYRADEL','','GEMANA','MYRADEL','','FEMALE','','','PHILIPPINES','','','FILIPINO','','','','','',2,'','','','ACTIVE',1,'2010-05-21 11:05:15','ADMIN','2010-05-31 11:06:02','ADMIN','1900-01-01','','',2000.00,1500.00,'','','',0),('I-0000000012','DE ASIS_REBECCA','','DE ASIS','REBECCA','','FEMALE','','','PHILIPPINES','','','FILIPINO','','','','','',3,'','','','ACTIVE',1,'2010-05-21 11:06:53','ADMIN','2010-05-21 15:03:09','ADMIN','1900-01-01','EXECUTIVE','',2000.00,3000.00,'','','',0),('I-0000000013','CABRERA_RYAN','','CABRERA','RYAN','','MALE','','','PHILIPPINES','','','FILIPINO','','','','','',1,'','','','ACTIVE',1,'2010-05-22 11:21:51','ADMIN','2010-05-31 12:28:24','ADMIN','1900-01-01','','',2000.00,870.00,'','','',0),('I-0000000014','','','JACABAN','MARK','','MALE','','','PHILIPPINES','','','FILIPINO','','','','','',2,'','','','ACTIVE',1,'2010-05-31 03:06:55','ADMIN','2010-05-21 15:07:52','ADMIN','1900-01-01','WALK-IN','',2000.00,0.00,'','','2009-07-25',0),('I-0000000015','BACALSO_RYAN','','BACALSO','RYAN','','MALE','','','PHILIPPINES','','','FILIPINO','','','','','',1,'','','','ACTIVE',1,'2010-05-31 03:13:18','ADMIN','2010-05-21 15:20:33','ADMIN','1900-01-01','','',2000.00,0.00,'','','',0),('I-0000000016','YU_EDUARD','','YU','EDUARD','','MALE','','','PHILIPPINES','','','FILIPINO','','','','','',1,'','','','ACTIVE',1,'2010-05-31 04:24:28','ADMIN','2010-05-31 16:45:33','ADMIN','1900-01-01','','',2000.00,2000.00,'','','',0),('I-0000000017','CABORDO_EMMANUEL','','CABORDO','EMMANUEL','','MALE','','','PHILIPPINES','','','FILIPINO','','','','','',0,'','','','ACTIVE',1,'2010-05-31 04:26:36','ADMIN','2010-05-31 16:27:20','ADMIN','1900-01-01','','',2000.00,0.00,'','','',0),('I-0000000018','WILLIAMS_ANDY JR.','','WILLIAMS','ANDY JR.','','MALE','','','UNITED STATES OF AMERICA (USA)','','','AMERICAN','','','','','',1,'','','','ACTIVE',1,'2010-05-31 04:32:23','ADMIN','2010-05-31 16:33:33','ADMIN','1900-01-01','','',2000.00,620.00,'','','',0),('I-0000000019','GEORGE_MICHAEL','','GEORGE','MICHAEL','','MALE','','','UNITED STATES OF AMERICA (USA)','','','AMERICAN','','','','','',1,'','','','ACTIVE',1,'2010-05-31 04:34:02','ADMIN','2010-05-31 16:34:47','ADMIN','1900-01-01','','',2000.00,780.00,'','','',0),('I-0000000020','','','AMBROSIA','ROSELLE','','FEMALE','','','PHILIPPINES','','','FILIPINO','','','','','',1,'','','','ACTIVE',1,'2010-05-31 04:38:17','ADMIN','2010-05-31 16:39:16','ADMIN','1900-01-01','WALK-IN','',2000.00,0.00,'','','2009-07-25',0),('I-0000000021','CHONG_BETH','','CHONG','BETH','','FEMALE','','','CHINA','','','CHINESE','','','','','',1,'','','','ACTIVE',1,'2010-05-31 04:44:33','ADMIN','2010-05-31 16:45:17','ADMIN','1900-01-01','','',2000.00,1650.00,'','','',0),('I-0000000022','BANCAIREN_ANNALOU','','BANCAIREN','ANNALOU','','FEMALE','','','PHILIPPINES','','','FILIPINO','','','','','',1,'','','','ACTIVE',1,'2010-05-31 04:46:12','ADMIN','2010-05-31 16:47:40','ADMIN','1900-01-01','','',2000.00,1700.00,'','','',0),('I-9999999999','N/A_GUEST','MR.','N/A','GUEST','','','','','','','','FILIPINO','','','','','',0,'','','','ACTIVE',1,'2001-01-01 01:01:01','','2010-06-07 16:02:54','FRONTDESK','2001-01-01','NONE','',2000.00,0.00,'','','',0);
/*!40000 ALTER TABLE `guests` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `hk_designationareas`
--

DROP TABLE IF EXISTS `hk_designationareas`;
CREATE TABLE `hk_designationareas` (
  `id` int(10) NOT NULL auto_increment,
  `name` varchar(150) default NULL,
  `code` varchar(30) default NULL,
  `Status` varchar(10) default NULL,
  `createddate` datetime default '2001-01-01 00:00:00',
  `lastupdatedate` datetime default '2001-01-01 00:00:00',
  `lastchanged` time default '00:00:00',
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `hk_designationareas`
--

LOCK TABLES `hk_designationareas` WRITE;
/*!40000 ALTER TABLE `hk_designationareas` DISABLE KEYS */;
INSERT INTO `hk_designationareas` VALUES (1,'GUEST ROOMS','1','ACTIVE','2007-04-02 14:04:09','2007-04-02 14:04:09','09:35:57'),(2,'FUNCTION ROOMS','2','ACTIVE','2007-05-04 09:36:14','2007-05-04 09:36:14','09:36:14'),(3,'REST ROOMS','3','ACTIVE','2007-05-04 09:36:24','2007-05-04 09:36:24','09:36:24'),(4,'HALLWAYS','4','ACTIVE','2007-05-04 09:36:36','2007-05-04 09:36:36','09:36:36'),(5,'LOBBY','5','ACTIVE','2007-05-04 09:36:52','2007-05-04 09:36:52','09:36:52');
/*!40000 ALTER TABLE `hk_designationareas` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `hk_housekeepers`
--

DROP TABLE IF EXISTS `hk_housekeepers`;
CREATE TABLE `hk_housekeepers` (
  `hotelId` int(4) NOT NULL default '1',
  `housekeeperid` varchar(20) NOT NULL,
  `lastname` varchar(50) NOT NULL,
  `firstname` varchar(50) NOT NULL,
  `middlename` varchar(50) NOT NULL,
  `stateflag` varchar(10) default 'ACTIVE',
  `CREATETIME` datetime default '2001-01-01 01:01:01',
  `CREATEDBY` varchar(20) default NULL,
  `UPDATETIME` datetime default '2001-01-01 01:01:01',
  `UPDATEDBY` varchar(20) default NULL,
  `pincode` text,
  PRIMARY KEY  (`hotelId`,`housekeeperid`),
  UNIQUE KEY `housekeeperid` (`housekeeperid`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `hk_housekeepers`
--

LOCK TABLES `hk_housekeepers` WRITE;
/*!40000 ALTER TABLE `hk_housekeepers` DISABLE KEYS */;
INSERT INTO `hk_housekeepers` VALUES (1,'1','DELA CRUZ','JUAN','','ACTIVE','2010-10-13 16:25:01','FRONTDESK','2010-10-13 16:25:01','FRONTDESK','');
/*!40000 ALTER TABLE `hk_housekeepers` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `hk_housekeepingjobs`
--

DROP TABLE IF EXISTS `hk_housekeepingjobs`;
CREATE TABLE `hk_housekeepingjobs` (
  `housekeepingJobNo` int(20) NOT NULL auto_increment,
  `housekeepingDate` date default NULL,
  `housekeeperId` varchar(20) default NULL,
  `housekeepingType` enum('MAKE-UP','CLEANING','VERIFICATION') NOT NULL default 'MAKE-UP',
  `roomId` varchar(20) NOT NULL,
  `startTime` datetime default NULL,
  `endTime` datetime default NULL,
  `elapsedTime` varchar(20) default NULL,
  `remarks` varchar(100) default NULL,
  `isFinished` tinyint(1) default '0',
  `verifiedBy` varchar(50) default NULL,
  `timeVerified` datetime default NULL,
  `hotelId` int(4) NOT NULL default '1',
  `createTime` datetime default '2008-08-08 08:08:08',
  `createdBy` varchar(50) default NULL,
  `updateTime` datetime default '2008-08-08 08:08:08',
  `updatedBy` varchar(50) default NULL,
  `stateFlag` varchar(10) default 'ACTIVE',
  PRIMARY KEY  (`housekeepingJobNo`,`roomId`,`hotelId`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `hk_housekeepingjobs`
--

LOCK TABLES `hk_housekeepingjobs` WRITE;
/*!40000 ALTER TABLE `hk_housekeepingjobs` DISABLE KEYS */;
/*!40000 ALTER TABLE `hk_housekeepingjobs` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `hk_housekeepingtypes`
--

DROP TABLE IF EXISTS `hk_housekeepingtypes`;
CREATE TABLE `hk_housekeepingtypes` (
  `Id` int(10) NOT NULL auto_increment,
  `Name` varchar(30) NOT NULL default '',
  `Code` varchar(10) default '',
  `Status` varchar(10) default NULL,
  `CreatedDate` datetime default '2001-01-01 00:00:00',
  `LastUpdateDate` datetime default '2001-01-01 00:00:00',
  `Lastchanged` time default NULL,
  PRIMARY KEY  (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `hk_housekeepingtypes`
--

LOCK TABLES `hk_housekeepingtypes` WRITE;
/*!40000 ALTER TABLE `hk_housekeepingtypes` DISABLE KEYS */;
INSERT INTO `hk_housekeepingtypes` VALUES (1,'CLEANING','1','ACTIVE','2001-01-01 00:00:00','2001-01-01 00:00:00','09:33:10'),(2,'MAKE UP','2','ACTIVE','2001-01-01 00:00:00','2001-01-01 00:00:00','10:20:09'),(3,'VERIFICATION','3','ACTIVE','2007-03-02 13:30:43','2007-03-02 13:30:43','13:30:43');
/*!40000 ALTER TABLE `hk_housekeepingtypes` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `hk_minibar_category`
--

DROP TABLE IF EXISTS `hk_minibar_category`;
CREATE TABLE `hk_minibar_category` (
  `id` int(11) NOT NULL auto_increment,
  `categoryID` int(11) default NULL,
  `categoryName` varchar(200) default NULL,
  `status` enum('active','deleted') default 'active',
  `create_time` datetime default NULL,
  `created_by` varchar(30) default NULL,
  `update_time` datetime default NULL,
  `update_by` varchar(30) default NULL,
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `hk_minibar_category`
--

LOCK TABLES `hk_minibar_category` WRITE;
/*!40000 ALTER TABLE `hk_minibar_category` DISABLE KEYS */;
INSERT INTO `hk_minibar_category` VALUES (1,1,'MINIBAR ITEMS','active','2007-07-28 16:39:34','ADMIN','2007-07-28 16:39:34','ADMIN'),(2,2,'HOUSEKEEPING ITEMS','active','2007-07-28 16:39:47','ADMIN','2007-08-06 09:03:21','ADMIN'),(3,3,'LINENS','active','2007-08-06 08:18:05','ADMIN','2007-08-06 08:18:05','ADMIN');
/*!40000 ALTER TABLE `hk_minibar_category` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `hk_minibar_items`
--

DROP TABLE IF EXISTS `hk_minibar_items`;
CREATE TABLE `hk_minibar_items` (
  `id` bigint(11) NOT NULL auto_increment,
  `item_code` int(11) NOT NULL,
  `description` text,
  `unitprice` double(12,2) default NULL,
  `Category` int(11) default NULL,
  `status` enum('active','inactive') default 'active',
  `date_created` datetime default NULL,
  `created_by` varchar(30) default NULL,
  `updated_by` varchar(30) default NULL,
  `update_time` datetime default NULL,
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `hk_minibar_items`
--

LOCK TABLES `hk_minibar_items` WRITE;
/*!40000 ALTER TABLE `hk_minibar_items` DISABLE KEYS */;
/*!40000 ALTER TABLE `hk_minibar_items` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `hk_minibar_sales`
--

DROP TABLE IF EXISTS `hk_minibar_sales`;
CREATE TABLE `hk_minibar_sales` (
  `id` int(11) NOT NULL auto_increment,
  `salesdate` date NOT NULL,
  `housekeeper_id` varchar(11) NOT NULL,
  `room_id` varchar(15) default NULL,
  `amount` decimal(12,2) NOT NULL,
  `total_qty` int(3) NOT NULL,
  `voided` tinyint(1) NOT NULL default '0',
  `date_created` datetime NOT NULL,
  `created_by` varchar(30) NOT NULL,
  `updated_by` varchar(30) NOT NULL,
  `update_time` datetime NOT NULL,
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `hk_minibar_sales`
--

LOCK TABLES `hk_minibar_sales` WRITE;
/*!40000 ALTER TABLE `hk_minibar_sales` DISABLE KEYS */;
/*!40000 ALTER TABLE `hk_minibar_sales` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `hk_minibar_sales_details`
--

DROP TABLE IF EXISTS `hk_minibar_sales_details`;
CREATE TABLE `hk_minibar_sales_details` (
  `id` int(11) NOT NULL auto_increment,
  `sales_id` int(11) NOT NULL,
  `item_code` int(11) NOT NULL,
  `qty` int(3) default NULL,
  `unit_price` double(12,2) default '0.00',
  `voided` tinyint(1) default '0',
  `create_time` datetime default NULL,
  `created_by` varchar(30) default NULL,
  `update_time` datetime default NULL,
  `updated_by` varchar(30) default NULL,
  PRIMARY KEY  (`id`,`sales_id`,`item_code`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `hk_minibar_sales_details`
--

LOCK TABLES `hk_minibar_sales_details` WRITE;
/*!40000 ALTER TABLE `hk_minibar_sales_details` DISABLE KEYS */;
/*!40000 ALTER TABLE `hk_minibar_sales_details` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `hk_minibaritemcategory`
--

DROP TABLE IF EXISTS `hk_minibaritemcategory`;
CREATE TABLE `hk_minibaritemcategory` (
  `categoryId` int(11) NOT NULL auto_increment,
  `categoryName` varchar(200) default NULL,
  `statusFlag` enum('ACTIVE','DELETED') default 'ACTIVE',
  `createTime` datetime default '2008-08-08 08:08:08',
  `createdBy` varchar(30) default NULL,
  `updateTime` datetime default '2008-08-08 08:08:08',
  `updateBy` varchar(30) default NULL,
  PRIMARY KEY  (`categoryId`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `hk_minibaritemcategory`
--

LOCK TABLES `hk_minibaritemcategory` WRITE;
/*!40000 ALTER TABLE `hk_minibaritemcategory` DISABLE KEYS */;
/*!40000 ALTER TABLE `hk_minibaritemcategory` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `hk_minibaritems`
--

DROP TABLE IF EXISTS `hk_minibaritems`;
CREATE TABLE `hk_minibaritems` (
  `id` bigint(11) NOT NULL auto_increment,
  `itemCode` int(11) NOT NULL,
  `description` varchar(200) default NULL,
  `unitPrice` double(12,2) default NULL,
  `categoryId` int(11) default NULL,
  `statusFlag` varchar(20) default 'ACTIVE',
  `createdDate` datetime default '2008-08-08 08:08:08',
  `createdBy` varchar(50) default NULL,
  `updatedDate` datetime default '2008-08-08 08:08:08',
  `updatedBy` varchar(50) default NULL,
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `hk_minibaritems`
--

LOCK TABLES `hk_minibaritems` WRITE;
/*!40000 ALTER TABLE `hk_minibaritems` DISABLE KEYS */;
/*!40000 ALTER TABLE `hk_minibaritems` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `hk_minibarsales`
--

DROP TABLE IF EXISTS `hk_minibarsales`;
CREATE TABLE `hk_minibarsales` (
  `id` int(11) NOT NULL auto_increment,
  `salesdate` date NOT NULL,
  `housekeeper_id` varchar(11) NOT NULL,
  `room_id` varchar(15) default NULL,
  `amount` decimal(12,2) NOT NULL,
  `total_qty` int(3) NOT NULL,
  `voided` tinyint(1) NOT NULL default '0',
  `date_created` datetime NOT NULL default '2008-08-08 08:08:08',
  `created_by` varchar(30) NOT NULL,
  `updated_by` varchar(30) NOT NULL,
  `update_time` datetime NOT NULL default '2008-08-08 08:08:08',
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `hk_minibarsales`
--

LOCK TABLES `hk_minibarsales` WRITE;
/*!40000 ALTER TABLE `hk_minibarsales` DISABLE KEYS */;
/*!40000 ALTER TABLE `hk_minibarsales` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `hk_minibarsalesdetails`
--

DROP TABLE IF EXISTS `hk_minibarsalesdetails`;
CREATE TABLE `hk_minibarsalesdetails` (
  `id` int(11) NOT NULL auto_increment,
  `sales_id` int(11) NOT NULL,
  `item_code` int(11) NOT NULL,
  `qty` int(3) default NULL,
  `unit_price` double(12,2) default '0.00',
  `voided` tinyint(1) default '0',
  `create_time` datetime default '2008-08-08 08:08:08',
  `created_by` varchar(30) default NULL,
  `update_time` datetime default '2008-08-08 08:08:08',
  `updated_by` varchar(30) default NULL,
  PRIMARY KEY  (`id`,`sales_id`,`item_code`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `hk_minibarsalesdetails`
--

LOCK TABLES `hk_minibarsalesdetails` WRITE;
/*!40000 ALTER TABLE `hk_minibarsalesdetails` DISABLE KEYS */;
/*!40000 ALTER TABLE `hk_minibarsalesdetails` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `hk_stepprocedures`
--

DROP TABLE IF EXISTS `hk_stepprocedures`;
CREATE TABLE `hk_stepprocedures` (
  `Id` int(10) NOT NULL auto_increment,
  `Name` varchar(30) NOT NULL default '',
  `UseSoundFile` tinyint(4) NOT NULL,
  `SoundFile` varchar(255) NOT NULL default '',
  `TextToSpeak` text NOT NULL,
  `Rank` int(10) NOT NULL default '0',
  `isBefore` tinyint(4) NOT NULL,
  `maxDigit` int(10) default NULL,
  `ExpectedDigit` int(3) default NULL,
  `Status` varchar(10) default NULL,
  `CreatedDate` datetime default '2001-01-01 00:00:00',
  `LastUpdateDate` datetime default '2001-01-01 00:00:00',
  `LastChanged` time default NULL,
  PRIMARY KEY  (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `hk_stepprocedures`
--

LOCK TABLES `hk_stepprocedures` WRITE;
/*!40000 ALTER TABLE `hk_stepprocedures` DISABLE KEYS */;
/*!40000 ALTER TABLE `hk_stepprocedures` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `hotel`
--

DROP TABLE IF EXISTS `hotel`;
CREATE TABLE `hotel` (
  `HotelID` int(3) NOT NULL,
  `HotelName` varchar(100) default NULL,
  `NoOfFloors` int(5) default '0',
  `NoOfRooms` int(5) default '0',
  `checkInTime` varchar(10) default '02:00 PM',
  `checkOutTime` varchar(10) default '12:00 PM',
  `stateFlag` varchar(20) default NULL,
  `CreatedBy` varchar(20) default NULL,
  `CreateTime` datetime default '2001-01-01 01:01:01',
  `UpdatedBy` varchar(20) default NULL,
  `UpdateTime` datetime default '2001-01-01 01:01:01',
  PRIMARY KEY  (`HotelID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `hotel`
--

LOCK TABLES `hotel` WRITE;
/*!40000 ALTER TABLE `hotel` DISABLE KEYS */;
INSERT INTO `hotel` VALUES (1,'Jinisys Software Inc. Hotel',7,57,'02:00 PM','12:00 PM','ACTIVE','ADMIN','2001-01-01 01:01:01','ADMIN','2008-10-20 16:46:56');
/*!40000 ALTER TABLE `hotel` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `hotelrevenue`
--

DROP TABLE IF EXISTS `hotelrevenue`;
CREATE TABLE `hotelrevenue` (
  `transactionDate` datetime NOT NULL,
  `header1` varchar(100) default NULL,
  `header2` varchar(100) default NULL,
  `header3` varchar(100) default NULL,
  `header4` varchar(100) default NULL,
  `header5` varchar(100) default NULL,
  `header6` varchar(100) default NULL,
  `header7` varchar(100) default NULL,
  `header8` varchar(100) default NULL,
  `header9` varchar(100) default NULL,
  `header10` varchar(100) default NULL,
  `header11` varchar(100) default NULL,
  `header12` varchar(100) default NULL,
  `header13` varchar(100) default NULL,
  `header14` varchar(100) default NULL,
  `header15` varchar(100) default NULL,
  `header16` varchar(100) default NULL,
  `header17` varchar(100) default NULL,
  `header18` varchar(100) default NULL,
  `header19` varchar(100) default NULL,
  `header20` varchar(100) default NULL,
  `header21` varchar(100) default NULL,
  `header22` varchar(100) default NULL,
  `header23` varchar(100) default NULL,
  `header24` varchar(100) default NULL,
  `header25` varchar(100) default NULL,
  `header26` varchar(100) default NULL,
  `header27` varchar(100) default NULL,
  `header28` varchar(100) default NULL,
  `header29` varchar(100) default NULL,
  `header30` varchar(100) default NULL,
  `header31` varchar(100) default NULL,
  `header32` varchar(100) default NULL,
  `header33` varchar(100) default NULL,
  `header34` varchar(100) default NULL,
  `header35` varchar(100) default NULL,
  `header36` varchar(100) default NULL,
  `header37` varchar(100) default NULL,
  `header38` varchar(100) default NULL,
  `header39` varchar(100) default NULL,
  `header40` varchar(100) default NULL,
  `header41` varchar(100) default NULL,
  `header42` varchar(100) default NULL,
  `header43` varchar(100) default NULL,
  `header44` varchar(100) default NULL,
  `header45` varchar(100) default NULL,
  `header46` varchar(100) default NULL,
  `header47` varchar(100) default NULL,
  `header48` varchar(100) default NULL,
  `header49` varchar(100) default NULL,
  `header50` varchar(100) default NULL,
  `header51` varchar(100) default NULL,
  `header52` varchar(100) default NULL,
  `header53` varchar(100) default NULL,
  `header54` varchar(100) default NULL,
  `header55` varchar(100) default NULL,
  `header56` varchar(100) default NULL,
  `header57` varchar(100) default NULL,
  `header58` varchar(100) default NULL,
  `header59` varchar(100) default NULL,
  `header60` varchar(100) default NULL,
  `header61` varchar(100) default NULL,
  `header62` varchar(100) default NULL,
  `header63` varchar(100) default NULL,
  `header64` varchar(100) default NULL,
  `header65` varchar(100) default NULL,
  `header66` varchar(100) default NULL,
  `header67` varchar(100) default NULL,
  `header68` varchar(100) default NULL,
  `header69` varchar(100) default NULL,
  `header70` varchar(100) default NULL,
  `header71` varchar(100) default NULL,
  `header72` varchar(100) default NULL,
  `header73` varchar(100) default NULL,
  `header74` varchar(100) default NULL,
  `header75` varchar(100) default NULL,
  `header76` varchar(100) default NULL,
  `header77` varchar(100) default NULL,
  `header78` varchar(100) default NULL,
  `header79` varchar(100) default NULL,
  `header80` varchar(100) default NULL,
  `header81` varchar(100) default NULL,
  `header82` varchar(100) default NULL,
  `header83` varchar(100) default NULL,
  `header84` varchar(100) default NULL,
  `header85` varchar(100) default NULL,
  `header86` varchar(100) default NULL,
  `header87` varchar(100) default NULL,
  `header88` varchar(100) default NULL,
  `header89` varchar(100) default NULL,
  `header90` varchar(100) default NULL,
  `header91` varchar(100) default NULL,
  `header92` varchar(100) default NULL,
  `header93` varchar(100) default NULL,
  `header94` varchar(100) default NULL,
  `header95` varchar(100) default NULL,
  `header96` varchar(100) default NULL,
  `header97` varchar(100) default NULL,
  `header98` varchar(100) default NULL,
  `header99` varchar(100) default NULL,
  `header100` varchar(100) default NULL,
  `header101` varchar(100) default NULL,
  `header102` varchar(100) default NULL,
  `header103` varchar(100) default NULL,
  `header104` varchar(100) default NULL,
  `header105` varchar(100) default NULL,
  `header106` varchar(100) default NULL,
  `header107` varchar(100) default NULL,
  `header108` varchar(100) default NULL,
  `header109` varchar(100) default NULL,
  `header110` varchar(100) default NULL,
  `header111` varchar(100) default NULL,
  `header112` varchar(100) default NULL,
  `header113` varchar(100) default NULL,
  `header114` varchar(100) default NULL,
  `header115` varchar(100) default NULL,
  `header116` varchar(100) default NULL,
  `header117` varchar(100) default NULL,
  `header118` varchar(100) default NULL,
  `header119` varchar(100) default NULL,
  `header120` varchar(100) default NULL,
  PRIMARY KEY  (`transactionDate`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `hotelrevenue`
--

LOCK TABLES `hotelrevenue` WRITE;
/*!40000 ALTER TABLE `hotelrevenue` DISABLE KEYS */;
INSERT INTO `hotelrevenue` VALUES ('2010-10-13 00:00:00','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL);
/*!40000 ALTER TABLE `hotelrevenue` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `hotelrevenuemapping`
--

DROP TABLE IF EXISTS `hotelrevenuemapping`;
CREATE TABLE `hotelrevenuemapping` (
  `mapColumn` varchar(100) default NULL COMMENT 'column name of hotel revenue columns',
  `columnName` varchar(100) default NULL COMMENT 'the column to map in the hotel revenue',
  `columnHeader` varchar(100) default NULL COMMENT 'header of the column in the hotel revenue',
  `columnDisplay` varchar(100) default NULL COMMENT 'the text that will be displayed on the column'
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `hotelrevenuemapping`
--

LOCK TABLES `hotelrevenuemapping` WRITE;
/*!40000 ALTER TABLE `hotelrevenuemapping` DISABLE KEYS */;
INSERT INTO `hotelrevenuemapping` VALUES ('transactionDate','DATE','DATE','DATE'),('header1','ROOM SALES','SALES','ROOM SALES'),('header2','1100','SALES','TELEPHONE CHARGE'),('header3','1201','SALES','RESTAURANT'),('header4','1205','SALES','MINI-BAR'),('header5','1300','SALES','BUSINESS CENTER'),('header6','1302','SALES','CAR RENTAL'),('header7','1400','SALES','LOBBY BOOTH'),('header8','1402','SALES','MISCELLANEOUS'),('header9','1600','SALES','UTILITY'),('header10','1601','SALES','INTERNET'),('header11','1701','SALES','LAUNDRY / PRESSING'),('header12','1800','SALES','VAT TAX'),('header13','1900','SALES','SERVICE CHARGE'),('header14','TOTAL SALES','SALES','TOTAL SALES'),('header15','71000','FOC','FOC - ROOM CHARGE'),('header16','71001','FOC','FOC - EXTRA PERSON'),('header17','71002','FOC','FOC - ROOM-OTHER INCOME'),('header18','71100','FOC','FOC - TELEPHONE CHARGE'),('header19','71201','FOC','FOC - RESTAURANT'),('header20','71205','FOC','FOC - MINI-BAR'),('header21','71300','FOC','FOC - BUSINESS CENTER'),('header22','71302','FOC','FOC - CAR RENTAL'),('header23','71400','FOC','FOC - LOBBY BOOTH'),('header24','71402','FOC','FOC - MISCELLANEOUS'),('header25','71600','FOC','FOC - UTILITY'),('header26','71601','FOC','FOC - INTERNET'),('header27','71701','FOC','FOC - LAUNDRY / PRESSING'),('header28','71800','FOC','FOC - VAT TAX'),('header29','71900','FOC','FOC - SERVICE CHARGE'),('header30','TOTAL FOC','FOC','TOTAL FOC'),('header31','NET SALES','NET SALES','NET SALES'),('header32','DISCOUNT','TOTAL','DISCOUNTS'),('header33','LOCAL TAX','TOTAL','LOCAL TAX'),('header34','GOVERNMENT TAX','TOTAL','GOVERNMENT TAX'),('header35','SERVICE CHARGE','TOTAL','SERVICE CHARGE'),('header36','2000','PAYMENTS','CASH PAYMENT'),('header37','2100','PAYMENTS','CREDIT CARD'),('header38','2200','PAYMENTS','CHEQUE PAYMENT'),('header39','2800','PAYMENTS','GIFT CHEQUE'),('header40','TOTAL PAYMENTS','PAYMENTS','TOTAL PAYMENTS'),('header41','3300','PAID OUT','REFUND'),('header42','COMMISSION','PAID OUT','COMMISSION'),('header43','DISBURSEMENT','PAID OUT','DISBURSEMENT'),('header44','TOTAL PAID OUT','PAID OUT','TOTAL PAID OUT'),('header45','NET CASH','NET CASH','NET CASH'),('header46','4200','CITY LEDGER','CITY LEDGER'),('header47','1000','ROOM SALES','ROOM CHARGE'),('header48','1001','ROOM SALES','EXTRA PERSON'),('header49','1002','ROOM SALES','ROOM - OTHER INCOME'),('header50','BANQUET','RESTAURANT SALES','BANQUET'),('header51','CASH SALES','RESTAURANT SALES','CASH SALES'),('header52','DINE IN','RESTAURANT SALES','DINE IN'),('header53','OTHER SALES','RESTAURANT SALES','OTHER SALES'),('header54','OUTSIDE CATER','RESTAURANT SALES','OUTSIDE CATER'),('header55','PACKED LUNCH','RESTAURANT SALES','PACKED LUNCH'),('header56','ROOM SERVICE','RESTAURANT SALES','ROOM SERVICE'),('header57','SEMINAR','RESTAURANT SALES','SEMINAR'),('header58','USED REST MEAL COUPN','RESTAURANT SALES','USED REST MEAL COUPON'),('header59','FOC - OTHER SALES','RESTAURANT FOC','FOC - OTHER SALES'),('header60','FOC- BANQUET','RESTAURANT FOC','FOC - BANQUET'),('header61','FOC- DINE IN','RESTAURANT FOC','FOC - DINE IN'),('header62','FOC- OUTSIDE CATER','RESTAURANT FOC','FOC - OUTSIDE CATER'),('header63','FOC- PACKED LUNCH ','RESTAURANT FOC','FOC - PACKED LUNCH'),('header64','FOC- RM SERVICE','RESTAURANT FOC','FOC - RM SERVICE'),('header65','FOC- SEMINAR','RESTAURANT FOC','FOC - SEMINAR'),('header66','IDD / NDD','TELEPHONE SALES','IDD / NDD'),('header67','OPERATOR','TELEPHONE SALES','OPERATOR'),('header68','FOC - OPERATOR','TELEPHONE FOC','FOC - OPERATOR'),('header69','FOC- IDD/NDD','TELEPHONE FOC','FOC - IDD/NDD'),('header70','FUNCTIONS','FUNCTIONS','FUNCTIONS'),('header71','TOTAL OCCUPIED','OCCUPIED','OCCUPIED'),('header72','ROOMS STAY-OVER','ROOMS STAY-OVER','ROOMS STAY-OVER'),('header73','RESERVE','ARRIVALS','RESERVED'),('header74','WALK IN','ARRIVALS','WALK IN'),('header75','TOTAL ARRIVALS','ARRIVALS','TOTAL ARRIVALS'),('header76','CANCELLED','RESERVATIONS','CANCELLED'),('header77','NO SHOW','RESERVATIONS','NO SHOW'),('header78','PERSONAL','RESERVATIONS','PERSONAL'),('header79','CORPORATE','RESERVATIONS','CORPORATE'),('header80','TOTAL RESERVATIONS','RESERVATIONS','TOTAL RESERVATIONS'),('header81','WALK IN OLD','WALK IN','INDIVIDUAL(RET)'),('header82','WALK IN NEW','WALK IN','INDIVIDUAL(NEW)'),('header83','WALK IN CORPORATE','WALK IN','CORPORATE'),('header84','AVERAGEROOMRATE','AVERAGE RATES','ROOM RATE'),('header85','AVERAGEROOMRATEPERGUEST','AVERAGE RATES','RATE / GUEST');
/*!40000 ALTER TABLE `hotelrevenuemapping` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `lookuptable`
--

DROP TABLE IF EXISTS `lookuptable`;
CREATE TABLE `lookuptable` (
  `Category` varchar(20) NOT NULL,
  `Code` varchar(10) NOT NULL,
  `Description` varchar(50) default NULL,
  `HOTELID` int(5) NOT NULL,
  `CREATETIME` datetime default '2001-01-01 01:01:01',
  `CREATEDBY` varchar(20) default NULL,
  `UPDATETIME` datetime default '2001-01-01 01:01:01',
  `UPDATEDBY` varchar(20) default NULL,
  PRIMARY KEY  (`Category`,`Code`,`HOTELID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `lookuptable`
--

LOCK TABLES `lookuptable` WRITE;
/*!40000 ALTER TABLE `lookuptable` DISABLE KEYS */;
/*!40000 ALTER TABLE `lookuptable` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `meal_group`
--

DROP TABLE IF EXISTS `meal_group`;
CREATE TABLE `meal_group` (
  `groupID` bigint(10) NOT NULL auto_increment,
  `description` varchar(100) default NULL,
  `status` enum('active','deleted') default 'active',
  `hotelID` int(10) default NULL,
  `mainGroupId` varchar(20) default 'FOOD',
  `CREATEDBY` varchar(20) default NULL,
  `CREATETIME` datetime default '2008-08-08 08:08:08',
  `UPDATEDBY` varchar(20) default NULL,
  `UPDATETIME` datetime default '2008-08-08 08:08:08',
  PRIMARY KEY  (`groupID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `meal_group`
--

LOCK TABLES `meal_group` WRITE;
/*!40000 ALTER TABLE `meal_group` DISABLE KEYS */;
INSERT INTO `meal_group` VALUES (1,'BEEF','active',1,'FOOD','ADMIN','2010-10-13 14:15:11','ADMIN','2010-10-13 14:15:11'),(2,'PORK','active',1,'FOOD','ADMIN','2010-10-13 14:15:21','ADMIN','2010-10-13 14:15:21'),(3,'JUICES','active',1,'BEVERAGE','ADMIN','2010-10-13 14:15:34','ADMIN','2010-10-13 14:15:34'),(4,'DESSERT','active',1,'FOOD','ADMIN','2010-10-13 14:16:28','ADMIN','2010-10-13 14:16:28');
/*!40000 ALTER TABLE `meal_group` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `meal_items`
--

DROP TABLE IF EXISTS `meal_items`;
CREATE TABLE `meal_items` (
  `itemID` varchar(30) NOT NULL,
  `description` varchar(100) default NULL,
  `groupID` bigint(10) default NULL,
  `unit` varchar(25) default NULL,
  `unit_cost` double(12,2) default NULL,
  `selling_price` double(12,2) default NULL,
  `vat` double(12,2) default NULL,
  `service_charge` double(12,2) default NULL,
  `status` enum('active','deleted') default 'active',
  `hotelID` int(10) default NULL,
  `CREATEDBY` varchar(20) default NULL,
  `CREATETIME` datetime default NULL,
  `UPDATEDBY` varchar(20) default NULL,
  `UPDATETIME` datetime default NULL,
  PRIMARY KEY  (`itemID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `meal_items`
--

LOCK TABLES `meal_items` WRITE;
/*!40000 ALTER TABLE `meal_items` DISABLE KEYS */;
INSERT INTO `meal_items` VALUES ('101','CORNED BEEF',1,'PLATE',120.00,120.00,12.00,0.00,'active',1,'ADMIN','2010-10-13 14:17:49','ADMIN','2010-10-13 14:17:49'),('102','BEEF CALDERETA',1,'BOWL',150.00,150.00,12.00,0.00,'active',1,'ADMIN','2010-10-13 14:19:00','ADMIN','2010-10-13 14:19:00'),('103','BULALO',1,'BOWL',80.00,80.00,0.00,0.00,'active',1,'ADMIN','2010-10-13 14:19:24','ADMIN','2010-10-13 14:19:24'),('104','GRILLED STEAK',2,'PCS',60.00,60.00,0.00,0.00,'active',1,'ADMIN','2010-10-13 14:20:08','ADMIN','2010-10-13 14:20:08'),('105','SWEET AND SOUR',2,'PLATE',100.00,100.00,0.00,0.00,'active',1,'ADMIN','2010-10-13 14:20:46','ADMIN','2010-10-13 14:20:46'),('106','PORK SIOMAI',2,'PLATE',50.00,50.00,0.00,0.00,'active',1,'ADMIN','2010-10-13 14:21:15','ADMIN','2010-10-13 14:21:15'),('107','ORANGE',3,'GLS',40.00,40.00,0.00,0.00,'active',1,'ADMIN','2010-10-13 14:21:40','ADMIN','2010-10-13 14:21:40'),('108','APPLE JUICE',3,'GLASS',35.00,35.00,0.00,0.00,'active',1,'ADMIN','2010-10-13 14:22:04','ADMIN','2010-10-13 14:22:04'),('109','ICE CREAM',4,'GLS',30.00,30.00,0.00,0.00,'active',1,'ADMIN','2010-10-13 14:23:12','ADMIN','2010-10-13 14:23:12'),('110','FOUR SEASONS',3,'GLS',80.00,80.00,0.00,0.00,'active',1,'ADMIN','2010-10-13 14:22:41','ADMIN','2010-10-13 14:22:41'),('111','HALO HALO',4,'GLS',55.00,55.00,0.00,0.00,'active',1,'ADMIN','2010-10-13 14:23:35','ADMIN','2010-10-13 14:23:35'),('112','FRUIT SALAD',4,'BOWL',110.00,110.00,0.00,0.00,'active',1,'ADMIN','2010-10-13 14:23:59','ADMIN','2010-10-13 14:23:59');
/*!40000 ALTER TABLE `meal_items` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `meal_menu`
--

DROP TABLE IF EXISTS `meal_menu`;
CREATE TABLE `meal_menu` (
  `menuID` bigint(10) NOT NULL auto_increment,
  `description` text,
  `price` double(12,2) default NULL,
  `vat` double(12,2) default NULL,
  `service_charge` double(12,2) default NULL,
  `status` enum('active','deleted') default 'active',
  `hotel_id` int(10) default NULL,
  `CREATEDBY` varchar(20) default NULL,
  `CREATETIME` datetime default NULL,
  `UPDATEDBY` varchar(20) default NULL,
  `UPDATETIME` datetime default NULL,
  PRIMARY KEY  (`menuID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `meal_menu`
--

LOCK TABLES `meal_menu` WRITE;
/*!40000 ALTER TABLE `meal_menu` DISABLE KEYS */;
INSERT INTO `meal_menu` VALUES (1,'COMBO 1',250.00,0.00,0.00,'active',1,'ADMIN','2010-10-13 14:25:20','ADMIN','2010-10-13 14:25:20'),(2,'COMBO 2',260.00,0.00,0.00,'active',1,'ADMIN','2010-10-13 14:25:50','ADMIN','2010-10-13 14:25:50');
/*!40000 ALTER TABLE `meal_menu` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `meal_menu_detail`
--

DROP TABLE IF EXISTS `meal_menu_detail`;
CREATE TABLE `meal_menu_detail` (
  `id` int(10) NOT NULL auto_increment,
  `menuID` varchar(50) NOT NULL,
  `itemID` varchar(50) NOT NULL,
  `quantity` double(10,2) default NULL,
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `meal_menu_detail`
--

LOCK TABLES `meal_menu_detail` WRITE;
/*!40000 ALTER TABLE `meal_menu_detail` DISABLE KEYS */;
INSERT INTO `meal_menu_detail` VALUES (1,'1','104',0.00),(2,'1','108',0.00),(3,'1','111',0.00),(4,'2','102',0.00),(5,'2','110',0.00),(6,'2','112',0.00);
/*!40000 ALTER TABLE `meal_menu_detail` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `menus`
--

DROP TABLE IF EXISTS `menus`;
CREATE TABLE `menus` (
  `Menu` varchar(30) NOT NULL,
  `Description` varchar(100) default NULL,
  PRIMARY KEY  (`Menu`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `menus`
--

LOCK TABLES `menus` WRITE;
/*!40000 ALTER TABLE `menus` DISABLE KEYS */;
INSERT INTO `menus` VALUES ('About',''),('Advance Deposit',''),('Agent',''),('All',''),('Arrange Icon',''),('Arrivals',''),('Cascade',''),('Clear',''),('Close',''),('Configuration',''),('Copy',''),('Currency Codes',''),('Cut',''),('Database Backup',''),('Delete',''),('Departure',''),('Edit',''),('Exit',''),('Expected Arrivals',''),('Expected Departure',''),('File',''),('Find',''),('Floor Occupancy',''),('Floor Plan',''),('Front Desk',''),('Group',''),('Group Blocking',''),('Group Reservation',''),('Guest',''),('Guests Report',''),('Help',''),('Horizontally',''),('Housekeeping Jobs',''),('In House Guests List',''),('Index',''),('Individual',''),('Log-Off',''),('Mail Recipient',''),('New',''),('Open',''),('Packages',''),('Page Setup',''),('Paste',''),('Print',''),('Print Preview',''),('Privileges',''),('Projected Revenue',''),('Rate Codes',''),('Rate Types',''),('Repeat',''),('Replace',''),('Report Generator',''),('Reports',''),('Reservation',''),('Room',''),('Room Amenities',''),('Room Availability',''),('Room Blocking',''),('Room Status',''),('Room Transfer',''),('Room Types',''),('Rooms',''),('Rooms Blocked by Date',''),('Rooms Report',''),('Sales Summary',''),('Save',''),('Scheduled For Engineering Job',''),('Search',''),('Send To',''),('Share',''),('Single Reservation',''),('Tile',''),('Transaction Codes',''),('Transaction Types',''),('Transactions',''),('Undo',''),('Utilities',''),('Vertically',''),('View Web Cam',''),('Window','');
/*!40000 ALTER TABLE `menus` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `nonguesttransaction`
--

DROP TABLE IF EXISTS `nonguesttransaction`;
CREATE TABLE `nonguesttransaction` (
  `transactionId` bigint(20) NOT NULL auto_increment,
  `hotelID` int(5) NOT NULL,
  `postingDate` datetime NOT NULL default '2008-01-01 01:01:01',
  `transactionDate` date NOT NULL default '2008-01-01',
  `transactionCode` varchar(20) NOT NULL,
  `subAccount` varchar(100) default NULL,
  `referenceNo` varchar(100) default NULL,
  `transactionSource` varchar(20) default NULL,
  `memo` varchar(500) default NULL,
  `acctSide` varchar(10) default NULL,
  `currencyCode` varchar(10) default NULL,
  `conversionRate` decimal(12,4) default NULL,
  `currencyAmount` decimal(12,2) default NULL,
  `baseAmount` decimal(12,2) default NULL,
  `grossAmount` decimal(12,2) default NULL,
  `discount` decimal(12,2) default NULL,
  `serviceCharge` decimal(12,2) default NULL,
  `serviceChargeInclusive` tinyint(1) default '1',
  `governmentTax` decimal(12,2) default NULL,
  `governmentTaxInclusive` tinyint(1) default '1',
  `localTax` decimal(12,2) default NULL,
  `localTaxInclusive` tinyint(1) default '1',
  `netBaseAmount` decimal(12,2) default NULL,
  `netAmount` decimal(12,2) default '0.00',
  `referenceFolioId` varchar(20) default 'FILLER',
  `roomNumber` varchar(20) default 'FILLER',
  `accountId` varchar(20) default 'FILLER',
  `guestName` varchar(200) default 'FILLER',
  `companyName` varchar(20) default 'FILLER',
  `arrivalDate` datetime NOT NULL default '2008-01-01 00:01:01',
  `departureDate` datetime NOT NULL default '2008-01-01 00:01:01',
  `referenceDriverId` varchar(20) default NULL,
  `carCompany` varchar(100) default NULL,
  `makeModel` varchar(100) default NULL,
  `plateNumber` varchar(10) default NULL,
  `creditCardNo` varchar(20) default NULL,
  `chequeNo` varchar(20) default NULL,
  `accountName` varchar(100) default NULL,
  `bankName` varchar(100) default NULL,
  `chequeDate` date default '1900-01-01',
  `FOCGrantedBy` varchar(100) default NULL,
  `creditCardType` varchar(20) default NULL,
  `approvalSlip` varchar(20) default NULL,
  `creditCardExpiry` datetime default '2008-08-08 00:01:01',
  `terminalID` varchar(10) default NULL,
  `shiftCode` varchar(10) default NULL,
  `statusFlag` varchar(10) default NULL,
  `postedToLedger` char(1) default '1',
  `auditFlag` char(1) default '0',
  `createdDate` datetime default '2001-01-01 01:01:01',
  `createdBy` varchar(20) default NULL,
  `updatedDate` datetime default '2001-01-01 01:01:01',
  `updatedBy` varchar(20) default NULL,
  PRIMARY KEY  (`transactionId`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `nonguesttransaction`
--

LOCK TABLES `nonguesttransaction` WRITE;
/*!40000 ALTER TABLE `nonguesttransaction` DISABLE KEYS */;
/*!40000 ALTER TABLE `nonguesttransaction` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `packagedetails`
--

DROP TABLE IF EXISTS `packagedetails`;
CREATE TABLE `packagedetails` (
  `PackageID` varchar(20) NOT NULL,
  `TransactionCode` varchar(20) NOT NULL,
  `Basis` varchar(1) default NULL,
  `PercentOff` decimal(5,2) default '0.00',
  `AmountOff` decimal(12,2) default '0.00',
  `stateFlag` varchar(20) default NULL,
  `HotelID` int(5) NOT NULL,
  `CreateTime` datetime default '2001-01-01 01:01:01',
  `CreatedBy` varchar(20) default NULL,
  `Updatedby` varchar(20) default NULL,
  `UpdateTime` datetime default '2001-01-01 01:01:01',
  PRIMARY KEY  (`PackageID`,`TransactionCode`,`HotelID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `packagedetails`
--

LOCK TABLES `packagedetails` WRITE;
/*!40000 ALTER TABLE `packagedetails` DISABLE KEYS */;
INSERT INTO `packagedetails` VALUES ('CHRISTMAS PROMO','1201','P','20.00','0.00','ACTIVE',1,'2010-10-13 14:44:30','ADMIN','ADMIN','2010-10-13 14:44:30'),('SUMMER PROMO','1000','P','20.00','0.00','ACTIVE',1,'2010-10-13 14:43:15','ADMIN','ADMIN','2010-10-13 14:43:15');
/*!40000 ALTER TABLE `packagedetails` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `packageheader`
--

DROP TABLE IF EXISTS `packageheader`;
CREATE TABLE `packageheader` (
  `PackageID` varchar(20) NOT NULL,
  `Description` varchar(100) default NULL,
  `FromDate` datetime default '2001-01-01 01:01:01',
  `ToDate` datetime default '2001-01-01 01:01:01',
  `DaysApplied` varchar(50) default NULL,
  `stateFlag` varchar(20) default NULL,
  `HotelID` int(5) NOT NULL,
  `CreatedBy` varchar(20) default NULL,
  `CreateTime` datetime default '2001-01-01 01:01:01',
  `UpdatedBy` varchar(20) default NULL,
  `updateTime` datetime default '2001-01-01 01:01:01',
  PRIMARY KEY  (`PackageID`,`HotelID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `packageheader`
--

LOCK TABLES `packageheader` WRITE;
/*!40000 ALTER TABLE `packageheader` DISABLE KEYS */;
INSERT INTO `packageheader` VALUES ('CHRISTMAS PROMO','CHRISTMAS PROMO','2010-12-01 02:43:17','2010-12-31 02:43:17','1','ACTIVE',1,'ADMIN','2010-10-13 14:44:30','ADMIN','2010-10-13 14:44:30'),('SUMMER PROMO','SUMMER PROMO','2010-01-01 12:00:00','2010-06-30 12:00:00','1','ACTIVE',1,'ADMIN','2001-01-01 01:01:01','ADMIN','2010-10-13 14:43:15');
/*!40000 ALTER TABLE `packageheader` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `paymentledger`
--

DROP TABLE IF EXISTS `paymentledger`;
CREATE TABLE `paymentledger` (
  `id` int(11) NOT NULL auto_increment,
  `acctid` varchar(20) NOT NULL,
  `date` date default NULL,
  `refno` varchar(100) default NULL,
  `memo` text,
  `amountPaid` decimal(12,2) default NULL,
  `withHoldingTax` decimal(12,2) default NULL,
  `debit` decimal(9,2) default '0.00',
  `credit` decimal(9,2) default '0.00',
  `reffolio` varchar(20) default NULL,
  `subfolio` varchar(1) default NULL,
  `HOTELID` int(5) NOT NULL,
  `CREATETIME` datetime default '2001-01-01 01:01:01',
  `CREATEDBY` varchar(20) default NULL,
  `UPDATETIME` datetime default '2001-01-01 01:01:01',
  `UPDATEDBY` varchar(20) default NULL,
  `posttoacctng` varchar(1) default '0',
  `closed` varchar(1) default '0',
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `paymentledger`
--

LOCK TABLES `paymentledger` WRITE;
/*!40000 ALTER TABLE `paymentledger` DISABLE KEYS */;
/*!40000 ALTER TABLE `paymentledger` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `phonetransactions`
--

DROP TABLE IF EXISTS `phonetransactions`;
CREATE TABLE `phonetransactions` (
  `Id` int(11) NOT NULL auto_increment,
  `Name` varchar(30) NOT NULL default '',
  `FloorLevelId` int(10) NOT NULL,
  `DesignationArea` int(10) default NULL,
  `RoomID` varchar(10) default NULL,
  `HouseKeepingCodeId` int(10) default NULL,
  `PersonnelCodeId` int(11) default NULL,
  `StartTime` time default '00:00:00',
  `EndTime` time default '00:00:00',
  `Duration` time default '00:00:00',
  PRIMARY KEY  (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `phonetransactions`
--

LOCK TABLES `phonetransactions` WRITE;
/*!40000 ALTER TABLE `phonetransactions` DISABLE KEYS */;
/*!40000 ALTER TABLE `phonetransactions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `privilegedetails`
--

DROP TABLE IF EXISTS `privilegedetails`;
CREATE TABLE `privilegedetails` (
  `PrivilegeID` varchar(100) NOT NULL,
  `TransactionCode` varchar(20) default NULL,
  `Basis` varchar(1) default NULL,
  `PercentOff` decimal(5,2) default NULL,
  `AmountOff` decimal(12,2) default NULL,
  `stateFlag` varchar(20) default NULL,
  `HotelID` int(4) default NULL,
  `CreateTime` datetime default '2001-01-01 01:01:01',
  `CreatedBy` varchar(20) default NULL,
  `UpdateTime` datetime default '2001-01-01 01:01:01',
  `UpdatedBy` varchar(20) default NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `privilegedetails`
--

LOCK TABLES `privilegedetails` WRITE;
/*!40000 ALTER TABLE `privilegedetails` DISABLE KEYS */;
INSERT INTO `privilegedetails` VALUES ('CORPORATE REGULAR','1000','P','50.00','0.00','ACTIVE',1,'2010-05-24 18:04:10','ADMIN','2010-05-24 18:04:10','ADMIN'),('REGULAR GUEST','1000','P','50.00','0.00','ACTIVE',1,'2010-05-26 18:07:20','ADMIN','2010-05-26 18:07:20','ADMIN');
/*!40000 ALTER TABLE `privilegedetails` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `privilegeheader`
--

DROP TABLE IF EXISTS `privilegeheader`;
CREATE TABLE `privilegeheader` (
  `PrivilegeID` varchar(100) NOT NULL,
  `Description` varchar(500) default NULL,
  `FromDate` datetime default '2001-01-01 01:01:01',
  `ToDate` datetime default '2001-01-01 01:01:01',
  `DaysApplied` varchar(50) default NULL,
  `stateFlag` varchar(20) default NULL,
  `HotelID` int(5) default NULL,
  `CreatedBy` varchar(20) default NULL,
  `CreateTime` datetime default '2001-01-01 01:01:01',
  `UpdatedBy` varchar(20) default NULL,
  `UpdateTime` datetime default '2001-01-01 01:01:01',
  PRIMARY KEY  (`PrivilegeID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `privilegeheader`
--

LOCK TABLES `privilegeheader` WRITE;
/*!40000 ALTER TABLE `privilegeheader` DISABLE KEYS */;
INSERT INTO `privilegeheader` VALUES ('REGULAR GUEST','REGULAR GUEST','2010-05-27 03:01:03','2010-05-27 03:01:03','1','ACTIVE',1,'FRONTDESK','2010-05-27 15:10:40','FRONTDESK','2010-05-27 15:10:40');
/*!40000 ALTER TABLE `privilegeheader` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ratecodes`
--

DROP TABLE IF EXISTS `ratecodes`;
CREATE TABLE `ratecodes` (
  `ratecode` varchar(50) NOT NULL,
  `description` varchar(100) NOT NULL,
  `stateflag` varchar(10) default 'ACTIVE',
  `HOTELID` int(5) NOT NULL,
  `CREATETIME` datetime default '2001-01-01 01:01:01',
  `CREATEDBY` varchar(20) default NULL,
  `UPDATETIME` datetime default '2001-01-01 01:01:01',
  `UPDATEDBY` varchar(20) default NULL,
  PRIMARY KEY  (`ratecode`,`HOTELID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `ratecodes`
--

LOCK TABLES `ratecodes` WRITE;
/*!40000 ALTER TABLE `ratecodes` DISABLE KEYS */;
INSERT INTO `ratecodes` VALUES ('CORP DBL','CORPATE DOUBLE RATE','ACTIVE',1,'2010-05-20 16:24:04','ADMIN','2010-05-20 16:24:04','ADMIN'),('CORP SGL','CORPORATE SINGLE RATE','ACTIVE',1,'2010-05-20 16:23:47','ADMIN','2010-05-20 16:24:10','ADMIN'),('PROMO DBL','PROMO DOUBLE RATE','ACTIVE',1,'2010-05-20 16:24:32','ADMIN','2010-05-20 16:24:32','ADMIN'),('PROMO SGL','PROMO SINGLE RATE','ACTIVE',1,'2010-05-20 16:24:22','ADMIN','2010-05-20 16:24:22','ADMIN'),('PUBLISH DBL','PUBLISH DOUBLE RATE','ACTIVE',1,'2010-05-20 16:23:36','ADMIN','2010-05-20 16:23:36','ADMIN'),('PUBLISH SGL','PUBLISH SINGLE RATE','ACTIVE',1,'2010-05-20 16:23:20','ADMIN','2010-05-20 16:23:20','ADMIN');
/*!40000 ALTER TABLE `ratecodes` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ratetypes`
--

DROP TABLE IF EXISTS `ratetypes`;
CREATE TABLE `ratetypes` (
  `roomtypecode` varchar(50) NOT NULL,
  `ratecode` varchar(50) NOT NULL,
  `rateamount` decimal(12,2) default NULL,
  `hasBreakfast` varchar(1) default 'N',
  `breakfastAmount` double(12,2) default '0.00',
  `hotelId` int(5) NOT NULL,
  `createTime` datetime default '2001-01-01 01:01:01',
  `createdBy` varchar(20) default NULL,
  `updateTime` datetime default '2001-01-01 01:01:01',
  `updatedBy` varchar(20) default NULL,
  `statusFlag` varchar(20) default 'ACTIVE',
  PRIMARY KEY  (`roomtypecode`,`ratecode`,`hotelId`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `ratetypes`
--

LOCK TABLES `ratetypes` WRITE;
/*!40000 ALTER TABLE `ratetypes` DISABLE KEYS */;
INSERT INTO `ratetypes` VALUES ('DELUXE','CORP DBL','1300.00','Y',150.00,1,'2010-05-20 16:24:48','ADMIN','2010-05-20 16:31:43','ADMIN','ACTIVE'),('DELUXE','CORP SGL','1100.00','Y',150.00,1,'2010-05-20 16:25:00','ADMIN','2010-05-20 16:32:16','ADMIN','ACTIVE'),('DELUXE','PROMO DBL','890.00','N',0.00,1,'2010-05-20 16:25:26','ADMIN','2010-05-20 16:32:55','ADMIN','ACTIVE'),('DELUXE','PROMO SGL','790.00','N',0.00,1,'2010-05-20 16:25:41','ADMIN','2010-05-20 16:33:22','ADMIN','ACTIVE'),('DELUXE','PUBLISH DBL','1600.00','Y',150.00,1,'2010-05-20 16:26:35','ADMIN','2010-05-20 16:30:26','ADMIN','ACTIVE'),('DELUXE','PUBLISH SGL','1650.00','Y',150.00,1,'2010-05-20 16:26:47','ADMIN','2010-05-20 16:26:47','ADMIN','ACTIVE'),('MATRIMONIAL','CORP DBL','1400.00','Y',150.00,1,'2010-05-20 16:24:48','ADMIN','2010-05-20 16:31:49','ADMIN','ACTIVE'),('MATRIMONIAL','CORP SGL','1200.00','Y',150.00,1,'2010-05-20 16:25:00','ADMIN','2010-05-20 16:32:32','ADMIN','ACTIVE'),('MATRIMONIAL','PROMO DBL','990.00','N',0.00,1,'2010-05-20 16:25:26','ADMIN','2010-05-20 16:33:03','ADMIN','ACTIVE'),('MATRIMONIAL','PROMO SGL','890.00','N',0.00,1,'2010-05-20 16:25:41','ADMIN','2010-05-20 16:33:17','ADMIN','ACTIVE'),('MATRIMONIAL','PUBLISH DBL','1700.00','Y',150.00,1,'2010-05-20 16:26:35','ADMIN','2010-05-20 16:30:37','ADMIN','ACTIVE'),('MATRIMONIAL','PUBLISH SGL','1550.00','Y',150.00,1,'2010-05-20 16:26:47','ADMIN','2010-05-20 16:30:58','ADMIN','ACTIVE'),('STANDARD','CORP DBL','1200.00','Y',150.00,1,'2010-05-20 16:24:48','ADMIN','2010-05-20 16:31:30','ADMIN','ACTIVE'),('STANDARD','CORP SGL','1000.00','Y',150.00,1,'2010-05-20 16:25:00','ADMIN','2010-05-20 16:32:24','ADMIN','ACTIVE'),('STANDARD','PROMO DBL','790.00','N',0.00,1,'2010-05-20 16:25:26','ADMIN','2010-05-20 16:32:44','ADMIN','ACTIVE'),('STANDARD','PROMO SGL','690.00','N',0.00,1,'2010-05-20 16:25:41','ADMIN','2010-05-20 16:33:27','ADMIN','ACTIVE'),('STANDARD','PUBLISH DBL','1500.00','Y',150.00,1,'2010-05-20 16:26:35','ADMIN','2010-05-20 16:30:14','ADMIN','ACTIVE'),('STANDARD','PUBLISH SGL','1350.00','Y',150.00,1,'2010-05-20 16:26:47','ADMIN','2010-05-20 16:31:11','ADMIN','ACTIVE'),('SUPERIOR','CORP DBL','1500.00','Y',150.00,1,'2010-05-20 16:24:48','ADMIN','2010-05-20 16:24:48','ADMIN','ACTIVE'),('SUPERIOR','CORP SGL','1300.00','Y',150.00,1,'2010-05-20 16:25:00','ADMIN','2010-05-20 16:25:00','ADMIN','ACTIVE'),('SUPERIOR','PROMO DBL','1090.00','N',0.00,1,'2010-05-20 16:25:26','ADMIN','2010-05-20 16:25:47','ADMIN','ACTIVE'),('SUPERIOR','PROMO SGL','990.00','N',0.00,1,'2010-05-20 16:25:41','ADMIN','2010-05-20 16:25:51','ADMIN','ACTIVE'),('SUPERIOR','PUBLISH DBL','1800.00','Y',150.00,1,'2010-05-20 16:26:35','ADMIN','2010-05-20 16:26:35','ADMIN','ACTIVE'),('SUPERIOR','PUBLISH SGL','1450.00','Y',150.00,1,'2010-05-20 16:26:47','ADMIN','2010-05-20 16:31:22','ADMIN','ACTIVE');
/*!40000 ALTER TABLE `ratetypes` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `referencetime`
--

DROP TABLE IF EXISTS `referencetime`;
CREATE TABLE `referencetime` (
  `min` int(3) NOT NULL,
  `max` int(3) NOT NULL,
  `reftime` varchar(20) default NULL,
  PRIMARY KEY  (`min`,`max`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `referencetime`
--

LOCK TABLES `referencetime` WRITE;
/*!40000 ALTER TABLE `referencetime` DISABLE KEYS */;
INSERT INTO `referencetime` VALUES (3,5,'11:59:59 PM');
/*!40000 ALTER TABLE `referencetime` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `requirement_details`
--

DROP TABLE IF EXISTS `requirement_details`;
CREATE TABLE `requirement_details` (
  `requirementID` bigint(20) default NULL,
  `description` text,
  `CREATETIME` datetime default NULL,
  `CREATEDBY` varchar(20) default NULL,
  `UPDATETIME` datetime default NULL,
  `UPDATEDBY` varchar(20) default NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `requirement_details`
--

LOCK TABLES `requirement_details` WRITE;
/*!40000 ALTER TABLE `requirement_details` DISABLE KEYS */;
INSERT INTO `requirement_details` VALUES (5,'PAPER AND PENCIL','2009-11-06 13:30:58','admin','2009-11-06 13:30:58','admin'),(5,'EASEL STAND WITH PAPERS','2009-11-06 13:30:59','admin','2009-11-06 13:30:59','admin'),(5,'WHITEBOARD WITH MARKER','2009-11-06 13:30:59','admin','2009-11-06 13:30:59','admin'),(5,'MINTS AND CANDIES','2009-11-06 13:30:59','admin','2009-11-06 13:30:59','admin'),(5,'FLOWING COFFEE','2009-11-06 13:30:59','admin','2009-11-06 13:30:59','admin'),(5,'WHITE SCREEN','2009-11-06 13:30:59','admin','2009-11-06 13:30:59','admin'),(5,'WIFI ACCESS','2009-11-06 13:30:59','admin','2009-11-06 13:30:59','admin'),(3,'FLORAL AND CANDLELIGHT DECORATION ON DINING TABLES','2009-11-06 13:34:44','admin','2009-11-06 13:34:44','admin'),(3,'FLORAL AND CANDLELIGHT DECORATION ON BUFFET TABLE','2009-11-06 13:34:44','admin','2009-11-06 13:34:44','admin'),(3,'FLORAL DECORATION FOR PRESIDENTIAL AND DINING TABLES','2009-11-06 13:34:44','admin','2009-11-06 13:34:44','admin'),(2,'ONE LAYER BIRTHDAY CAKE','2009-11-06 13:36:38','admin','2009-11-06 13:36:38','admin'),(2,'12 PIECES BALLOON WITH INSCRIPTION IN COLOR MOTIF','2009-11-06 13:36:38','admin','2009-11-06 13:36:38','admin'),(2,'STYRO BACKDROP WITH DEBUTANTE`S NAME AND \"18 YEARS OLD\" INSCRIPTION IN COLOR MOTIF','2009-11-06 13:36:38','admin','2009-11-06 13:36:38','admin'),(2,'GUEST BOOK WITH PEN','2009-11-06 13:36:38','admin','2009-11-06 13:36:38','admin'),(2,'TABLE FOR GIFTS','2009-11-06 13:36:38','admin','2009-11-06 13:36:38','admin'),(2,'WAIVED CORKAGE FEE FOR ONE (1) LECHON','2009-11-06 13:36:38','admin','2009-11-06 13:36:38','admin'),(2,'WAIVED CORKAGE FEE FOR ONE (1) BOTTLE OF WINE','2009-11-06 13:36:38','admin','2009-11-06 13:36:38','admin'),(2,'FOOD TASTING FOR TWO (2) PERSONS','2009-11-06 13:36:38','admin','2009-11-06 13:36:38','admin'),(2,'FREE USE OF FUNCTION ROOM FOR SIX (6) HOURS','2009-11-06 13:36:38','admin','2009-11-06 13:36:38','admin'),(2,'USE OF THE FUNCTION ROOM FOR FIVE (5) HOURS','2009-11-06 13:36:38','admin','2009-11-06 13:36:38','admin'),(2,'USE OF THE BRIDAL CAR WITH DRIVER FOR A MAXIMUM OF THREE (3) HOURS (WITHIN MANDAUE AND CEBU CITIES)','2009-11-06 13:36:38','admin','2009-11-06 13:36:38','admin'),(2,'PAIR OF DOVES','2009-11-06 13:36:38','admin','2009-11-06 13:36:38','admin'),(2,'DOVE CAGE WITH FLORAL ACCENT','2009-11-06 13:36:38','admin','2009-11-06 13:36:38','admin'),(2,'A BOTTLE OF WINE FOR TOASTING','2009-11-06 13:36:38','admin','2009-11-06 13:36:38','admin'),(2,'GAMES : PABITIN','2009-11-06 13:36:38','admin','2009-11-06 13:36:38','admin'),(2,'WAIVED ELECTRICITY CHARGE FOR PHOTO AND/OR VIDEO COVERAGE','2009-11-06 13:36:38','admin','2009-11-06 13:36:38','admin'),(6,'FOOD CART WITH ELECTRICAL POWER -- CORKAGE FEE OF  P 1,000','2009-11-06 13:39:17','admin','2009-11-06 13:39:17','admin'),(6,'FOOD CART WITHOUT ELECTRICAL POWER -- CORKAGE FEE OF  P 500','2009-11-06 13:39:17','admin','2009-11-06 13:39:17','admin'),(6,'PARTY RENTAL EQUIPMENT WITHOUT ELECTRICAL POWER -- CORKAGE FEE OF  P 300','2009-11-06 13:39:17','admin','2009-11-06 13:39:17','admin'),(6,'PARTY RENTAL EQUIPMENT WITH ELECTRICAL POWER -- CORKAGE FEE OF  P 500','2009-11-06 13:39:18','admin','2009-11-06 13:39:18','admin'),(7,'CLOWN HOST  --  P 900','2009-11-06 13:39:57','admin','2009-11-06 13:39:57','admin'),(7,'MAGIC HOST  --  P 1,800','2009-11-06 13:39:57','admin','2009-11-06 13:39:57','admin'),(1,'PA SYSTEM WITH TWO (2) MICROPHONES','2009-11-11 10:32:33','admin','2009-11-11 10:32:33','admin'),(1,'STAGE WITH BACKLIGHT','2009-11-11 10:32:33','admin','2009-11-11 10:32:33','admin'),(1,'CD MUSIC FOR DANCING','2009-11-11 10:32:33','admin','2009-11-11 10:32:33','admin'),(1,'LCD PROJECTOR WITH WHITE SCREEN','2009-11-11 10:32:33','admin','2009-11-11 10:32:33','admin'),(1,'CHRISTMAS TREE WITH LIGHTS','2009-11-11 10:32:33','admin','2009-11-11 10:32:33','admin'),(1,'TWO (2) SPOTLIGHTS ON STAGE','2009-11-11 10:32:33','admin','2009-11-11 10:32:33','admin'),(1,'KARAOKE SYSTEM','2009-11-11 10:32:33','admin','2009-11-11 10:32:33','admin'),(1,'LCD PROJECTOR','2009-11-11 10:32:33','admin','2009-11-11 10:32:33','admin'),(4,'OVERNIGHT STAY IN A STANDARD ROOM WITH BREAKFAST FOR TWO (2) PERSONS','2010-07-02 17:47:06','ROOT','2010-07-02 17:47:06','ROOT'),(4,'OVERNIGHT STAY IN A SUPERIOR WITH BREAKFAST FOR TWO (2) PERSONS','2010-07-02 17:47:06','ROOT','2010-07-02 17:47:06','ROOT');
/*!40000 ALTER TABLE `requirement_details` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `requirement_header`
--

DROP TABLE IF EXISTS `requirement_header`;
CREATE TABLE `requirement_header` (
  `requirementID` bigint(20) NOT NULL auto_increment,
  `requirementDescription` text NOT NULL,
  `transactionCode` varchar(20) default NULL,
  `hotelID` bigint(20) default NULL,
  `status` varchar(20) default NULL,
  `CREATETIME` datetime default NULL,
  `CREATEDBY` varchar(20) default NULL,
  `UPDATETIME` datetime default NULL,
  `UPDATEDBY` varchar(20) default NULL,
  PRIMARY KEY  (`requirementID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `requirement_header`
--

LOCK TABLES `requirement_header` WRITE;
/*!40000 ALTER TABLE `requirement_header` DISABLE KEYS */;
INSERT INTO `requirement_header` VALUES (1,'ENGINEERING REQUIREMENTS','',1,'ACTIVE','2009-11-06 13:16:31','admin','2009-11-11 10:32:33','admin'),(2,'OTHER REQUIREMENTS','',1,'ACTIVE','2009-11-06 13:21:24','admin','2009-11-06 13:36:37','admin'),(3,'FUNCTION ROOM ARRANGEMENT','',1,'ACTIVE','2009-11-06 13:21:31','admin','2009-11-06 13:34:44','admin'),(4,'ROOM REQUIREMENTS','',1,'ACTIVE','2009-11-06 13:21:36','admin','2010-07-02 17:47:06','ROOT'),(5,'SETUP & OTHER ARRANGEMENTS','',1,'ACTIVE','2009-11-06 13:30:20','admin','2009-11-06 13:30:58','admin'),(6,'OPTIONAL','',1,'ACTIVE','2009-11-06 13:39:17','admin','2009-11-06 13:39:17','admin'),(7,'PARTY ENTERTAINMENT','',1,'ACTIVE','2009-11-06 13:39:57','admin','2009-11-06 13:39:57','admin');
/*!40000 ALTER TABLE `requirement_header` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `restaurantledger`
--

DROP TABLE IF EXISTS `restaurantledger`;
CREATE TABLE `restaurantledger` (
  `id` int(11) NOT NULL auto_increment,
  `Memo` varchar(50) NOT NULL,
  `Date` date default NULL,
  `refno` varchar(20) default NULL,
  `debit` double(12,2) default '0.00',
  `credit` double(12,2) default '0.00',
  `HOTELID` int(5) NOT NULL default '0',
  `CREATETIME` datetime NOT NULL default '2001-01-01 01:01:01',
  `CREATEDBY` varchar(20) default NULL,
  `UPDATETIME` datetime default '2001-01-01 01:01:01',
  `UPDATEDBY` varchar(20) default NULL,
  `posttoacctng` varchar(1) default '0',
  `closed` varchar(1) default '0',
  `RESTAURANT_ID` varchar(20) NOT NULL default '1',
  PRIMARY KEY  (`id`,`RESTAURANT_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `restaurantledger`
--

LOCK TABLES `restaurantledger` WRITE;
/*!40000 ALTER TABLE `restaurantledger` DISABLE KEYS */;
/*!40000 ALTER TABLE `restaurantledger` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `role_privileges`
--

DROP TABLE IF EXISTS `role_privileges`;
CREATE TABLE `role_privileges` (
  `hotelID` int(4) NOT NULL default '1',
  `roleName` varchar(50) NOT NULL,
  `privilegeDescription` varchar(500) NOT NULL,
  `isAllowed` tinyint(1) default NULL,
  `createdBy` varchar(50) default NULL,
  `createTime` datetime default '2007-08-08 00:00:08',
  `updatedBy` varchar(50) default NULL,
  `updateTime` datetime default '2007-08-08 00:00:08',
  PRIMARY KEY  (`hotelID`,`roleName`,`privilegeDescription`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `role_privileges`
--

LOCK TABLES `role_privileges` WRITE;
/*!40000 ALTER TABLE `role_privileges` DISABLE KEYS */;
INSERT INTO `role_privileges` VALUES (1,'ADMINISTRATOR','Apply guest discounts',1,'ADMIN','2009-01-23 12:08:12','ADMIN','2010-06-04 17:18:03'),(1,'ADMINISTRATOR','Can apply discount',0,'admin','2007-08-08 00:00:08','admin','2007-08-08 00:00:08'),(1,'ADMINISTRATOR','Can change rates',0,'admin','2007-08-08 00:00:08','admin','2007-08-08 00:00:08'),(1,'ADMINISTRATOR','Export POSTED transactions to Exact Globe',1,'ADMIN','2010-01-13 13:18:55','ADMIN','2010-06-04 17:18:03'),(1,'ADMINISTRATOR','Export POSTED transactions to SAP',1,'ADMIN','2010-02-08 12:07:46','ADMIN','2010-06-04 17:18:03'),(1,'ADMINISTRATOR','Forcibly close cash drawer',1,'ALLAN','2009-09-29 16:12:18','ADMIN','2010-06-04 17:18:03'),(1,'ADMINISTRATOR','Override pre-configured room rates',1,'ADMIN','2009-01-23 12:08:12','ADMIN','2010-06-04 17:18:03'),(1,'ADMINISTRATOR','Recall voided folio transactions',1,'ADMIN','2009-01-23 12:08:12','ADMIN','2010-06-04 17:18:03'),(1,'ADMINISTRATOR','Void Folio Transaction',1,'ADMIN','2009-01-23 12:08:12','ADMIN','2010-06-04 17:18:03'),(1,'FRONTDESK','Apply guest discounts',1,'ADMIN','2009-01-23 12:07:17','ADMIN','2010-10-13 17:52:54'),(1,'FRONTDESK','Export POSTED transactions to Exact Globe',0,'ADMIN','2010-05-13 18:50:45','ADMIN','2010-10-13 17:52:54'),(1,'FRONTDESK','Export POSTED transactions to SAP',0,'ADMIN','2010-05-13 18:50:45','ADMIN','2010-10-13 17:52:54'),(1,'FRONTDESK','Forcibly close cash drawer',1,'ALLAN','2009-09-29 16:11:52','ADMIN','2010-10-13 17:52:54'),(1,'FRONTDESK','Override pre-configured room rates',1,'ADMIN','2009-01-23 12:07:17','ADMIN','2010-10-13 17:52:54'),(1,'FRONTDESK','Recall voided folio transactions',1,'ADMIN','2009-01-23 12:07:17','ADMIN','2010-10-13 17:52:54'),(1,'FRONTDESK','Void Folio Transaction',1,'ADMIN','2009-01-23 12:07:17','ADMIN','2010-10-13 17:52:54');
/*!40000 ALTER TABLE `role_privileges` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `role_ui_privileges`
--

DROP TABLE IF EXISTS `role_ui_privileges`;
CREATE TABLE `role_ui_privileges` (
  `roleName` varchar(100) NOT NULL,
  `module` varchar(100) NOT NULL,
  `formName` varchar(100) NOT NULL,
  `buttonName` varchar(100) NOT NULL,
  `isVisible` tinyint(1) default '0',
  `statusFlag` enum('ACTIVE','DELETED') default 'ACTIVE',
  `createdDate` datetime default '2008-08-08 08:08:08',
  `createdBy` varchar(50) default NULL,
  `updatedDate` datetime default '2008-08-08 08:08:08',
  `updatedBy` varchar(50) default NULL,
  PRIMARY KEY  (`roleName`,`module`,`formName`,`buttonName`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `role_ui_privileges`
--

LOCK TABLES `role_ui_privileges` WRITE;
/*!40000 ALTER TABLE `role_ui_privileges` DISABLE KEYS */;
INSERT INTO `role_ui_privileges` VALUES ('ADMINISTRATOR','ACCOUNTINGINTERFACE','ACCOUNTINGSETUP','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','ACCOUNTINGSETUP','BTNBROWSECONNECTION',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','ACCOUNTINGSETUP','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','ACCOUNTINGSETUP','BTNOK',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','CITYLEDGERDETAILSUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','CITYLEDGERDETAILSUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','CITYLEDGERDETAILSUI','BTNPRINT',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','CITYLEDGERDETAILSUI','BTNSEARCH',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','CITYLEDGERPAYMENTUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','CITYLEDGERPAYMENTUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','CITYLEDGERPAYMENTUI','BTNSAVE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','CITYLEDGERUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','CITYLEDGERUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','CITYLEDGERUI','BTNCLOSEACCOUNT',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','CITYLEDGERUI','BTNDETAILS',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','CITYLEDGERUI','BTNINSERTPAYMENT',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','CITYLEDGERUI','BTNNEW',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','CITYLEDGERUI','BTNPRINT',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','CITYLEDGERUI','BTNPRINTSOA',1,'ACTIVE','2010-04-19 14:04:16','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','CITYLEDGERUI','BTNSEARCH',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','COSTCENTERCODESUI','',1,'ACTIVE','2009-04-16 13:58:37','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','COSTCENTERCODESUI','BTNADD',1,'ACTIVE','2009-04-16 13:58:37','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','COSTCENTERCODESUI','BTNCLOSE',1,'ACTIVE','2009-04-16 13:58:37','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','COSTCENTERCODESUI','BTNDELETE',1,'ACTIVE','2009-04-16 13:58:37','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','COSTCENTERCODESUI','BTNEDIT',1,'ACTIVE','2009-04-16 13:58:37','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','COSTCENTERUI_EXACTGLOBE','',1,'ACTIVE','2009-10-21 14:05:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','COSTCENTERUI_EXACTGLOBE','BTNCANCEL',1,'ACTIVE','2009-10-21 14:05:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','COSTCENTERUI_EXACTGLOBE','BTNCLOSE',1,'ACTIVE','2009-10-21 14:05:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','COSTCENTERUI_EXACTGLOBE','BTNDELETE',1,'ACTIVE','2009-10-21 14:05:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','COSTCENTERUI_EXACTGLOBE','BTNNEW',1,'ACTIVE','2009-10-21 14:05:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','COSTCENTERUI_EXACTGLOBE','BTNSAVE',1,'ACTIVE','2009-10-21 14:05:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','COSTCENTERUI_EXACTGLOBE','BTNSETACTIVE',1,'ACTIVE','2009-10-21 14:05:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','EXACT_COSTCENTERUI','',1,'ACTIVE','2010-03-22 13:18:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','EXACT_COSTCENTERUI','BTNCANCEL',1,'ACTIVE','2010-03-22 13:18:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','EXACT_COSTCENTERUI','BTNCLOSE',1,'ACTIVE','2010-03-22 13:18:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','EXACT_COSTCENTERUI','BTNDELETE',1,'ACTIVE','2010-03-22 13:18:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','EXACT_COSTCENTERUI','BTNNEW',1,'ACTIVE','2010-03-22 13:18:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','EXACT_COSTCENTERUI','BTNSAVE',1,'ACTIVE','2010-03-22 13:18:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','EXACT_COSTCENTERUI','BTNSETACTIVE',1,'ACTIVE','2010-03-22 13:18:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','EXACT_GLCHARTOFACCOUNTS','',1,'ACTIVE','2010-03-22 13:18:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','EXACT_GLCHARTOFACCOUNTS','BTNCANCEL',1,'ACTIVE','2010-03-22 13:18:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','EXACT_GLCHARTOFACCOUNTS','BTNCLOSE',1,'ACTIVE','2010-03-22 13:18:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','EXACT_GLCHARTOFACCOUNTS','BTNDELETE',1,'ACTIVE','2010-03-22 13:18:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','EXACT_GLCHARTOFACCOUNTS','BTNNEW',1,'ACTIVE','2010-03-22 13:18:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','EXACT_GLCHARTOFACCOUNTS','BTNSAVE',1,'ACTIVE','2010-03-22 13:18:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','EXACT_GLCHARTOFACCOUNTS','BTNSETACTIVE',1,'ACTIVE','2010-03-22 13:18:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','EXACT_INTEGRATIONSETUPUI','',1,'ACTIVE','2010-03-22 13:18:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','EXACT_INTEGRATIONSETUPUI','BTNCOSTCENTERS',1,'ACTIVE','2010-03-22 13:18:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','EXACT_INTEGRATIONSETUPUI','BTNGLACCOUNTS',1,'ACTIVE','2010-03-22 13:18:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','EXACT_INTEGRATIONSETUPUI','BTNJOURNALENTRYCODES',1,'ACTIVE','2010-03-22 13:18:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','EXACT_INTEGRATIONSETUPUI','BTNTRANCODEGLACCOUNT',1,'ACTIVE','2010-03-22 13:18:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','EXACT_JOURNALENTRYCODESUI','',1,'ACTIVE','2010-03-22 13:18:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','EXACT_JOURNALENTRYCODESUI','BTNCANCEL',1,'ACTIVE','2010-03-22 13:18:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','EXACT_JOURNALENTRYCODESUI','BTNCLOSE',1,'ACTIVE','2010-03-22 13:18:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','EXACT_JOURNALENTRYCODESUI','BTNDELETE',1,'ACTIVE','2010-03-22 13:18:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','EXACT_JOURNALENTRYCODESUI','BTNNEW',1,'ACTIVE','2010-03-22 13:18:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','EXACT_JOURNALENTRYCODESUI','BTNSAVE',1,'ACTIVE','2010-03-22 13:18:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','EXACT_JOURNALENTRYCODESUI','BTNSETACTIVE',1,'ACTIVE','2010-03-22 13:18:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','EXACT_NEWENTRYTRANSACTIONCODEMAPPINGUI','',1,'ACTIVE','2010-03-22 13:18:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','EXACT_TRANSACTIONCODEMAPPINGUI','',1,'ACTIVE','2010-03-22 13:18:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','EXACT_TRANSACTIONCODEMAPPINGUI','BTNCANCEL',1,'ACTIVE','2010-03-22 13:18:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','EXACT_TRANSACTIONCODEMAPPINGUI','BTNSAVE',1,'ACTIVE','2010-03-22 13:18:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','GLACCOUNTSUI','',1,'ACTIVE','2009-04-16 13:58:37','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','GLACCOUNTSUI','BTNADD',1,'ACTIVE','2009-04-16 13:58:37','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','GLACCOUNTSUI','BTNCLOSE',1,'ACTIVE','2009-04-16 13:58:37','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','GLACCOUNTSUI','BTNDELETE',1,'ACTIVE','2009-04-16 13:58:37','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','GLACCOUNTSUI','BTNEDIT',1,'ACTIVE','2009-04-16 13:58:37','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','GLCHARTOFACCOUNTS_EXACTGLOBE','',1,'ACTIVE','2009-10-21 14:05:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','GLCHARTOFACCOUNTS_EXACTGLOBE','BTNCANCEL',1,'ACTIVE','2009-10-21 14:05:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','GLCHARTOFACCOUNTS_EXACTGLOBE','BTNCLOSE',1,'ACTIVE','2009-10-21 14:05:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','GLCHARTOFACCOUNTS_EXACTGLOBE','BTNDELETE',1,'ACTIVE','2009-10-21 14:05:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','GLCHARTOFACCOUNTS_EXACTGLOBE','BTNNEW',1,'ACTIVE','2009-10-21 14:05:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','GLCHARTOFACCOUNTS_EXACTGLOBE','BTNSAVE',1,'ACTIVE','2009-10-21 14:05:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','GLCHARTOFACCOUNTS_EXACTGLOBE','BTNSETACTIVE',1,'ACTIVE','2009-10-21 14:05:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','INTEGRATIONSETUPUI_EXACTGLOBE','',1,'ACTIVE','2009-10-21 14:05:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','INTEGRATIONSETUPUI_EXACTGLOBE','BTNCOSTCENTERS',1,'ACTIVE','2009-10-21 14:05:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','INTEGRATIONSETUPUI_EXACTGLOBE','BTNGLACCOUNTS',1,'ACTIVE','2009-10-21 14:05:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','INTEGRATIONSETUPUI_EXACTGLOBE','BTNJOURNALENTRYCODES',1,'ACTIVE','2009-10-21 14:05:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','INTEGRATIONSETUPUI_EXACTGLOBE','BTNTRANCODEGLACCOUNT',1,'ACTIVE','2009-10-21 14:05:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','JOURNALENTRYCODESUI_EXACTGLOBE','',1,'ACTIVE','2009-10-21 14:05:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','JOURNALENTRYCODESUI_EXACTGLOBE','BTNCANCEL',1,'ACTIVE','2009-10-21 14:05:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','JOURNALENTRYCODESUI_EXACTGLOBE','BTNCLOSE',1,'ACTIVE','2009-10-21 14:05:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','JOURNALENTRYCODESUI_EXACTGLOBE','BTNDELETE',1,'ACTIVE','2009-10-21 14:05:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','JOURNALENTRYCODESUI_EXACTGLOBE','BTNNEW',1,'ACTIVE','2009-10-21 14:05:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','JOURNALENTRYCODESUI_EXACTGLOBE','BTNSAVE',1,'ACTIVE','2009-10-21 14:05:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','JOURNALENTRYCODESUI_EXACTGLOBE','BTNSETACTIVE',1,'ACTIVE','2009-10-21 14:05:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','NEWCITYLEDERENTRYUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','NEWCITYLEDERENTRYUI','BTNCANCEL',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','NEWCITYLEDERENTRYUI','BTNSAVE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','NEWENTRY_TRANSACTIONCODEMAPPING_EXACTGLOBEUI','',1,'ACTIVE','2009-10-21 14:05:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','POSTTOACCOUNTINGUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','POSTTOACCOUNTINGUI','BTNEXPORTDEBTORS',1,'ACTIVE','2009-10-21 14:05:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','POSTTOACCOUNTINGUI','BTNPOST',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','SAP_GLACCOUNTS','',1,'ACTIVE','2010-03-22 13:18:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','SAP_GLACCOUNTS','BTNCANCEL',1,'ACTIVE','2010-03-22 13:18:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','SAP_GLACCOUNTS','BTNSAVE',1,'ACTIVE','2010-03-22 13:18:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','SAP_INTEGRATIONSETUP','',1,'ACTIVE','2010-03-22 13:18:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','SAP_INTEGRATIONSETUP','BTNADD',1,'ACTIVE','2010-03-22 13:18:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','SAP_INTEGRATIONSETUP','BTNEDIT',1,'ACTIVE','2010-03-22 13:18:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','SAP_INTEGRATIONSETUP','BTNSAVE',1,'ACTIVE','2010-03-22 13:18:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','TRANCODE_GLACCOUNTSETUP','',1,'ACTIVE','2009-04-16 13:58:37','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','TRANCODE_GLACCOUNTSETUP','BTNCLOSE',1,'ACTIVE','2009-04-16 13:58:37','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','TRANCODE_GLACCOUNTSETUP','BTNDELETE',1,'ACTIVE','2009-04-16 13:58:37','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','TRANCODE_GLACCOUNTSETUP','BTNEDIT',1,'ACTIVE','2009-04-16 13:58:37','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','TRANCODE_GLACCOUNTSETUP','BTNNEW',1,'ACTIVE','2009-04-16 13:58:37','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','TRANSACTIONCODEMAPPINGUI_EXACTGLOBE','',1,'ACTIVE','2009-10-21 14:05:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','TRANSACTIONCODEMAPPINGUI_EXACTGLOBE','BTNCANCEL',1,'ACTIVE','2009-10-21 14:05:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTINGINTERFACE','TRANSACTIONCODEMAPPINGUI_EXACTGLOBE','BTNSAVE',1,'ACTIVE','2009-10-21 14:05:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTS','ACCOUNTLISTUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTS','ACCOUNTLISTUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTS','ACCOUNTLISTUI','BTNOKGRP',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTS','ACCOUNTLISTUI','BTNOKINV',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTS','ACCOUNTLISTUI','BTNSELECTGRP',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTS','ACCOUNTLISTUI','BTNSELECTINV',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTS','AGENTUI','',1,'ACTIVE','2009-06-25 13:59:33','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTS','AGENTUI','BTNCANCEL',1,'ACTIVE','2009-06-25 13:59:33','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTS','AGENTUI','BTNCLOSE',1,'ACTIVE','2009-06-25 13:59:33','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTS','AGENTUI','BTNDELETE',1,'ACTIVE','2009-06-25 13:59:33','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTS','AGENTUI','BTNNEW',1,'ACTIVE','2009-06-25 13:59:33','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTS','AGENTUI','BTNSAVE',1,'ACTIVE','2009-06-25 13:59:33','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTS','COMPANYUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTS','COMPANYUI','BTNADDPRIVILEGE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTS','COMPANYUI','BTNCANCEL',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTS','COMPANYUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTS','COMPANYUI','BTNCLOSESEARCH',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTS','COMPANYUI','BTNDELETE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTS','COMPANYUI','BTNFIND',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTS','COMPANYUI','BTNFOLIOHISTORY',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTS','COMPANYUI','BTNMERGEACCOUNT',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTS','COMPANYUI','BTNNEW',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTS','COMPANYUI','BTNREMOVEPRIVILEGE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTS','COMPANYUI','BTNSAVE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTS','COMPANYUI','BTNSEARCH',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTS','GUESTUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTS','GUESTUI','BTNADDPRIVILEGE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTS','GUESTUI','BTNCANCEL',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTS','GUESTUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTS','GUESTUI','BTNCLOSESEARCH',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTS','GUESTUI','BTNDELETE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTS','GUESTUI','BTNFIND',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTS','GUESTUI','BTNFOLIOHISTORY',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTS','GUESTUI','BTNMERGEACCOUNT',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTS','GUESTUI','BTNNEW',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTS','GUESTUI','BTNREMOVEPRIVILEGE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTS','GUESTUI','BTNSAVE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTS','GUESTUI','BTNSEARCH',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTS','GUESTUI','BTNSELECT',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTS','MERGEACCOUNTUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTS','MERGEACCOUNTUI','BTNCANCEL',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTS','MERGEACCOUNTUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTS','MERGEACCOUNTUI','BTNMERGE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTS','MERGECOMPANYACCOUNTUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTS','MERGECOMPANYACCOUNTUI','BTNCANCEL',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTS','MERGECOMPANYACCOUNTUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','ACCOUNTS','MERGECOMPANYACCOUNTUI','BTNMERGE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','ACCOUNTINGADJUSTMENTPOSTUI','',1,'ACTIVE','2009-09-03 13:54:19','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','ACCOUNTINGADJUSTMENTPOSTUI','BTNADD',1,'ACTIVE','2009-09-03 13:54:19','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','ACCOUNTINGADJUSTMENTPOSTUI','BTNCLOSE',1,'ACTIVE','2009-09-03 13:54:19','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','ACCOUNTINGADJUSTMENTPOSTUI','BTNPOST',1,'ACTIVE','2009-09-03 13:54:19','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','ACCOUNTINGADJUSTMENTPOSTUI','BTNPRINT',1,'ACTIVE','2009-09-29 16:12:18','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','ACCOUNTINGADJUSTMENTPOSTUI','BTNREMOVE',1,'ACTIVE','2009-09-03 13:54:19','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','ADDDIRECTPOSTTRANSACTIONUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','ADDDIRECTPOSTTRANSACTIONUI','BTNBROWSEDRIVER',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2009-07-01 17:23:56','ADMIN'),('ADMINISTRATOR','CASHIER','ADDDIRECTPOSTTRANSACTIONUI','BTNBROWSEFOLIOID',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2009-07-01 17:23:56','ADMIN'),('ADMINISTRATOR','CASHIER','ADDDIRECTPOSTTRANSACTIONUI','BTNCANCEL',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2009-07-01 17:23:56','ADMIN'),('ADMINISTRATOR','CASHIER','ADDDIRECTPOSTTRANSACTIONUI','BTNOK',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2009-07-01 17:23:56','ADMIN'),('ADMINISTRATOR','CASHIER','ADDDIRECTPOSTTRANSACTIONUI','BTNVIEWCODES',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2009-07-01 17:23:56','ADMIN'),('ADMINISTRATOR','CASHIER','ADDTRANSACTIONUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','ADDTRANSACTIONUI','BTNCANCEL',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','ADDTRANSACTIONUI','BTNOK',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','ADDTRANSACTIONUI','BTNVIEWCODES',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','BROWSEACCOUNTUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','BROWSEACCOUNTUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','BROWSEACCOUNTUI','BTNOK',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','BROWSEDRIVERUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','BROWSEDRIVERUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','BROWSEDRIVERUI','BTNOK',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','BROWSEDRIVERUI','BTNSEARCH',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','BROWSEFOLIOUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','BROWSEFOLIOUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','BROWSEFOLIOUI','BTNOK',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','BROWSEFOLIOUI','BTNSEARCH',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','CASHTERMINALLISTUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','CASHTERMINALLISTUI','BTNCANCEL',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','CASHTERMINALLISTUI','BTNDELETE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','CASHTERMINALLISTUI','BTNEDIT',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','CASHTERMINALLISTUI','BTNFORCECLOSECASHDRAWER',1,'ACTIVE','2009-09-29 16:12:18','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','CASHTERMINALLISTUI','BTNINSERT',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','CASHTERMINALLISTUI','BTNSELECT',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','CHECKOUTUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','CHECKOUTUI','BTNBROWSEACCOUNTC',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','CHECKOUTUI','BTNBROWSEACCOUNTD',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','CHECKOUTUI','BTNBROWSECOMPANY',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','CHECKOUTUI','BTNCHECKOUTSINGLE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','CHECKOUTUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','CHECKOUTUI','BTNINSERTCHARGES',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','CHECKOUTUI','BTNLOOKUP',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','CHECKOUTUI','BTNPAYMENT',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','CHECKOUTUI','BTNTRANSFERDEBIT',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','CHECKOUTUI','BTNVIEWBILL',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','CITYLEDGERDETAILSUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','CITYLEDGERDETAILSUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','CITYLEDGERPAYMENTUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','CITYLEDGERPAYMENTUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','CITYLEDGERPAYMENTUI','BTNSAVE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','CITYLEDGERUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','CITYLEDGERUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','CITYLEDGERUI','BTNPAYMENT',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','CITYLEDGERUI','BTNVIEWDETAILS',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','CLOSESHIFTUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','CLOSESHIFTUI','BTNCANCEL',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','CLOSESHIFTUI','BTNOK',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','DIRECTTRANSACTIONPOSTUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','DIRECTTRANSACTIONPOSTUI','BTNADD',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','DIRECTTRANSACTIONPOSTUI','BTNBACKTOLIST',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','DIRECTTRANSACTIONPOSTUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','DIRECTTRANSACTIONPOSTUI','BTNVOID',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','FOLIOLEDGERINQUIRYUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','FOLIOLEDGERINQUIRYUI','BTNBROWSECOMPANY',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','FOLIOLEDGERINQUIRYUI','BTNBROWSECUST',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','FOLIOLEDGERINQUIRYUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','FOLIOLEDGERINQUIRYUI','BTNVIEWFOLIOTRANS',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','FOLIOLEDGERSUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','FOLIOLEDGERSUI','BTNCHECKOUT',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','FOLIOLEDGERSUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','FOLIOLEDGERSUI','BTNCREATELETTER',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','FOLIOLEDGERSUI','BTNVIEWLEDGER',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','FOLIOLEDGERUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','FOLIOLEDGERUI','BTNADD',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','FOLIOLEDGERUI','BTNBACKTOLIST',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','FOLIOLEDGERUI','BTNBROWSECOMPANY',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','FOLIOLEDGERUI','BTNBROWSEFOLIOC',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','FOLIOLEDGERUI','BTNBROWSEFOLIOD',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','FOLIOLEDGERUI','BTNCHECKOUT',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','FOLIOLEDGERUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','FOLIOLEDGERUI','BTNRECALL',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','FOLIOLEDGERUI','BTNVOID',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','OPENSHIFTUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','OPENSHIFTUI','BTNCANCEL',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','OPENSHIFTUI','BTNOK',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','PAYMENT','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','PAYMENT','BTNCANCEL',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','PAYMENT','BTNSAVE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','POSTTOLEDGERUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','POSTTOLEDGERUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','POSTTOLEDGERUI','BTNPOSTTOLEDGER',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','SALESFORECASTUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','SALESFORECASTUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','SALESFORECASTUI','BTNPRINT',1,'ACTIVE','2008-11-27 15:42:33','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','SALESFORECASTUI','BTNVIEW',1,'ACTIVE','2008-11-27 15:42:33','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','TRANSACTIONROUTINGUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','TRANSACTIONROUTINGUI','BNTSAVE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','TRANSACTIONROUTINGUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','TRANSACTIONROUTINGUI','BTNRETURN',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','TRANSACTIONROUTINGUI','BTNSEARCHFROM',1,'ACTIVE','2009-09-03 13:54:19','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','TRANSACTIONROUTINGUI','BTNSEARCHTO',1,'ACTIVE','2009-09-03 13:54:19','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','TRANSACTIONROUTINGUI','BTNTRANSFER',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','TRANSFERDEBITUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','TRANSFERDEBITUI','BTNBROWSEDESTINATIONFOLIO',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','TRANSFERDEBITUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','TRANSFERDEBITUI','BTNSAVE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','VOIDEDTRANSACTIONUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','VOIDEDTRANSACTIONUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CASHIER','VOIDEDTRANSACTIONUI','BTNOK',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','APPLIEDRATESUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','APPLIEDRATESUI','BTNCANCEL',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','APPLIEDRATESUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','APPLIEDRATESUI','BTNDELETE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','APPLIEDRATESUI','BTNNEW',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','APPLIEDRATESUI','BTNSAVE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','APPLIEDRATESUI','BTNSEARCH',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','CONTACTSUI','',1,'ACTIVE','2009-01-23 12:08:11','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','CONTACTSUI','BTNCANCEL',1,'ACTIVE','2009-01-23 12:08:11','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','CONTACTSUI','BTNSAVE',1,'ACTIVE','2009-01-23 12:08:11','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','CURRENCYCODEUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','CURRENCYCODEUI','BTNCANCEL',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','CURRENCYCODEUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','CURRENCYCODEUI','BTNCLOSESEARCH',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','CURRENCYCODEUI','BTNDELETE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','CURRENCYCODEUI','BTNFIND',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','CURRENCYCODEUI','BTNNEW',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','CURRENCYCODEUI','BTNSAVE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','CURRENCYCODEUI','BTNSEARCH',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','DEPARTMENTUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','DEPARTMENTUI','BTNCANCEL',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','DEPARTMENTUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','DEPARTMENTUI','BTNCLOSESEARCH',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','DEPARTMENTUI','BTNDELETE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','DEPARTMENTUI','BTNFIND',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','DEPARTMENTUI','BTNNEW',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','DEPARTMENTUI','BTNSAVE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','DEPARTMENTUI','BTNSEARCH',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','DRIVERUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','DRIVERUI','BTNCANCEL',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','DRIVERUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','DRIVERUI','BTNDELETE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','DRIVERUI','BTNNEW',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','DRIVERUI','BTNSAVE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','EVENTHEADERUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','EVENTHEADERUI','BTNADD',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','EVENTHEADERUI','BTNCANCEL',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','EVENTHEADERUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','EVENTHEADERUI','BTNDELETE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','EVENTHEADERUI','BTNNEW',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','EVENTHEADERUI','BTNREMOVE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','EVENTHEADERUI','BTNSAVE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','EVENTPACKAGEUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','EVENTPACKAGEUI','BTNADD',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','EVENTPACKAGEUI','BTNADDREQUIREMENTS',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2008-09-08 13:53:10','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','EVENTPACKAGEUI','BTNCANCEL',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','EVENTPACKAGEUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','EVENTPACKAGEUI','BTNDELETE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','EVENTPACKAGEUI','BTNNEW',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','EVENTPACKAGEUI','BTNREMOVE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','EVENTPACKAGEUI','BTNREMOVEREQUIREMENTS',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2008-09-08 13:53:10','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','EVENTPACKAGEUI','BTNSAVE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','EVENTPACKAGEUI','BTNSEARCH',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','FLOORLAYOUTUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','FLOORLAYOUTUI','BTNCANCEL',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','FLOORLAYOUTUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','FLOORLAYOUTUI','BTNSAVE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','FLOORLAYOUTUI','BTNUPDATE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','FLOORPLANUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','FLOORPLANUI','BTNCHANGE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','FLOORPLANUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','FLOORPLANUI','BTNDELETE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','FLOORPLANUI','BTNNEW',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','HOTELUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','HOTELUI','BTNCANCEL',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','HOTELUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','HOTELUI','BTNCLOSESEARCH',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','HOTELUI','BTNDELETE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','HOTELUI','BTNFIND',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','HOTELUI','BTNNEW',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','HOTELUI','BTNSAVE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','HOTELUI','BTNSEARCH',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','HOUSEKEEPINGPINUI','',1,'ACTIVE','2008-11-27 15:42:33','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','HOUSEKEEPINGPINUI','BTNCANCEL',1,'ACTIVE','2008-11-27 15:42:33','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','HOUSEKEEPINGPINUI','BTNOK',1,'ACTIVE','2008-11-27 15:42:33','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','HOUSEKEEPINGSTEPPROCEDUREUI','',1,'ACTIVE','2008-11-27 15:42:34','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','HOUSEKEEPINGSTEPPROCEDUREUI','BTNCANCEL',1,'ACTIVE','2008-11-27 15:42:34','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','HOUSEKEEPINGSTEPPROCEDUREUI','BTNDELETE',1,'ACTIVE','2008-11-27 15:42:34','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','HOUSEKEEPINGSTEPPROCEDUREUI','BTNNEW',1,'ACTIVE','2008-11-27 15:42:34','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','HOUSEKEEPINGSTEPPROCEDUREUI','BTNOPEN',1,'ACTIVE','2008-11-27 15:42:34','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','HOUSEKEEPINGSTEPPROCEDUREUI','BTNSAVE',1,'ACTIVE','2008-11-27 15:42:34','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','HOUSEKEEPINGSTEPPROCEDUREUI','BTNSEARCH',1,'ACTIVE','2008-11-27 15:42:34','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','MEALGROUPUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','MEALGROUPUI','BTNCANCEL',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','MEALGROUPUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','MEALGROUPUI','BTNDELETE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','MEALGROUPUI','BTNNEW',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','MEALGROUPUI','BTNSAVE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','MEALGROUPUI','BTNSEARCH',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','MEALITEMUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','MEALITEMUI','BTNCANCEL',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','MEALITEMUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','MEALITEMUI','BTNDELETE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','MEALITEMUI','BTNNEW',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','MEALITEMUI','BTNSAVE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','MEALITEMUI','BTNSEARCH',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','MEALMENUUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','MEALMENUUI','BTNADD',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','MEALMENUUI','BTNCANCEL',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','MEALMENUUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','MEALMENUUI','BTNDELETE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','MEALMENUUI','BTNNEW',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','MEALMENUUI','BTNREMOVE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','MEALMENUUI','BTNSAVE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','MEALMENUUI','BTNSEARCH',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','MINIBARITEMCATEGORYUI','',1,'ACTIVE','2008-11-27 15:42:33','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','MINIBARITEMCATEGORYUI','BTNCANCEL',1,'ACTIVE','2008-11-27 15:42:33','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','MINIBARITEMCATEGORYUI','BTNCLOSE',1,'ACTIVE','2008-11-27 15:42:33','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','MINIBARITEMCATEGORYUI','BTNCLOSESEARCH',1,'ACTIVE','2008-11-27 15:42:33','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','MINIBARITEMCATEGORYUI','BTNDELETE',1,'ACTIVE','2008-11-27 15:42:33','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','MINIBARITEMCATEGORYUI','BTNFIND',1,'ACTIVE','2008-11-27 15:42:33','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','MINIBARITEMCATEGORYUI','BTNNEW',1,'ACTIVE','2008-11-27 15:42:33','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','MINIBARITEMCATEGORYUI','BTNSAVE',1,'ACTIVE','2008-11-27 15:42:33','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','MINIBARITEMCATEGORYUI','BTNSEARCH',1,'ACTIVE','2008-11-27 15:42:33','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','MINIBARITEMUI','',1,'ACTIVE','2008-11-27 15:42:33','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','MINIBARITEMUI','BTNCANCEL',1,'ACTIVE','2008-11-27 15:42:33','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','MINIBARITEMUI','BTNCLOSE',1,'ACTIVE','2008-11-27 15:42:33','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','MINIBARITEMUI','BTNCLOSESEARCH',1,'ACTIVE','2008-11-27 15:42:33','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','MINIBARITEMUI','BTNDELETE',1,'ACTIVE','2008-11-27 15:42:33','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','MINIBARITEMUI','BTNFIND',1,'ACTIVE','2008-11-27 15:42:33','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','MINIBARITEMUI','BTNNEW',1,'ACTIVE','2008-11-27 15:42:33','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','MINIBARITEMUI','BTNSAVE',1,'ACTIVE','2008-11-27 15:42:33','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','MINIBARITEMUI','BTNSEARCH',1,'ACTIVE','2008-11-27 15:42:33','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','MINIBARSALESVIEWUI','',1,'ACTIVE','2008-11-27 15:42:33','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','MINIBARSALESVIEWUI','BTNCLOSE',1,'ACTIVE','2008-11-27 15:42:33','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','MINIBARSALESVIEWUI','BTNLOAD',1,'ACTIVE','2008-11-27 15:42:33','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','MINIBARSALESVIEWUI','BTNVOID',1,'ACTIVE','2008-11-27 15:42:33','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','PACKAGEHEADERUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','PACKAGEHEADERUI','BTNADD',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','PACKAGEHEADERUI','BTNCANCEL',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','PACKAGEHEADERUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','PACKAGEHEADERUI','BTNCLOSESEARCH',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','PACKAGEHEADERUI','BTNDELETE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','PACKAGEHEADERUI','BTNFIND',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','PACKAGEHEADERUI','BTNNEW',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','PACKAGEHEADERUI','BTNREMOVE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','PACKAGEHEADERUI','BTNSAVE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','PACKAGEHEADERUI','BTNSEARCH',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','PRIVILEGEHEADERUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','PRIVILEGEHEADERUI','BTNADD',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','PRIVILEGEHEADERUI','BTNCANCEL',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','PRIVILEGEHEADERUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','PRIVILEGEHEADERUI','BTNCLOSESEARCH',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','PRIVILEGEHEADERUI','BTNDELETE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','PRIVILEGEHEADERUI','BTNFIND',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','PRIVILEGEHEADERUI','BTNNEW',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','PRIVILEGEHEADERUI','BTNREMOVE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','PRIVILEGEHEADERUI','BTNSAVE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','PRIVILEGEHEADERUI','BTNSEARCH',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','PRIVILEGEHEADERUI','BTNSELECT',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','RATECODEUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','RATECODEUI','BTNCANCEL',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','RATECODEUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','RATECODEUI','BTNCLOSESEARCH',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','RATECODEUI','BTNDELETE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','RATECODEUI','BTNFIND',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','RATECODEUI','BTNNEW',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','RATECODEUI','BTNSAVE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','RATECODEUI','BTNSEARCH',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','RATETYPEUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','RATETYPEUI','BTNCANCEL',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','RATETYPEUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','RATETYPEUI','BTNCLOSESEARCH',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','RATETYPEUI','BTNDELETE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','RATETYPEUI','BTNFIND',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','RATETYPEUI','BTNNEW',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','RATETYPEUI','BTNSAVE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','RATETYPEUI','BTNSEARCH',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','REQUIREMENTHEADERUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','REQUIREMENTHEADERUI','BTNADD',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','REQUIREMENTHEADERUI','BTNCANCEL',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','REQUIREMENTHEADERUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','REQUIREMENTHEADERUI','BTNDELETE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','REQUIREMENTHEADERUI','BTNNEW',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','REQUIREMENTHEADERUI','BTNREMOVE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','REQUIREMENTHEADERUI','BTNSAVE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','ROOMAMENITYUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','ROOMAMENITYUI','BTNCANCEL',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','ROOMAMENITYUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','ROOMAMENITYUI','BTNCLOSESEARCH',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','ROOMAMENITYUI','BTNDELETE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','ROOMAMENITYUI','BTNFIND',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','ROOMAMENITYUI','BTNNEW',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','ROOMAMENITYUI','BTNSAVE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','ROOMAMENITYUI','BTNSEARCH',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','ROOMLOOKUP','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','ROOMLOOKUP','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','ROOMLOOKUP','BTNSEARCH',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','ROOMLOOKUP','BTNSELECT',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','ROOMLOOKUP','BUTTON2',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','ROOMTYPEUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','ROOMTYPEUI','BTNCANCEL',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','ROOMTYPEUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','ROOMTYPEUI','BTNCLOSESEARCH',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','ROOMTYPEUI','BTNDELETE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','ROOMTYPEUI','BTNFIND',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','ROOMTYPEUI','BTNNEW',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','ROOMTYPEUI','BTNSAVE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','ROOMTYPEUI','BTNSEARCH',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','ROOMUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','ROOMUI','BTNADD',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2008-10-20 17:49:17','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','ROOMUI','BTNCANCEL',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','ROOMUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','ROOMUI','BTNCLOSESEARCH',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','ROOMUI','BTNDELETE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','ROOMUI','BTNFIND',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','ROOMUI','BTNNEW',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','ROOMUI','BTNPLOT',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','ROOMUI','BTNREMOVE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2008-10-20 17:49:17','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','ROOMUI','BTNSAVE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','ROOMUI','BTNSEARCH',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','SYSTEMCONFIGURATIONUI','',1,'ACTIVE','2008-10-04 11:24:12','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','SYSTEMCONFIGURATIONUI','BTNCLOSE',1,'ACTIVE','2008-10-04 11:24:12','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','SYSTEMCONFIGURATIONUI','BTNSAVE',1,'ACTIVE','2008-10-04 11:24:12','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','TELEPHONEDIRECTORYUI','',1,'ACTIVE','2009-01-23 12:08:11','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','TELEPHONEDIRECTORYUI','BTNADDNEW',1,'ACTIVE','2009-01-23 12:08:11','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','TELEPHONEDIRECTORYUI','BTNCLOSE',1,'ACTIVE','2009-01-23 12:08:11','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','TELEPHONEDIRECTORYUI','BTNDELETE',1,'ACTIVE','2009-01-23 12:08:11','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','TELEPHONEDIRECTORYUI','BTNEDIT',1,'ACTIVE','2009-01-23 12:08:11','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','TRANSACTIONCODESUBACCOUNTUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','TRANSACTIONCODESUBACCOUNTUI','BTNCANCEL',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','TRANSACTIONCODESUBACCOUNTUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','TRANSACTIONCODESUBACCOUNTUI','BTNDELETE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','TRANSACTIONCODESUBACCOUNTUI','BTNNEW',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','TRANSACTIONCODESUBACCOUNTUI','BTNSAVE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','TRANSACTIONCODEUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','TRANSACTIONCODEUI','BTNCANCEL',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','TRANSACTIONCODEUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','TRANSACTIONCODEUI','BTNCLOSESEARCH',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','TRANSACTIONCODEUI','BTNDELETE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','TRANSACTIONCODEUI','BTNFIND',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','TRANSACTIONCODEUI','BTNNEW',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','TRANSACTIONCODEUI','BTNSAVE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','TRANSACTIONCODEUI','BTNSEARCH',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','TRANSACTIONSOURCEDOCUMENTUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','TRANSACTIONSOURCEDOCUMENTUI','BTNCANCEL',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','TRANSACTIONSOURCEDOCUMENTUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','TRANSACTIONSOURCEDOCUMENTUI','BTNDELETE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','TRANSACTIONSOURCEDOCUMENTUI','BTNNEW',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','TRANSACTIONSOURCEDOCUMENTUI','BTNSAVE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','TRANSACTIONTYPEUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','TRANSACTIONTYPEUI','BTNCANCEL',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','TRANSACTIONTYPEUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','TRANSACTIONTYPEUI','BTNCLOSESEARCH',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','TRANSACTIONTYPEUI','BTNDELETE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','TRANSACTIONTYPEUI','BTNFIND',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','TRANSACTIONTYPEUI','BTNNEW',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','TRANSACTIONTYPEUI','BTNSAVE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','CONFIGURATIONHOTEL','TRANSACTIONTYPEUI','BTNSEARCH',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','NIGHTAUDIT','DAYENDCLOSINGUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','NIGHTAUDIT','DAYENDCLOSINGUI','BTNCANCEL',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','NIGHTAUDIT','DAYENDCLOSINGUI','BTNOK',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','NIGHTAUDIT','DAYENDCONFIGURATIONUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','NIGHTAUDIT','DAYENDCONFIGURATIONUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','NIGHTAUDIT','DAYENDCONFIGURATIONUI','BTNDEFAULTS',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','NIGHTAUDIT','DAYENDCONFIGURATIONUI','BTNOK',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','NIGHTAUDIT','POSTROOMCHARGESUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','NIGHTAUDIT','POSTROOMCHARGESUI','BTNCANCEL',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','NIGHTAUDIT','POSTROOMCHARGESUI','BTNPOST',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','BOOKINGSHEETDEPARTMENT','',1,'ACTIVE','2008-10-14 13:23:44','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','CHANGELOGUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','CHANGELOGUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','CHANGELOGUI','BTNFINDNEXT',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','CHANGELOGUI','BTNPRINT',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','CHANGELOGUI','BTNVIEW',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','CITYTRANSFERUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','CITYTRANSFERUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','CITYTRANSFERUI','BTNPRINT',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','CITYTRANSFERUI','BTNSHOW',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','DAILYHOTELREVENUEUI','',1,'ACTIVE','2009-04-16 13:58:37','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','DAILYHOTELREVENUEUI','BTNAPPLYCUSTOMIZATION',1,'ACTIVE','2009-04-16 13:58:37','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','DAILYHOTELREVENUEUI','BTNCLOSE',1,'ACTIVE','2009-04-16 13:58:37','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','DAILYHOTELREVENUEUI','BTNCLOSEPANEL',1,'ACTIVE','2009-04-16 13:58:37','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','DAILYHOTELREVENUEUI','BTNCUSTOMIZE',1,'ACTIVE','2009-04-16 13:58:37','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','DAILYHOTELREVENUEUI','BTNEXPORTTOEXCEL',1,'ACTIVE','2009-04-16 13:58:37','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','DAILYHOTELREVENUEUI','BTNSHOW',1,'ACTIVE','2009-04-16 13:58:37','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','HKREPORTVIEWERUI','',1,'ACTIVE','2008-11-27 15:42:34','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','HOTELREVENUEUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','HOTELREVENUEUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','HOTELREVENUEUI','BTNCOMPUTE',1,'ACTIVE','2009-09-03 13:54:19','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','HOTELREVENUEUI','BTNPRINT',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','HOTELREVENUEUI','BTNVIEW',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','INHOUSEFORECASTUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','INHOUSEFORECASTUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','INHOUSEFORECASTUI','BTNPRINT',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','INHOUSEFORECASTUI','BTNSHOW',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2008-10-04 11:24:12','ADMIN'),('ADMINISTRATOR','REPORTS','MEALREQUIREMENTS','',1,'ACTIVE','2009-10-13 17:16:37','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','MEALREQUIREMENTS','BTNLIST',1,'ACTIVE','2009-10-13 17:16:37','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','MEALREQUIREMENTS','BTNPREVIEW',1,'ACTIVE','2009-10-13 17:16:37','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','MEALREQUIREMENTS','BTNPRINT',1,'ACTIVE','2009-10-13 17:16:37','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','NATIONALITYREPORT','',1,'ACTIVE','2009-09-29 16:12:18','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','NATIONALITYREPORT','BTNPREVIEW',1,'ACTIVE','2009-09-29 16:12:18','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','NATIONALITYREPORT','BTNPRINT',1,'ACTIVE','2009-09-29 16:12:18','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','NOOFPAX','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','NOOFPAX','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','NOOFPAX','BTNPRINT',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','NOOFPAX','BTNSHOW',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','OCCUPANCYFORECASTUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','OCCUPANCYFORECASTUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','OCCUPANCYFORECASTUI','BTNPRINT',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','OCCUPANCYFORECASTUI','BTNVIEW',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','REPORTDATEPARAMUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','REPORTGENERATORUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','REPORTGENERATORUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','REPORTGENERATORUI','BTNPRINT',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','REPORTVIEWER','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','ROOMINGLISTUI','',1,'ACTIVE','2009-04-16 13:58:37','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','ROOMINGLISTUI','BTNLIST',1,'ACTIVE','2009-06-25 13:59:33','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','ROOMINGLISTUI','BTNPREVIEW',1,'ACTIVE','2009-04-16 13:58:37','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','ROOMINGLISTUI','BTNPRINT',1,'ACTIVE','2009-04-16 13:58:37','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','ROOMREVENUEUI','',1,'ACTIVE','2008-11-27 15:42:34','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','ROOMREVENUEUI','BTNCLOSE',1,'ACTIVE','2008-11-27 15:42:34','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','ROOMREVENUEUI','BTNPRINT',1,'ACTIVE','2008-11-27 15:42:34','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','ROOMREVENUEUI','BTNVIEW',1,'ACTIVE','2008-11-27 15:42:34','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','SALESANDMARKETINGREVENUEREPORTUI','',1,'ACTIVE','2009-10-21 14:05:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','SALESANDMARKETINGREVENUEREPORTUI','BTNAPPLYCUSTOMIZATION',1,'ACTIVE','2009-10-21 14:05:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','SALESANDMARKETINGREVENUEREPORTUI','BTNCLOSE',1,'ACTIVE','2009-10-21 14:05:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','SALESANDMARKETINGREVENUEREPORTUI','BTNCLOSEPANEL',1,'ACTIVE','2009-10-21 14:05:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','SALESANDMARKETINGREVENUEREPORTUI','BTNCUSTOMIZE',1,'ACTIVE','2009-10-21 14:05:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','SALESANDMARKETINGREVENUEREPORTUI','BTNEXPORTTOEXCEL',1,'ACTIVE','2009-10-21 14:05:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','SALESANDMARKETINGREVENUEREPORTUI','BTNSHOW',1,'ACTIVE','2009-10-21 14:05:14','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','TRANSACTIONREGISTERUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','TRANSACTIONREGISTERUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','TRANSACTIONREGISTERUI','BTNPRINT',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','REPORTS','TRANSACTIONREGISTERUI','BTNSHOW',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','ADDREASONUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','ADDREASONUI','BTNCANCEL',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','ADDREASONUI','BTNOK',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','BROWSEFOLIOHISTORYUI','',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','BROWSEFOLIOHISTORYUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','BROWSEFOLIOHISTORYUI','BTNSEARCH',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','BROWSEFOLIOHISTORYUI','BTNSELECT',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','BROWSEFOLIOHISTORYUI','BTNVIEWFOLIO',1,'ACTIVE','2009-10-13 17:16:37','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','BROWSEFOLIOHISTORYUI','BTNVIEWFOLIOTRANS',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','BROWSEFOLIOUI','',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','BROWSEFOLIOUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','BROWSEFOLIOUI','BTNOK',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','BROWSEFOLIOUI','BTNSEARCH',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','BROWSETRANSACTIONCODESUI','',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','BROWSETRANSACTIONCODESUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','BROWSETRANSACTIONCODESUI','BTNSELECT',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','ENDORSEMENTLISTUI','',1,'ACTIVE','2008-12-23 17:55:54','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','ENDORSEMENTLISTUI','BTNACKNOWLEDGE',1,'ACTIVE','2009-01-23 12:08:11','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','ENDORSEMENTLISTUI','BTNADD',1,'ACTIVE','2009-01-23 12:08:11','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','ENDORSEMENTLISTUI','BTNCLOSE',1,'ACTIVE','2009-01-23 12:08:11','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','ENDORSEMENTLISTUI','BTNEDIT',1,'ACTIVE','2009-01-23 12:08:11','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','ENDORSEMENTUI','',1,'ACTIVE','2009-01-23 12:08:12','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','ENDORSEMENTUI','BTNCLOSE',1,'ACTIVE','2009-01-23 12:08:12','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','ENDORSEMENTUI','BTNSAVE',1,'ACTIVE','2009-01-23 12:08:12','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','FLOOROCCUPANCYUI','',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','FLOOROCCUPANCYUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','FLOOROCCUPANCYUI','BTNNEXT',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','FLOOROCCUPANCYUI','BTNPREVIOUS',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','GROUPACCOUNTLOOKUP','',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','GROUPACCOUNTLOOKUP','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','GROUPACCOUNTLOOKUP','BTNSEARCH',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','GROUPACCOUNTLOOKUP','BTNSELECT',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','GROUPBLOKINGUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','GROUPBLOKINGUI','BTNBLOCK',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','GROUPBLOKINGUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','GROUPBLOKINGUI','BTNSHOWVACANT',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','GROUPRESERVATIONLISTUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','GROUPRESERVATIONLISTUI','BNTCHECKOUT',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','GROUPRESERVATIONLISTUI','BTNCHANGE',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','GROUPRESERVATIONLISTUI','BTNCHECKIN',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','GROUPRESERVATIONLISTUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','GROUPRESERVATIONLISTUI','BTNDELETE',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','GROUPRESERVATIONLISTUI','BTNEXPORTTOEXCEL',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','GROUPRESERVATIONLISTUI','BTNINSERT',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','GROUPRESERVATIONUI','',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','GROUPRESERVATIONUI','BTNADDDATE',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','GROUPRESERVATIONUI','BTNADDDATECANCEL',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','GROUPRESERVATIONUI','BTNADDDATEOK',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','GROUPRESERVATIONUI','BTNADDFUNCTIONSCHEDULE',1,'ACTIVE','2008-10-14 13:23:44','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','GROUPRESERVATIONUI','BTNADDHOTELPROMO',1,'ACTIVE','2008-11-27 15:42:34','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','GROUPRESERVATIONUI','BTNADDMENU',1,'ACTIVE','2008-10-14 13:23:44','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','GROUPRESERVATIONUI','BTNADDRECURRINGCHARGE',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','GROUPRESERVATIONUI','BTNADDREQUIREMENTS',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','GROUPRESERVATIONUI','BTNBLOCK',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','GROUPRESERVATIONUI','BTNBOOKINGSHEET',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','GROUPRESERVATIONUI','BTNBROWSEACCOUNT',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','GROUPRESERVATIONUI','BTNBROWSEAGENT',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','GROUPRESERVATIONUI','BTNCANCELRESERVATION',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','GROUPRESERVATIONUI','BTNCHECKIN',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','GROUPRESERVATIONUI','BTNCHECKOUT',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','GROUPRESERVATIONUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','GROUPRESERVATIONUI','BTNEDIT',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','GROUPRESERVATIONUI','BTNFOLIO',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','GROUPRESERVATIONUI','BTNGUESTPRIVILEGES_REMOVE',1,'ACTIVE','2008-10-02 11:48:30','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','GROUPRESERVATIONUI','BTNGUESTPRIVILEGE_ADD',1,'ACTIVE','2008-10-02 11:48:30','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','GROUPRESERVATIONUI','BTNLOADCHARGE',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2008-09-13 10:11:56','ADMIN'),('ADMINISTRATOR','RESERVATION','GROUPRESERVATIONUI','BTNMANUALBLOCKROOMS',1,'ACTIVE','2009-04-16 13:58:37','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','GROUPRESERVATIONUI','BTNNEW',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2009-04-23 11:00:40','ALLAN'),('ADMINISTRATOR','RESERVATION','GROUPRESERVATIONUI','BTNNEWAMMENDMENT',1,'ACTIVE','2010-01-13 13:18:55','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','GROUPRESERVATIONUI','BTNNEWDEPOSIT',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','GROUPRESERVATIONUI','BTNNEWMEAL',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','GROUPRESERVATIONUI','BTNPOSTCHARGES',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','GROUPRESERVATIONUI','BTNPRINTAMMENDMENTS',1,'ACTIVE','2010-01-13 13:18:55','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','GROUPRESERVATIONUI','BTNPRINTCONTRACT',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','GROUPRESERVATIONUI','BTNREMOVECHARGE',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','GROUPRESERVATIONUI','BTNREMOVEFUNCTIONSCHEDULE',1,'ACTIVE','2008-10-14 13:23:44','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','GROUPRESERVATIONUI','BTNREMOVEHOTELPROMO',1,'ACTIVE','2008-11-27 15:42:34','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','GROUPRESERVATIONUI','BTNREMOVEMENU',1,'ACTIVE','2008-10-14 13:23:44','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','GROUPRESERVATIONUI','BTNREMOVEPACKAGE',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2008-10-20 17:49:18','ADMIN'),('ADMINISTRATOR','RESERVATION','GROUPRESERVATIONUI','BTNREMOVERECURRINGCHARGE',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','GROUPRESERVATIONUI','BTNREMOVEREQUIREMENTS',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','GROUPRESERVATIONUI','BTNSAVE',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','GROUPRESERVATIONUI','BTNSAVEAMMENDMENT',1,'ACTIVE','2010-01-13 13:18:55','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','GROUPRESERVATIONUI','BTNSAVEMEAL',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','GROUPRESERVATIONUI','BTNSAVERECURRINGCHARGE',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','GROUPRESERVATIONUI','BTNSAVEREQUIREMENTS',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','GROUPRESERVATIONUI','BTNSAVEROUTING',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','GROUPRESERVATIONUI','BTNTRANSFER',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2008-10-20 17:49:18','ADMIN'),('ADMINISTRATOR','RESERVATION','HOUSEKEEPINGPINUI','',1,'ACTIVE','2008-12-23 17:55:54','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','HOUSEKEEPINGPINUI','BTNCANCEL',1,'ACTIVE','2008-12-23 17:55:54','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','HOUSEKEEPINGPINUI','BTNOK',1,'ACTIVE','2008-12-23 17:55:54','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','INDIVIDUALGUESTLOOKUP','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','INDIVIDUALGUESTLOOKUP','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','INDIVIDUALGUESTLOOKUP','BTNSEARCH',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','INDIVIDUALGUESTLOOKUP','BTNSELECT',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','MINIBARSALESVIEWUI','',1,'ACTIVE','2008-12-23 17:55:54','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','MINIBARSALESVIEWUI','BTNCLOSE',1,'ACTIVE','2008-12-23 17:55:54','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','MINIBARSALESVIEWUI','BTNLOAD',1,'ACTIVE','2008-12-23 17:55:54','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','MINIBARSALESVIEWUI','BTNVOID',1,'ACTIVE','2008-12-23 17:55:54','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','RATETYPE_INQUIRY','',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','RATETYPE_INQUIRY','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','RATETYPE_INQUIRY','BTNPRINT',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','RATETYPE_INQUIRY','BTNVIEW',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','REASONFORCANCELUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','REASONFORCANCELUI','BTNCANCEL',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','REASONFORCANCELUI','BTNOK',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','RESERVATIONFOLIOUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','RESERVATIONFOLIOUI','BTNADDBILLINGINSTRUCTION',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','RESERVATIONFOLIOUI','BTNADDDEPENDENTGUEST',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','RESERVATIONFOLIOUI','BTNADDHOTELPROMO',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','RESERVATIONFOLIOUI','BTNADDRECURRINGCHARGE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','RESERVATIONFOLIOUI','BTNADDREQUIREMENTS',1,'ACTIVE','2010-01-13 13:18:55','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','RESERVATIONFOLIOUI','BTNAUTOSEEKROOM',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','RESERVATIONFOLIOUI','BTNBROWSEACCOUNT',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','RESERVATIONFOLIOUI','BTNBROWSEAGENT',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','RESERVATIONFOLIOUI','BTNBROWSECOMPANY',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','RESERVATIONFOLIOUI','BTNBROWSEHISTORY',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','RESERVATIONFOLIOUI','BTNCALENDARWIZARD',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','RESERVATIONFOLIOUI','BTNCANCEL',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','RESERVATIONFOLIOUI','BTNCANCELRESERVATION',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','RESERVATIONFOLIOUI','BTNCHECKEDIN',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','RESERVATIONFOLIOUI','BTNCHECKEDOUT',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','RESERVATIONFOLIOUI','BTNCHECKOUTDEPENDENTGUEST',1,'ACTIVE','2008-11-27 15:42:34','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','RESERVATIONFOLIOUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','RESERVATIONFOLIOUI','BTNCONFIRMED',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','RESERVATIONFOLIOUI','BTNFOLIO',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','RESERVATIONFOLIOUI','BTNGUESTPRIVILEGES_REMOVE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','RESERVATIONFOLIOUI','BTNGUESTPRIVILEGE_ADD',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','RESERVATIONFOLIOUI','BTNNOSHOW',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','RESERVATIONFOLIOUI','BTNPRINTINFO',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','RESERVATIONFOLIOUI','BTNREMOVEBILLINGINSTRUCTION',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','RESERVATIONFOLIOUI','BTNREMOVEDEPENDENTGUEST',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','RESERVATIONFOLIOUI','BTNREMOVEHOTELPROMO',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','RESERVATIONFOLIOUI','BTNREMOVERECURRINGCHARGE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','RESERVATIONFOLIOUI','BTNREMOVEREQUIREMENTS',1,'ACTIVE','2010-01-13 13:18:55','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','RESERVATIONFOLIOUI','BTNSAVE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','RESERVATIONFOLIOUI','BTNSETMASTERFOLIO',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','RESERVATIONFOLIOUI','BTNSHOWMASTER',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','RESERVATIONFOLIOUI','BTNVIEWGUESTLIST',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','RESERVATIONLISTUI','',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','RESERVATIONLISTUI','BTNCANCELRESERVATION',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','RESERVATIONLISTUI','BTNCHECKEDIN',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','RESERVATIONLISTUI','BTNCHECKEDOUT',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','RESERVATIONLISTUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','RESERVATIONLISTUI','BTNCONFIRMED',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','RESERVATIONLISTUI','BTNCREATELETTER',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','RESERVATIONLISTUI','BTNINSERT',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','RESERVATIONLISTUI','BTNNOSHOW',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','RESERVATIONLISTUI','BTNPRINTREGCARD',1,'ACTIVE','2008-12-23 17:55:54','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','RESERVATIONLISTUI','BTNSELECTMASTER',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','ROOMAVAILABILITYTODAYUI','',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','ROOMAVAILABILITYTODAYUI','BTNREFRESH',1,'ACTIVE','2008-11-27 15:42:34','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','ROOMCALENDARUI','',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','ROOMCALENDARUI','BTNCLEAR',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2009-01-23 12:11:38','ADMIN'),('ADMINISTRATOR','RESERVATION','ROOMCALENDARUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2009-01-23 12:11:38','ADMIN'),('ADMINISTRATOR','RESERVATION','ROOMCALENDARUI','BTNMARK',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2009-01-23 12:11:38','ADMIN'),('ADMINISTRATOR','RESERVATION','ROOMCALENDARUI','BTNOK',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2009-01-23 12:11:38','ADMIN'),('ADMINISTRATOR','RESERVATION','ROOMCALENDARUI','BTNPRINT',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2009-01-23 12:11:38','ADMIN'),('ADMINISTRATOR','RESERVATION','ROOMCALENDARUI','BTNSETUP',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2009-01-23 12:11:38','ADMIN'),('ADMINISTRATOR','RESERVATION','ROOMCALENDARUI','BTNUNBLOCK',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2009-01-23 12:11:38','ADMIN'),('ADMINISTRATOR','RESERVATION','ROOMCALENDARUI','BTNZOOM',1,'ACTIVE','2008-12-23 17:55:54','ALLAN','2009-01-23 12:11:38','ADMIN'),('ADMINISTRATOR','RESERVATION','ROOMCALENDARUI','BTNZOOMOUT',1,'ACTIVE','2008-12-23 17:55:54','ALLAN','2009-01-23 12:11:38','ADMIN'),('ADMINISTRATOR','RESERVATION','ROOMCALENDAR_NEW','',1,'ACTIVE','2009-02-10 13:51:04','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','ROOMCALENDAR_NEW','BTNCLOSE',1,'ACTIVE','2009-02-10 13:51:04','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','ROOMCALENDAR_NEW','BTNDONE',1,'ACTIVE','2009-02-10 13:51:04','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','ROOMCALENDAR_NEW','BTNMARK',1,'ACTIVE','2009-02-10 13:51:04','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','ROOMCALENDAR_NEW','BTNPRINT',1,'ACTIVE','2009-02-10 13:51:04','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','ROOMCALENDAR_NEW','BTNREMOVE',1,'ACTIVE','2009-02-10 13:51:04','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','ROOMCALENDAR_NEW','BTNSEARCH',1,'ACTIVE','2009-02-10 13:51:04','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','ROOMCALENDAR_NEW','BTNSETUP',1,'ACTIVE','2009-02-10 13:51:04','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','ROOMCALENDAR_NEW','BTNZOOM',1,'ACTIVE','2009-02-10 13:51:04','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','ROOMCALENDAR_NEW','BTNZOOMOUT',1,'ACTIVE','2009-02-10 13:51:04','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','ROOMHISTORYUI','',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','ROOMHISTORYUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','ROOMHISTORYUI','BTNFOLIO',1,'ACTIVE','2009-06-25 13:59:33','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','RESERVATION','ROOMHISTORYUI','BTNPRINT',1,'ACTIVE','2008-09-06 16:06:58','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SECURITY','CHANGEPASSWORDUI','',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SECURITY','LOCKSCREENUI','',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SECURITY','LOCKSCREENUI','BTNUNLOCK',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SECURITY','LOGINUI','',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SECURITY','LOGINUI','BTNCANCEL',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SECURITY','LOGINUI','BTNLOGIN',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SECURITY','RESETPASSWORDUI','',1,'ACTIVE','2008-09-13 10:11:56','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SECURITY','RESETPASSWORDUI','BTNCANCEL',1,'ACTIVE','2008-09-13 10:11:56','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SECURITY','RESETPASSWORDUI','BTNSAVE',1,'ACTIVE','2008-09-13 10:11:56','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SECURITY','ROLESUI','',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SECURITY','ROLESUI','BTNCANCEL',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SECURITY','ROLESUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SECURITY','ROLESUI','BTNDELETE',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SECURITY','ROLESUI','BTNNEW',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SECURITY','ROLESUI','BTNSAVE',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SECURITY','SPLASHSCREENUI','',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SECURITY','SPLASHSCREENUI','BTNOK',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SECURITY','SYSTEMROLEUI','',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SECURITY','SYSTEMROLEUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SECURITY','SYSTEMROLEUI','BTNSAVE',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SECURITY','TERMINALUI','',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SECURITY','TERMINALUI','BTNCANCEL',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SECURITY','TERMINALUI','BTNSET',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SECURITY','USERUI','',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SECURITY','USERUI','BTNADD',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SECURITY','USERUI','BTNCANCEL',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SECURITY','USERUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SECURITY','USERUI','BTNDELETE',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SECURITY','USERUI','BTNNEW',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SECURITY','USERUI','BTNREMOVE',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SECURITY','USERUI','BTNRESETPASSWORD',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SECURITY','USERUI','BTNSAVE',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SECURITY','USERUI','BTNSEARCH',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SECURITY','VERIFYUSERUI','',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SERVICES','ADDREMARK','',1,'ACTIVE','2008-11-27 15:42:34','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SERVICES','ENGINEERINGJOBUI','',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SERVICES','ENGINEERINGJOBUI','BTNBROWSE',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SERVICES','ENGINEERINGJOBUI','BTNCANCEL',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SERVICES','ENGINEERINGJOBUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SERVICES','ENGINEERINGJOBUI','BTNDELETE',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SERVICES','ENGINEERINGJOBUI','BTNNEW',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SERVICES','ENGINEERINGJOBUI','BTNSAVE',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SERVICES','ENGINEERINGJOBUI','BTNSEARCH',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SERVICES','ENGINEERINGJOBUI','BTNVIEWROOMCALENDAR',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SERVICES','ENGINEERINGSERVICEUI','',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SERVICES','ENGINEERINGSERVICEUI','BTNCANCEL',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SERVICES','ENGINEERINGSERVICEUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SERVICES','ENGINEERINGSERVICEUI','BTNDELETE',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SERVICES','ENGINEERINGSERVICEUI','BTNNEW',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SERVICES','ENGINEERINGSERVICEUI','BTNSAVE',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SERVICES','ENGINEERINGSERVICEUI','BTNSEARCH',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SERVICES','HOUSEKEEPERUI','',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SERVICES','HOUSEKEEPERUI','BTNCANCEL',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SERVICES','HOUSEKEEPERUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SERVICES','HOUSEKEEPERUI','BTNDELETE',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SERVICES','HOUSEKEEPERUI','BTNNEW',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SERVICES','HOUSEKEEPERUI','BTNSAVE',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SERVICES','HOUSEKEEPERUI','BTNSEARCH',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SERVICES','HOUSEKEEPINGLOGUI','',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SERVICES','HOUSEKEEPINGLOGUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SERVICES','HOUSEKEEPINGLOGUI','BTNREFRESH',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SERVICES','HOUSEKEEPINGLOGUI','BTNVERIFY',1,'ACTIVE','2008-11-27 15:42:34','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SERVICES','HOUSEKEEPINGTYPEUI','',1,'ACTIVE','2008-12-23 17:55:54','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SERVICES','HOUSEKEEPINGTYPEUI','BTNCANCEL',1,'ACTIVE','2008-12-23 17:55:54','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SERVICES','HOUSEKEEPINGTYPEUI','BTNCLOSESEARCH',1,'ACTIVE','2008-12-23 17:55:54','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SERVICES','HOUSEKEEPINGTYPEUI','BTNDELETE',1,'ACTIVE','2008-12-23 17:55:54','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SERVICES','HOUSEKEEPINGTYPEUI','BTNFIND',1,'ACTIVE','2008-12-23 17:55:54','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SERVICES','HOUSEKEEPINGTYPEUI','BTNNEW',1,'ACTIVE','2008-12-23 17:55:54','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SERVICES','HOUSEKEEPINGTYPEUI','BTNSAVE',1,'ACTIVE','2008-12-23 17:55:54','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SERVICES','HOUSEKEEPINGTYPEUI','BTNSEARCH',1,'ACTIVE','2008-12-23 17:55:54','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SERVICES','HOUSEKEEPINGUI','',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SERVICES','HOUSEKEEPINGUI','BTNADD',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2008-10-04 11:24:12','ADMIN'),('ADMINISTRATOR','SERVICES','HOUSEKEEPINGUI','BTNADDROW',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2008-10-04 11:24:12','ADMIN'),('ADMINISTRATOR','SERVICES','HOUSEKEEPINGUI','BTNBROWSE',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2008-10-04 11:24:12','ADMIN'),('ADMINISTRATOR','SERVICES','HOUSEKEEPINGUI','BTNCANCEL',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2008-10-04 11:24:12','ADMIN'),('ADMINISTRATOR','SERVICES','HOUSEKEEPINGUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SERVICES','HOUSEKEEPINGUI','BTNCLOSE1',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2008-10-04 11:24:12','ADMIN'),('ADMINISTRATOR','SERVICES','HOUSEKEEPINGUI','BTNREMOVEROW',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2008-10-04 11:24:12','ADMIN'),('ADMINISTRATOR','SERVICES','HOUSEKEEPINGUI','BTNSAVE',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SERVICES','SERVICESLOOKUPUI','',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SERVICES','SERVICESLOOKUPUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','SERVICES','SERVICESLOOKUPUI','BTNSELECT',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','UTILITIES','ALARMUI','',1,'ACTIVE','2008-11-27 15:42:34','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','UTILITIES','ALARMUI','BTNCLOSE',1,'ACTIVE','2008-11-27 15:42:34','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','UTILITIES','ALARMUI','BTNOK',1,'ACTIVE','2008-11-27 15:42:34','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','UTILITIES','ALARMUI','BUTTON1',1,'ACTIVE','2008-11-27 15:42:34','ALLAN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','UTILITIES','BACKUPUI','',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','UTILITIES','BACKUPUI','BTNBACKUP',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','UTILITIES','BACKUPUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','UTILITIES','CAPTUREIMAGEUI','',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','UTILITIES','CAPTUREIMAGEUI','BTNCAPTURE',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','UTILITIES','CAPTUREIMAGEUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','UTILITIES','CAPTUREIMAGEUI','BTNPREVIEW',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','UTILITIES','CAPTUREIMAGEUI','BTNSAVE',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','UTILITIES','REFERENCETIMEUI','',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','UTILITIES','REFERENCETIMEUI','BTNCLOSE',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','UTILITIES','REFERENCETIMEUI','BTNUPDATE',1,'ACTIVE','2008-09-06 16:06:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','UTILITIES','RESETUI','',1,'ACTIVE','2010-05-20 13:20:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','UTILITIES','RESETUI','BUTTON1',1,'ACTIVE','2010-05-20 13:20:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('ADMINISTRATOR','UTILITIES','RESETUI','BUTTON2',1,'ACTIVE','2010-05-20 13:20:59','ADMIN','2010-06-04 17:18:03','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','ACCOUNTINGSETUP','',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','ACCOUNTINGSETUP','BTNBROWSECONNECTION',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','ACCOUNTINGSETUP','BTNCLOSE',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','ACCOUNTINGSETUP','BTNOK',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','CITYLEDGERDETAILSUI','',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','CITYLEDGERDETAILSUI','BTNCLOSE',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','CITYLEDGERDETAILSUI','BTNPRINT',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','CITYLEDGERDETAILSUI','BTNSEARCH',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','CITYLEDGERPAYMENTUI','',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','CITYLEDGERPAYMENTUI','BTNCLOSE',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','CITYLEDGERPAYMENTUI','BTNSAVE',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','CITYLEDGERUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','CITYLEDGERUI','BTNCLOSE',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','CITYLEDGERUI','BTNCLOSEACCOUNT',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','CITYLEDGERUI','BTNDETAILS',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','CITYLEDGERUI','BTNINSERTPAYMENT',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','CITYLEDGERUI','BTNNEW',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','CITYLEDGERUI','BTNPRINT',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','CITYLEDGERUI','BTNPRINTSOA',0,'ACTIVE','2010-05-13 18:50:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','CITYLEDGERUI','BTNSEARCH',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','COSTCENTERCODESUI','',0,'ACTIVE','2009-04-21 20:09:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','COSTCENTERCODESUI','BTNADD',0,'ACTIVE','2009-04-21 20:09:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','COSTCENTERCODESUI','BTNCLOSE',0,'ACTIVE','2009-04-21 20:09:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','COSTCENTERCODESUI','BTNDELETE',0,'ACTIVE','2009-04-21 20:09:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','COSTCENTERCODESUI','BTNEDIT',0,'ACTIVE','2009-04-21 20:09:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','COSTCENTERUI_EXACTGLOBE','',0,'ACTIVE','2010-01-12 18:06:59','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','COSTCENTERUI_EXACTGLOBE','BTNCANCEL',0,'ACTIVE','2010-01-12 18:06:59','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','COSTCENTERUI_EXACTGLOBE','BTNCLOSE',0,'ACTIVE','2010-01-12 18:06:59','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','COSTCENTERUI_EXACTGLOBE','BTNDELETE',0,'ACTIVE','2010-01-12 18:06:59','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','COSTCENTERUI_EXACTGLOBE','BTNNEW',0,'ACTIVE','2010-01-12 18:06:59','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','COSTCENTERUI_EXACTGLOBE','BTNSAVE',0,'ACTIVE','2010-01-12 18:06:59','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','COSTCENTERUI_EXACTGLOBE','BTNSETACTIVE',0,'ACTIVE','2010-01-12 18:06:59','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','EXACT_COSTCENTERUI','',0,'ACTIVE','2010-05-13 18:50:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','EXACT_COSTCENTERUI','BTNCANCEL',0,'ACTIVE','2010-05-13 18:50:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','EXACT_COSTCENTERUI','BTNCLOSE',0,'ACTIVE','2010-05-13 18:50:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','EXACT_COSTCENTERUI','BTNDELETE',0,'ACTIVE','2010-05-13 18:50:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','EXACT_COSTCENTERUI','BTNNEW',0,'ACTIVE','2010-05-13 18:50:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','EXACT_COSTCENTERUI','BTNSAVE',0,'ACTIVE','2010-05-13 18:50:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','EXACT_COSTCENTERUI','BTNSETACTIVE',0,'ACTIVE','2010-05-13 18:50:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','EXACT_GLCHARTOFACCOUNTS','',0,'ACTIVE','2010-05-13 18:50:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','EXACT_GLCHARTOFACCOUNTS','BTNCANCEL',0,'ACTIVE','2010-05-13 18:50:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','EXACT_GLCHARTOFACCOUNTS','BTNCLOSE',0,'ACTIVE','2010-05-13 18:50:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','EXACT_GLCHARTOFACCOUNTS','BTNDELETE',0,'ACTIVE','2010-05-13 18:50:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','EXACT_GLCHARTOFACCOUNTS','BTNNEW',0,'ACTIVE','2010-05-13 18:50:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','EXACT_GLCHARTOFACCOUNTS','BTNSAVE',0,'ACTIVE','2010-05-13 18:50:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','EXACT_GLCHARTOFACCOUNTS','BTNSETACTIVE',0,'ACTIVE','2010-05-13 18:50:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','EXACT_INTEGRATIONSETUPUI','',0,'ACTIVE','2010-05-13 18:50:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','EXACT_INTEGRATIONSETUPUI','BTNCOSTCENTERS',0,'ACTIVE','2010-05-13 18:50:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','EXACT_INTEGRATIONSETUPUI','BTNGLACCOUNTS',0,'ACTIVE','2010-05-13 18:50:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','EXACT_INTEGRATIONSETUPUI','BTNJOURNALENTRYCODES',0,'ACTIVE','2010-05-13 18:50:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','EXACT_INTEGRATIONSETUPUI','BTNTRANCODEGLACCOUNT',0,'ACTIVE','2010-05-13 18:50:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','EXACT_JOURNALENTRYCODESUI','',0,'ACTIVE','2010-05-13 18:50:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','EXACT_JOURNALENTRYCODESUI','BTNCANCEL',0,'ACTIVE','2010-05-13 18:50:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','EXACT_JOURNALENTRYCODESUI','BTNCLOSE',0,'ACTIVE','2010-05-13 18:50:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','EXACT_JOURNALENTRYCODESUI','BTNDELETE',0,'ACTIVE','2010-05-13 18:50:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','EXACT_JOURNALENTRYCODESUI','BTNNEW',0,'ACTIVE','2010-05-13 18:50:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','EXACT_JOURNALENTRYCODESUI','BTNSAVE',0,'ACTIVE','2010-05-13 18:50:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','EXACT_JOURNALENTRYCODESUI','BTNSETACTIVE',0,'ACTIVE','2010-05-13 18:50:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','EXACT_NEWENTRYTRANSACTIONCODEMAPPINGUI','',0,'ACTIVE','2010-05-13 18:50:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','EXACT_TRANSACTIONCODEMAPPINGUI','',0,'ACTIVE','2010-05-13 18:50:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','EXACT_TRANSACTIONCODEMAPPINGUI','BTNCANCEL',0,'ACTIVE','2010-05-13 18:50:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','EXACT_TRANSACTIONCODEMAPPINGUI','BTNSAVE',0,'ACTIVE','2010-05-13 18:50:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','GLACCOUNTSUI','',0,'ACTIVE','2009-04-21 20:09:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','GLACCOUNTSUI','BTNADD',0,'ACTIVE','2009-04-21 20:09:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','GLACCOUNTSUI','BTNCLOSE',0,'ACTIVE','2009-04-21 20:09:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','GLACCOUNTSUI','BTNDELETE',0,'ACTIVE','2009-04-21 20:09:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','GLACCOUNTSUI','BTNEDIT',0,'ACTIVE','2009-04-21 20:09:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','GLCHARTOFACCOUNTS_EXACTGLOBE','',0,'ACTIVE','2010-01-12 18:06:59','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','GLCHARTOFACCOUNTS_EXACTGLOBE','BTNCANCEL',0,'ACTIVE','2010-01-12 18:06:59','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','GLCHARTOFACCOUNTS_EXACTGLOBE','BTNCLOSE',0,'ACTIVE','2010-01-12 18:06:59','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','GLCHARTOFACCOUNTS_EXACTGLOBE','BTNDELETE',0,'ACTIVE','2010-01-12 18:06:59','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','GLCHARTOFACCOUNTS_EXACTGLOBE','BTNNEW',0,'ACTIVE','2010-01-12 18:06:59','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','GLCHARTOFACCOUNTS_EXACTGLOBE','BTNSAVE',0,'ACTIVE','2010-01-12 18:06:59','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','GLCHARTOFACCOUNTS_EXACTGLOBE','BTNSETACTIVE',0,'ACTIVE','2010-01-12 18:06:59','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','INTEGRATIONSETUPUI_EXACTGLOBE','',0,'ACTIVE','2010-01-12 18:06:59','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','INTEGRATIONSETUPUI_EXACTGLOBE','BTNCOSTCENTERS',0,'ACTIVE','2010-01-12 18:06:59','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','INTEGRATIONSETUPUI_EXACTGLOBE','BTNGLACCOUNTS',0,'ACTIVE','2010-01-12 18:06:59','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','INTEGRATIONSETUPUI_EXACTGLOBE','BTNJOURNALENTRYCODES',0,'ACTIVE','2010-01-12 18:06:59','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','INTEGRATIONSETUPUI_EXACTGLOBE','BTNTRANCODEGLACCOUNT',0,'ACTIVE','2010-01-12 18:06:59','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','JOURNALENTRYCODESUI_EXACTGLOBE','',0,'ACTIVE','2010-01-12 18:06:59','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','JOURNALENTRYCODESUI_EXACTGLOBE','BTNCANCEL',0,'ACTIVE','2010-01-12 18:06:59','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','JOURNALENTRYCODESUI_EXACTGLOBE','BTNCLOSE',0,'ACTIVE','2010-01-12 18:06:59','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','JOURNALENTRYCODESUI_EXACTGLOBE','BTNDELETE',0,'ACTIVE','2010-01-12 18:06:59','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','JOURNALENTRYCODESUI_EXACTGLOBE','BTNNEW',0,'ACTIVE','2010-01-12 18:06:59','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','JOURNALENTRYCODESUI_EXACTGLOBE','BTNSAVE',0,'ACTIVE','2010-01-12 18:06:59','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','JOURNALENTRYCODESUI_EXACTGLOBE','BTNSETACTIVE',0,'ACTIVE','2010-01-12 18:06:59','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','NEWCITYLEDERENTRYUI','',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','NEWCITYLEDERENTRYUI','BTNCANCEL',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','NEWCITYLEDERENTRYUI','BTNSAVE',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','NEWENTRY_TRANSACTIONCODEMAPPING_EXACTGLOBEUI','',0,'ACTIVE','2010-01-12 18:06:59','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','POSTTOACCOUNTINGUI','',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','POSTTOACCOUNTINGUI','BTNEXPORTDEBTORS',0,'ACTIVE','2010-01-12 18:06:59','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','POSTTOACCOUNTINGUI','BTNPOST',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','SAP_GLACCOUNTS','',0,'ACTIVE','2010-05-13 18:50:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','SAP_GLACCOUNTS','BTNCANCEL',0,'ACTIVE','2010-05-13 18:50:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','SAP_GLACCOUNTS','BTNSAVE',0,'ACTIVE','2010-05-13 18:50:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','SAP_INTEGRATIONSETUP','',0,'ACTIVE','2010-05-13 18:50:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','SAP_INTEGRATIONSETUP','BTNADD',0,'ACTIVE','2010-05-13 18:50:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','SAP_INTEGRATIONSETUP','BTNEDIT',0,'ACTIVE','2010-05-13 18:50:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','SAP_INTEGRATIONSETUP','BTNSAVE',0,'ACTIVE','2010-05-13 18:50:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','TRANCODE_GLACCOUNTSETUP','',0,'ACTIVE','2009-04-21 20:09:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','TRANCODE_GLACCOUNTSETUP','BTNCLOSE',0,'ACTIVE','2009-04-21 20:09:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','TRANCODE_GLACCOUNTSETUP','BTNDELETE',0,'ACTIVE','2009-04-21 20:09:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','TRANCODE_GLACCOUNTSETUP','BTNEDIT',0,'ACTIVE','2009-04-21 20:09:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','TRANCODE_GLACCOUNTSETUP','BTNNEW',0,'ACTIVE','2009-04-21 20:09:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','TRANSACTIONCODEMAPPINGUI_EXACTGLOBE','',0,'ACTIVE','2010-01-12 18:06:59','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','TRANSACTIONCODEMAPPINGUI_EXACTGLOBE','BTNCANCEL',0,'ACTIVE','2010-01-12 18:06:59','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTINGINTERFACE','TRANSACTIONCODEMAPPINGUI_EXACTGLOBE','BTNSAVE',0,'ACTIVE','2010-01-12 18:06:59','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTS','ACCOUNTLISTUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTS','ACCOUNTLISTUI','BTNCLOSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTS','ACCOUNTLISTUI','BTNOKGRP',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTS','ACCOUNTLISTUI','BTNOKINV',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTS','ACCOUNTLISTUI','BTNSELECTGRP',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTS','ACCOUNTLISTUI','BTNSELECTINV',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTS','AGENTUI','',0,'ACTIVE','2009-07-07 14:18:05','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTS','AGENTUI','BTNCANCEL',0,'ACTIVE','2009-07-07 14:18:05','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTS','AGENTUI','BTNCLOSE',0,'ACTIVE','2009-07-07 14:18:05','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTS','AGENTUI','BTNDELETE',0,'ACTIVE','2009-07-07 14:18:05','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTS','AGENTUI','BTNNEW',0,'ACTIVE','2009-07-07 14:18:05','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTS','AGENTUI','BTNSAVE',0,'ACTIVE','2009-07-07 14:18:05','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTS','COMPANYUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTS','COMPANYUI','BTNADDPRIVILEGE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTS','COMPANYUI','BTNCANCEL',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTS','COMPANYUI','BTNCLOSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTS','COMPANYUI','BTNCLOSESEARCH',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTS','COMPANYUI','BTNDELETE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTS','COMPANYUI','BTNFIND',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTS','COMPANYUI','BTNFOLIOHISTORY',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTS','COMPANYUI','BTNMERGEACCOUNT',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTS','COMPANYUI','BTNNEW',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTS','COMPANYUI','BTNREMOVEPRIVILEGE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTS','COMPANYUI','BTNSAVE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTS','COMPANYUI','BTNSEARCH',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTS','GUESTUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTS','GUESTUI','BTNADDPRIVILEGE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTS','GUESTUI','BTNCANCEL',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTS','GUESTUI','BTNCLOSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTS','GUESTUI','BTNCLOSESEARCH',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTS','GUESTUI','BTNDELETE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTS','GUESTUI','BTNFIND',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTS','GUESTUI','BTNFOLIOHISTORY',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTS','GUESTUI','BTNMERGEACCOUNT',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTS','GUESTUI','BTNNEW',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTS','GUESTUI','BTNREMOVEPRIVILEGE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTS','GUESTUI','BTNSAVE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTS','GUESTUI','BTNSEARCH',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTS','GUESTUI','BTNSELECT',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTS','MERGEACCOUNTUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTS','MERGEACCOUNTUI','BTNCANCEL',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTS','MERGEACCOUNTUI','BTNCLOSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTS','MERGEACCOUNTUI','BTNMERGE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTS','MERGECOMPANYACCOUNTUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTS','MERGECOMPANYACCOUNTUI','BTNCANCEL',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTS','MERGECOMPANYACCOUNTUI','BTNCLOSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','ACCOUNTS','MERGECOMPANYACCOUNTUI','BTNMERGE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','ACCOUNTINGADJUSTMENTPOSTUI','',0,'ACTIVE','2009-09-23 17:11:18','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','ACCOUNTINGADJUSTMENTPOSTUI','BTNADD',0,'ACTIVE','2009-09-23 17:11:18','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','ACCOUNTINGADJUSTMENTPOSTUI','BTNCLOSE',0,'ACTIVE','2009-09-23 17:11:18','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','ACCOUNTINGADJUSTMENTPOSTUI','BTNPOST',0,'ACTIVE','2009-09-23 17:11:18','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','ACCOUNTINGADJUSTMENTPOSTUI','BTNPRINT',0,'ACTIVE','2009-09-29 16:11:52','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','ACCOUNTINGADJUSTMENTPOSTUI','BTNREMOVE',0,'ACTIVE','2009-09-23 17:11:18','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','ADDDIRECTPOSTTRANSACTIONUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','ADDDIRECTPOSTTRANSACTIONUI','BTNBROWSEDRIVER',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2009-08-07 15:28:00','ALLAN'),('FRONTDESK','CASHIER','ADDDIRECTPOSTTRANSACTIONUI','BTNBROWSEFOLIOID',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2009-08-07 15:28:00','ALLAN'),('FRONTDESK','CASHIER','ADDDIRECTPOSTTRANSACTIONUI','BTNCANCEL',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2009-08-07 15:28:00','ALLAN'),('FRONTDESK','CASHIER','ADDDIRECTPOSTTRANSACTIONUI','BTNOK',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2009-08-07 15:28:00','ALLAN'),('FRONTDESK','CASHIER','ADDDIRECTPOSTTRANSACTIONUI','BTNVIEWCODES',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2009-08-07 15:28:00','ALLAN'),('FRONTDESK','CASHIER','ADDTRANSACTIONUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','ADDTRANSACTIONUI','BTNCANCEL',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','ADDTRANSACTIONUI','BTNOK',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','ADDTRANSACTIONUI','BTNVIEWCODES',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','BROWSEACCOUNTUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','BROWSEACCOUNTUI','BTNCLOSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','BROWSEACCOUNTUI','BTNOK',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','BROWSEDRIVERUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','BROWSEDRIVERUI','BTNCLOSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','BROWSEDRIVERUI','BTNOK',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','BROWSEDRIVERUI','BTNSEARCH',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','BROWSEFOLIOUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','BROWSEFOLIOUI','BTNCLOSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','BROWSEFOLIOUI','BTNOK',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','BROWSEFOLIOUI','BTNSEARCH',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','CASHTERMINALLISTUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','CASHTERMINALLISTUI','BTNCANCEL',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','CASHTERMINALLISTUI','BTNDELETE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','CASHTERMINALLISTUI','BTNEDIT',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','CASHTERMINALLISTUI','BTNFORCECLOSECASHDRAWER',1,'ACTIVE','2009-09-29 16:11:52','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','CASHTERMINALLISTUI','BTNINSERT',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','CASHTERMINALLISTUI','BTNSELECT',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','CHECKOUTUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','CHECKOUTUI','BTNBROWSEACCOUNTC',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','CHECKOUTUI','BTNBROWSEACCOUNTD',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','CHECKOUTUI','BTNBROWSECOMPANY',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','CHECKOUTUI','BTNCHECKOUTSINGLE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','CHECKOUTUI','BTNCLOSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','CHECKOUTUI','BTNINSERTCHARGES',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','CHECKOUTUI','BTNLOOKUP',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','CHECKOUTUI','BTNPAYMENT',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','CHECKOUTUI','BTNTRANSFERDEBIT',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','CHECKOUTUI','BTNVIEWBILL',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','CITYLEDGERDETAILSUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','CITYLEDGERDETAILSUI','BTNCLOSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','CITYLEDGERPAYMENTUI','',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','CITYLEDGERPAYMENTUI','BTNCLOSE',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','CITYLEDGERPAYMENTUI','BTNSAVE',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','CITYLEDGERUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','CITYLEDGERUI','BTNCLOSE',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','CITYLEDGERUI','BTNPAYMENT',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','CITYLEDGERUI','BTNVIEWDETAILS',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','CLOSESHIFTUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','CLOSESHIFTUI','BTNCANCEL',1,'ACTIVE','2008-09-10 14:01:08','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','CLOSESHIFTUI','BTNOK',1,'ACTIVE','2008-09-10 14:01:08','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','DIRECTTRANSACTIONPOSTUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','DIRECTTRANSACTIONPOSTUI','BTNADD',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','DIRECTTRANSACTIONPOSTUI','BTNBACKTOLIST',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','DIRECTTRANSACTIONPOSTUI','BTNCLOSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','DIRECTTRANSACTIONPOSTUI','BTNVOID',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','FOLIOLEDGERINQUIRYUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','FOLIOLEDGERINQUIRYUI','BTNBROWSECOMPANY',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','FOLIOLEDGERINQUIRYUI','BTNBROWSECUST',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','FOLIOLEDGERINQUIRYUI','BTNCLOSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','FOLIOLEDGERINQUIRYUI','BTNVIEWFOLIOTRANS',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','FOLIOLEDGERSUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','FOLIOLEDGERSUI','BTNCHECKOUT',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','FOLIOLEDGERSUI','BTNCLOSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','FOLIOLEDGERSUI','BTNCREATELETTER',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','FOLIOLEDGERSUI','BTNVIEWLEDGER',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','FOLIOLEDGERUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','FOLIOLEDGERUI','BTNADD',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','FOLIOLEDGERUI','BTNBACKTOLIST',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','FOLIOLEDGERUI','BTNBROWSECOMPANY',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','FOLIOLEDGERUI','BTNBROWSEFOLIOC',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','FOLIOLEDGERUI','BTNBROWSEFOLIOD',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','FOLIOLEDGERUI','BTNCHECKOUT',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','FOLIOLEDGERUI','BTNCLOSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','FOLIOLEDGERUI','BTNRECALL',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','FOLIOLEDGERUI','BTNVOID',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','OPENSHIFTUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','OPENSHIFTUI','BTNCANCEL',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','OPENSHIFTUI','BTNOK',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','PAYMENT','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','PAYMENT','BTNCANCEL',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','PAYMENT','BTNSAVE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','POSTTOLEDGERUI','',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','POSTTOLEDGERUI','BTNCLOSE',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','POSTTOLEDGERUI','BTNPOSTTOLEDGER',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','SALESFORECASTUI','',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','SALESFORECASTUI','BTNCLOSE',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','SALESFORECASTUI','BTNPRINT',0,'ACTIVE','2008-10-27 16:02:01','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','SALESFORECASTUI','BTNVIEW',0,'ACTIVE','2008-10-27 16:02:01','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','SALESFORECASTUI','BUTTON1',0,'ACTIVE','2008-10-21 14:42:53','ALLAN','2008-10-25 10:06:04','ALLAN'),('FRONTDESK','CASHIER','SALESFORECASTUI','BUTTON2',0,'ACTIVE','2008-10-21 14:42:53','ALLAN','2008-10-25 10:06:04','ALLAN'),('FRONTDESK','CASHIER','TRANSACTIONROUTINGUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','TRANSACTIONROUTINGUI','BNTSAVE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','TRANSACTIONROUTINGUI','BTNCLOSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','TRANSACTIONROUTINGUI','BTNRETURN',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','TRANSACTIONROUTINGUI','BTNSEARCHFROM',1,'ACTIVE','2009-07-23 17:40:32','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','TRANSACTIONROUTINGUI','BTNSEARCHTO',1,'ACTIVE','2009-07-23 17:40:32','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','TRANSACTIONROUTINGUI','BTNTRANSFER',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','TRANSFERDEBITUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','TRANSFERDEBITUI','BTNBROWSEDESTINATIONFOLIO',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','TRANSFERDEBITUI','BTNCLOSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','TRANSFERDEBITUI','BTNSAVE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','VOIDEDTRANSACTIONUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','VOIDEDTRANSACTIONUI','BTNCLOSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CASHIER','VOIDEDTRANSACTIONUI','BTNOK',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','APPLIEDRATESUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','APPLIEDRATESUI','BTNCANCEL',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','APPLIEDRATESUI','BTNCLOSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','APPLIEDRATESUI','BTNDELETE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','APPLIEDRATESUI','BTNNEW',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','APPLIEDRATESUI','BTNSAVE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','APPLIEDRATESUI','BTNSEARCH',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','CONTACTSUI','',1,'ACTIVE','2009-01-20 13:51:48','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','CONTACTSUI','BTNCANCEL',1,'ACTIVE','2009-01-20 13:51:48','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','CONTACTSUI','BTNSAVE',1,'ACTIVE','2009-01-20 13:51:48','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','CURRENCYCODEUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','CURRENCYCODEUI','BTNCANCEL',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','CURRENCYCODEUI','BTNCLOSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','CURRENCYCODEUI','BTNCLOSESEARCH',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','CURRENCYCODEUI','BTNDELETE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','CURRENCYCODEUI','BTNFIND',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','CURRENCYCODEUI','BTNNEW',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','CURRENCYCODEUI','BTNSAVE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','CURRENCYCODEUI','BTNSEARCH',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','DEPARTMENTUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','DEPARTMENTUI','BTNCANCEL',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','DEPARTMENTUI','BTNCLOSE',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','DEPARTMENTUI','BTNCLOSESEARCH',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','DEPARTMENTUI','BTNDELETE',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','DEPARTMENTUI','BTNFIND',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','DEPARTMENTUI','BTNNEW',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','DEPARTMENTUI','BTNSAVE',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','DEPARTMENTUI','BTNSEARCH',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','DRIVERUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','DRIVERUI','BTNCANCEL',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','DRIVERUI','BTNCLOSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','DRIVERUI','BTNDELETE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','DRIVERUI','BTNNEW',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','DRIVERUI','BTNSAVE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','EVENTHEADERUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','EVENTHEADERUI','BTNADD',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','EVENTHEADERUI','BTNCANCEL',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','EVENTHEADERUI','BTNCLOSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','EVENTHEADERUI','BTNDELETE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','EVENTHEADERUI','BTNNEW',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','EVENTHEADERUI','BTNREMOVE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','EVENTHEADERUI','BTNSAVE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','EVENTPACKAGEUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','EVENTPACKAGEUI','BTNADD',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','EVENTPACKAGEUI','BTNADDREQUIREMENTS',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2008-09-11 16:40:25','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','EVENTPACKAGEUI','BTNCANCEL',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','EVENTPACKAGEUI','BTNCLOSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','EVENTPACKAGEUI','BTNDELETE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','EVENTPACKAGEUI','BTNNEW',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','EVENTPACKAGEUI','BTNREMOVE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','EVENTPACKAGEUI','BTNREMOVEREQUIREMENTS',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2008-09-11 16:40:25','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','EVENTPACKAGEUI','BTNSAVE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','EVENTPACKAGEUI','BTNSEARCH',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','FLOORLAYOUTUI','',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','FLOORLAYOUTUI','BTNCANCEL',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','FLOORLAYOUTUI','BTNCLOSE',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','FLOORLAYOUTUI','BTNSAVE',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','FLOORLAYOUTUI','BTNUPDATE',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','FLOORPLANUI','',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','FLOORPLANUI','BTNCHANGE',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','FLOORPLANUI','BTNCLOSE',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','FLOORPLANUI','BTNDELETE',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','FLOORPLANUI','BTNNEW',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','HOTELUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','HOTELUI','BTNCANCEL',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','HOTELUI','BTNCLOSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','HOTELUI','BTNCLOSESEARCH',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','HOTELUI','BTNDELETE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','HOTELUI','BTNFIND',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','HOTELUI','BTNNEW',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','HOTELUI','BTNSAVE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','HOTELUI','BTNSEARCH',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','HOUSEKEEPINGPINUI','',1,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','HOUSEKEEPINGPINUI','BTNCANCEL',1,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','HOUSEKEEPINGPINUI','BTNOK',1,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','HOUSEKEEPINGSTEPPROCEDUREUI','',0,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','HOUSEKEEPINGSTEPPROCEDUREUI','BTNCANCEL',0,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','HOUSEKEEPINGSTEPPROCEDUREUI','BTNDELETE',0,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','HOUSEKEEPINGSTEPPROCEDUREUI','BTNNEW',0,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','HOUSEKEEPINGSTEPPROCEDUREUI','BTNOPEN',0,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','HOUSEKEEPINGSTEPPROCEDUREUI','BTNSAVE',0,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','HOUSEKEEPINGSTEPPROCEDUREUI','BTNSEARCH',0,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','MEALGROUPUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','MEALGROUPUI','BTNCANCEL',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','MEALGROUPUI','BTNCLOSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','MEALGROUPUI','BTNDELETE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','MEALGROUPUI','BTNNEW',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','MEALGROUPUI','BTNSAVE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','MEALGROUPUI','BTNSEARCH',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','MEALITEMUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','MEALITEMUI','BTNCANCEL',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','MEALITEMUI','BTNCLOSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','MEALITEMUI','BTNDELETE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','MEALITEMUI','BTNNEW',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','MEALITEMUI','BTNSAVE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','MEALITEMUI','BTNSEARCH',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','MEALMENUUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','MEALMENUUI','BTNADD',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','MEALMENUUI','BTNCANCEL',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','MEALMENUUI','BTNCLOSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','MEALMENUUI','BTNDELETE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','MEALMENUUI','BTNNEW',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','MEALMENUUI','BTNREMOVE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','MEALMENUUI','BTNSAVE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','MEALMENUUI','BTNSEARCH',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','MINIBARITEMCATEGORYUI','',0,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','MINIBARITEMCATEGORYUI','BTNCANCEL',0,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','MINIBARITEMCATEGORYUI','BTNCLOSE',0,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','MINIBARITEMCATEGORYUI','BTNCLOSESEARCH',0,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','MINIBARITEMCATEGORYUI','BTNDELETE',0,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','MINIBARITEMCATEGORYUI','BTNFIND',0,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','MINIBARITEMCATEGORYUI','BTNNEW',0,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','MINIBARITEMCATEGORYUI','BTNSAVE',0,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','MINIBARITEMCATEGORYUI','BTNSEARCH',0,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','MINIBARITEMUI','',0,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','MINIBARITEMUI','BTNCANCEL',0,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','MINIBARITEMUI','BTNCLOSE',0,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','MINIBARITEMUI','BTNCLOSESEARCH',0,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','MINIBARITEMUI','BTNDELETE',0,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','MINIBARITEMUI','BTNFIND',0,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','MINIBARITEMUI','BTNNEW',0,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','MINIBARITEMUI','BTNSAVE',0,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','MINIBARITEMUI','BTNSEARCH',0,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','MINIBARSALESVIEWUI','',1,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','MINIBARSALESVIEWUI','BTNCLOSE',1,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','MINIBARSALESVIEWUI','BTNLOAD',1,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','MINIBARSALESVIEWUI','BTNVOID',1,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','PACKAGEHEADERUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','PACKAGEHEADERUI','BTNADD',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','PACKAGEHEADERUI','BTNCANCEL',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','PACKAGEHEADERUI','BTNCLOSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','PACKAGEHEADERUI','BTNCLOSESEARCH',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','PACKAGEHEADERUI','BTNDELETE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','PACKAGEHEADERUI','BTNFIND',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','PACKAGEHEADERUI','BTNNEW',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','PACKAGEHEADERUI','BTNREMOVE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','PACKAGEHEADERUI','BTNSAVE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','PACKAGEHEADERUI','BTNSEARCH',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','PRIVILEGEHEADERUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','PRIVILEGEHEADERUI','BTNADD',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','PRIVILEGEHEADERUI','BTNCANCEL',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','PRIVILEGEHEADERUI','BTNCLOSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','PRIVILEGEHEADERUI','BTNCLOSESEARCH',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','PRIVILEGEHEADERUI','BTNDELETE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','PRIVILEGEHEADERUI','BTNFIND',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','PRIVILEGEHEADERUI','BTNNEW',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','PRIVILEGEHEADERUI','BTNREMOVE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','PRIVILEGEHEADERUI','BTNSAVE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','PRIVILEGEHEADERUI','BTNSEARCH',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','PRIVILEGEHEADERUI','BTNSELECT',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','RATECODEUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','RATECODEUI','BTNCANCEL',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','RATECODEUI','BTNCLOSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','RATECODEUI','BTNCLOSESEARCH',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','RATECODEUI','BTNDELETE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','RATECODEUI','BTNFIND',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','RATECODEUI','BTNNEW',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','RATECODEUI','BTNSAVE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','RATECODEUI','BTNSEARCH',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','RATETYPEUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','RATETYPEUI','BTNCANCEL',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','RATETYPEUI','BTNCLOSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','RATETYPEUI','BTNCLOSESEARCH',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','RATETYPEUI','BTNDELETE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','RATETYPEUI','BTNFIND',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','RATETYPEUI','BTNNEW',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','RATETYPEUI','BTNSAVE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','RATETYPEUI','BTNSEARCH',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','REQUIREMENTHEADERUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','REQUIREMENTHEADERUI','BTNADD',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','REQUIREMENTHEADERUI','BTNCANCEL',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','REQUIREMENTHEADERUI','BTNCLOSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','REQUIREMENTHEADERUI','BTNDELETE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','REQUIREMENTHEADERUI','BTNNEW',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','REQUIREMENTHEADERUI','BTNREMOVE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','REQUIREMENTHEADERUI','BTNSAVE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','ROOMAMENITYUI','',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','ROOMAMENITYUI','BTNCANCEL',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','ROOMAMENITYUI','BTNCLOSE',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','ROOMAMENITYUI','BTNCLOSESEARCH',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','ROOMAMENITYUI','BTNDELETE',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','ROOMAMENITYUI','BTNFIND',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','ROOMAMENITYUI','BTNNEW',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','ROOMAMENITYUI','BTNSAVE',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','ROOMAMENITYUI','BTNSEARCH',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','ROOMLOOKUP','',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','ROOMLOOKUP','BTNCLOSE',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','ROOMLOOKUP','BTNSEARCH',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','ROOMLOOKUP','BTNSELECT',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','ROOMLOOKUP','BUTTON2',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','ROOMTYPEUI','',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','ROOMTYPEUI','BTNCANCEL',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','ROOMTYPEUI','BTNCLOSE',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','ROOMTYPEUI','BTNCLOSESEARCH',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','ROOMTYPEUI','BTNDELETE',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','ROOMTYPEUI','BTNFIND',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','ROOMTYPEUI','BTNNEW',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','ROOMTYPEUI','BTNSAVE',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','ROOMTYPEUI','BTNSEARCH',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','ROOMUI','',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','ROOMUI','BTNADD',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2008-10-02 11:48:41','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','ROOMUI','BTNCANCEL',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','ROOMUI','BTNCLOSE',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','ROOMUI','BTNCLOSESEARCH',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','ROOMUI','BTNDELETE',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','ROOMUI','BTNFIND',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','ROOMUI','BTNNEW',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','ROOMUI','BTNPLOT',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','ROOMUI','BTNREMOVE',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2008-10-02 11:48:41','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','ROOMUI','BTNSAVE',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','ROOMUI','BTNSEARCH',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','SYSTEMCONFIGURATIONUI','',1,'ACTIVE','2008-10-21 14:42:53','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','SYSTEMCONFIGURATIONUI','BTNCLOSE',1,'ACTIVE','2008-10-21 14:42:53','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','SYSTEMCONFIGURATIONUI','BTNSAVE',1,'ACTIVE','2008-10-21 14:42:53','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','TELEPHONEDIRECTORYUI','',1,'ACTIVE','2009-01-20 13:51:48','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','TELEPHONEDIRECTORYUI','BTNADDNEW',1,'ACTIVE','2009-01-20 13:51:48','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','TELEPHONEDIRECTORYUI','BTNCLOSE',1,'ACTIVE','2009-01-20 13:51:48','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','TELEPHONEDIRECTORYUI','BTNDELETE',0,'ACTIVE','2009-01-20 13:51:48','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','TELEPHONEDIRECTORYUI','BTNEDIT',1,'ACTIVE','2009-01-20 13:51:48','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','TRANSACTIONCODESUBACCOUNTUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','TRANSACTIONCODESUBACCOUNTUI','BTNCANCEL',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','TRANSACTIONCODESUBACCOUNTUI','BTNCLOSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','TRANSACTIONCODESUBACCOUNTUI','BTNDELETE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','TRANSACTIONCODESUBACCOUNTUI','BTNNEW',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','TRANSACTIONCODESUBACCOUNTUI','BTNSAVE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','TRANSACTIONCODEUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','TRANSACTIONCODEUI','BTNCANCEL',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','TRANSACTIONCODEUI','BTNCLOSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','TRANSACTIONCODEUI','BTNCLOSESEARCH',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','TRANSACTIONCODEUI','BTNDELETE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','TRANSACTIONCODEUI','BTNFIND',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','TRANSACTIONCODEUI','BTNNEW',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','TRANSACTIONCODEUI','BTNSAVE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','TRANSACTIONCODEUI','BTNSEARCH',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','TRANSACTIONSOURCEDOCUMENTUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','TRANSACTIONSOURCEDOCUMENTUI','BTNCANCEL',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','TRANSACTIONSOURCEDOCUMENTUI','BTNCLOSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','TRANSACTIONSOURCEDOCUMENTUI','BTNDELETE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','TRANSACTIONSOURCEDOCUMENTUI','BTNNEW',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','TRANSACTIONSOURCEDOCUMENTUI','BTNSAVE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','TRANSACTIONTYPEUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','TRANSACTIONTYPEUI','BTNCANCEL',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','TRANSACTIONTYPEUI','BTNCLOSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','TRANSACTIONTYPEUI','BTNCLOSESEARCH',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','TRANSACTIONTYPEUI','BTNDELETE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','TRANSACTIONTYPEUI','BTNFIND',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','TRANSACTIONTYPEUI','BTNNEW',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','TRANSACTIONTYPEUI','BTNSAVE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','CONFIGURATIONHOTEL','TRANSACTIONTYPEUI','BTNSEARCH',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','NIGHTAUDIT','DAYENDCLOSINGUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','NIGHTAUDIT','DAYENDCLOSINGUI','BTNCANCEL',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','NIGHTAUDIT','DAYENDCLOSINGUI','BTNOK',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','NIGHTAUDIT','DAYENDCONFIGURATIONUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','NIGHTAUDIT','DAYENDCONFIGURATIONUI','BTNCLOSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','NIGHTAUDIT','DAYENDCONFIGURATIONUI','BTNDEFAULTS',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','NIGHTAUDIT','DAYENDCONFIGURATIONUI','BTNOK',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','NIGHTAUDIT','POSTROOMCHARGESUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','NIGHTAUDIT','POSTROOMCHARGESUI','BTNCANCEL',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','NIGHTAUDIT','POSTROOMCHARGESUI','BTNPOST',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','BOOKINGSHEETDEPARTMENT','',0,'ACTIVE','2008-10-21 14:42:53','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','CHANGELOGUI','',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','CHANGELOGUI','BTNCLOSE',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','CHANGELOGUI','BTNFINDNEXT',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','CHANGELOGUI','BTNPRINT',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','CHANGELOGUI','BTNVIEW',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','CITYTRANSFERUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','CITYTRANSFERUI','BTNCLOSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','CITYTRANSFERUI','BTNPRINT',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','CITYTRANSFERUI','BTNSHOW',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','DAILYHOTELREVENUEUI','',0,'ACTIVE','2009-04-21 20:09:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','DAILYHOTELREVENUEUI','BTNAPPLYCUSTOMIZATION',0,'ACTIVE','2009-04-21 20:09:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','DAILYHOTELREVENUEUI','BTNCLOSE',0,'ACTIVE','2009-04-21 20:09:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','DAILYHOTELREVENUEUI','BTNCLOSEPANEL',0,'ACTIVE','2009-04-21 20:09:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','DAILYHOTELREVENUEUI','BTNCUSTOMIZE',0,'ACTIVE','2009-04-21 20:09:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','DAILYHOTELREVENUEUI','BTNEXPORTTOEXCEL',0,'ACTIVE','2009-04-21 20:09:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','DAILYHOTELREVENUEUI','BTNSHOW',0,'ACTIVE','2009-04-21 20:09:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','HKREPORTVIEWERUI','',0,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','HOTELREVENUEUI','',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','HOTELREVENUEUI','BTNCLOSE',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','HOTELREVENUEUI','BTNCOMPUTE',0,'ACTIVE','2009-08-07 15:26:50','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','HOTELREVENUEUI','BTNPRINT',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','HOTELREVENUEUI','BTNVIEW',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','INHOUSEFORECASTUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','INHOUSEFORECASTUI','BTNCLOSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','INHOUSEFORECASTUI','BTNPRINT',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','INHOUSEFORECASTUI','BTNSHOW',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2008-10-02 11:48:41','ADMIN'),('FRONTDESK','REPORTS','MEALREQUIREMENTS','',0,'ACTIVE','2009-10-13 14:23:51','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','MEALREQUIREMENTS','BTNLIST',0,'ACTIVE','2009-10-13 14:23:51','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','MEALREQUIREMENTS','BTNPREVIEW',0,'ACTIVE','2009-10-13 14:23:51','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','MEALREQUIREMENTS','BTNPRINT',0,'ACTIVE','2009-10-13 14:23:51','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','NATIONALITYREPORT','',0,'ACTIVE','2009-09-29 16:11:52','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','NATIONALITYREPORT','BTNPREVIEW',0,'ACTIVE','2009-09-29 16:11:52','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','NATIONALITYREPORT','BTNPRINT',0,'ACTIVE','2009-09-29 16:11:52','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','NOOFPAX','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','NOOFPAX','BTNCLOSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','NOOFPAX','BTNPRINT',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','NOOFPAX','BTNSHOW',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','OCCUPANCYFORECASTUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','OCCUPANCYFORECASTUI','BTNCLOSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','OCCUPANCYFORECASTUI','BTNPRINT',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','OCCUPANCYFORECASTUI','BTNVIEW',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','REPORTDATEPARAMUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','REPORTGENERATORUI','',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','REPORTGENERATORUI','BTNCLOSE',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','REPORTGENERATORUI','BTNPRINT',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','REPORTVIEWER','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','ROOMINGLISTUI','',1,'ACTIVE','2009-04-21 20:09:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','ROOMINGLISTUI','BTNLIST',1,'ACTIVE','2009-05-09 10:47:50','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','ROOMINGLISTUI','BTNPREVIEW',1,'ACTIVE','2009-04-21 20:09:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','ROOMINGLISTUI','BTNPRINT',1,'ACTIVE','2009-04-21 20:09:45','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','ROOMREVENUEUI','',0,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','ROOMREVENUEUI','BTNCLOSE',0,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','ROOMREVENUEUI','BTNPRINT',0,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','ROOMREVENUEUI','BTNVIEW',0,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','SALESANDMARKETINGREVENUEREPORTUI','',0,'ACTIVE','2010-01-12 18:06:59','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','SALESANDMARKETINGREVENUEREPORTUI','BTNAPPLYCUSTOMIZATION',0,'ACTIVE','2010-01-12 18:06:59','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','SALESANDMARKETINGREVENUEREPORTUI','BTNCLOSE',0,'ACTIVE','2010-01-12 18:06:59','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','SALESANDMARKETINGREVENUEREPORTUI','BTNCLOSEPANEL',0,'ACTIVE','2010-01-12 18:06:59','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','SALESANDMARKETINGREVENUEREPORTUI','BTNCUSTOMIZE',0,'ACTIVE','2010-01-12 18:06:59','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','SALESANDMARKETINGREVENUEREPORTUI','BTNEXPORTTOEXCEL',0,'ACTIVE','2010-01-12 18:06:59','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','SALESANDMARKETINGREVENUEREPORTUI','BTNSHOW',0,'ACTIVE','2010-01-12 18:06:59','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','TRANSACTIONREGISTERUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','TRANSACTIONREGISTERUI','BTNCLOSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','TRANSACTIONREGISTERUI','BTNPRINT',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','REPORTS','TRANSACTIONREGISTERUI','BTNSHOW',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','ADDREASONUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','ADDREASONUI','BTNCANCEL',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','ADDREASONUI','BTNOK',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','BROWSEFOLIOHISTORYUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','BROWSEFOLIOHISTORYUI','BTNCLOSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','BROWSEFOLIOHISTORYUI','BTNSEARCH',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','BROWSEFOLIOHISTORYUI','BTNSELECT',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','BROWSEFOLIOHISTORYUI','BTNVIEWFOLIO',0,'ACTIVE','2009-10-13 14:23:51','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','BROWSEFOLIOHISTORYUI','BTNVIEWFOLIOTRANS',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','BROWSEFOLIOUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','BROWSEFOLIOUI','BTNCLOSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','BROWSEFOLIOUI','BTNOK',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','BROWSEFOLIOUI','BTNSEARCH',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','BROWSETRANSACTIONCODESUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','BROWSETRANSACTIONCODESUI','BTNCLOSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','BROWSETRANSACTIONCODESUI','BTNSELECT',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','ENDORSEMENTLISTUI','',1,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','ENDORSEMENTLISTUI','BTNACKNOWLEDGE',1,'ACTIVE','2009-01-20 13:51:48','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','ENDORSEMENTLISTUI','BTNADD',1,'ACTIVE','2009-01-20 13:51:48','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','ENDORSEMENTLISTUI','BTNCLOSE',1,'ACTIVE','2009-01-20 13:51:48','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','ENDORSEMENTLISTUI','BTNEDIT',1,'ACTIVE','2009-01-20 13:51:48','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','ENDORSEMENTUI','',1,'ACTIVE','2009-01-20 13:51:48','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','ENDORSEMENTUI','BTNCLOSE',1,'ACTIVE','2009-01-20 13:51:48','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','ENDORSEMENTUI','BTNSAVE',1,'ACTIVE','2009-01-20 13:51:48','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','FLOOROCCUPANCYUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','FLOOROCCUPANCYUI','BTNCLOSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','FLOOROCCUPANCYUI','BTNNEXT',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','FLOOROCCUPANCYUI','BTNPREVIOUS',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','GROUPACCOUNTLOOKUP','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','GROUPACCOUNTLOOKUP','BTNCLOSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','GROUPACCOUNTLOOKUP','BTNSEARCH',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','GROUPACCOUNTLOOKUP','BTNSELECT',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','GROUPBLOKINGUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','GROUPBLOKINGUI','BTNBLOCK',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','GROUPBLOKINGUI','BTNCLOSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','GROUPBLOKINGUI','BTNSHOWVACANT',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','GROUPRESERVATIONLISTUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','GROUPRESERVATIONLISTUI','BNTCHECKOUT',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','GROUPRESERVATIONLISTUI','BTNCHANGE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','GROUPRESERVATIONLISTUI','BTNCHECKIN',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','GROUPRESERVATIONLISTUI','BTNCLOSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','GROUPRESERVATIONLISTUI','BTNDELETE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','GROUPRESERVATIONLISTUI','BTNEXPORTTOEXCEL',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','GROUPRESERVATIONLISTUI','BTNINSERT',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','GROUPRESERVATIONUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','GROUPRESERVATIONUI','BTNADDDATE',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','GROUPRESERVATIONUI','BTNADDDATECANCEL',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','GROUPRESERVATIONUI','BTNADDDATEOK',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','GROUPRESERVATIONUI','BTNADDFUNCTIONSCHEDULE',1,'ACTIVE','2008-10-21 14:42:53','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','GROUPRESERVATIONUI','BTNADDHOTELPROMO',1,'ACTIVE','2008-10-27 16:02:02','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','GROUPRESERVATIONUI','BTNADDMENU',0,'ACTIVE','2008-10-21 14:42:53','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','GROUPRESERVATIONUI','BTNADDRECURRINGCHARGE',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','GROUPRESERVATIONUI','BTNADDREQUIREMENTS',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','GROUPRESERVATIONUI','BTNBLOCK',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','GROUPRESERVATIONUI','BTNBOOKINGSHEET',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','GROUPRESERVATIONUI','BTNBROWSEACCOUNT',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','GROUPRESERVATIONUI','BTNBROWSEAGENT',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','GROUPRESERVATIONUI','BTNCANCELRESERVATION',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','GROUPRESERVATIONUI','BTNCHECKIN',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','GROUPRESERVATIONUI','BTNCHECKOUT',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','GROUPRESERVATIONUI','BTNCLOSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','GROUPRESERVATIONUI','BTNEDIT',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','GROUPRESERVATIONUI','BTNFOLIO',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','GROUPRESERVATIONUI','BTNGUESTPRIVILEGES_REMOVE',1,'ACTIVE','2008-10-02 11:48:41','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','GROUPRESERVATIONUI','BTNGUESTPRIVILEGE_ADD',1,'ACTIVE','2008-10-02 11:48:41','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','GROUPRESERVATIONUI','BTNLOADCHARGE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2008-09-11 16:40:26','ADMIN'),('FRONTDESK','RESERVATION','GROUPRESERVATIONUI','BTNMANUALBLOCKROOMS',1,'ACTIVE','2009-04-21 20:09:46','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','GROUPRESERVATIONUI','BTNNEW',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2009-04-22 15:19:22','ALLAN'),('FRONTDESK','RESERVATION','GROUPRESERVATIONUI','BTNNEWAMMENDMENT',0,'ACTIVE','2010-01-12 18:06:59','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','GROUPRESERVATIONUI','BTNNEWDEPOSIT',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','GROUPRESERVATIONUI','BTNNEWMEAL',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','GROUPRESERVATIONUI','BTNPOSTCHARGES',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','GROUPRESERVATIONUI','BTNPRINTAMMENDMENTS',0,'ACTIVE','2010-01-12 18:06:59','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','GROUPRESERVATIONUI','BTNPRINTCONTRACT',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','GROUPRESERVATIONUI','BTNREMOVECHARGE',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','GROUPRESERVATIONUI','BTNREMOVEFUNCTIONSCHEDULE',1,'ACTIVE','2008-10-21 14:42:53','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','GROUPRESERVATIONUI','BTNREMOVEHOTELPROMO',1,'ACTIVE','2008-10-27 16:02:02','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','GROUPRESERVATIONUI','BTNREMOVEMENU',0,'ACTIVE','2008-10-21 14:42:53','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','GROUPRESERVATIONUI','BTNREMOVEPACKAGE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2008-10-25 10:06:05','ALLAN'),('FRONTDESK','RESERVATION','GROUPRESERVATIONUI','BTNREMOVERECURRINGCHARGE',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','GROUPRESERVATIONUI','BTNREMOVEREQUIREMENTS',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','GROUPRESERVATIONUI','BTNSAVE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','GROUPRESERVATIONUI','BTNSAVEAMMENDMENT',0,'ACTIVE','2010-01-12 18:06:59','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','GROUPRESERVATIONUI','BTNSAVEMEAL',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','GROUPRESERVATIONUI','BTNSAVERECURRINGCHARGE',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','GROUPRESERVATIONUI','BTNSAVEREQUIREMENTS',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','GROUPRESERVATIONUI','BTNSAVEROUTING',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','GROUPRESERVATIONUI','BTNTRANSFER',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2008-10-25 10:06:05','ALLAN'),('FRONTDESK','RESERVATION','HOUSEKEEPINGPINUI','',1,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','HOUSEKEEPINGPINUI','BTNCANCEL',1,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','HOUSEKEEPINGPINUI','BTNOK',1,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','INDIVIDUALGUESTLOOKUP','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','INDIVIDUALGUESTLOOKUP','BTNCLOSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','INDIVIDUALGUESTLOOKUP','BTNSEARCH',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','INDIVIDUALGUESTLOOKUP','BTNSELECT',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','MINIBARSALESVIEWUI','',0,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','MINIBARSALESVIEWUI','BTNCLOSE',0,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','MINIBARSALESVIEWUI','BTNLOAD',0,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','MINIBARSALESVIEWUI','BTNVOID',0,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','RATETYPE_INQUIRY','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','RATETYPE_INQUIRY','BTNCLOSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','RATETYPE_INQUIRY','BTNPRINT',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','RATETYPE_INQUIRY','BTNVIEW',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','REASONFORCANCELUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','REASONFORCANCELUI','BTNCANCEL',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','REASONFORCANCELUI','BTNOK',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','RESERVATIONFOLIOUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','RESERVATIONFOLIOUI','BTNADDBILLINGINSTRUCTION',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','RESERVATIONFOLIOUI','BTNADDDEPENDENTGUEST',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','RESERVATIONFOLIOUI','BTNADDHOTELPROMO',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','RESERVATIONFOLIOUI','BTNADDRECURRINGCHARGE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','RESERVATIONFOLIOUI','BTNADDREQUIREMENTS',0,'ACTIVE','2010-01-12 18:06:59','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','RESERVATIONFOLIOUI','BTNAUTOSEEKROOM',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','RESERVATIONFOLIOUI','BTNBROWSEACCOUNT',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','RESERVATIONFOLIOUI','BTNBROWSEAGENT',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','RESERVATIONFOLIOUI','BTNBROWSECOMPANY',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','RESERVATIONFOLIOUI','BTNBROWSEHISTORY',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','RESERVATIONFOLIOUI','BTNCALENDARWIZARD',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','RESERVATIONFOLIOUI','BTNCANCEL',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','RESERVATIONFOLIOUI','BTNCANCELRESERVATION',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','RESERVATIONFOLIOUI','BTNCHECKEDIN',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','RESERVATIONFOLIOUI','BTNCHECKEDOUT',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','RESERVATIONFOLIOUI','BTNCHECKOUTDEPENDENTGUEST',1,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','RESERVATIONFOLIOUI','BTNCLOSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','RESERVATIONFOLIOUI','BTNCONFIRMED',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','RESERVATIONFOLIOUI','BTNFOLIO',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','RESERVATIONFOLIOUI','BTNGUESTPRIVILEGES_REMOVE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','RESERVATIONFOLIOUI','BTNGUESTPRIVILEGE_ADD',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','RESERVATIONFOLIOUI','BTNNOSHOW',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','RESERVATIONFOLIOUI','BTNPRINTINFO',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','RESERVATIONFOLIOUI','BTNREMOVEBILLINGINSTRUCTION',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','RESERVATIONFOLIOUI','BTNREMOVEDEPENDENTGUEST',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','RESERVATIONFOLIOUI','BTNREMOVEHOTELPROMO',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','RESERVATIONFOLIOUI','BTNREMOVERECURRINGCHARGE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','RESERVATIONFOLIOUI','BTNREMOVEREQUIREMENTS',0,'ACTIVE','2010-01-12 18:06:59','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','RESERVATIONFOLIOUI','BTNSAVE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','RESERVATIONFOLIOUI','BTNSETMASTERFOLIO',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','RESERVATIONFOLIOUI','BTNSHOWMASTER',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','RESERVATIONFOLIOUI','BTNVIEWGUESTLIST',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','RESERVATIONLISTUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','RESERVATIONLISTUI','BTNCANCELRESERVATION',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','RESERVATIONLISTUI','BTNCHECKEDIN',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','RESERVATIONLISTUI','BTNCHECKEDOUT',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','RESERVATIONLISTUI','BTNCLOSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','RESERVATIONLISTUI','BTNCONFIRMED',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','RESERVATIONLISTUI','BTNCREATELETTER',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','RESERVATIONLISTUI','BTNINSERT',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','RESERVATIONLISTUI','BTNNOSHOW',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','RESERVATIONLISTUI','BTNPRINTREGCARD',1,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','RESERVATIONLISTUI','BTNSELECTMASTER',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','ROOMAVAILABILITYTODAYUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','ROOMAVAILABILITYTODAYUI','BTNREFRESH',1,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','ROOMCALENDARUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','ROOMCALENDARUI','BTNCLEAR',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2009-01-23 12:07:17','ADMIN'),('FRONTDESK','RESERVATION','ROOMCALENDARUI','BTNCLOSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2009-01-23 12:07:17','ADMIN'),('FRONTDESK','RESERVATION','ROOMCALENDARUI','BTNMARK',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2009-01-23 12:07:17','ADMIN'),('FRONTDESK','RESERVATION','ROOMCALENDARUI','BTNOK',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2009-01-23 12:07:17','ADMIN'),('FRONTDESK','RESERVATION','ROOMCALENDARUI','BTNPRINT',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2009-01-23 12:07:17','ADMIN'),('FRONTDESK','RESERVATION','ROOMCALENDARUI','BTNSETUP',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2009-01-23 12:07:17','ADMIN'),('FRONTDESK','RESERVATION','ROOMCALENDARUI','BTNUNBLOCK',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2009-01-23 12:07:17','ADMIN'),('FRONTDESK','RESERVATION','ROOMCALENDARUI','BTNZOOM',1,'ACTIVE','2008-12-23 17:50:07','ALLAN','2009-01-23 12:07:17','ADMIN'),('FRONTDESK','RESERVATION','ROOMCALENDARUI','BTNZOOMOUT',1,'ACTIVE','2008-12-23 17:50:07','ALLAN','2009-01-23 12:07:17','ADMIN'),('FRONTDESK','RESERVATION','ROOMCALENDAR_NEW','',1,'ACTIVE','2009-02-10 13:51:10','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','ROOMCALENDAR_NEW','BTNCLOSE',1,'ACTIVE','2009-02-10 13:51:10','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','ROOMCALENDAR_NEW','BTNDONE',1,'ACTIVE','2009-02-10 13:51:10','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','ROOMCALENDAR_NEW','BTNMARK',1,'ACTIVE','2009-02-10 13:51:10','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','ROOMCALENDAR_NEW','BTNPRINT',1,'ACTIVE','2009-02-10 13:51:10','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','ROOMCALENDAR_NEW','BTNREMOVE',1,'ACTIVE','2009-02-10 13:51:10','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','ROOMCALENDAR_NEW','BTNSEARCH',1,'ACTIVE','2009-02-10 13:51:10','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','ROOMCALENDAR_NEW','BTNSETUP',1,'ACTIVE','2009-02-10 13:51:10','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','ROOMCALENDAR_NEW','BTNZOOM',1,'ACTIVE','2009-02-10 13:51:10','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','ROOMCALENDAR_NEW','BTNZOOMOUT',1,'ACTIVE','2009-02-10 13:51:10','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','ROOMHISTORYUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','ROOMHISTORYUI','BTNCLOSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','ROOMHISTORYUI','BTNFOLIO',1,'ACTIVE','2009-05-09 10:47:50','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','RESERVATION','ROOMHISTORYUI','BTNPRINT',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SECURITY','CHANGEPASSWORDUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SECURITY','LOCKSCREENUI','',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SECURITY','LOCKSCREENUI','BTNUNLOCK',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SECURITY','LOGINUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SECURITY','LOGINUI','BTNCANCEL',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SECURITY','LOGINUI','BTNLOGIN',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SECURITY','RESETPASSWORDUI','',1,'ACTIVE','2008-09-11 16:40:26','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SECURITY','RESETPASSWORDUI','BTNCANCEL',1,'ACTIVE','2008-09-11 16:40:26','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SECURITY','RESETPASSWORDUI','BTNSAVE',1,'ACTIVE','2008-09-11 16:40:26','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SECURITY','ROLESUI','',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SECURITY','ROLESUI','BTNCANCEL',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SECURITY','ROLESUI','BTNCLOSE',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SECURITY','ROLESUI','BTNDELETE',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SECURITY','ROLESUI','BTNNEW',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SECURITY','ROLESUI','BTNSAVE',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SECURITY','SPLASHSCREENUI','',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SECURITY','SPLASHSCREENUI','BTNOK',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SECURITY','SYSTEMROLEUI','',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SECURITY','SYSTEMROLEUI','BTNCLOSE',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SECURITY','SYSTEMROLEUI','BTNSAVE',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SECURITY','TERMINALUI','',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SECURITY','TERMINALUI','BTNCANCEL',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SECURITY','TERMINALUI','BTNSET',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SECURITY','USERUI','',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SECURITY','USERUI','BTNADD',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SECURITY','USERUI','BTNCANCEL',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SECURITY','USERUI','BTNCLOSE',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SECURITY','USERUI','BTNDELETE',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SECURITY','USERUI','BTNNEW',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SECURITY','USERUI','BTNREMOVE',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SECURITY','USERUI','BTNRESETPASSWORD',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SECURITY','USERUI','BTNSAVE',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SECURITY','USERUI','BTNSEARCH',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SECURITY','VERIFYUSERUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SERVICES','ADDREMARK','',0,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SERVICES','ENGINEERINGJOBUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SERVICES','ENGINEERINGJOBUI','BTNBROWSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SERVICES','ENGINEERINGJOBUI','BTNCANCEL',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SERVICES','ENGINEERINGJOBUI','BTNCLOSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SERVICES','ENGINEERINGJOBUI','BTNDELETE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SERVICES','ENGINEERINGJOBUI','BTNNEW',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SERVICES','ENGINEERINGJOBUI','BTNSAVE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SERVICES','ENGINEERINGJOBUI','BTNSEARCH',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SERVICES','ENGINEERINGJOBUI','BTNVIEWROOMCALENDAR',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SERVICES','ENGINEERINGSERVICEUI','',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SERVICES','ENGINEERINGSERVICEUI','BTNCANCEL',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SERVICES','ENGINEERINGSERVICEUI','BTNCLOSE',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SERVICES','ENGINEERINGSERVICEUI','BTNDELETE',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SERVICES','ENGINEERINGSERVICEUI','BTNNEW',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SERVICES','ENGINEERINGSERVICEUI','BTNSAVE',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SERVICES','ENGINEERINGSERVICEUI','BTNSEARCH',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SERVICES','HOUSEKEEPERUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SERVICES','HOUSEKEEPERUI','BTNCANCEL',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SERVICES','HOUSEKEEPERUI','BTNCLOSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SERVICES','HOUSEKEEPERUI','BTNDELETE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SERVICES','HOUSEKEEPERUI','BTNNEW',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SERVICES','HOUSEKEEPERUI','BTNSAVE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SERVICES','HOUSEKEEPERUI','BTNSEARCH',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SERVICES','HOUSEKEEPINGLOGUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SERVICES','HOUSEKEEPINGLOGUI','BTNCLOSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SERVICES','HOUSEKEEPINGLOGUI','BTNREFRESH',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SERVICES','HOUSEKEEPINGLOGUI','BTNVERIFY',1,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SERVICES','HOUSEKEEPINGTYPEUI','',0,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SERVICES','HOUSEKEEPINGTYPEUI','BTNCANCEL',0,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SERVICES','HOUSEKEEPINGTYPEUI','BTNCLOSESEARCH',0,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SERVICES','HOUSEKEEPINGTYPEUI','BTNDELETE',0,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SERVICES','HOUSEKEEPINGTYPEUI','BTNFIND',0,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SERVICES','HOUSEKEEPINGTYPEUI','BTNNEW',0,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SERVICES','HOUSEKEEPINGTYPEUI','BTNSAVE',0,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SERVICES','HOUSEKEEPINGTYPEUI','BTNSEARCH',0,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SERVICES','HOUSEKEEPINGUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SERVICES','HOUSEKEEPINGUI','BTNADD',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2008-10-02 11:48:41','ADMIN'),('FRONTDESK','SERVICES','HOUSEKEEPINGUI','BTNADDROW',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2008-10-02 11:48:41','ADMIN'),('FRONTDESK','SERVICES','HOUSEKEEPINGUI','BTNBROWSE',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2008-10-02 11:48:41','ADMIN'),('FRONTDESK','SERVICES','HOUSEKEEPINGUI','BTNCANCEL',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2008-10-02 11:48:41','ADMIN'),('FRONTDESK','SERVICES','HOUSEKEEPINGUI','BTNCLOSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SERVICES','HOUSEKEEPINGUI','BTNCLOSE1',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2008-10-02 11:48:41','ADMIN'),('FRONTDESK','SERVICES','HOUSEKEEPINGUI','BTNREMOVEROW',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2008-10-02 11:48:41','ADMIN'),('FRONTDESK','SERVICES','HOUSEKEEPINGUI','BTNSAVE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SERVICES','SERVICESLOOKUPUI','',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SERVICES','SERVICESLOOKUPUI','BTNCLOSE',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','SERVICES','SERVICESLOOKUPUI','BTNSELECT',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','UTILITIES','ALARMUI','',0,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','UTILITIES','ALARMUI','BTNCLOSE',0,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','UTILITIES','ALARMUI','BTNOK',0,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','UTILITIES','ALARMUI','BUTTON1',0,'ACTIVE','2008-12-23 17:50:07','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','UTILITIES','BACKUPUI','',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','UTILITIES','BACKUPUI','BTNBACKUP',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','UTILITIES','BACKUPUI','BTNCLOSE',1,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','UTILITIES','CAPTUREIMAGEUI','',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','UTILITIES','CAPTUREIMAGEUI','BTNCAPTURE',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','UTILITIES','CAPTUREIMAGEUI','BTNCLOSE',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','UTILITIES','CAPTUREIMAGEUI','BTNPREVIEW',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','UTILITIES','CAPTUREIMAGEUI','BTNSAVE',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','UTILITIES','REFERENCETIMEUI','',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','UTILITIES','REFERENCETIMEUI','BTNCLOSE',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','UTILITIES','REFERENCETIMEUI','BTNUPDATE',0,'ACTIVE','2008-09-08 15:58:44','ALLAN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','UTILITIES','RESETUI','',1,'ACTIVE','2010-05-27 14:17:12','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','UTILITIES','RESETUI','BUTTON1',1,'ACTIVE','2010-05-27 14:17:12','ADMIN','2010-10-13 17:52:54','ADMIN'),('FRONTDESK','UTILITIES','RESETUI','BUTTON2',1,'ACTIVE','2010-05-27 14:17:12','ADMIN','2010-10-13 17:52:54','ADMIN');
/*!40000 ALTER TABLE `role_ui_privileges` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `rolemenu`
--

DROP TABLE IF EXISTS `rolemenu`;
CREATE TABLE `rolemenu` (
  `RoleName` varchar(30) NOT NULL,
  `Menu` varchar(50) NOT NULL,
  `Enable` tinyint(1) default '0',
  `HotelId` int(5) default NULL,
  `stateFlag` varchar(20) default NULL,
  `CreatedBy` varchar(30) default NULL,
  `CreateTime` datetime default '2001-01-01 00:00:00',
  `UpdatedBy` varchar(30) default NULL,
  `UpdateTime` datetime default '2001-01-01 00:00:00',
  PRIMARY KEY  (`RoleName`,`Menu`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `rolemenu`
--

LOCK TABLES `rolemenu` WRITE;
/*!40000 ALTER TABLE `rolemenu` DISABLE KEYS */;
INSERT INTO `rolemenu` VALUES ('ADMINISTRATOR','About',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:36','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Accounting Adjustments',1,1,'ACTIVE','ADMIN','2009-09-03 13:54:19','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Accounting Interface',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:36','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Agents',1,1,'ACTIVE','ADMIN','2009-06-25 13:59:32','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Applied Rates',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Arrivals',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Available Rooms Today',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Backup Database',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:36','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Calculator',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:36','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Cancelled Reservation',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Capture Image',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:36','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Cascade',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:36','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Cashier Transactions Per Shift',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Cashiering',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Change Audit Date',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Change Password',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Check Out',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','City Ledger',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','City Transfer',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','City Transfer Transactions',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Close',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Close All Window',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:36','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Close Shift / Cash Drawer',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Configuration',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Configure Day-End Closing',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Copy',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Currency Codes',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Cut',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Daily Hotel Revenue Report',1,1,'ACTIVE','ADMIN','2009-04-16 13:58:37','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Daily Transaction Register',1,1,'ACTIVE','ADMIN','2008-09-13 10:11:56','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Day-End Closing',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Delete',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Departments',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Departures',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Direct Transaction Posting',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Drivers',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Edit',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Endorsements',1,1,'ACTIVE','ALLAN','2008-12-23 17:55:54','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Engineering Job',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Engineering Services',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Event Types',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Events',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Exit',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Expected Arrivals',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Expected Departures',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','File',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Floor Occupancy',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:36','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Floor Plan',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Folio Ledger History',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Folio Ledgers',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Folio User Guide',1,1,'ACTIVE','ADMIN','2010-03-22 13:18:14','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Frontdesk',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Group',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Group Reservation',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Guest by Rate Code',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Guest Ledger',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Guests',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Guests List',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Guests Report',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Help',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:36','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','High Balance Guests',1,1,'ACTIVE','ADMIN','2009-02-10 13:51:04','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Hotel',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Hotel Information',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Hotel Revenue',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Housekeepers',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Housekeepers Report',1,1,'ACTIVE','ALLAN','2008-11-27 15:42:33','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Housekeepers Summary',1,1,'ACTIVE','ALLAN','2008-11-27 15:42:33','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Housekeeping',1,1,'ACTIVE','ALLAN','2008-11-27 15:42:33','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Housekeeping Activity',1,1,'ACTIVE','ALLAN','2008-11-27 15:42:33','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Housekeeping Job',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Housekeeping Report',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:36','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Housekeeping Status',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:36','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Housekeeping Step Procedure',1,1,'ACTIVE','ALLAN','2008-11-27 15:42:33','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','In-House Guest List',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Individual',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Inhouse Guests Forecast',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Inquiry',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Item Categories',1,1,'ACTIVE','ALLAN','2008-11-27 15:42:33','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Items',1,1,'ACTIVE','ALLAN','2008-11-27 15:42:33','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Lock Screen',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Log Off',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Logs',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:36','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Mail Recipient',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Meal Requirements',1,1,'ACTIVE','ALLAN','2009-10-13 17:16:37','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Meals',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Minibar',1,1,'ACTIVE','ALLAN','2008-11-27 15:42:33','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Minibar Items',1,1,'ACTIVE','ALLAN','2008-11-27 15:42:33','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Minibar Sales',1,1,'ACTIVE','ALLAN','2008-11-27 15:42:33','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Minibar Sales by Housekeeper',1,1,'ACTIVE','ALLAN','2008-11-27 15:42:33','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Minibar Sales by Item Category',1,1,'ACTIVE','ALLAN','2008-11-27 15:42:33','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Minibar Sales by Room',1,1,'ACTIVE','ALLAN','2008-11-27 15:42:33','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Minibar Sales View',1,1,'ACTIVE','ADMIN','2009-01-23 12:08:11','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Nationality Report',1,1,'ACTIVE','ALLAN','2009-09-29 16:12:18','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','New',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Night Audit',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','No. Of Pax',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Notepad',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:36','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Occupancy Forecast',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:36','ADMIN','2008-09-13 10:11:56'),('ADMINISTRATOR','Open',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Open Shift / Cash Drawer',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Out Of Order Rooms',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Package',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Page Setup',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Paste',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Post to Accounting',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:36','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Print',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Print Preview',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Privileges',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Promos',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Protect App Config',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:36','ADMIN','2008-10-20 17:49:17'),('ADMINISTRATOR','Quick Blocking',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Rate Codes',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Rate Types',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Redo',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Reference Time',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:36','ADMIN','2008-10-20 17:49:17'),('ADMINISTRATOR','Refresh',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Report Generator',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:36','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Reports',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Requirements',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Reset Transaction',1,1,'ACTIVE','ADMIN','2010-05-19 16:29:46','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Restaurant',1,1,'ACTIVE','ALLAN','2009-10-13 17:16:37','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Room',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Room Amenities',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Room Availability',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Room Blocking',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2009-01-23 12:11:38'),('ADMINISTRATOR','Room Calendar',1,1,'ACTIVE','ADMIN','2009-02-10 13:51:04','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Room History',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Room Occupancy',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Room Occupancy Trend',1,1,'ACTIVE','ADMIN','2008-10-02 11:48:30','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Room Rates',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Room Revenue',1,1,'ACTIVE','ALLAN','2008-11-27 15:42:33','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Room Status',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Room Transfer',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Room Types',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Rooming List',1,1,'ACTIVE','ADMIN','2009-04-16 13:58:37','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Rooms',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Rooms Report',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Route Transaction',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Sales Forecast',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Save',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Search',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Send To',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Services',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Set Terminal',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Share Reservation',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Single Reservation',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Single Reservation (Non-Staying)',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','System Configuration',1,1,'ACTIVE','ADMIN','2008-10-04 11:24:12','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','System Menu Roles',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','System Roles',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','System Users',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Telephone Directory',1,1,'ACTIVE','ALLAN','2008-12-23 17:55:54','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Tile Horizontal',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:36','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Tile Vertical',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:36','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Tools',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:36','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Transaction',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Transaction Code - GL Account Setup',1,1,'ACTIVE','ADMIN','2009-04-16 13:58:37','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Transaction Code Sub-Accounts',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Transaction Codes',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Transaction Register',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Transaction Sources',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Transaction Summary',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Transaction Types',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Transactions',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Transactions Report',1,1,'ACTIVE','ADMIN','2008-09-13 10:11:56','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Undo',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Voided Transactions',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Wait List Reservation',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:35','ADMIN','2010-06-04 17:18:03'),('ADMINISTRATOR','Window',1,1,'ACTIVE','ADMIN','2008-09-05 14:33:36','ADMIN','2010-06-04 17:18:03'),('FRONTDESK','About',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Accounting Adjustments',0,1,'ACTIVE','ALLAN','2009-09-23 17:11:18','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Accounting Interface',0,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Agents',0,1,'ACTIVE','ALLAN','2009-07-07 14:18:05','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Applied Rates',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Arrivals',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Available Rooms Today',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Backup Database',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Calculator',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Cancelled Reservation',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Capture Image',0,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Cascade',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Cashier Transactions Per Shift',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Cashiering',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Change Audit Date',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Change Password',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Check Out',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','City Ledger',0,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','City Transfer',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','City Transfer Transactions',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Close',0,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Close All Window',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Close Shift / Cash Drawer',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Configuration',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Configure Day-End Closing',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Copy',0,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Currency Codes',0,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Cut',0,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Daily Hotel Revenue Report',1,1,'ACTIVE','ADMIN','2009-04-21 20:09:45','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Daily Transaction Register',1,1,'ACTIVE','ADMIN','2008-10-02 11:48:41','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Day-End Closing',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Delete',0,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Departments',0,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Departures',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Direct Transaction Posting',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Drivers',0,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Edit',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Endorsements',1,1,'ACTIVE','ALLAN','2008-12-23 17:50:07','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Engineering Job',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Engineering Services',0,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Event Types',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Events',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Exit',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Expected Arrivals',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Expected Departures',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','File',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Floor Occupancy',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Floor Plan',0,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Folio Ledger History',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Folio Ledgers',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Folio User Guide',1,1,'ACTIVE','ADMIN','2010-05-13 18:50:45','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Frontdesk',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Group',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Group Reservation',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Guest by Rate Code',0,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Guest Ledger',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Guests',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Guests List',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Guests Report',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Help',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','High Balance Guests',1,1,'ACTIVE','ADMIN','2009-02-10 13:51:09','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Hotel',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Hotel Information',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Hotel Revenue',0,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Housekeepers',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Housekeepers Report',0,1,'ACTIVE','ALLAN','2008-12-23 17:50:07','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Housekeepers Summary',0,1,'ACTIVE','ALLAN','2008-12-23 17:50:07','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Housekeeping',1,1,'ACTIVE','ALLAN','2008-12-23 17:50:07','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Housekeeping Activity',0,1,'ACTIVE','ALLAN','2008-12-23 17:50:07','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Housekeeping Job',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Housekeeping Report',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Housekeeping Status',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Housekeeping Step Procedure',0,1,'ACTIVE','ALLAN','2008-12-23 17:50:07','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','In-House Guest List',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Individual',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Inhouse Guests Forecast',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Inquiry',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Item Categories',0,1,'ACTIVE','ALLAN','2008-12-23 17:50:07','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Items',0,1,'ACTIVE','ALLAN','2008-12-23 17:50:07','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Lock Screen',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Log Off',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Logs',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Mail Recipient',0,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Meal Requirements',0,1,'ACTIVE','ALLAN','2009-10-13 14:23:51','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Meals',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Minibar',0,1,'ACTIVE','ALLAN','2008-12-23 17:50:07','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Minibar Items',0,1,'ACTIVE','ALLAN','2008-12-23 17:50:07','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Minibar Sales',0,1,'ACTIVE','ALLAN','2008-12-23 17:50:07','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Minibar Sales by Housekeeper',0,1,'ACTIVE','ALLAN','2008-12-23 17:50:07','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Minibar Sales by Item Category',0,1,'ACTIVE','ALLAN','2008-12-23 17:50:07','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Minibar Sales by Room',0,1,'ACTIVE','ALLAN','2008-12-23 17:50:07','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Minibar Sales View',0,1,'ACTIVE','ALLAN','2009-01-20 13:51:48','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Nationality Report',1,1,'ACTIVE','ALLAN','2009-09-29 16:11:52','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','New',0,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Night Audit',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','No. Of Pax',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Notepad',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Occupancy Forecast',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2008-09-11 16:40:25'),('FRONTDESK','Open',0,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Open Shift / Cash Drawer',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Out Of Order Rooms',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Package',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Page Setup',0,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Paste',0,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Post to Accounting',0,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Print',0,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Print Preview',0,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Privileges',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Promos',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Protect App Config',0,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ALLAN','2008-10-27 16:02:01'),('FRONTDESK','Quick Blocking',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Rate Codes',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Rate Types',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Redo',0,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Reference Time',0,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ALLAN','2008-10-27 16:02:01'),('FRONTDESK','Refresh',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Report Generator',0,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Reports',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Requirements',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Reset Transaction',1,1,'ACTIVE','ADMIN','2010-05-27 14:17:12','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Restaurant',0,1,'ACTIVE','ALLAN','2009-10-13 14:23:51','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Room',0,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Room Amenities',0,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Room Availability',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Room Blocking',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2009-01-23 12:07:16'),('FRONTDESK','Room Calendar',1,1,'ACTIVE','ADMIN','2009-02-10 13:51:09','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Room History',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Room Occupancy',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Room Occupancy Trend',1,1,'ACTIVE','ADMIN','2008-10-02 11:48:41','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Room Rates',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Room Revenue',0,1,'ACTIVE','ALLAN','2008-12-23 17:50:07','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Room Status',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Room Transfer',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Room Types',0,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Rooming List',1,1,'ACTIVE','ADMIN','2009-04-21 20:09:45','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Rooms',0,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Rooms Report',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Route Transaction',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Sales Forecast',0,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Save',0,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Search',0,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Send To',0,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Services',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Set Terminal',0,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Share Reservation',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Single Reservation',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Single Reservation (Non-Staying)',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','System Configuration',0,1,'ACTIVE','ALLAN','2008-10-21 14:42:52','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','System Menu Roles',0,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','System Roles',0,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','System Users',0,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Telephone Directory',0,1,'ACTIVE','ALLAN','2008-12-23 17:50:07','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Tile Horizontal',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Tile Vertical',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Tools',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Transaction',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Transaction Code - GL Account Setup',0,1,'ACTIVE','ADMIN','2009-04-21 20:09:45','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Transaction Code Sub-Accounts',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Transaction Codes',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Transaction Register',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Transaction Sources',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Transaction Summary',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Transaction Types',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Transactions',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Transactions Report',1,1,'ACTIVE','ADMIN','2008-10-02 11:48:41','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Undo',0,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Voided Transactions',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Wait List Reservation',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54'),('FRONTDESK','Window',1,1,'ACTIVE','ALLAN','2008-09-08 15:58:44','ADMIN','2010-10-13 17:52:54');
/*!40000 ALTER TABLE `rolemenu` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `roles`
--

DROP TABLE IF EXISTS `roles`;
CREATE TABLE `roles` (
  `RoleName` varchar(30) NOT NULL,
  `Description` varchar(100) default NULL,
  `HotelId` int(5) default NULL,
  `CreatedBy` varchar(30) default NULL,
  `CreateTime` datetime default NULL,
  `UpdatedBy` varchar(30) default NULL,
  `UpdateTime` datetime default NULL,
  PRIMARY KEY  (`RoleName`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `roles`
--

LOCK TABLES `roles` WRITE;
/*!40000 ALTER TABLE `roles` DISABLE KEYS */;
INSERT INTO `roles` VALUES ('ADMINISTRATOR','ADMIN ROLES',1,'ADMIN','2007-01-10 14:51:00','ADMIN','2007-01-10 14:51:00'),('FRONTDESK','FRONTDESK',1,'ADMIN','2006-05-27 09:52:49','ADMIN','2006-05-27 10:29:30');
/*!40000 ALTER TABLE `roles` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `roomamenities`
--

DROP TABLE IF EXISTS `roomamenities`;
CREATE TABLE `roomamenities` (
  `roomid` varchar(10) NOT NULL,
  `amenityid` varchar(20) NOT NULL,
  `HOTELID` int(5) NOT NULL,
  `CREATETIME` datetime default '2001-01-01 01:01:01',
  `CREATEDBY` varchar(20) default NULL,
  `UPDATETIME` datetime default '2001-01-01 01:01:01',
  `UPDATEDBY` varchar(20) default NULL,
  `stateflag` varchar(20) default 'ACTIVE',
  PRIMARY KEY  (`roomid`,`amenityid`,`HOTELID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `roomamenities`
--

LOCK TABLES `roomamenities` WRITE;
/*!40000 ALTER TABLE `roomamenities` DISABLE KEYS */;
INSERT INTO `roomamenities` VALUES ('201','02',1,'2010-06-05 14:05:33','ADMIN','2010-06-05 14:05:33','ADMIN','ACTIVE'),('201','03',1,'2010-06-05 14:05:33','ADMIN','2010-06-05 14:05:33','ADMIN','ACTIVE'),('201','05',1,'2010-06-05 14:05:33','ADMIN','2010-06-05 14:05:33','ADMIN','ACTIVE'),('202','02',1,'2010-06-05 14:05:37','ADMIN','2010-06-05 14:05:37','ADMIN','ACTIVE'),('202','03',1,'2010-06-05 14:05:37','ADMIN','2010-06-05 14:05:37','ADMIN','ACTIVE'),('202','05',1,'2010-06-05 14:05:37','ADMIN','2010-06-05 14:05:37','ADMIN','ACTIVE'),('203','02',1,'2010-06-05 14:05:41','ADMIN','2010-06-05 14:05:41','ADMIN','ACTIVE'),('203','03',1,'2010-06-05 14:05:41','ADMIN','2010-06-05 14:05:41','ADMIN','ACTIVE'),('203','05',1,'2010-06-05 14:05:41','ADMIN','2010-06-05 14:05:41','ADMIN','ACTIVE'),('204','02',1,'2010-06-05 14:05:45','ADMIN','2010-06-05 14:05:45','ADMIN','ACTIVE'),('204','03',1,'2010-06-05 14:05:45','ADMIN','2010-06-05 14:05:45','ADMIN','ACTIVE'),('204','05',1,'2010-06-05 14:05:45','ADMIN','2010-06-05 14:05:45','ADMIN','ACTIVE'),('301','02',1,'2010-06-05 14:05:50','ADMIN','2010-06-05 14:05:50','ADMIN','ACTIVE'),('301','03',1,'2010-06-05 14:05:50','ADMIN','2010-06-05 14:05:50','ADMIN','ACTIVE'),('301','05',1,'2010-06-05 14:05:50','ADMIN','2010-06-05 14:05:50','ADMIN','ACTIVE'),('302','02',1,'2010-06-05 14:05:54','ADMIN','2010-06-05 14:05:54','ADMIN','ACTIVE'),('302','03',1,'2010-06-05 14:05:54','ADMIN','2010-06-05 14:05:54','ADMIN','ACTIVE'),('302','05',1,'2010-06-05 14:05:54','ADMIN','2010-06-05 14:05:54','ADMIN','ACTIVE'),('303','02',1,'2010-06-05 14:05:58','ADMIN','2010-06-05 14:05:58','ADMIN','ACTIVE'),('303','03',1,'2010-06-05 14:05:58','ADMIN','2010-06-05 14:05:58','ADMIN','ACTIVE'),('303','05',1,'2010-06-05 14:05:58','ADMIN','2010-06-05 14:05:58','ADMIN','ACTIVE'),('304','02',1,'2010-06-05 14:06:02','ADMIN','2010-06-05 14:06:02','ADMIN','ACTIVE'),('304','03',1,'2010-06-05 14:06:02','ADMIN','2010-06-05 14:06:02','ADMIN','ACTIVE'),('304','05',1,'2010-06-05 14:06:02','ADMIN','2010-06-05 14:06:02','ADMIN','ACTIVE'),('401','02',1,'2010-06-05 14:06:07','ADMIN','2010-06-05 14:06:07','ADMIN','ACTIVE'),('401','03',1,'2010-06-05 14:06:07','ADMIN','2010-06-05 14:06:07','ADMIN','ACTIVE'),('401','04',1,'2010-06-05 14:06:07','ADMIN','2010-06-05 14:06:07','ADMIN','ACTIVE'),('401','05',1,'2010-06-05 14:06:07','ADMIN','2010-06-05 14:06:07','ADMIN','ACTIVE'),('402','02',1,'2010-06-05 14:06:10','ADMIN','2010-06-05 14:06:10','ADMIN','ACTIVE'),('402','03',1,'2010-06-05 14:06:10','ADMIN','2010-06-05 14:06:10','ADMIN','ACTIVE'),('402','04',1,'2010-06-05 14:06:10','ADMIN','2010-06-05 14:06:10','ADMIN','ACTIVE'),('402','05',1,'2010-06-05 14:06:10','ADMIN','2010-06-05 14:06:10','ADMIN','ACTIVE'),('403','02',1,'2010-06-05 14:06:18','ADMIN','2010-06-05 14:06:18','ADMIN','ACTIVE'),('403','03',1,'2010-06-05 14:06:18','ADMIN','2010-06-05 14:06:18','ADMIN','ACTIVE'),('403','04',1,'2010-06-05 14:06:18','ADMIN','2010-06-05 14:06:18','ADMIN','ACTIVE'),('403','05',1,'2010-06-05 14:06:18','ADMIN','2010-06-05 14:06:18','ADMIN','ACTIVE'),('404','02',1,'2010-06-05 14:06:14','ADMIN','2010-06-05 14:06:14','ADMIN','ACTIVE'),('404','03',1,'2010-06-05 14:06:14','ADMIN','2010-06-05 14:06:14','ADMIN','ACTIVE'),('404','04',1,'2010-06-05 14:06:14','ADMIN','2010-06-05 14:06:14','ADMIN','ACTIVE'),('404','05',1,'2010-06-05 14:06:14','ADMIN','2010-06-05 14:06:14','ADMIN','ACTIVE'),('501','01',1,'2010-06-05 14:06:22','ADMIN','2010-06-05 14:06:22','ADMIN','ACTIVE'),('501','02',1,'2010-06-05 14:06:22','ADMIN','2010-06-05 14:06:22','ADMIN','ACTIVE'),('501','03',1,'2010-06-05 14:06:22','ADMIN','2010-06-05 14:06:22','ADMIN','ACTIVE'),('501','04',1,'2010-06-05 14:06:22','ADMIN','2010-06-05 14:06:22','ADMIN','ACTIVE'),('501','05',1,'2010-06-05 14:06:22','ADMIN','2010-06-05 14:06:22','ADMIN','ACTIVE'),('502','01',1,'2010-06-05 14:06:26','ADMIN','2010-06-05 14:06:26','ADMIN','ACTIVE'),('502','02',1,'2010-06-05 14:06:26','ADMIN','2010-06-05 14:06:26','ADMIN','ACTIVE'),('502','03',1,'2010-06-05 14:06:26','ADMIN','2010-06-05 14:06:26','ADMIN','ACTIVE'),('502','04',1,'2010-06-05 14:06:26','ADMIN','2010-06-05 14:06:26','ADMIN','ACTIVE'),('502','05',1,'2010-06-05 14:06:26','ADMIN','2010-06-05 14:06:26','ADMIN','ACTIVE'),('503','01',1,'2010-06-05 14:06:30','ADMIN','2010-06-05 14:06:30','ADMIN','ACTIVE'),('503','02',1,'2010-06-05 14:06:30','ADMIN','2010-06-05 14:06:30','ADMIN','ACTIVE'),('503','03',1,'2010-06-05 14:06:30','ADMIN','2010-06-05 14:06:30','ADMIN','ACTIVE'),('503','04',1,'2010-06-05 14:06:30','ADMIN','2010-06-05 14:06:30','ADMIN','ACTIVE'),('503','05',1,'2010-06-05 14:06:30','ADMIN','2010-06-05 14:06:30','ADMIN','ACTIVE'),('504','01',1,'2010-06-05 14:06:34','ADMIN','2010-06-05 14:06:34','ADMIN','ACTIVE'),('504','02',1,'2010-06-05 14:06:34','ADMIN','2010-06-05 14:06:34','ADMIN','ACTIVE'),('504','03',1,'2010-06-05 14:06:34','ADMIN','2010-06-05 14:06:34','ADMIN','ACTIVE'),('504','04',1,'2010-06-05 14:06:34','ADMIN','2010-06-05 14:06:34','ADMIN','ACTIVE'),('504','05',1,'2010-06-05 14:06:35','ADMIN','2010-06-05 14:06:35','ADMIN','ACTIVE');
/*!40000 ALTER TABLE `roomamenities` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `roomblock`
--

DROP TABLE IF EXISTS `roomblock`;
CREATE TABLE `roomblock` (
  `Blockid` int(11) NOT NULL,
  `Reason` text,
  `FolioId` varchar(20) default NULL,
  `HOTELID` int(5) NOT NULL default '1',
  `CREATETIME` datetime default '2001-01-01 01:01:01',
  `CREATEDBY` varchar(20) default NULL,
  `UPDATETIME` datetime default '2001-01-01 01:01:01',
  `UPDATEDBY` varchar(20) default NULL,
  PRIMARY KEY  (`Blockid`,`HOTELID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `roomblock`
--

LOCK TABLES `roomblock` WRITE;
/*!40000 ALTER TABLE `roomblock` DISABLE KEYS */;
/*!40000 ALTER TABLE `roomblock` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `roomevents`
--

DROP TABLE IF EXISTS `roomevents`;
CREATE TABLE `roomevents` (
  `EventNo` int(10) NOT NULL auto_increment,
  `EventID` varchar(20) NOT NULL,
  `RoomID` varchar(10) NOT NULL,
  `EVENTDATE` date default '2001-01-01',
  `EventType` varchar(25) default NULL,
  `RoomRate` decimal(12,2) default '0.00',
  `ChargeFlag` varchar(1) default '0',
  `CREATETIME` datetime default '2001-01-01 01:01:01',
  `CREATEDBY` varchar(20) default NULL,
  `UPDATETIME` datetime default '2001-01-01 01:01:01',
  `UPDATEDBY` varchar(20) default NULL,
  `HOTELID` int(5) NOT NULL default '0',
  `transferflag` varchar(1) default '0',
  `startTime` time default '00:00:00',
  `endTime` time default '00:00:00',
  PRIMARY KEY  (`EventNo`,`EventID`,`HOTELID`),
  UNIQUE KEY `EventNo` (`EventNo`),
  KEY `EventID` (`EventID`),
  KEY `RoomID` (`RoomID`),
  KEY `EVENTDATE` (`EVENTDATE`),
  KEY `EventType` (`EventType`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `roomevents`
--

LOCK TABLES `roomevents` WRITE;
/*!40000 ALTER TABLE `roomevents` DISABLE KEYS */;
INSERT INTO `roomevents` VALUES (1,'F-0000000001','904','2010-10-14','RESERVATION','0.00','0','2010-10-13 14:10:27','ADMIN','2010-10-13 14:10:27','ADMIN',1,'0','08:00:00','17:00:00'),(2,'F-0000000001','904','2010-10-15','RESERVATION','0.00','0','2010-10-13 14:10:27','ADMIN','2010-10-13 14:10:27','ADMIN',1,'0','08:00:00','17:00:00'),(3,'F-0000000002','905','2010-10-14','RESERVATION','0.00','0','2010-10-13 14:10:58','ADMIN','2010-10-13 14:10:58','ADMIN',1,'0','08:00:00','17:00:00'),(4,'F-0000000002','905','2010-10-15','RESERVATION','0.00','0','2010-10-13 14:10:58','ADMIN','2010-10-13 14:10:58','ADMIN',1,'0','08:00:00','17:00:00');
/*!40000 ALTER TABLE `roomevents` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `rooms`
--

DROP TABLE IF EXISTS `rooms`;
CREATE TABLE `rooms` (
  `roomid` varchar(10) NOT NULL default '0',
  `hotelid` int(5) NOT NULL default '0',
  `roomtypecode` varchar(50) NOT NULL default '0',
  `floor` varchar(20) default NULL,
  `windows` tinyint(1) default '1',
  `dirfacing` varchar(10) default NULL,
  `adjleft` varchar(10) default NULL,
  `adjright` varchar(10) default NULL,
  `roomimage` text,
  `stateflag` varchar(20) default 'VACANT',
  `cleaningstatus` varchar(11) default 'CLEAN',
  `smokingtype` tinyint(1) default '0',
  `xcoordinate` int(5) default '0',
  `ycoordinate` int(5) default '0',
  `telephoneNo` varchar(15) default NULL,
  `bedsplittable` tinyint(1) default '0',
  `CREATETIME` datetime default '2001-01-01 01:01:01',
  `CREATEDBY` varchar(20) default NULL,
  `UPDATETIME` datetime default '2001-01-01 01:01:01',
  `UPDATEDBY` varchar(20) default NULL,
  PRIMARY KEY  (`roomid`,`hotelid`),
  UNIQUE KEY `roomid` (`roomid`),
  KEY `hotelid` (`hotelid`),
  KEY `roomtypecode` (`roomtypecode`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `rooms`
--

LOCK TABLES `rooms` WRITE;
/*!40000 ALTER TABLE `rooms` DISABLE KEYS */;
INSERT INTO `rooms` VALUES ('101',1,'DELUXE','1',0,'','','','','VACANT','CLEAN',0,0,0,'101',0,'2010-05-31 09:58:15','ADMIN','2010-05-31 17:10:30','ADMIN'),('102',1,'DELUXE','1',0,'','','','','VACANT','CLEAN',0,0,0,'102',0,'2010-05-31 09:58:25','ADMIN','2010-05-31 17:13:53','ADMIN'),('103',1,'DELUXE','1',0,'','','','','DELETED','CLEAN',0,0,0,'103',0,'2010-05-31 09:58:34','ADMIN','2010-07-02 17:37:05','ROOT'),('104',1,'DELUXE','1',0,'','','','','VACANT','CLEAN',0,0,0,'104',0,'2010-05-31 09:58:42','ADMIN','2010-05-31 09:58:42','ADMIN'),('201',1,'DELUXE','2',0,'','','','','VACANT','CLEAN',0,0,0,'201',0,'2010-05-20 16:19:22','ADMIN','2010-06-05 14:05:33','ADMIN'),('202',1,'DELUXE','2',0,'','','','','DELETED','CLEAN',0,0,0,'202',0,'2010-05-20 16:19:44','ADMIN','2010-07-02 17:36:59','ROOT'),('203',1,'DELUXE','2',0,'','','','','VACANT','CLEAN',0,0,0,'203',0,'2010-05-20 16:19:56','ADMIN','2010-06-05 14:05:41','ADMIN'),('204',1,'DELUXE','2',0,'','','','','VACANT','CLEAN',0,0,0,'204',0,'2010-05-20 16:20:09','ADMIN','2010-06-05 14:05:45','ADMIN'),('205',1,'DELUXE','2',0,'','','','','VACANT','CLEAN',0,0,0,'205',0,'2010-06-07 15:43:05','ADMIN','2010-06-07 15:43:05','ADMIN'),('206',1,'DELUXE','2',0,'','','','','DELETED','CLEAN',0,0,0,'206',0,'2010-06-07 15:43:12','ADMIN','2010-07-02 17:37:01','ROOT'),('207',1,'DELUXE','2',0,'','','','','VACANT','CLEAN',0,0,0,'207',0,'2010-06-07 15:43:18','ADMIN','2010-06-07 15:43:18','ADMIN'),('208',1,'DELUXE','2',0,'','','','','VACANT','CLEAN',0,0,0,'208',0,'2010-06-07 15:43:26','ADMIN','2010-06-07 15:43:26','ADMIN'),('301',1,'STANDARD','3',0,'','','','','DELETED','CLEAN',0,0,0,'301',0,'2010-05-20 16:20:25','ADMIN','2010-07-02 17:36:54','ROOT'),('302',1,'STANDARD','3',0,'','','','','VACANT','CLEAN',0,0,0,'302',0,'2010-05-20 16:20:37','ADMIN','2010-06-05 14:05:54','ADMIN'),('303',1,'STANDARD','3',0,'','','','','VACANT','CLEAN',0,0,0,'303',0,'2010-05-20 16:20:51','ADMIN','2010-06-05 14:05:58','ADMIN'),('304',1,'STANDARD','3',0,'','','','','DELETED','CLEAN',0,0,0,'304',0,'2010-05-20 16:21:00','ADMIN','2010-07-02 17:36:57','ROOT'),('305',1,'STANDARD','3',0,'','','','','VACANT','CLEAN',0,0,0,'305',0,'2010-06-07 15:43:45','ADMIN','2010-06-07 15:43:45','ADMIN'),('306',1,'STANDARD','3',0,'','','','','VACANT','CLEAN',0,0,0,'306',0,'2010-06-07 15:43:52','ADMIN','2010-06-07 15:43:52','ADMIN'),('307',1,'STANDARD','3',0,'','','','','VACANT','CLEAN',0,0,0,'307',0,'2010-06-07 15:43:59','ADMIN','2010-06-07 15:43:59','ADMIN'),('308',1,'STANDARD','3',0,'','','','','VACANT','CLEAN',0,0,0,'308',0,'2010-06-07 15:44:07','ADMIN','2010-06-07 15:44:07','ADMIN'),('401',1,'STANDARD','4',0,'','','','','VACANT','CLEAN',0,0,0,'401',0,'2010-05-20 16:21:26','ADMIN','2010-06-05 14:06:07','ADMIN'),('402',1,'STANDARD','4',0,'','','','','VACANT','CLEAN',0,0,0,'402',0,'2010-05-20 16:21:36','ADMIN','2010-06-05 14:06:10','ADMIN'),('403',1,'STANDARD','4',0,'','','','','VACANT','CLEAN',0,0,0,'403',0,'2010-05-20 16:21:45','ADMIN','2010-06-05 14:06:18','ADMIN'),('404',1,'STANDARD','4',0,'','','','','VACANT','CLEAN',0,0,0,'404',0,'2010-05-20 16:21:15','ADMIN','2010-06-05 14:06:14','ADMIN'),('405',1,'MATRIMONIAL','4',0,'','','','','VACANT','CLEAN',0,0,0,'405',0,'2010-06-07 15:44:30','ADMIN','2010-06-07 15:44:30','ADMIN'),('406',1,'MATRIMONIAL','4',0,'','','','','VACANT','CLEAN',0,0,0,'406',0,'2010-06-07 15:44:38','ADMIN','2010-06-07 15:44:38','ADMIN'),('407',1,'MATRIMONIAL','4',0,'','','','','VACANT','CLEAN',0,0,0,'407',0,'2010-06-07 15:44:45','ADMIN','2010-06-07 15:44:45','ADMIN'),('408',1,'STANDARD','4',0,'','','','','VACANT','CLEAN',0,0,0,'408',0,'2010-06-07 15:44:54','ADMIN','2010-06-07 15:44:54','ADMIN'),('501',1,'MATRIMONIAL','5',0,'','','','','VACANT','CLEAN',0,0,0,'501',0,'2010-05-20 16:21:59','ADMIN','2010-06-05 14:06:22','ADMIN'),('502',1,'MATRIMONIAL','5',0,'','','','','VACANT','CLEAN',0,0,0,'502',0,'2010-05-20 16:22:10','ADMIN','2010-06-05 14:06:26','ADMIN'),('503',1,'MATRIMONIAL','5',0,'','','','','VACANT','CLEAN',0,0,0,'503',0,'2010-05-20 16:22:23','ADMIN','2010-06-05 14:06:30','ADMIN'),('504',1,'MATRIMONIAL','4',0,'','','','','VACANT','CLEAN',0,0,0,'504',0,'2010-05-20 16:22:34','ADMIN','2010-06-05 14:06:34','ADMIN'),('601',1,'MATRIMONIAL','6',0,'','','','','VACANT','CLEAN',0,0,0,'601',0,'2010-05-31 10:35:58','ADMIN','2010-06-05 14:06:39','ADMIN'),('602',1,'MATRIMONIAL','6',0,'','','','','VACANT','CLEAN',0,0,0,'602',0,'2010-05-31 10:36:05','ADMIN','2010-06-05 14:06:42','ADMIN'),('603',1,'MATRIMONIAL','6',0,'','','','','VACANT','CLEAN',0,0,0,'603',0,'2010-05-31 10:36:12','ADMIN','2010-06-05 14:06:46','ADMIN'),('604',1,'MATRIMONIAL','6',0,'','','','','VACANT','CLEAN',0,0,0,'604',0,'2010-05-31 10:36:19','ADMIN','2010-06-05 14:06:49','ADMIN'),('701',1,'SUPERIOR','7',0,'','','','','VACANT','CLEAN',0,0,0,'701',0,'2010-06-05 14:07:06','ADMIN','2010-06-05 14:07:06','ADMIN'),('702',1,'SUPERIOR','7',0,'','','','','VACANT','CLEAN',0,0,0,'702',0,'2010-06-05 14:07:15','ADMIN','2010-06-05 14:07:15','ADMIN'),('703',1,'SUPERIOR','7',0,'','','','','VACANT','CLEAN',0,0,0,'703',0,'2010-06-05 14:07:23','ADMIN','2010-06-05 14:07:23','ADMIN'),('704',1,'SUPERIOR','7',0,'','','','','VACANT','CLEAN',0,0,0,'704',0,'2010-06-05 14:07:31','ADMIN','2010-06-05 14:07:31','ADMIN'),('705',1,'SUPERIOR','7',0,'','','','','VACANT','CLEAN',0,0,0,'705',0,'2010-06-07 15:46:59','ADMIN','2010-06-07 15:46:59','ADMIN'),('706',1,'SUPERIOR','7',0,'','','','','VACANT','CLEAN',0,0,0,'706',0,'2010-06-07 15:47:07','ADMIN','2010-06-07 15:47:07','ADMIN'),('801',1,'DELUXE','8',0,NULL,NULL,NULL,NULL,'VACANT','CLEAN',0,0,0,'801',0,'2010-06-05 14:20:07','ADMIN','2010-06-05 14:20:07','ADMIN'),('802',1,'DELUXE','8',0,NULL,NULL,NULL,NULL,'VACANT','CLEAN',0,0,0,'802',0,'2010-06-05 14:20:17','ADMIN','2010-06-05 14:20:17','ADMIN'),('803',1,'DELUXE','8',0,NULL,NULL,NULL,NULL,'VACANT','CLEAN',0,0,0,'803',0,'2010-06-05 14:20:24','ADMIN','2010-06-05 14:20:24','ADMIN'),('804',1,'DELUXE','8',0,'','','','','VACANT','CLEAN',0,0,0,'804',0,'2010-06-07 15:41:48','ADMIN','2010-06-07 15:41:48','ADMIN'),('805',1,'DELUXE','8',0,'','','','','VACANT','CLEAN',0,0,0,'805',0,'2010-06-07 15:49:31','ADMIN','2010-06-07 15:49:31','ADMIN'),('806',1,'DELUXE','8',0,'','','','','VACANT','CLEAN',0,0,0,'806',0,'2010-06-07 15:49:38','ADMIN','2010-06-07 15:49:38','ADMIN'),('807',1,'DELUXE','8',0,'','','','','VACANT','CLEAN',0,0,0,'807',0,'2010-06-07 15:49:45','ADMIN','2010-06-07 15:49:45','ADMIN'),('904',1,'FUNCTION','9',0,'','','','','VACANT','CLEAN',0,0,0,'904',0,'2010-06-07 15:42:26','ADMIN','2010-06-07 15:42:26','ADMIN'),('905',1,'FUNCTION','1',0,'','','','','VACANT','CLEAN',0,0,0,'905',0,'2010-07-02 17:37:12','ROOT','2010-07-02 17:37:12','ROOT'),('906',1,'FUNCTION','1',0,'','','','','VACANT','CLEAN',0,0,0,'906',0,'2010-07-02 17:37:20','ROOT','2010-07-02 17:37:20','ROOT'),('907',1,'FUNCTION','1',0,'','','','','VACANT','CLEAN',0,0,0,'907',0,'2010-07-02 17:37:28','ROOT','2010-07-02 17:37:28','ROOT');
/*!40000 ALTER TABLE `rooms` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `roomtypes`
--

DROP TABLE IF EXISTS `roomtypes`;
CREATE TABLE `roomtypes` (
  `roomtypecode` varchar(50) NOT NULL,
  `maxoccupants` int(4) default NULL,
  `noofbeds` int(4) default NULL,
  `noofadult` int(4) default NULL,
  `noofchild` int(4) default NULL,
  `sharetype` varchar(15) default NULL,
  `statusFlag` varchar(15) default 'ACTIVE',
  `HOTELID` int(5) NOT NULL default '0',
  `CREATETIME` datetime default '2001-01-01 01:01:01',
  `CREATEDBY` varchar(20) default NULL,
  `UPDATETIME` datetime default '2001-01-01 01:01:01',
  `UPDATEDBY` varchar(20) default NULL,
  PRIMARY KEY  (`roomtypecode`,`HOTELID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `roomtypes`
--

LOCK TABLES `roomtypes` WRITE;
/*!40000 ALTER TABLE `roomtypes` DISABLE KEYS */;
INSERT INTO `roomtypes` VALUES ('DELUXE',3,2,3,0,'SHAREABLE','ACTIVE',1,'2010-05-20 16:17:57','ADMIN','2010-05-20 16:17:57','ADMIN'),('FUNCTION',100,0,100,0,'','ACTIVE',1,'2010-06-04 17:28:23','ADMIN','2010-06-04 17:28:23','ADMIN'),('MATRIMONIAL',4,2,4,0,'SHAREABLE','ACTIVE',1,'2010-05-20 16:18:21','ADMIN','2010-05-20 16:18:21','ADMIN'),('STANDARD',2,1,2,0,'SHAREABLE','ACTIVE',1,'2010-05-20 16:17:31','ADMIN','2010-05-20 16:17:42','ADMIN'),('SUPERIOR',4,2,4,0,'','ACTIVE',1,'2010-05-20 16:18:42','ADMIN','2010-05-20 16:18:42','ADMIN');
/*!40000 ALTER TABLE `roomtypes` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `salesledger`
--

DROP TABLE IF EXISTS `salesledger`;
CREATE TABLE `salesledger` (
  `acctid` varchar(20) NOT NULL,
  `date` date NOT NULL,
  `refno` varchar(11) NOT NULL,
  `debit` decimal(9,2) default '0.00',
  `credit` decimal(9,2) default '0.00',
  `netSales` decimal(12,2) default '0.00',
  `reffolio` varchar(20) NOT NULL,
  `subfolio` varchar(1) NOT NULL,
  `HOTELID` int(5) NOT NULL,
  `CREATETIME` datetime default '2001-01-01 01:01:01',
  `CREATEDBY` varchar(20) default NULL,
  `UPDATETIME` datetime default '2001-01-01 01:01:01',
  `UPDATEDBY` varchar(20) default NULL,
  `posttoacctng` varchar(1) default '0',
  PRIMARY KEY  (`acctid`,`reffolio`,`subfolio`,`HOTELID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `salesledger`
--

LOCK TABLES `salesledger` WRITE;
/*!40000 ALTER TABLE `salesledger` DISABLE KEYS */;
/*!40000 ALTER TABLE `salesledger` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sap_folio_glmapping`
--

DROP TABLE IF EXISTS `sap_folio_glmapping`;
CREATE TABLE `sap_folio_glmapping` (
  `TranCode` varchar(30) NOT NULL,
  `GLAccountID` varchar(30) NOT NULL,
  `LineNo` int(2) default NULL,
  `AmountColumnInFolioTrans` varchar(50) default NULL,
  `CostCenterCode` varchar(30) default NULL,
  `StatuFlag` varchar(10) default NULL,
  `CreatedBy` varchar(30) default NULL,
  `CreatedDate` datetime default '2008-08-08 00:00:01',
  `UpdatedBy` varchar(30) default NULL,
  `UpdatedDate` datetime default '2008-08-08 00:00:01',
  PRIMARY KEY  (`GLAccountID`,`TranCode`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `sap_folio_glmapping`
--

LOCK TABLES `sap_folio_glmapping` WRITE;
/*!40000 ALTER TABLE `sap_folio_glmapping` DISABLE KEYS */;
/*!40000 ALTER TABLE `sap_folio_glmapping` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sap_glaccounts`
--

DROP TABLE IF EXISTS `sap_glaccounts`;
CREATE TABLE `sap_glaccounts` (
  `AccountID` varchar(30) NOT NULL,
  `Description` varchar(50) default NULL,
  `CostCenterCode` varchar(30) default NULL,
  `AccountNature` varchar(10) default NULL,
  `StatusFlag` varchar(10) default NULL,
  `CreatedDate` datetime default '2008-08-08 00:00:01',
  `CreatedBy` varchar(30) default NULL,
  `UpdatedDate` datetime default '2008-08-08 00:00:01',
  `UpdatedBy` varchar(30) default NULL,
  PRIMARY KEY  (`AccountID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `sap_glaccounts`
--

LOCK TABLES `sap_glaccounts` WRITE;
/*!40000 ALTER TABLE `sap_glaccounts` DISABLE KEYS */;
/*!40000 ALTER TABLE `sap_glaccounts` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sap_template`
--

DROP TABLE IF EXISTS `sap_template`;
CREATE TABLE `sap_template` (
  `ID` int(5) NOT NULL,
  `Name` varchar(30) default NULL,
  `Description` varchar(50) default NULL,
  `OutputExtension` varchar(20) default NULL,
  `Generate` tinyint(1) default '0',
  `CreatedBy` varchar(50) default NULL,
  `CreatedDate` datetime default '2010-01-01 00:01:01',
  `UpdatedBy` varchar(50) default NULL,
  `UpdatedDate` datetime default '2010-01-01 00:01:01',
  PRIMARY KEY  (`ID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `sap_template`
--

LOCK TABLES `sap_template` WRITE;
/*!40000 ALTER TABLE `sap_template` DISABLE KEYS */;
/*!40000 ALTER TABLE `sap_template` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sap_templatefields`
--

DROP TABLE IF EXISTS `sap_templatefields`;
CREATE TABLE `sap_templatefields` (
  `ID` int(5) NOT NULL auto_increment,
  `TemplateID` int(3) NOT NULL,
  `Name` varchar(50) default NULL,
  `Description` varchar(100) default NULL,
  `Field_In_Folio` varchar(50) default NULL,
  `StatusFlag` varchar(10) default 'ACTIVE',
  `CreatedDate` datetime default '2010-02-22 13:21:00',
  `CreatedBy` varchar(50) default 'ADMIN',
  `UpdatedDate` datetime default '2010-02-22 13:21:00',
  `UpdatedBy` varchar(50) default 'ADMIN',
  PRIMARY KEY  (`ID`,`TemplateID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `sap_templatefields`
--

LOCK TABLES `sap_templatefields` WRITE;
/*!40000 ALTER TABLE `sap_templatefields` DISABLE KEYS */;
/*!40000 ALTER TABLE `sap_templatefields` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `seq_amenity`
--

DROP TABLE IF EXISTS `seq_amenity`;
CREATE TABLE `seq_amenity` (
  `id` bigint(20) NOT NULL auto_increment,
  `hotelid` int(5) default '1',
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `seq_amenity`
--

LOCK TABLES `seq_amenity` WRITE;
/*!40000 ALTER TABLE `seq_amenity` DISABLE KEYS */;
INSERT INTO `seq_amenity` VALUES (1,1);
/*!40000 ALTER TABLE `seq_amenity` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `seq_autopost`
--

DROP TABLE IF EXISTS `seq_autopost`;
CREATE TABLE `seq_autopost` (
  `id` bigint(10) NOT NULL auto_increment,
  `hotelid` int(5) default NULL,
  `transactionCode` varchar(20) NOT NULL,
  PRIMARY KEY  (`id`,`transactionCode`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `seq_autopost`
--

LOCK TABLES `seq_autopost` WRITE;
/*!40000 ALTER TABLE `seq_autopost` DISABLE KEYS */;
INSERT INTO `seq_autopost` VALUES (1,1,''),(2,1,'1205');
/*!40000 ALTER TABLE `seq_autopost` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `seq_company`
--

DROP TABLE IF EXISTS `seq_company`;
CREATE TABLE `seq_company` (
  `id` bigint(20) NOT NULL auto_increment,
  `hotelid` int(5) NOT NULL,
  PRIMARY KEY  (`id`,`hotelid`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `seq_company`
--

LOCK TABLES `seq_company` WRITE;
/*!40000 ALTER TABLE `seq_company` DISABLE KEYS */;
INSERT INTO `seq_company` VALUES (5,1);
/*!40000 ALTER TABLE `seq_company` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `seq_enggjob`
--

DROP TABLE IF EXISTS `seq_enggjob`;
CREATE TABLE `seq_enggjob` (
  `id` bigint(20) default NULL,
  `hotelid` int(5) default NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `seq_enggjob`
--

LOCK TABLES `seq_enggjob` WRITE;
/*!40000 ALTER TABLE `seq_enggjob` DISABLE KEYS */;
INSERT INTO `seq_enggjob` VALUES (0,1);
/*!40000 ALTER TABLE `seq_enggjob` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `seq_event`
--

DROP TABLE IF EXISTS `seq_event`;
CREATE TABLE `seq_event` (
  `id` bigint(12) NOT NULL,
  `hotelID` int(5) default NULL,
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `seq_event`
--

LOCK TABLES `seq_event` WRITE;
/*!40000 ALTER TABLE `seq_event` DISABLE KEYS */;
INSERT INTO `seq_event` VALUES (0,1);
/*!40000 ALTER TABLE `seq_event` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `seq_folio`
--

DROP TABLE IF EXISTS `seq_folio`;
CREATE TABLE `seq_folio` (
  `id` bigint(12) NOT NULL,
  `hotelid` int(5) default NULL,
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `seq_folio`
--

LOCK TABLES `seq_folio` WRITE;
/*!40000 ALTER TABLE `seq_folio` DISABLE KEYS */;
INSERT INTO `seq_folio` VALUES (4,1);
/*!40000 ALTER TABLE `seq_folio` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `seq_guest`
--

DROP TABLE IF EXISTS `seq_guest`;
CREATE TABLE `seq_guest` (
  `id` bigint(20) NOT NULL auto_increment,
  `hotelid` int(5) default NULL,
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `seq_guest`
--

LOCK TABLES `seq_guest` WRITE;
/*!40000 ALTER TABLE `seq_guest` DISABLE KEYS */;
INSERT INTO `seq_guest` VALUES (22,1);
/*!40000 ALTER TABLE `seq_guest` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `seq_hotel`
--

DROP TABLE IF EXISTS `seq_hotel`;
CREATE TABLE `seq_hotel` (
  `id` int(11) default NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `seq_hotel`
--

LOCK TABLES `seq_hotel` WRITE;
/*!40000 ALTER TABLE `seq_hotel` DISABLE KEYS */;
INSERT INTO `seq_hotel` VALUES (1);
/*!40000 ALTER TABLE `seq_hotel` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `seq_housekeepingjob`
--

DROP TABLE IF EXISTS `seq_housekeepingjob`;
CREATE TABLE `seq_housekeepingjob` (
  `id` bigint(20) default NULL,
  `hotelid` int(5) default NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `seq_housekeepingjob`
--

LOCK TABLES `seq_housekeepingjob` WRITE;
/*!40000 ALTER TABLE `seq_housekeepingjob` DISABLE KEYS */;
INSERT INTO `seq_housekeepingjob` VALUES (0,1);
/*!40000 ALTER TABLE `seq_housekeepingjob` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `seq_mealid`
--

DROP TABLE IF EXISTS `seq_mealid`;
CREATE TABLE `seq_mealid` (
  `id` bigint(20) NOT NULL auto_increment,
  `hotelid` bigint(20) NOT NULL,
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `seq_mealid`
--

LOCK TABLES `seq_mealid` WRITE;
/*!40000 ALTER TABLE `seq_mealid` DISABLE KEYS */;
INSERT INTO `seq_mealid` VALUES (2,1);
/*!40000 ALTER TABLE `seq_mealid` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `seq_packages`
--

DROP TABLE IF EXISTS `seq_packages`;
CREATE TABLE `seq_packages` (
  `id` bigint(20) NOT NULL,
  `HotelID` int(5) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `seq_packages`
--

LOCK TABLES `seq_packages` WRITE;
/*!40000 ALTER TABLE `seq_packages` DISABLE KEYS */;
INSERT INTO `seq_packages` VALUES (0,1);
/*!40000 ALTER TABLE `seq_packages` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `seq_privileges`
--

DROP TABLE IF EXISTS `seq_privileges`;
CREATE TABLE `seq_privileges` (
  `id` bigint(20) default NULL,
  `HotelID` int(5) default NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `seq_privileges`
--

LOCK TABLES `seq_privileges` WRITE;
/*!40000 ALTER TABLE `seq_privileges` DISABLE KEYS */;
INSERT INTO `seq_privileges` VALUES (0,1);
/*!40000 ALTER TABLE `seq_privileges` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `seq_resledger`
--

DROP TABLE IF EXISTS `seq_resledger`;
CREATE TABLE `seq_resledger` (
  `id` int(11) default NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `seq_resledger`
--

LOCK TABLES `seq_resledger` WRITE;
/*!40000 ALTER TABLE `seq_resledger` DISABLE KEYS */;
INSERT INTO `seq_resledger` VALUES (0);
/*!40000 ALTER TABLE `seq_resledger` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `servicecharge`
--

DROP TABLE IF EXISTS `servicecharge`;
CREATE TABLE `servicecharge` (
  `trancode` varchar(20) NOT NULL,
  `deptid` varchar(20) NOT NULL,
  `percentSrvChrg` decimal(12,2) default '0.00',
  `HOTELID` int(5) NOT NULL,
  `CREATETIME` datetime NOT NULL,
  `CREATEDBY` varchar(20) default NULL,
  `UPDATETIME` datetime default NULL,
  `UPDATEDBY` varchar(20) default NULL,
  PRIMARY KEY  (`trancode`,`deptid`,`HOTELID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `servicecharge`
--

LOCK TABLES `servicecharge` WRITE;
/*!40000 ALTER TABLE `servicecharge` DISABLE KEYS */;
/*!40000 ALTER TABLE `servicecharge` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `shiftendorsements`
--

DROP TABLE IF EXISTS `shiftendorsements`;
CREATE TABLE `shiftendorsements` (
  `id` int(10) unsigned NOT NULL auto_increment,
  `logDate` datetime default '2008-08-08 00:00:01',
  `TerminalNo` varchar(5) default NULL,
  `shiftCode` varchar(5) default NULL,
  `loggedUser` varchar(50) default NULL,
  `endorsementDescription` text,
  `statusFlag` varchar(15) default 'ACTIVE',
  `endorsementRemarks` text,
  `acknowledgedBy` varchar(50) default NULL,
  `acknowledgeAtTerminal` varchar(5) default NULL,
  `acknowledgeAtShiftCode` varchar(5) default NULL,
  `priorityLevel` varchar(10) default 'NORMAL',
  `createdBy` varchar(50) default NULL,
  `createTime` datetime default '2008-08-08 00:00:01',
  `updatedBy` varchar(50) default NULL,
  `updateTime` datetime default '2008-08-08 00:00:01',
  `hotelId` int(1) default '1',
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `shiftendorsements`
--

LOCK TABLES `shiftendorsements` WRITE;
/*!40000 ALTER TABLE `shiftendorsements` DISABLE KEYS */;
/*!40000 ALTER TABLE `shiftendorsements` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `srvchrgledger`
--

DROP TABLE IF EXISTS `srvchrgledger`;
CREATE TABLE `srvchrgledger` (
  `deptid` varchar(20) NOT NULL,
  `date` date default NULL,
  `refno` varchar(11) default NULL,
  `debit` decimal(9,2) default '0.00',
  `credit` decimal(9,2) default '0.00',
  `reffolio` varchar(20) default NULL,
  `subfolio` varchar(1) default NULL,
  `HOTELID` int(5) NOT NULL,
  `CREATETIME` datetime default '2001-01-01 01:01:01',
  `CREATEDBY` varchar(20) default NULL,
  `UPDATETIME` datetime default '2001-01-01 01:01:01',
  `UPDATEDBY` varchar(20) default NULL,
  `posttoacctng` varchar(1) default '0',
  PRIMARY KEY  (`deptid`,`HOTELID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `srvchrgledger`
--

LOCK TABLES `srvchrgledger` WRITE;
/*!40000 ALTER TABLE `srvchrgledger` DISABLE KEYS */;
/*!40000 ALTER TABLE `srvchrgledger` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `system_config`
--

DROP TABLE IF EXISTS `system_config`;
CREATE TABLE `system_config` (
  `KEY` varchar(100) NOT NULL,
  `VALUE` varchar(100) default NULL,
  `DESCRIPTION` varchar(300) default NULL,
  `CREATED_BY` varchar(20) default NULL,
  `CREATE_DATE` datetime default '2008-08-08 00:00:01',
  `UPDATED_BY` varchar(20) default NULL,
  `UPDATE_DATE` datetime default '2008-08-08 00:00:01',
  `SYSTEM_FILE` tinyint(1) default '0',
  PRIMARY KEY  (`KEY`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `system_config`
--

LOCK TABLES `system_config` WRITE;
/*!40000 ALTER TABLE `system_config` DISABLE KEYS */;
INSERT INTO `system_config` VALUES ('ALLOW_DEALLOCATE_WITH_BALANCE','true','Allow the system to de-allocate room with balance [true or false]','','2008-08-08 00:00:01','ADMIN','2010-06-04 17:15:57',0),('ALLOW_EDIT_MEAL_ITEMS','true','Checks whether meal items are editable or not','','2008-08-08 00:00:01','ADMIN','2010-06-04 17:15:57',0),('ALLOW_FULL_PAYMENT_UPON_CHECK_IN','false','','','2008-08-08 00:00:01','ADMIN','2010-06-04 17:15:57',0),('ALLOW_PREVIOUS_DATE_POSTING','false','','','2008-08-08 00:00:01','ADMIN','2010-06-04 17:15:57',0),('ALLOW_PREVIOUS_DAYS_ROUTING','false','Allows previous day\'s transactions to be routed [true or false]','','2008-08-08 00:00:01','ADMIN','2010-06-04 17:15:57',0),('AUTO_POST_NIGHT_AUDIT','1','Post nightaudit automatically?','','2008-08-08 00:00:01','ADMIN','2010-06-04 17:15:57',0),('AUTO_ROOMING_ENABLED','1','Enable auto-rooming? 0 [No], 1[Yes]','','2008-08-08 00:00:01','ADMIN','2010-06-04 17:15:57',0),('BACK_OFFICE_INVOICE_START','3200','Start of invoice number if has backoffice integration','','2008-08-08 00:00:01','ADMIN','2010-06-04 17:15:57',0),('BACK_OFFICE_NAME','NONE','Gets the backoffice name to be integrated with Folio Plus','','2008-08-08 00:00:01','ADMIN','2010-06-04 17:15:57',0),('CONTRACT_PATH','../main/contract.txt','','','2008-08-08 00:00:01','ADMIN','2010-06-04 17:15:57',0),('CONTRACT_TYPE','FULL','Contract type {FULL, STANDARD}','ADMIN','2008-08-08 00:00:01','ADMIN','2008-08-08 00:00:01',1),('CREDIT_MEMO','3100','','','2008-08-08 00:00:01','ADMIN','2010-06-04 17:15:57',0),('DEBIT_MEMO','3000','','','2008-08-08 00:00:01','ADMIN','2010-06-04 17:15:57',0),('DECIMAL_FORMAT','N2','','','2008-08-08 00:00:01','','2008-08-08 00:00:01',1),('DEFAULT_BREAKFAST_VALUE','Y','Default breakfast value for each reservation','','2008-08-08 00:00:01','ADMIN','2010-06-04 17:15:57',0),('DEFAULT_CASH_TERMINAL','3100','Default cash terminal for Night Audit Process','','2008-08-08 00:00:01','ADMIN','2010-06-04 17:15:57',0),('DEFAULT_COMPANY_THRESHOLD_VALUE','5000','Default threshold value for a New Company Account','ADMIN','2008-08-08 00:00:01','ADMIN','2010-06-04 17:15:57',0),('DEFAULT_FOLIO_TYPE_SELECTED','INDIVIDUAL','','','2008-08-08 00:00:01','ADMIN','2010-06-04 17:15:58',0),('DEFAULT_GUEST','I-9999999999','Default Guest if Guest List for Group Folio is not yet available.','ADMIN','2008-08-08 00:00:01','ADMIN','2010-06-04 17:15:58',0),('DEFAULT_GUEST_THRESHOLD_VALUE','2000','Default threshold value for a New Guest','ADMIN','2008-08-08 00:00:01','ADMIN','2010-06-04 17:15:58',0),('DEFAULT_SHIFT_CODE','3000','Default shift code for Night Audit Process','','2008-08-08 00:00:01','ADMIN','2010-06-04 17:15:58',0),('DEFAULT_STATUS_FOR_NEW_RESERVATION','TENTATIVE','','','2008-08-08 00:00:01','ADMIN','2010-06-04 17:15:58',0),('DEFAULT_WALK_IN_ACCOUNT','I-9999999999','This account would be used on Posting Non-Guest Transactions for Walk-in guests.','ADMIN','2008-08-08 00:00:01','ADMIN','2010-06-04 17:15:58',0),('DISABLE_FOOD_OTHER_DETAILS','false','','','2008-08-08 00:00:01','','2008-08-08 00:00:01',1),('DUMP_ACCOUNTING_LOGS','NO','Dump accounting logs locally?','','2008-08-08 00:00:01','ADMIN','2010-06-04 17:15:58',0),('DUMP_FILE_SIZE','5000','Dumped accounting logs max file size','','2008-08-08 00:00:01','ADMIN','2010-06-04 17:15:58',0),('DUMP_PATH','c:\\accounting_logs\\','Path for dumped accounting logs','','2008-08-08 00:00:01','ADMIN','2010-06-04 17:15:58',0),('EXACT_ADJUSTMENT_ACCOUNT','','','','2008-08-08 00:00:01','','2008-08-08 00:00:01',1),('FILTERED_HEADERS_FOR_INCLUSIONS','RoomInclusions, SpecialInstructions','The headers to be shown for folio inclusions of groups.','','2008-08-08 00:00:01','','2008-08-08 00:00:01',1),('FOLIO_PRINTOUT_WITH_TAX','false','The folio print out type that contains tax or not','','2008-08-08 00:00:01','ADMIN','2010-06-04 17:15:58',0),('HOTEL_ID','1','Hotel ID for each Instance of Folio Plus','ADMIN','2008-08-08 00:00:01','ADMIN','2010-06-04 17:15:58',0),('IS_EVENT_MANAGEMENT_DISABLED','false','','','2008-08-08 00:00:01','','2008-08-08 00:00:01',1),('IS_HOUSEKEEPING_INTEGRATED','NO','Housekeeping Integrated?','','2008-08-08 00:00:01','ADMIN','2010-06-04 17:15:58',0),('IS_RESTO_CONNECTED','true','Checks whether Resto Plus is connected to Folio Plus or not.','','2008-08-08 00:00:01','ADMIN','2010-06-04 17:15:58',0),('MAX_ALLOWED_FRONTDESK_DISCOUNT','5','Maximum allowable discount for a frontdesk clerk','','2008-08-08 00:00:01','ADMIN','2010-06-04 17:15:58',0),('MINIBAR_SALE_TRANSACTION_CODE','1205','','','2008-08-08 00:00:01','ADMIN','2010-06-04 17:15:58',0),('NEW_PAGE_AFTER_MEAL_DATE','false','Create new page after each meal date on the booking sheet','','2008-08-08 00:00:01','ADMIN','2010-06-04 17:15:58',0),('NEW_RESERVATION_STATUS_AFTER_PAYMENT','CONFIRMED','','','2008-08-08 00:00:01','ADMIN','2010-06-04 17:15:58',0),('NIGHT_AUDIT_OVERRIDE','NO','Override night audit process so it would not check for Expected CheckOut and Expected Check In','','2008-08-08 00:00:01','ADMIN','2010-06-04 17:15:58',0),('NO_SHOW_TIME','15:00:00','Sets the time No Show are highlighted in the Guest List','','2008-08-08 00:00:01','','2008-08-08 00:00:01',1),('POST_ROOM_CHARGE_FOR_FUNCTION_ROOM','false','Set whether room charges for Function Room is to be posted or not','','2008-08-08 00:00:01','ADMIN','2010-06-04 17:15:58',0),('REGISTRATION_FORM','Bahura','Registration form to be printed','','2008-08-08 00:00:01','ADMIN','2010-06-04 17:15:58',0),('REPORT_ADDRESS1','Cebu City','This will be displayed on each report document','','2008-08-08 00:00:01','ADMIN','2010-06-04 17:15:58',0),('REPORT_ADDRESS2','Philippines 6000','This will be displayed on each report document','','2008-08-08 00:00:01','ADMIN','2010-06-04 17:15:58',0),('REPORT_CONTACT_NO','Tel. No. 63.32.4158647; Fax 63.32.4158647 loc. 103','This will be displayed on each report document','','2008-08-08 00:00:01','ADMIN','2010-06-04 17:15:58',0),('REPORT_LOGO','../main/logo/jinisys.jpg','Report logo location','','2008-08-08 00:00:01','ADMIN','2010-06-04 17:15:58',0),('REPORT_ORGANIZATION','JINISYS SOFTWARE, INC.','','','2008-08-08 00:00:01','ADMIN','2010-06-04 17:15:58',0),('REPORT_WEBSITE','www.JinisysSoftware.com','Appear on each report document','','2008-08-08 00:00:01','ADMIN','2010-06-04 17:15:58',0),('ROOM_INCLUSION_HEADER','Room Inclusions','The header / fieldname for room inclusions','','2008-08-08 00:00:01','','2008-08-08 00:00:01',1),('SALES_EXECUTIVE_MANAGER','MR. JOJO BALAGOSA','Sales Executive Manager of the Hotel','','2008-08-08 00:00:01','','2008-08-08 00:00:01',1),('SAP_COMPANY_GROUPCODE','117','The Groupcode to be exported to SAP for the Corporate accounts groupcode column','','2008-08-08 00:00:01','','2008-08-08 00:00:01',1),('SAP_INDIVIDUAL_GROUPCODE','116','The Groupcode to be exported to SAP for the Customer`s groupcode column','','2008-08-08 00:00:01','','2008-08-08 00:00:01',1),('SHOW_REMARKS_ON_GUEST_STATEMENT','false','Show the billing remarks on the guests billing statement','','2008-08-08 00:00:01','ADMIN','2010-06-04 17:15:58',0),('SHOW_REMARKS_ON_GUEST_STATEMENT1','true','','','2008-08-08 00:00:01','','2008-08-08 00:00:01',1),('SHOW_REPORT_HEADER_ON_GUEST_STATEMENT','true','Show the report header on the guests billing statement','','2008-08-08 00:00:01','ADMIN','2010-06-04 17:15:58',0),('SHOW_REPORT_HEADER_ON_GUEST_STATEMENT1','true','','','2008-08-08 00:00:01','','2008-08-08 00:00:01',1),('SHOW_ROOM_AVAILABILITY_AT_START_UP','NO','show room availability at start up','','2008-08-08 00:00:01','ADMIN','2010-06-04 17:15:58',0),('SHOW_ROOM_AVAILABILITY_DAYS','7','Room availability days to be processed','','2008-08-08 00:00:01','ADMIN','2010-06-04 17:15:58',0),('SPECIAL_INSTRUCTION_HEADER','SPECIALINSTRUCTIONS','The header / fieldname for special instructions','','2008-08-08 00:00:01','','2008-08-08 00:00:01',1),('TRANSACTION_REQUIRED_UPON_CHECK_OUT','1000','Folio should have at least one of this transaction to be able to check out','ADMIN','2008-08-08 00:00:01','ADMIN','2010-06-04 17:15:58',0),('VERIFY_ON_CHANGE_RATE','true','Prompts for an administrator password before changing rates','','2008-08-08 00:00:01','ADMIN','2010-06-04 17:15:58',0),('_APP_BACKGROUND','../main/logo/jinisys.jpg','Application desktop background','ADMIN','2008-08-08 00:00:01','ADMIN','2008-08-08 00:00:01',1),('_APP_BUILD_NO','918','Application build no','','2008-08-08 00:00:01','','2008-08-08 00:00:01',1),('_APP_LICENSE',aes_encrypt(DATE_FORMAT(DATE_ADD(now(), INTERVAL 1 YEAR), '%Y*%c*%e'),'j1n15y5'),'','','2008-08-08 00:00:01','','2008-08-08 00:00:01',1),('_APP_LOGO','../main/logo/jinisys.jpg','This will be displayed on upper left panel of the main screen','ADMIN','2008-08-08 00:00:01','ADMIN','2008-08-08 00:00:01',1),('_APP_TITLE','Folio Plus Academe Edition - [Jinisys Software, Inc.]','Application title on Folio Plus Instance','ADMIN','2008-08-08 00:00:01','ADMIN','2008-08-08 00:00:01',1),('_APP_VERSION','3.0.0','Version of this instance','','2008-08-08 00:00:01','','2008-08-08 00:00:01',1);
/*!40000 ALTER TABLE `system_config` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `system_privileges`
--

DROP TABLE IF EXISTS `system_privileges`;
CREATE TABLE `system_privileges` (
  `id` int(10) NOT NULL auto_increment,
  `privilegeDescription` varchar(100) default NULL,
  `createdBy` varchar(50) default NULL,
  `createTime` datetime default '2008-08-08 01:01:01',
  `updatedBy` varchar(50) default NULL,
  `updateTime` datetime default '2008-08-08 01:01:01',
  PRIMARY KEY  (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `system_privileges`
--

LOCK TABLES `system_privileges` WRITE;
/*!40000 ALTER TABLE `system_privileges` DISABLE KEYS */;
INSERT INTO `system_privileges` VALUES (1,'Void Folio Transaction','ADMIN','2008-08-08 01:01:01','ADMIN','2008-08-08 01:01:01'),(2,'Override pre-configured room rates','ADMIN','2008-08-08 01:01:01','ADMIN','2008-08-08 01:01:01'),(3,'Apply guest discounts','ADMIN','2008-08-08 01:01:01','ADMIN','2008-08-08 01:01:01'),(4,'Recall voided folio transactions','ADMIN','2008-08-08 01:01:01','ADMIN','2008-08-08 01:01:01'),(5,'Forcibly close cash drawer','ADMIN','2008-08-08 01:01:01','ADMIN','2008-08-08 01:01:01'),(6,'Export POSTED transactions to Exact Globe','ADMIN','2008-08-08 01:01:01','ADMIN','2008-08-08 01:01:01'),(7,'Export POSTED transactions to SAP','admin','2008-08-08 01:01:01','admin','2008-08-08 01:01:01');
/*!40000 ALTER TABLE `system_privileges` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `transactioncode`
--

DROP TABLE IF EXISTS `transactioncode`;
CREATE TABLE `transactioncode` (
  `tranCode` varchar(20) NOT NULL,
  `tranTypeId` varchar(20) default NULL,
  `memo` varchar(100) default NULL,
  `acctSide` varchar(10) default NULL,
  `serviceCharge` double(5,2) default '0.00',
  `serviceChargeInclusive` tinyint(1) default '1',
  `govtTax` double(5,2) default '0.00',
  `govtTaxInclusive` tinyint(1) default '1',
  `localTax` double(5,2) default '0.00',
  `localTaxInclusive` tinyint(1) default '1',
  `defaultTransactionSource` varchar(100) default NULL,
  `defaultAmount` double(12,2) default '0.00',
  `warningAmount` double(12,2) default '0.00',
  `departmentId` varchar(20) default 'FILLER',
  `ledger` varchar(10) default NULL,
  `debitSide` varchar(20) default NULL,
  `creditSide` varchar(20) default NULL,
  `hotelId` int(5) NOT NULL default '1',
  `createTime` datetime default '2001-01-01 01:01:01',
  `createdBy` varchar(20) default NULL,
  `updateTime` datetime default '2001-01-01 01:01:01',
  `updatedBy` varchar(20) default NULL,
  `stateFlag` varchar(20) default 'ACTIVE',
  PRIMARY KEY  (`tranCode`,`hotelId`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `transactioncode`
--

LOCK TABLES `transactioncode` WRITE;
/*!40000 ALTER TABLE `transactioncode` DISABLE KEYS */;
INSERT INTO `transactioncode` VALUES ('1000','1','ROOM CHARGE','DEBIT',0.00,1,0.00,1,0.00,1,'AUTO',0.00,0.00,'FILLER','','','',1,'2001-01-01 01:01:01','JINISYS','2008-10-13 19:02:31','ADMIN','ACTIVE'),('1001','1','EXTRA PERSON','DEBIT',0.00,1,0.00,1,0.00,1,'AUTO',0.00,0.00,'FILLER','','','',1,'2001-01-01 01:01:01','JINISYS','2008-10-28 17:39:42','ALLAN','ACTIVE'),('1002','1','ROOM -OTHER INCOME','DEBIT',0.00,1,0.00,1,0.00,1,'AUTO',0.00,0.00,'','','','',1,'2009-06-10 16:55:47','ALLAN','2009-06-10 16:55:47','ALLAN','ACTIVE'),('1100','1','TELEPHONE CHARGE','DEBIT',0.00,1,0.00,1,0.00,1,'AUTO',0.00,0.00,'FILLER','','','',1,'2001-01-01 01:01:01','JINISYS','2009-09-03 16:05:58','ALLAN','ACTIVE'),('1200','1','FOOD','DEBIT',0.00,1,0.00,1,0.00,1,'CHARGE INVOICE',0.00,0.00,'FILLER','',NULL,NULL,1,'2001-01-01 01:01:01','JINISYS','2008-09-04 13:48:13','ALLAN','ACTIVE'),('1201','1','RESTAURANT','DEBIT',1.00,1,1.00,1,1.00,1,'POS CHK#',1.00,1.00,'FILLER','','','',1,'2001-01-01 01:01:01','JINISYS','2010-03-23 15:04:19','ADMIN','ACTIVE'),('1202','1','BEVERAGE','DEBIT',0.00,1,0.00,1,0.00,1,'CHARGE INVOICE',0.00,0.00,'FILLER','',NULL,NULL,1,'2001-01-01 01:01:01','JINISYS','2001-01-01 01:01:01','JINISYS','ACTIVE'),('1203','1','BANQUET','DEBIT',0.00,1,0.00,1,0.00,1,'CHARGE INVOICE',0.00,0.00,'FILLER','',NULL,NULL,1,'2001-01-01 01:01:01','JINISYS','2001-01-01 01:01:01','JINISYS','ACTIVE'),('1204','1','KARAOKE BAR','DEBIT',0.00,1,0.00,1,0.00,1,'CHARGE INVOICE',0.00,0.00,'FILLER','',NULL,NULL,1,'2001-01-01 01:01:01','JINISYS','2001-01-01 01:01:01','JINISYS','DELETED'),('1205','1','MINI-BAR','DEBIT',0.00,1,0.00,1,0.00,1,'MINIBAR',0.00,0.00,'FILLER','','','',1,'2001-01-01 01:01:01','JINISYS','2009-11-04 15:02:39','ALLAN','ACTIVE'),('1210','1','RESTAURANT CHARGE','DEBIT',0.00,0,0.00,0,0.00,0,'O.R.',0.00,0.00,'FILLER','','','',1,'2010-03-13 16:01:04','ADMIN','2010-03-13 16:01:04','ADMIN','ACTIVE'),('1300','1','BUSINESS CENTER','DEBIT',0.00,1,0.00,1,0.00,1,'BUSCENTER',0.00,0.00,'FILLER','','','',1,'2001-01-01 01:01:01','JINISYS','2008-09-27 13:05:34','ADMIN','ACTIVE'),('1301','1','FOREX','DEBIT',0.00,1,0.00,1,0.00,1,'CHARGE INVOICE',0.00,0.00,'FILLER','',NULL,NULL,1,'2001-01-01 01:01:01','JINISYS','2008-09-04 13:55:22','ALLAN','DELETED'),('1302','1','CAR RENTAL','DEBIT',0.00,1,0.00,1,0.00,1,'CAR RENT',0.00,0.00,'FILLER','','','',1,'2001-01-01 01:01:01','','2008-10-28 17:38:43','ALLAN','ACTIVE'),('1400','1','LOBBY BOOTH','DEBIT',0.00,1,0.00,1,0.00,1,'LOBBY',0.00,0.00,'FILLER','','','',1,'2001-01-01 01:01:01','JINISYS','2008-09-27 13:05:49','ADMIN','ACTIVE'),('1401','1','PEARL SHOP','DEBIT',0.00,1,0.00,1,0.00,1,'CHARGE INVOICE',0.00,0.00,'FILLER','',NULL,NULL,1,'2001-01-01 01:01:01','JINISYS','2008-09-04 13:55:53','ALLAN','DELETED'),('1402','1','MISCELLANEOUS','DEBIT',0.00,1,0.00,1,0.00,1,'MISC',0.00,0.00,'1','','','',1,'2007-06-04 10:36:14','ADMIN','2008-09-27 13:06:23','ADMIN','ACTIVE'),('1500','1','GREEN FEE','DEBIT',0.00,1,0.00,1,0.00,1,'CHARGE INVOICE',0.00,0.00,'FILLER','',NULL,NULL,1,'2001-01-01 01:01:01','JINISYS','2001-01-01 01:01:01','JINISYS','DELETED'),('1501','1','GOLF CARTS 18 HOLES','DEBIT',0.00,1,0.00,1,0.00,1,'CHARGE INVOICE',0.00,0.00,'FILLER','',NULL,NULL,1,'2001-01-01 01:01:01','JINISYS','2001-01-01 01:01:01','JINISYS','DELETED'),('1502','1','CADDIE 9 HOLES','DEBIT',0.00,1,0.00,1,0.00,1,'CHARGE INVOICE',0.00,0.00,'FILLER','',NULL,NULL,1,'2001-01-01 01:01:01','JINISYS','2001-01-01 01:01:01','JINISYS','DELETED'),('1503','1','CADDIE 18 HOLES','DEBIT',0.00,1,0.00,1,0.00,1,'CHARGE INVOICE',0.00,0.00,'FILLER','',NULL,NULL,1,'2001-01-01 01:01:01','JINISYS','2001-01-01 01:01:01','JINISYS','DELETED'),('1504','1','GOLF CLUB','DEBIT',0.00,1,0.00,1,0.00,1,'CHARGE INVOICE',0.00,0.00,'FILLER','',NULL,NULL,1,'2001-01-01 01:01:01','JINISYS','2001-01-01 01:01:01','JINISYS','DELETED'),('1505','1','GOLF CART 9 HOLES','DEBIT',0.00,1,0.00,1,0.00,1,'CHARGE INVOICE',0.00,0.00,'FILLER','',NULL,NULL,1,'2001-01-01 01:01:01','JINISYS','2001-01-01 01:01:01','JINISYS','DELETED'),('1506','1','FITNESS CENTER','DEBIT',0.00,1,0.00,1,0.00,1,'CHARGE INVOICE',0.00,0.00,'FILLER','',NULL,NULL,1,'2001-01-01 01:01:01','JINISYS','2001-01-01 01:01:01','JINISYS','DELETED'),('1507','1','LEISURE','DEBIT',0.00,1,0.00,1,0.00,1,'CHARGE INVOICE',0.00,0.00,'FILLER','',NULL,NULL,1,'2001-01-01 01:01:01','JINISYS','2001-01-01 01:01:01','JINISYS','DELETED'),('1508','1','GOLF SET','DEBIT',0.00,1,0.00,1,0.00,1,'CHARGE INVOICE',0.00,0.00,'FILLER','',NULL,NULL,1,'2001-01-01 01:01:01','JINISYS','2001-01-01 01:01:01','JINISYS','DELETED'),('1600','1','UTILITY','DEBIT',0.00,1,0.00,1,0.00,1,'UTILITY',0.00,0.00,'FILLER','','','',1,'2001-01-01 01:01:01','JINISYS','2008-09-27 13:06:06','ADMIN','ACTIVE'),('1601','1','INTERNET','DEBIT',0.00,1,0.00,1,0.00,1,'INTERNET',0.00,0.00,'FILLER','','','',1,'2001-01-01 01:01:01','JINISYS','2008-10-13 18:53:47','ADMIN','ACTIVE'),('1602','1','HOTEL TRANSPORTATION','DEBIT',0.00,1,0.00,1,0.00,1,'CHARGE INVOICE',0.00,0.00,'FILLER','',NULL,NULL,1,'2001-01-01 01:01:01','JINISYS','2008-09-04 13:57:25','ALLAN','DELETED'),('1700','1','SUNDRIES','DEBIT',0.00,1,0.00,1,0.00,1,'CHARGE INVOICE',0.00,0.00,'FILLER','',NULL,NULL,1,'2001-01-01 01:01:01','JINISYS','2008-09-04 13:57:38','ALLAN','DELETED'),('1701','1','LAUNDRY / PRESSING','DEBIT',0.00,1,0.00,1,0.00,1,'LAUNDRY',0.00,0.00,'FILLER','','','',1,'2001-01-01 01:01:01','JINISYS','2008-09-27 13:06:13','ADMIN','ACTIVE'),('1800','1','VAT TAX','DEBIT',0.00,1,0.00,1,0.00,1,'MISC',0.00,0.00,'FILLER','','','',1,'2001-01-01 01:01:01','JINISYS','2008-09-27 13:06:18','ADMIN','ACTIVE'),('1900','1','SERVICE CHARGE','DEBIT',0.00,1,0.00,1,0.00,1,'MISC',0.00,0.00,'FILLER','','','',1,'2001-01-01 01:01:01','JINISYS','2008-09-27 13:06:30','ADMIN','ACTIVE'),('1901','1','TRAV. & TOURS PROFIT','DEBIT',0.00,1,0.00,1,0.00,1,'VOUCHER',0.00,0.00,'FILLER','',NULL,NULL,1,'2001-01-01 01:01:01','JINISYS','2008-09-04 14:01:02','ALLAN','DELETED'),('2000','3','CASH PAYMENT','CREDIT',0.00,1,0.00,1,0.00,1,'P.R.',0.00,0.00,'FILLER','','','',1,'2001-01-01 01:01:01','JINISYS','2009-09-03 16:07:40','ALLAN','ACTIVE'),('2100','4','CREDIT CARD','CREDIT',0.00,1,0.00,1,0.00,1,'O.R.',0.00,0.00,'FILLER','','','',1,'2001-01-01 01:01:01','JINISYS','2008-09-27 13:06:39','ADMIN','ACTIVE'),('2200','5','CHEQUE PAYMENT','CREDIT',0.00,1,0.00,1,0.00,1,'O.R.',0.00,0.00,'FILLER','','','',1,'2001-01-01 01:01:01','JINISYS','2008-09-27 13:06:42','ADMIN','ACTIVE'),('2600','7','OTHER  PAYMENTS','CREDIT',0.00,1,0.00,1,0.00,1,'O.R.',0.00,0.00,'FILLER','','','',1,'2001-01-01 01:01:01','JINISYS','2009-06-03 13:45:16','ADMIN','DELETED'),('2800','2','GIFT CHEQUE','CREDIT',0.00,1,0.00,1,0.00,1,'AUTO',0.00,0.00,'','','','',1,'2008-10-02 19:45:03','ADMIN','2009-07-07 17:45:00','ALLAN','ACTIVE'),('3000','1','DEBIT MEMO','DEBIT',0.00,1,0.00,1,0.00,1,'VOUCHER',0.00,0.00,'FILLER','','','',1,'2001-01-01 01:01:01','JINISYS','2009-06-08 14:48:05','ALLAN','DELETED'),('3100','7','CREDIT MEMO','CREDIT',0.00,1,0.00,1,0.00,1,'VOUCHER',0.00,0.00,'FILLER','','','',1,'2001-01-01 01:01:01','JINISYS','2009-06-08 14:48:09','ALLAN','DELETED'),('3200','7','DISCOUNT','CREDIT',0.00,1,0.00,1,0.00,1,'VOUCHER',0.00,0.00,'FILLER','','','',1,'2001-01-01 01:01:01','JINISYS','2009-06-03 13:45:11','ADMIN','DELETED'),('3300','8','REFUND','DEBIT',0.00,1,0.00,1,0.00,1,'REFUND',0.00,0.00,'FILLER','','','',1,'2001-01-01 01:01:01','JINISYS','2008-09-27 13:06:59','ADMIN','ACTIVE'),('4000','9','DEPOSIT TRANSFER','CREDIT',0.00,1,0.00,1,0.00,1,'VOUCHER',0.00,0.00,'FILLER','',NULL,NULL,1,'2001-01-01 01:01:01','JINISYS','2008-09-04 14:59:51','ALLAN','DELETED'),('4100','11','TRANSFER DEBIT','CREDIT',0.00,1,0.00,1,0.00,1,'AUTO',0.00,0.00,'FILLER','','','',1,'2001-01-01 01:01:01','JINISYS','2009-05-14 15:06:40','ALLAN','ACTIVE'),('4200','9','(CHARGE) CITY TRANSFER','CREDIT',0.00,1,0.00,1,0.00,1,'AUTO',0.00,0.00,'FILLER','','','',1,'2001-01-01 01:01:01','JINISYS','2009-05-14 15:06:52','ALLAN','ACTIVE'),('6000','8','PAID OUT/DRIVER COMMISSION','DEBIT',0.00,1,0.00,1,0.00,1,'DRIVERCOM',0.00,0.00,'FILLER','','','',1,'2001-01-01 01:01:01','','2010-05-27 15:56:29','ADMIN','ACTIVE'),('6100','3','(PAYMENT) CITY TRANSFER','DEBIT',0.00,0,0.00,0,0.00,0,'AUTO',0.00,0.00,'','','','',1,'2010-04-08 14:26:12','ADMIN','2010-04-10 09:58:22','ADMIN','ACTIVE'),('71000','7','FOC - ROOM CHARGE','CREDIT',0.00,1,0.00,1,0.00,1,'AUTO',0.00,0.00,'1','','','',1,'2008-06-28 15:50:17','ADMIN','2008-12-02 15:45:36','ALLAN','ACTIVE'),('71001','7','FOC - EXTRA PERSON','CREDIT',0.00,1,0.00,1,0.00,1,'AUTO',0.00,0.00,'1','','','',1,'2001-01-01 01:01:01','','2008-12-02 15:46:03','ALLAN','ACTIVE'),('71002','7','FOC - ROOM-OTHER INCOME','CREDIT',0.00,1,0.00,1,0.00,1,'AUTO',0.00,0.00,'1','','','',1,'2009-06-10 17:07:52','ALLAN','2009-06-10 17:09:12','ALLAN','ACTIVE'),('71100','7','FOC- TELEPHONE CHARGE','CREDIT',0.00,1,0.00,1,0.00,1,'AUTO',0.00,0.00,'1','','','',1,'2001-01-01 01:01:01','','2008-12-02 15:46:32','ALLAN','ACTIVE'),('71200','7','COMPLIMENTARY - FOOD/BEVERAGE','CREDIT',0.00,1,0.00,1,0.00,1,'VOUCHER',0.00,0.00,'1','','','',1,'2001-01-01 01:01:01','','2008-09-04 15:13:57','ALLAN','DELETED'),('71201','7','FOC - RESTAURANT','CREDIT',0.00,1,0.00,1,0.00,1,'AUTO',0.00,0.00,'1','','','',1,'2001-01-01 01:01:01','','2008-12-02 15:46:43','ALLAN','ACTIVE'),('71202','7','COMPLIMENTARY - AL FRESCO','CREDIT',0.00,1,0.00,1,0.00,1,'VOUCHER',0.00,0.00,'1','','','',1,'2001-01-01 01:01:01','','2001-01-01 01:01:01','','DELETED'),('71203','7','COMPLIMENTARY - POOL BAR','CREDIT',0.00,1,0.00,1,0.00,1,'VOUCHER',0.00,0.00,'1','','','',1,'2001-01-01 01:01:01','','2001-01-01 01:01:01','','DELETED'),('71204','7','COMPLIMENTARY - KARAOKE BAR','CREDIT',0.00,1,0.00,1,0.00,1,'VOUCHER',0.00,0.00,'1','','','',1,'2001-01-01 01:01:01','','2001-01-01 01:01:01','','DELETED'),('71205','7','FOC - MINI-BAR','CREDIT',0.00,1,0.00,1,0.00,1,'AUTO',0.00,0.00,'1','','','',1,'2001-01-01 01:01:01','','2008-12-02 15:46:52','ALLAN','ACTIVE'),('71300','7','FOC - BUSINESS CENTER','CREDIT',0.00,1,0.00,1,0.00,1,'AUTO',0.00,0.00,'1','','','',1,'2001-01-01 01:01:01','','2008-12-02 15:47:01','ALLAN','ACTIVE'),('71301','7','COMPLIMENTARY - FOREX','CREDIT',0.00,1,0.00,1,0.00,1,'VOUCHER',0.00,0.00,'1','','','',1,'2001-01-01 01:01:01','','2008-09-04 15:14:50','ALLAN','DELETED'),('71302','7','FOC - CAR RENTAL','CREDIT',0.00,1,0.00,1,0.00,1,'AUTO',0.00,0.00,'1','','','',1,'2001-01-01 01:01:01','','2008-12-02 15:47:11','ALLAN','ACTIVE'),('71400','7','FOC - LOBBY BOOTH','CREDIT',0.00,1,0.00,1,0.00,1,'AUTO',0.00,0.00,'1','','','',1,'2001-01-01 01:01:01','','2008-12-02 15:47:19','ALLAN','ACTIVE'),('71401','7','COMPLIMENTARY - PEARL SHOP','CREDIT',0.00,1,0.00,1,0.00,1,'VOUCHER',0.00,0.00,'1','','','',1,'2001-01-01 01:01:01','','2001-01-01 01:01:01','','DELETED'),('71402','7','FOC- MISCELLANEOUS','CREDIT',0.00,1,0.00,1,0.00,1,'AUTO',0.00,0.00,'1','','','',1,'2001-01-01 01:01:01','','2008-12-02 15:47:29','ALLAN','ACTIVE'),('71500','7','COMPLIMENTARY - GREEN FEE','CREDIT',0.00,1,0.00,1,0.00,1,'VOUCHER',0.00,0.00,'1','','','',1,'2001-01-01 01:01:01','','2001-01-01 01:01:01','','DELETED'),('71501','7','COMPLIMENTARY - GOLF CARTS 18 HOLES','CREDIT',0.00,1,0.00,1,0.00,1,'VOUCHER',0.00,0.00,'1','','','',1,'2001-01-01 01:01:01','','2001-01-01 01:01:01','','DELETED'),('71502','7','COMPLIMENTARY - CADDIE 9 HOLES','CREDIT',0.00,1,0.00,1,0.00,1,'VOUCHER',0.00,0.00,'1','','','',1,'2001-01-01 01:01:01','','2001-01-01 01:01:01','','DELETED'),('71503','7','COMPLIMENTARY - CADDIE 18 HOLES','CREDIT',0.00,1,0.00,1,0.00,1,'VOUCHER',0.00,0.00,'1','','','',1,'2001-01-01 01:01:01','','2001-01-01 01:01:01','','DELETED'),('71504','7','COMPLIMENTARY - GOLF CLUB','CREDIT',0.00,1,0.00,1,0.00,1,'VOUCHER',0.00,0.00,'1','','','',1,'2001-01-01 01:01:01','','2001-01-01 01:01:01','','DELETED'),('71505','7','COMPLIMENTARY - GOLF CART 9 HOLES','CREDIT',0.00,1,0.00,1,0.00,1,'VOUCHER',0.00,0.00,'1','','','',1,'2001-01-01 01:01:01','','2001-01-01 01:01:01','','DELETED'),('71506','7','COMPLIMENTARY - FITNESS CENTER','CREDIT',0.00,1,0.00,1,0.00,1,'VOUCHER',0.00,0.00,'1','','','',1,'2001-01-01 01:01:01','','2001-01-01 01:01:01','','DELETED'),('71507','7','COMPLIMENTARY - LEISURE','CREDIT',0.00,1,0.00,1,0.00,1,'VOUCHER',0.00,0.00,'1','','','',1,'2001-01-01 01:01:01','','2001-01-01 01:01:01','','DELETED'),('71508','7','COMPLIMENTARY - GOLF SET','CREDIT',0.00,1,0.00,1,0.00,1,'VOUCHER',0.00,0.00,'1','','','',1,'2001-01-01 01:01:01','','2001-01-01 01:01:01','','DELETED'),('71600','7','FOC - UTILITY','CREDIT',0.00,1,0.00,1,0.00,1,'AUTO',0.00,0.00,'1','','','',1,'2001-01-01 01:01:01','','2008-12-02 15:47:37','ALLAN','ACTIVE'),('71601','7','FOC - INTERNET','CREDIT',0.00,1,0.00,1,0.00,1,'AUTO',0.00,0.00,'1','','','',1,'2001-01-01 01:01:01','','2008-12-02 15:47:47','ALLAN','ACTIVE'),('71602','7','COMPLIMENTARY - HOTEL TRANSPORTATION','CREDIT',0.00,1,0.00,1,0.00,1,'VOUCHER',0.00,0.00,'1','','','',1,'2001-01-01 01:01:01','','2008-09-04 15:16:20','ALLAN','DELETED'),('71700','7','COMPLIMENTARY - SUNDRIES','CREDIT',0.00,1,0.00,1,0.00,1,'VOUCHER',0.00,0.00,'1','','','',1,'2001-01-01 01:01:01','','2008-09-04 15:16:27','ALLAN','DELETED'),('71701','7','FOC - LAUNDRY / PRESSING','CREDIT',0.00,1,0.00,1,0.00,1,'AUTO',0.00,0.00,'1','','','',1,'2001-01-01 01:01:01','','2008-12-02 15:47:55','ALLAN','ACTIVE'),('71800','7','FOC - VAT TAX','CREDIT',0.00,1,0.00,1,0.00,1,'AUTO',0.00,0.00,'1','','','',1,'2001-01-01 01:01:01','','2008-12-02 15:48:05','ALLAN','ACTIVE'),('71900','7','FOC - SERVICE CHARGE','CREDIT',0.00,1,0.00,1,0.00,1,'AUTO',0.00,0.00,'1','','','',1,'2001-01-01 01:01:01','','2008-12-02 15:48:15','ALLAN','ACTIVE'),('71901','7','COMPLIMENTARY - TRAV. & TOURS PROFIT','CREDIT',0.00,1,0.00,1,0.00,1,'VOUCHER',0.00,0.00,'1','','','',1,'2001-01-01 01:01:01','','2008-09-04 15:16:46','ALLAN','DELETED');
/*!40000 ALTER TABLE `transactioncode` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `transactioncode_glaccounts`
--

DROP TABLE IF EXISTS `transactioncode_glaccounts`;
CREATE TABLE `transactioncode_glaccounts` (
  `HotelID` int(4) NOT NULL default '1',
  `TransactionCode` varchar(20) NOT NULL,
  `SubAccount` varchar(50) NOT NULL,
  `GLAccountCode` varchar(50) NOT NULL,
  `GLCostCenterAccount` varchar(50) default NULL,
  `FolioTransactionFieldName` varchar(50) default NULL,
  `StatusFlag` varchar(10) default 'ACTIVE',
  `CreatedBy` varchar(20) default NULL,
  `CreateTime` datetime default '2008-08-08 00:08:08',
  `UpdatedBy` varchar(20) default NULL,
  `UpdateTime` datetime default '2008-08-08 00:08:08',
  PRIMARY KEY  (`HotelID`,`TransactionCode`,`SubAccount`,`GLAccountCode`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `transactioncode_glaccounts`
--

LOCK TABLES `transactioncode_glaccounts` WRITE;
/*!40000 ALTER TABLE `transactioncode_glaccounts` DISABLE KEYS */;
/*!40000 ALTER TABLE `transactioncode_glaccounts` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `transactionsourcedocuments`
--

DROP TABLE IF EXISTS `transactionsourcedocuments`;
CREATE TABLE `transactionsourcedocuments` (
  `transactionSourceId` int(10) NOT NULL auto_increment,
  `description` varchar(100) default NULL,
  `abbreviation` varchar(10) default NULL,
  `statusFlag` enum('ACTIVE','DELETED') default 'ACTIVE',
  `createdBy` varchar(50) default NULL,
  `createdDate` datetime default '2008-08-08 08:08:08',
  `updatedBy` varchar(50) default NULL,
  `updatedDate` datetime default '2008-08-08 08:08:08',
  PRIMARY KEY  (`transactionSourceId`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `transactionsourcedocuments`
--

LOCK TABLES `transactionsourcedocuments` WRITE;
/*!40000 ALTER TABLE `transactionsourcedocuments` DISABLE KEYS */;
INSERT INTO `transactionsourcedocuments` VALUES (1,'OFFICIAL RECEIPT','O.R.','ACTIVE','ADMIN','2008-08-08 08:08:08','ADMIN','2008-08-08 08:08:08'),(2,'AUTO POST','AUTO','ACTIVE','ADMIN','2008-08-08 08:08:08','ADMIN','2008-08-08 08:08:08'),(3,'RESTAUIRANT VOUCHER','RV','ACTIVE','ADMIN','2008-09-04 11:40:44','ADMIN','2008-09-04 11:40:44'),(4,'POS CHECK #','POS CHK#','ACTIVE','ADMIN','2008-09-04 11:42:38','ALLAN','2008-10-28 17:19:29'),(5,'PROVISIONARY RECEIPT','P.R.','ACTIVE','ADMIN','2008-09-04 11:43:07','ADMIN','2008-09-04 11:43:07'),(15,'CALL SLIP','CALLSLIP','ACTIVE','ADMIN','2008-09-04 11:56:38','ALLAN','2008-10-30 15:34:37'),(16,'REFUND','REFUND','ACTIVE','ADMIN','2008-09-04 12:02:45','ADMIN','2008-09-04 12:02:45'),(17,'LAUNDRY','LAUNDRY','ACTIVE','ADMIN','2008-09-04 12:03:01','ADMIN','2008-09-04 12:03:01'),(18,'MINIBAR','MINIBAR','ACTIVE','ADMIN','2008-09-04 12:03:42','ALLAN','2008-09-10 14:05:57'),(19,'BUSINESS CENTER','BUSCENTER','ACTIVE','ADMIN','2008-09-04 12:04:11','ADMIN','2008-09-04 12:04:11'),(20,'MISCELLANEOUS','MISC','ACTIVE','ADMIN','2008-09-04 12:04:26','ADMIN','2008-09-04 12:04:26'),(21,'UTILITY','UTILITY','ACTIVE','ADMIN','2008-09-04 12:04:43','ADMIN','2008-09-04 12:04:43'),(22,'DRIVER COMMISSION','DRIVERCOM','ACTIVE','ADMIN','2008-09-04 12:05:02','ADMIN','2008-09-04 12:05:02'),(23,'CAR RENTAL','CAR RENT','ACTIVE','ADMIN','2008-09-04 12:05:24','ALLAN','2008-10-28 17:20:54'),(24,'INTERNET','INTERNET','ACTIVE','ADMIN','2008-09-04 12:05:36','ADMIN','2008-09-04 12:05:36'),(25,'LOBBY BOOTH','LOBBY','ACTIVE','ADMIN','2008-09-04 12:05:53','ADMIN','2008-09-04 12:05:53'),(26,'MEAL COUPON','MEALCOUPON','ACTIVE','ALLAN','2008-09-04 14:06:43','ALLAN','2008-09-04 14:06:43'),(27,'GIFT CERTIFICATE','GIFTCERTIF','ACTIVE','ALLAN','2008-09-04 14:13:42','ALLAN','2008-09-04 14:13:42'),(28,'VOUCHER','VOUCHER','ACTIVE','ALLAN','2008-09-09 17:07:25','ALLAN','2008-09-09 17:07:25');
/*!40000 ALTER TABLE `transactionsourcedocuments` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `transctioncode_subaccount`
--

DROP TABLE IF EXISTS `transctioncode_subaccount`;
CREATE TABLE `transctioncode_subaccount` (
  `transactionCode` varchar(20) NOT NULL,
  `subAccountCode` varchar(20) NOT NULL,
  `localTax` double(5,2) default '0.00',
  `localTaxInclusive` tinyint(1) default '1',
  `governmentTax` double(5,2) default '0.00',
  `governmentTaxInclusive` tinyint(1) default '1',
  `serviceCharge` double(5,2) default '0.00',
  `serviceChargeInclusive` tinyint(1) default '1',
  `statusFlag` enum('ACTIVE','DELETED') default 'ACTIVE',
  `createdBy` varchar(50) default NULL,
  `createdDate` datetime default '2008-08-08 00:01:01',
  `updatedBy` varchar(50) default NULL,
  `updatedDate` datetime default '2008-08-08 00:01:01',
  `hotelId` int(4) default '1',
  PRIMARY KEY  (`transactionCode`,`subAccountCode`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `transctioncode_subaccount`
--

LOCK TABLES `transctioncode_subaccount` WRITE;
/*!40000 ALTER TABLE `transctioncode_subaccount` DISABLE KEYS */;
INSERT INTO `transctioncode_subaccount` VALUES ('1100','IDD / NDD',0.00,1,0.00,1,0.00,1,'ACTIVE','ADMIN','2008-08-26 18:06:58','ADMIN','2008-09-04 11:30:43',1),('1100','OPERATOR',0.00,1,0.00,1,0.00,1,'ACTIVE','ADMIN','2008-08-26 18:07:10','ADMIN','2008-09-04 11:30:36',1),('1201','BANQUET',0.00,1,0.00,1,0.00,1,'ACTIVE','ADMIN','2008-08-08 00:01:01','ADMIN','2008-09-04 11:30:28',1),('1201','CASH SALES',0.00,1,0.00,1,0.00,1,'ACTIVE','ALLAN','2009-06-03 15:02:38','ALLAN','2009-06-03 15:02:38',1),('1201','DINE IN',0.00,0,0.00,0,0.00,0,'ACTIVE','ADMIN','2008-08-08 00:01:01','ALLAN','2009-08-07 08:22:17',1),('1201','OTHER SALES',0.00,1,0.00,1,0.00,1,'ACTIVE','ALLAN','2009-06-11 11:26:20','ALLAN','2009-06-11 11:26:20',1),('1201','OUTSIDE CATER',0.00,1,0.00,1,0.00,1,'ACTIVE','ADMIN','2008-08-08 00:01:01','ADMIN','2008-09-04 11:30:02',1),('1201','PACKED LUNCH',0.00,1,0.00,1,0.00,1,'ACTIVE','ADMIN','2008-08-08 00:01:01','ADMIN','2008-09-04 11:29:50',1),('1201','RM FREE BRFST COUPON',0.00,1,0.00,1,0.00,1,'DELETED','ALLAN','2009-06-03 16:21:06','ALLAN','2009-06-10 16:52:21',1),('1201','ROOM SERVICE',0.00,1,0.00,1,10.00,0,'ACTIVE','ADMIN','2008-08-08 00:01:01','ADMIN','2008-09-04 11:29:35',1),('1201','SEMINAR',0.00,1,0.00,1,0.00,1,'ACTIVE','ADMIN','2008-08-08 00:01:01','ADMIN','2008-09-04 11:29:24',1),('1201','USED REST MEAL COUPN',0.00,1,0.00,1,0.00,1,'ACTIVE','ALLAN','2009-06-03 18:55:46','ALLAN','2009-06-03 18:55:46',1),('1201','WALK - IN',0.00,1,0.00,1,0.00,1,'ACTIVE','ADMIN','2010-03-13 15:16:20','ADMIN','2010-03-13 15:16:20',1),('1210','DINE-IN',0.00,1,0.00,1,0.00,1,'ACTIVE','ADMIN','2010-03-13 16:01:55','ADMIN','2010-03-13 16:01:55',1),('1210','WALK-IN',0.00,1,0.00,1,0.00,1,'ACTIVE','ADMIN','2010-03-13 16:02:03','ADMIN','2010-03-13 16:02:03',1),('6000','COMMISSION',0.00,1,0.00,1,0.00,1,'ACTIVE','ADMIN','2008-08-08 00:01:01','','2008-08-08 00:01:01',1),('6000','DISBURSEMENT',0.00,1,0.00,1,0.00,1,'ACTIVE','ADMIN','2008-08-08 00:01:01','','2008-08-08 00:01:01',1),('71100','COMPIMENTARY OPERATR',0.00,1,0.00,1,0.00,1,'DELETED','ALLAN','2008-12-02 15:33:19','ALLAN','2008-12-02 15:37:34',1),('71100','COMPLIMENT-IDD/NDD',0.00,1,0.00,1,0.00,1,'DELETED','ALLAN','2008-12-02 15:39:13','ALLAN','2008-12-02 15:52:55',1),('71100','COMPLIMENT-OPERATOR',0.00,1,0.00,1,0.00,1,'DELETED','ALLAN','2008-12-02 15:39:26','ALLAN','2008-12-02 15:52:59',1),('71100','COMPLIMENT-TELEPHONE',0.00,1,0.00,1,0.00,1,'DELETED','ALLAN','2008-12-02 15:38:18','ALLAN','2008-12-02 15:38:51',1),('71100','COMPLIMENTARYIDD/NDD',0.00,1,0.00,1,0.00,1,'DELETED','ALLAN','2008-12-02 15:32:09','ALLAN','2008-12-02 15:37:39',1),('71100','FOC - OPERATOR',0.00,1,0.00,1,0.00,1,'ACTIVE','ALLAN','2008-12-02 15:54:00','ALLAN','2008-12-02 15:54:00',1),('71100','FOC- IDD/NDD',0.00,1,0.00,1,0.00,1,'ACTIVE','ALLAN','2008-12-02 15:53:49','ALLAN','2008-12-02 15:53:49',1),('71201','COMPLIMENT-BANQUET',0.00,1,0.00,1,0.00,1,'DELETED','ALLAN','2008-12-02 15:39:40','ALLAN','2008-12-02 15:53:03',1),('71201','COMPLIMENT-CATER',0.00,1,0.00,1,0.00,1,'DELETED','ALLAN','2008-12-02 15:40:26','ALLAN','2008-12-02 15:53:06',1),('71201','COMPLIMENT-DINE IN',0.00,1,0.00,1,0.00,1,'DELETED','ALLAN','2008-12-02 15:40:03','ALLAN','2008-12-02 15:53:09',1),('71201','COMPLIMENT-PACKLUNCH',0.00,1,0.00,1,0.00,1,'DELETED','ALLAN','2008-12-02 15:40:51','ALLAN','2008-12-02 15:53:11',1),('71201','COMPLIMENT-RMSERVICE',0.00,1,0.00,1,0.00,1,'DELETED','ALLAN','2008-12-02 15:41:24','ALLAN','2008-12-02 15:53:14',1),('71201','COMPLIMENT-SEMINAR',0.00,1,0.00,1,0.00,1,'DELETED','ALLAN','2008-12-02 15:41:40','ALLAN','2008-12-02 15:53:16',1),('71201','COMPLIMNTARY-BANQUET',0.00,1,0.00,1,0.00,1,'DELETED','ALLAN','2008-12-02 15:34:15','ALLAN','2008-12-02 15:37:45',1),('71201','FOC - OTHER SALES',0.00,1,0.00,1,0.00,1,'ACTIVE','ALLAN','2009-06-11 11:26:53','ALLAN','2009-06-11 11:26:53',1),('71201','FOC- BANQUET',0.00,1,0.00,1,0.00,1,'ACTIVE','ALLAN','2008-12-02 15:54:26','ALLAN','2008-12-02 15:54:26',1),('71201','FOC- DINE IN',0.00,1,0.00,1,0.00,1,'ACTIVE','ALLAN','2008-12-02 15:54:40','ALLAN','2008-12-02 15:54:40',1),('71201','FOC- OUTSIDE CATER',0.00,1,0.00,1,0.00,1,'ACTIVE','ALLAN','2008-12-02 15:55:33','ALLAN','2008-12-02 15:55:33',1),('71201','FOC- PACKED LUNCH ',0.00,1,0.00,1,0.00,1,'ACTIVE','ALLAN','2008-12-02 15:55:51','ALLAN','2008-12-02 15:55:51',1),('71201','FOC- RM SERVICE',0.00,1,0.00,1,0.00,1,'ACTIVE','ALLAN','2008-12-02 15:56:07','ALLAN','2008-12-02 15:56:07',1),('71201','FOC- SEMINAR',0.00,1,0.00,1,0.00,1,'ACTIVE','ALLAN','2008-12-02 15:56:18','ALLAN','2008-12-02 15:56:18',1);
/*!40000 ALTER TABLE `transctioncode_subaccount` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `trantypes`
--

DROP TABLE IF EXISTS `trantypes`;
CREATE TABLE `trantypes` (
  `trantypeid` varchar(20) NOT NULL,
  `trantype` varchar(50) default NULL,
  `acctgroup` varchar(20) default NULL,
  `HOTELID` int(5) NOT NULL default '0',
  `CREATETIME` datetime default '2001-01-01 01:01:01',
  `CREATEDBY` varchar(20) default NULL,
  `UPDATETIME` datetime default '2001-01-01 01:01:01',
  `UPDATEDBY` varchar(20) default NULL,
  `stateflag` varchar(20) default 'ACTIVE',
  PRIMARY KEY  (`trantypeid`,`HOTELID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `trantypes`
--

LOCK TABLES `trantypes` WRITE;
/*!40000 ALTER TABLE `trantypes` DISABLE KEYS */;
INSERT INTO `trantypes` VALUES ('1','CHARGES','DEBIT',1,'2006-04-26 17:57:23','ADMIN','2008-09-04 13:30:08','ALLAN','ACTIVE'),('10','ADJUSTMENT','DEBIT',1,'2009-05-08 13:54:10','ADMIN','2009-05-08 13:54:10','ADMIN','ACTIVE'),('11','TRANSFER DEBIT','DEBIT',1,'2001-01-01 01:01:01','ADMIN','2001-01-01 01:01:01','ADMIN','ACTIVE'),('2','GIFT CHEQUE PAYMENT','CREDIT',1,'2006-04-26 17:57:23','ADMIN','2008-09-04 13:30:16','ALLAN','ACTIVE'),('3','CASH PAYMENT','CREDIT',1,'2006-04-26 17:57:23','ADMIN','2008-09-04 13:30:23','ALLAN','ACTIVE'),('4','CHARGE PAYMENT','CREDIT',1,'2006-04-26 17:57:23','ADMIN','2008-09-04 13:30:56','ALLAN','ACTIVE'),('5','CHEQUE PAYMENT','CREDIT',1,'2001-01-01 01:01:01','ADMIN','2008-09-04 13:31:04','ALLAN','ACTIVE'),('6','PAID OUT','CREDIT',1,'2001-01-01 01:01:01','','2001-01-01 01:01:01','','ACTIVE'),('7','COMPLIMENTARY ACCOUNTS','CREDIT',1,'2001-01-01 01:01:01','ADMIN','2001-01-01 01:01:01','ADMIN','ACTIVE'),('8','REFUND','DEBIT',1,'2006-11-15 14:37:09','ADMIN','2008-09-04 13:32:21','ALLAN','ACTIVE'),('9','BALANCE FORWARD','CREDIT',1,'2006-04-26 17:57:23','ADMIN','2006-06-17 11:58:58','ADMIN','ACTIVE');
/*!40000 ALTER TABLE `trantypes` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `userprivilege`
--

DROP TABLE IF EXISTS `userprivilege`;
CREATE TABLE `userprivilege` (
  `hotelid` int(5) unsigned zerofill NOT NULL default '00000',
  `userid` varchar(20) NOT NULL default '',
  `access` varchar(20) NOT NULL default '',
  `level` int(11) NOT NULL default '0',
  `stateflag` varchar(10) NOT NULL default '',
  `CREATETIME` datetime default '2001-01-01 01:01:01',
  `CREATEDBY` varchar(20) default NULL,
  `UPDATETIME` datetime default '2001-01-01 01:01:01',
  `UPDATEDBY` varchar(20) default NULL,
  PRIMARY KEY  (`hotelid`,`userid`,`access`,`level`),
  KEY `privilege_index` (`hotelid`,`access`,`level`),
  KEY `FK_userprivilege` (`userid`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 ROW_FORMAT=DYNAMIC;

--
-- Dumping data for table `userprivilege`
--

LOCK TABLES `userprivilege` WRITE;
/*!40000 ALTER TABLE `userprivilege` DISABLE KEYS */;
/*!40000 ALTER TABLE `userprivilege` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `userroles`
--

DROP TABLE IF EXISTS `userroles`;
CREATE TABLE `userroles` (
  `UserId` varchar(20) NOT NULL,
  `RoleName` varchar(30) NOT NULL,
  `HotelId` int(5) default NULL,
  `CreatedBy` varchar(30) default NULL,
  `CreateTime` datetime default NULL,
  `UpdatedBy` varchar(30) default NULL,
  `UpdateTime` datetime default NULL,
  `StateFlag` varchar(30) default 'ACTIVE',
  PRIMARY KEY  (`UserId`,`RoleName`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `userroles`
--

LOCK TABLES `userroles` WRITE;
/*!40000 ALTER TABLE `userroles` DISABLE KEYS */;
INSERT INTO `userroles` VALUES ('ADMIN','ADMINISTRATOR',1,'ADMIN','2010-05-15 13:49:09','ADMIN','2010-05-15 13:49:09','ACTIVE'),('FRONTDESK','FRONTDESK',1,'ADMIN','2010-05-17 17:12:11','ADMIN','2010-05-17 17:12:11','ACTIVE');
/*!40000 ALTER TABLE `userroles` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `users`
--

DROP TABLE IF EXISTS `users`;
CREATE TABLE `users` (
  `UserId` varchar(30) NOT NULL COMMENT 'Username',
  `Password` text NOT NULL COMMENT 'User Password',
  `EmployeeIdNo` varchar(20) default NULL,
  `LastName` varchar(50) default NULL,
  `FirstName` varchar(50) default NULL,
  `Department` varchar(100) default NULL,
  `Designation` varchar(50) default NULL,
  `Stateflag` varchar(10) NOT NULL default 'ACTIVE',
  `HotelId` int(5) NOT NULL,
  `CREATETIME` datetime default '2001-01-01 01:01:01',
  `CREATEDBY` varchar(20) default NULL,
  `UPDATETIME` datetime default '2001-01-01 01:01:01',
  `UPDATEDBY` varchar(20) default NULL,
  PRIMARY KEY  (`UserId`,`Stateflag`,`HotelId`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `users`
--

LOCK TABLES `users` WRITE;
/*!40000 ALTER TABLE `users` DISABLE KEYS */;
INSERT INTO `users` VALUES ('ADMIN','c970f9108250bdee586687c39028bd86',' ','JINISYS','ADMIN','100-SALES & MARKETING','','ACTIVE',1,'2006-05-31 10:53:31','ROOT','2006-05-31 10:53:31','ROOT'),('FRONTDESK','83c0cf468771e10150e77501f8beb4ab','','FO','FO','105-FRONTDESK','','ACTIVE',1,'2001-01-01 01:01:01',NULL,'2010-05-27 14:07:34','ADMIN');
/*!40000 ALTER TABLE `users` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `vendors`
--

DROP TABLE IF EXISTS `vendors`;
CREATE TABLE `vendors` (
  `VendorID` varchar(20) NOT NULL,
  `Name` varchar(100) default NULL,
  `HOTELID` int(5) default NULL,
  `CREATETIME` datetime default '2001-01-01 01:01:01',
  `CREATEDBY` varchar(20) default NULL,
  `UPDATETIME` datetime default '2001-01-01 01:01:01',
  `UPDATEDBY` varchar(20) default NULL,
  PRIMARY KEY  (`VendorID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `vendors`
--

LOCK TABLES `vendors` WRITE;
/*!40000 ALTER TABLE `vendors` DISABLE KEYS */;
/*!40000 ALTER TABLE `vendors` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Temporary table structure for view `vwbanquetcontractdetails`
--

DROP TABLE IF EXISTS `vwbanquetcontractdetails`;
/*!50001 DROP VIEW IF EXISTS `vwbanquetcontractdetails`*/;
/*!50001 CREATE TABLE `vwbanquetcontractdetails` (
  `folioID` varchar(20),
  `requirementID` varchar(50),
  `description` text,
  `transactionCode` varchar(20),
  `remarks` text,
  `CREATETIME` datetime,
  `CREATEDBY` varchar(20),
  `UPDATETIME` datetime,
  `UPDATEDBY` varchar(20)
) */;

--
-- Temporary table structure for view `vwbanquetcontractmeals`
--

DROP TABLE IF EXISTS `vwbanquetcontractmeals`;
/*!50001 DROP VIEW IF EXISTS `vwbanquetcontractmeals`*/;
/*!50001 CREATE TABLE `vwbanquetcontractmeals` (
  `mealDate` date,
  `fGetLiveInSnacks(folioid, date(eventDate))` longtext,
  `fGetLiveOutSnacks(folioid,date(eventDate))` longtext,
  `fGetLiveInMeals(folioid, date(eventDate))` longtext,
  `fGetLiveOutMeals(folioid,date(eventDate))` longtext,
  `liveInPax` varbinary(15),
  `liveOutPax` varbinary(15),
  `fGetLiveOutTotal(folioid)` longtext,
  `folioid` varchar(20)
) */;

--
-- Temporary table structure for view `vwbanquetcontractrooms`
--

DROP TABLE IF EXISTS `vwbanquetcontractrooms`;
/*!50001 DROP VIEW IF EXISTS `vwbanquetcontractrooms`*/;
/*!50001 CREATE TABLE `vwbanquetcontractrooms` (
  `folioid` varchar(20),
  `fromDate` datetime,
  `toDate` datetime,
  `roomtype` longtext,
  `qty` varbinary(28),
  `rate` varbinary(29),
  `header` varchar(17)
) */;

--
-- Temporary table structure for view `vwbookingsheetfoodandbev`
--

DROP TABLE IF EXISTS `vwbookingsheetfoodandbev`;
/*!50001 DROP VIEW IF EXISTS `vwbookingsheetfoodandbev`*/;
/*!50001 CREATE TABLE `vwbookingsheetfoodandbev` (
  `id` bigint(10),
  `folioID` varchar(20),
  `eventDate` datetime,
  `venue` varchar(30),
  `pax` bigint(12),
  `startTime` time,
  `endTime` time,
  `over` text,
  `setup` text,
  `remarks` text,
  `totalMealCost` double(12,2),
  `CREATETIME` datetime,
  `CREATEDBY` varchar(20),
  `UPDATETIME` datetime,
  `UPDATEDBY` varchar(20),
  `mealID` bigint(10),
  `mealType` varchar(30),
  `liveInPax` int(5),
  `liveOutPax` int(5),
  `menuitemcode` varchar(20),
  `description` text,
  `mealRemarks` text,
  `header` varchar(30),
  `liveInHeader` varchar(14),
  `liveOutHeader` varchar(15),
  `newDateAfterMeal` varchar(100)
) */;

--
-- Temporary table structure for view `vwbookingsheetmain`
--

DROP TABLE IF EXISTS `vwbookingsheetmain`;
/*!50001 DROP VIEW IF EXISTS `vwbookingsheetmain`*/;
/*!50001 CREATE TABLE `vwbookingsheetmain` (
  `folioid` varchar(20),
  `groupname` varchar(100),
  `eventtype` varchar(40),
  `fromdate` datetime,
  `contactaddress` text,
  `contactperson` text,
  `contactposition` varchar(200),
  `contactNumber` varchar(20),
  `faxNumber` varchar(20),
  `mobilenumber` varchar(30),
  `company` longtext,
  `status` varchar(15),
  `functionDateFrom` varbinary(65),
  `functionDateTo` varbinary(67),
  `noofpaxlivein` varbinary(34),
  `noofpaxliveout` varbinary(32),
  `remarks` text,
  `sales_Executive` longtext,
  `authorizedSignatory` text
) */;

--
-- Temporary table structure for view `vwbookingsheetmaintenance`
--

DROP TABLE IF EXISTS `vwbookingsheetmaintenance`;
/*!50001 DROP VIEW IF EXISTS `vwbookingsheetmaintenance`*/;
/*!50001 CREATE TABLE `vwbookingsheetmaintenance` (
  `folioID` varchar(20),
  `requirementID` varchar(50),
  `description` text,
  `transactionCode` varchar(20),
  `remarks` text,
  `CREATETIME` datetime,
  `CREATEDBY` varchar(20),
  `UPDATETIME` datetime,
  `UPDATEDBY` varchar(20)
) */;

--
-- Temporary table structure for view `vwbookingsheetrooms`
--

DROP TABLE IF EXISTS `vwbookingsheetrooms`;
/*!50001 DROP VIEW IF EXISTS `vwbookingsheetrooms`*/;
/*!50001 CREATE TABLE `vwbookingsheetrooms` (
  `folioid` varchar(20),
  `noOfRooms` decimal(32,0),
  `guaranteedRooms` int(5),
  `noOfPax` int(5),
  `guaranteedPax` decimal(32,0),
  `remarks` text,
  `arrivaldate` datetime,
  `departuredate` datetime,
  `folioeta` varchar(10),
  `folioetd` varchar(10),
  `blockedrooms` longtext,
  `reservedrooms` longtext
) */;

--
-- Temporary table structure for view `vwbookingsheetweddingdetails`
--

DROP TABLE IF EXISTS `vwbookingsheetweddingdetails`;
/*!50001 DROP VIEW IF EXISTS `vwbookingsheetweddingdetails`*/;
/*!50001 CREATE TABLE `vwbookingsheetweddingdetails` (
  `folioID` varchar(20),
  `eventDetailHeader` varchar(20),
  `description` text,
  `CREATETIME` datetime,
  `CREATEDBY` varchar(20),
  `UPDATETIME` datetime,
  `UPDATEDBY` varchar(20),
  `header` varchar(13)
) */;

--
-- Temporary table structure for view `vwcancelledgroups`
--

DROP TABLE IF EXISTS `vwcancelledgroups`;
/*!50001 DROP VIEW IF EXISTS `vwcancelledgroups`*/;
/*!50001 CREATE TABLE `vwcancelledgroups` (
  `roomtype` varchar(30),
  `rooms` varbinary(29),
  `folioid` varchar(20),
  `noOfrooms` int(5),
  `blockedRooms` int(5)
) */;

--
-- Temporary table structure for view `vweventtransactions`
--

DROP TABLE IF EXISTS `vweventtransactions`;
/*!50001 DROP VIEW IF EXISTS `vweventtransactions`*/;
/*!50001 CREATE TABLE `vweventtransactions` (
  `HotelID` int(5),
  `FolioID` varchar(20),
  `TransactionCode` varchar(20),
  `Memo` varchar(150),
  `Amount` decimal(12,2),
  `FromDate` datetime,
  `Todate` datetime,
  `CreateTime` datetime,
  `CreatedBy` varchar(20),
  `UpdateTime` datetime,
  `UpdatedBy` varchar(20),
  `summaryFlag` int(2),
  `packageID` int(5),
  `subAccount` varchar(50)
) */;

--
-- Temporary table structure for view `vwfoliodependentrooms`
--

DROP TABLE IF EXISTS `vwfoliodependentrooms`;
/*!50001 DROP VIEW IF EXISTS `vwfoliodependentrooms`*/;
/*!50001 CREATE TABLE `vwfoliodependentrooms` (
  `roomReqID` bigint(20),
  `folioID` varchar(20),
  `roomType` varchar(50),
  `noOfPax` bigint(20),
  `guaranteedPax` bigint(20),
  `noOfRooms` bigint(20),
  `guaranteedRooms` bigint(20),
  `blockedRooms` bigint(20),
  `remarks` text,
  `CREATEDBY` varchar(30),
  `CREATETIME` datetime,
  `UPDATEDBY` varchar(30),
  `UPDATETIME` datetime,
  `rate` decimal(18,2),
  `days` bigint(20),
  `fromdate` varchar(30),
  `todate` varchar(30)
) */;

--
-- Temporary table structure for view `vwfolioeventrequirements`
--

DROP TABLE IF EXISTS `vwfolioeventrequirements`;
/*!50001 DROP VIEW IF EXISTS `vwfolioeventrequirements`*/;
/*!50001 CREATE TABLE `vwfolioeventrequirements` (
  `folioid` varchar(20),
  `requirementid` varchar(50),
  `description` longtext
) */;

--
-- Temporary table structure for view `vwfoodandbevsheet`
--

DROP TABLE IF EXISTS `vwfoodandbevsheet`;
/*!50001 DROP VIEW IF EXISTS `vwfoodandbevsheet`*/;
/*!50001 CREATE TABLE `vwfoodandbevsheet` (
  `folioID` varchar(20),
  `eventDate` datetime,
  `venue` varchar(30),
  `pax` int(5),
  `startTime` time,
  `endTime` time,
  `over` text,
  `setup` text,
  `remarks` text,
  `totalMealCost` double(12,2),
  `liveInPax` int(5),
  `liveOutPax` int(5),
  `mealType` longtext
) */;

--
-- Temporary table structure for view `vwgroupactualarrival`
--

DROP TABLE IF EXISTS `vwgroupactualarrival`;
/*!50001 DROP VIEW IF EXISTS `vwgroupactualarrival`*/;
/*!50001 CREATE TABLE `vwgroupactualarrival` (
  `folioid` varchar(20),
  `companyid` varchar(20),
  `accounttype` varchar(25),
  `GuestName` varchar(100),
  `roomid` varchar(10),
  `roomtype` varchar(50),
  `arrivalDate` datetime,
  `DepartureDate` datetime,
  `Pax` int(2),
  `remarks` text,
  `departure` datetime,
  `arrival` datetime,
  `companyname` longtext,
  `Balance` decimal(12,2),
  `floor` varchar(20)
) */;

--
-- Temporary table structure for view `vwgroupactualdeparture`
--

DROP TABLE IF EXISTS `vwgroupactualdeparture`;
/*!50001 DROP VIEW IF EXISTS `vwgroupactualdeparture`*/;
/*!50001 CREATE TABLE `vwgroupactualdeparture` (
  `folioid` varchar(20),
  `companyid` varchar(20),
  `accounttype` varchar(25),
  `GuestName` varchar(100),
  `roomid` varchar(10),
  `roomtype` varchar(50),
  `arrivalDate` datetime,
  `DepartureDate` datetime,
  `Pax` int(2),
  `remarks` text,
  `departure` date,
  `arrival` datetime,
  `companyname` longtext,
  `Balance` decimal(12,2),
  `floor` varchar(20)
) */;

--
-- Temporary table structure for view `vwgroupbookingdropdown`
--

DROP TABLE IF EXISTS `vwgroupbookingdropdown`;
/*!50001 DROP VIEW IF EXISTS `vwgroupbookingdropdown`*/;
/*!50001 CREATE TABLE `vwgroupbookingdropdown` (
  `ID` int(10),
  `FieldName` varchar(50),
  `Value` varchar(150),
  `StatusFlag` varchar(10),
  `CreatedDate` datetime,
  `CreatedBy` varchar(50),
  `UpdatedDate` datetime,
  `UpdatedBy` varchar(50),
  `billingArrangement` text,
  `folioid` varchar(20)
) */;

--
-- Temporary table structure for view `vwgroupexpectcheckinblockings`
--

DROP TABLE IF EXISTS `vwgroupexpectcheckinblockings`;
/*!50001 DROP VIEW IF EXISTS `vwgroupexpectcheckinblockings`*/;
/*!50001 CREATE TABLE `vwgroupexpectcheckinblockings` (
  `folioid` varchar(20),
  `masterfolio` varchar(20),
  `foliotype` varchar(25),
  `groupname` varchar(100),
  `companyname` char(0),
  `room` varchar(12),
  `blockfrom` date,
  `blockto` date,
  `totalPax` int(1),
  `groupArrivalDate` varbinary(8),
  `groupDepartureDate` varbinary(8),
  `groupAccountType` char(0),
  `status` varchar(8),
  `roomType` varchar(50)
) */;

--
-- Temporary table structure for view `vwgroupexpectedcheckin`
--

DROP TABLE IF EXISTS `vwgroupexpectedcheckin`;
/*!50001 DROP VIEW IF EXISTS `vwgroupexpectedcheckin`*/;
/*!50001 CREATE TABLE `vwgroupexpectedcheckin` (
  `folioid` varchar(20),
  `masterfolio` varchar(20),
  `foliotype` varchar(25),
  `groupname` varchar(100),
  `companyName` text,
  `grouproom` varchar(10),
  `room` varchar(12),
  `blockfrom` date,
  `blockto` date,
  `totalPax` bigint(20),
  `groupArrivalDate` varbinary(10),
  `groupDepartureDate` varbinary(10),
  `groupAccountType` varchar(100),
  `status` varchar(15),
  `roomtype` varchar(50)
) */;

--
-- Temporary table structure for view `vwgroupexpectedcheckout`
--

DROP TABLE IF EXISTS `vwgroupexpectedcheckout`;
/*!50001 DROP VIEW IF EXISTS `vwgroupexpectedcheckout`*/;
/*!50001 CREATE TABLE `vwgroupexpectedcheckout` (
  `folioid` varchar(20),
  `masterfolio` varchar(20),
  `foliotype` varchar(25),
  `groupname` varchar(100),
  `companyName` longtext,
  `grouproom` varchar(10),
  `room` varchar(12),
  `blockfrom` varchar(30),
  `blockto` varchar(30),
  `totalPax` bigint(20),
  `groupArrivalDate` varbinary(19),
  `groupDepartureDate` varbinary(19),
  `groupAccountType` varchar(100),
  `status` varchar(15),
  `roomtype` varchar(50)
) */;

--
-- Temporary table structure for view `vwgroupinclusions`
--

DROP TABLE IF EXISTS `vwgroupinclusions`;
/*!50001 DROP VIEW IF EXISTS `vwgroupinclusions`*/;
/*!50001 CREATE TABLE `vwgroupinclusions` (
  `hotelid` int(1),
  `folioid` varchar(20),
  `memo` text,
  `createdby` varchar(20),
  `createtime` datetime,
  `updatedby` varchar(20),
  `updatetime` datetime
) */;

--
-- Temporary table structure for view `vwjoinerfolios`
--

DROP TABLE IF EXISTS `vwjoinerfolios`;
/*!50001 DROP VIEW IF EXISTS `vwjoinerfolios`*/;
/*!50001 CREATE TABLE `vwjoinerfolios` (
  `folioid` varchar(20),
  `accountid` varchar(20),
  `foliotype` varchar(25),
  `guestName` longtext,
  `masterfolio` varchar(20),
  `folioStatus` varchar(15)
) */;

--
-- Temporary table structure for view `vwmealrequirements`
--

DROP TABLE IF EXISTS `vwmealrequirements`;
/*!50001 DROP VIEW IF EXISTS `vwmealrequirements`*/;
/*!50001 CREATE TABLE `vwmealrequirements` (
  `folioid` varchar(20),
  `mealDate` date,
  `fGetLiveInSnacks(folioid, date(eventDate))` longtext,
  `fGetLiveOutSnacks(folioid, date(eventDate))` longtext,
  `fGetLiveInMeals(folioid, date(eventDate))` longtext,
  `fGetLiveOutMeals(folioid,date(eventDate))` longtext,
  `liveInPax` varbinary(24),
  `liveOutPax` varbinary(24),
  `fGetLiveOutTotal(folioid,)` longtext
) */;

--
-- Table structure for table `vwnonguesttrans`
--

DROP TABLE IF EXISTS `vwnonguesttrans`;
CREATE TABLE `vwnonguesttrans` (
  `_tableLineID` bigint(20) NOT NULL auto_increment,
  `RSVFOL` varchar(6) default NULL,
  `TCON` varchar(4) default NULL,
  `TCODE` varchar(4) default NULL,
  `REFNUM` double default NULL,
  `DETAILS` varchar(30) default NULL,
  `AMOUNT` double default NULL,
  `TDATE` datetime default NULL,
  `TTIME` varchar(8) default NULL,
  `STAFF` varchar(8) default NULL,
  `RMNUM` double default NULL,
  `CCODE` varchar(12) default NULL,
  `PAMOUNT` double default NULL,
  `GUEST` varchar(30) default NULL,
  `BASIC` double default NULL,
  `TAX` double default NULL,
  `SERVICE` double default NULL,
  `OTHERS` double default NULL,
  `ORNUM` double default NULL,
  `CASH` double default NULL,
  `OUTLET` varchar(2) default NULL,
  `CODE` double default NULL,
  `SETTLED` varchar(2) default NULL,
  `COTRAN` bit(1) default NULL,
  PRIMARY KEY  (`_tableLineID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `vwnonguesttrans`
--

LOCK TABLES `vwnonguesttrans` WRITE;
/*!40000 ALTER TABLE `vwnonguesttrans` DISABLE KEYS */;
/*!40000 ALTER TABLE `vwnonguesttrans` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Temporary table structure for view `vwroomrequirements`
--

DROP TABLE IF EXISTS `vwroomrequirements`;
/*!50001 DROP VIEW IF EXISTS `vwroomrequirements`*/;
/*!50001 CREATE TABLE `vwroomrequirements` (
  `roomReqID` bigint(10),
  `folioID` varchar(20),
  `roomType` varchar(30),
  `noOfPax` int(5),
  `guaranteedPax` int(5),
  `noOfRooms` int(5),
  `guaranteedRooms` int(5),
  `blockedRooms` int(5),
  `remarks` text,
  `CREATEDBY` varchar(30),
  `CREATETIME` datetime,
  `UPDATEDBY` varchar(30),
  `UPDATETIME` datetime,
  `rate` decimal(12,2),
  `days` int(3)
) */;

--
-- Temporary table structure for view `vwweddingdetails`
--

DROP TABLE IF EXISTS `vwweddingdetails`;
/*!50001 DROP VIEW IF EXISTS `vwweddingdetails`*/;
/*!50001 CREATE TABLE `vwweddingdetails` (
  `folioid` varchar(20),
  `eventDetailHeader` varchar(20),
  `description` text,
  `header` varchar(17)
) */;

--
-- Table structure for table `wakeupcall`
--

DROP TABLE IF EXISTS `wakeupcall`;
CREATE TABLE `wakeupcall` (
  `hotelid` int(5) unsigned zerofill NOT NULL auto_increment,
  `accountid` int(11) NOT NULL default '0',
  `wdatetime` datetime NOT NULL default '0000-00-00 00:00:00',
  `userid` varchar(20) NOT NULL default '',
  `datetime` datetime NOT NULL default '0000-00-00 00:00:00',
  `stateflag` varchar(10) NOT NULL default '',
  PRIMARY KEY  (`hotelid`,`accountid`,`wdatetime`),
  KEY `account_index` (`hotelid`,`accountid`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 ROW_FORMAT=DYNAMIC;

--
-- Dumping data for table `wakeupcall`
--

LOCK TABLES `wakeupcall` WRITE;
/*!40000 ALTER TABLE `wakeupcall` DISABLE KEYS */;
/*!40000 ALTER TABLE `wakeupcall` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Dumping routines for database 'hotel_test'
--
DELIMITER ;;
/*!50003 DROP FUNCTION IF EXISTS `FComputePaymentByAcctID` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `FComputePaymentByAcctID`(
pacctid varchar(20)
) RETURNS decimal(9,2)
BEGIN
set  sql_big_selects=1;
return(Select sum(credit) from paymentledger  where acctid = pacctid group by acctid  );
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fCountLiveInMeals` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 FUNCTION `fCountLiveInMeals`(pFolioID varchar(20), pDate date) RETURNS int(11)
BEGIN
return (select count(folioid) from event_meal_requirements where folioid=pFolioid and date(eventdate)=pDate and liveInPax>0 and not(mealtype like 'SNACKS'));
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fCountLiveInSnacks` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 FUNCTION `fCountLiveInSnacks`(pFolioID varchar(20), pDate date) RETURNS int(11)
BEGIN
return (select count(folioid) from event_meal_requirements where folioid=pFolioid and date(eventdate)=pDate and liveInPax>0 and mealtype like 'SNACKS');
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fCountLiveOutMeals` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 FUNCTION `fCountLiveOutMeals`() RETURNS int(11)
BEGIN
return (select count(folioid) from event_meal_requirements where folioid=pFolioid and date(eventdate)=pDate and liveOutPax>0 and not(mealtype like 'SNACKS'));
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fCountLiveOutSnacks` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 FUNCTION `fCountLiveOutSnacks`(pFolioID varchar(20), pDate date) RETURNS int(11)
BEGIN
return (select count(folioid) from event_meal_requirements where folioid=pFolioid and date(eventdate)=pDate and liveOutPax>0 and mealtype like 'SNACKS');
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fCountPaxPerNationality` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `fCountPaxPerNationality`(pStartDate date, pEndDate date, countryname varchar(50), nationality varchar(50)) RETURNS int(11)
BEGIN
return (select count(folioid) from folio, guests where folio.foliotype!='GROUP' and folio.accountid=guests.accountid and date(arrivaldate) between pStartDate and pEndDate and folio.status!='CANCELLED' and folio.statuS!='NO SHOW' and folio.status!='DELETED' and folio.status!='REMOVED' and (guests.country=countryname or guests.citizenship=nationality) group by countryname order by countryname);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `FCountRefNoExistence` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `FCountRefNoExistence`(
pTrancode varchar(20),
prefno varchar(20)
) RETURNS int(3)
BEGIN
set  sql_big_selects=1;
return(select count(transactioncode) from folioTransactions force index (`primary`)
where transactioncode=pTrancode and ReferenceNo=pRefno) ;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetAccountIDOfLedger` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `fGetAccountIDOfLedger`(pFolioID varchar(30), pSubfolio varchar(2)) RETURNS varchar(100) CHARSET latin1
BEGIN
return (select accountid from folioledger where folioid=pFolioID and subfolio=pSubFolio);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetBanquetType` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `fGetBanquetType`(pFolioID varchar(30)) RETURNS varchar(5) CHARSET latin1
BEGIN
return (select banquetType from event_type, event_booking_info where event_booking_info.eventtype=event_type.eventType and event_booking_info.folioid=pFolioID limit 1);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetBaseAmount` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `fGetBaseAmount`(pTransactionCode varchar(10), pAcctSide varchar(10), pFolioID varchar(30), pTransactionDate date) RETURNS double(12,2)
BEGIN
return (select sum(foliotransactions.baseAmount) from foliotransactions where transactionCode=pTransactionCode and acctSide=pAcctSide and date(transactionDate)=pTransactionDate);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetBlockedRooms` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `fGetBlockedRooms`(pFolioID varchar(30)) RETURNS text CHARSET latin1
BEGIN
return (select group_concat(distinct concat('(',`event_rooms`.`blockedRooms`, ')', '  ',`event_rooms`.`roomType`) separator ', ') from `event_rooms` where `event_rooms`.`folioID` = pFolioID and `event_rooms`.`blockedRooms` <> 0);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `FGetCompany` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `FGetCompany`( pAcctId varchar(20)) RETURNS varchar(200) CHARSET latin1
BEGIN
if(LEFT(pAcctID,2)="G-") then
return (Select distinct company.companyname from company where company.companyid = pAcctId);
else
return (Select distinct concat(guests.lastname,", ",guests.firstname) as AccountName from guests where guests.accountid=pAcctId) ;
end if;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetCOMPANYAddress` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `fGetCOMPANYAddress`(pAccountID varchar(30)) RETURNS text CHARSET latin1
BEGIN
return (select concat(COMPANY.street1,", ",COMPANY.city1, ", ",COMPANY.country1) from COMPANY where COMPANYID=pAccountID);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetCompanyID` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `fGetCompanyID`(pFolioID varchar(30)) RETURNS varchar(30) CHARSET latin1
BEGIN
return (select companyid from folio where folioid=pFolioID);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetCompanyIDForRGS` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `fGetCompanyIDForRGS`(
pCompanyName varchar(100)
) RETURNS varchar(100) CHARSET latin1
BEGIN
return(
select companyId from company
where companyname = pCompanyName
limit 0,1
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetCompanyName` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 FUNCTION `fGetCompanyName`(pCompanyID varchar(30)) RETURNS text CHARSET latin1
BEGIN
return (select companyname from company where companyid=pCompanyID);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetConfirmedFolioBalance` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `fGetConfirmedFolioBalance`(
pFolioId varchar(20)
) RETURNS decimal(12,2)
BEGIN
return (select sum(foliotransactions.netamount) as Balance
from folio inner join foliotransactions on 
folio.folioid = foliotransactions.folioid
where folio.status != 'CHECKED IN' and
folio.folioid = pFolioID
group by
foliotransactions.folioid);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetCurrentRoomOccupied` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 FUNCTION `fGetCurrentRoomOccupied`(
pFolioId varchar(20),
pHotelId int(5),
pAuditDate date
) RETURNS varchar(20) CHARSET latin1
BEGIN
return(
select 
roomId 
from 
roomevents force index(eventid,`eventdate`)
where 
EventID = pFolioID and 
`eventdate`= pAuditDate and
hotelid = pHotelId and 
transferFlag <> '1'
limit 0,1
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetDailyFOCNonGuestRoomTotal` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `fGetDailyFOCNonGuestRoomTotal`(pDate date) RETURNS decimal(12,2)
BEGIN
return (select sum(if(nonguesttransaction.acctside = "CREDIT", nonguesttransaction.netbaseamount * -1, nonguesttransaction.netbaseamount)) from nonguesttransaction where transactioncode='71000' and date(transactiondate)=pDate group by transactioncode);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetDailyFOCRoomTotal` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `fGetDailyFOCRoomTotal`(pDate date) RETURNS decimal(12,2)
BEGIN
return (select sum(if(foliotransactions.acctside = "CREDIT", foliotransactions.netbaseamount * -1, foliotransactions.netbaseamount)) from foliotransactions where transactioncode='71000' and date(transactiondate)=pDate group by transactioncode);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetDailyFunctionRoomOccupancyRate` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `fGetDailyFunctionRoomOccupancyRate`(
pDate date,
pHotelId int(4)
) RETURNS decimal(12,2)
BEGIN
return(
select (count(*) / fGetTotalFunctionRooms() * 100) as OccupancyRate
from 
roomevents 
left join folio on folio.folioid = roomevents.eventid
left join rooms on rooms.roomid = roomevents.roomid
where 
rooms.roomtypecode = 'FUNCTION' and
eventdate = pDate and transferFlag = 0 and
(eventType = 'IN HOUSE' or eventType = 'CHECKED OUT') and
if(date(folio.fromDate) = date(folio.toDate),true,
date(folio.toDate) > pDate)
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetDailyNonGuestRoomTotal` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `fGetDailyNonGuestRoomTotal`(pDate date) RETURNS decimal(12,2)
BEGIN
return (select sum(if(nonguesttransaction.acctside = "CREDIT", nonguesttransaction.netbaseamount * -1, nonguesttransaction.netbaseamount)) from nonguesttransaction where transactioncode='1000' and date(transactiondate)=pDate group by transactioncode);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetDailyRoomOccupancyRate` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `fGetDailyRoomOccupancyRate`(
pDate date,
pHotelId int(4)
) RETURNS decimal(12,2)
BEGIN
return(
select ((count(*) / fGetTotalRooms()) * 100) as OccupancyRate
from 
roomevents 
left join folio on folio.folioid = roomevents.eventid
left join rooms on rooms.roomid = roomevents.roomid
where 
rooms.roomtypecode != 'FUNCTION' and
eventdate = pDate and transferFlag = 0 and
(eventType = 'IN HOUSE' ) and
if(date(folio.fromDate) = date(folio.toDate),true,
date(folio.toDate) >= pDate)
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetDriverName` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `fGetDriverName`(pFolioID varchar(30)) RETURNS text CHARSET latin1
BEGIN
return (select concat(lastname, ', ', firstname) from drivers, nonguesttransaction where referencefolioid=pFolioID and transactioncode='6000' and referencedriverid!='' and referencedriverid=drivers.driverid);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetEngineeringJobEndDate` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `fGetEngineeringJobEndDate`(
pEngJobNo varchar(20),
pEndDate date
) RETURNS varchar(100) CHARSET latin1
BEGIN
set  sql_big_selects=1;
return(
select enggjobno
from engineeringjobs where
enggjobno = pEngJobNo and
date(endDate) = pEndDate
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetEventTotalBlockedRooms` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `fGetEventTotalBlockedRooms`(
pFolioId varchar(20)
) RETURNS int(4)
BEGIN
return( select sum(blockedRooms) as BlockedRooms 
from event_rooms 
where folioid = pFolioID
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetEventTotalRequiredRooms` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `fGetEventTotalRequiredRooms`(
pFolioId varchar(20)
) RETURNS int(4)
BEGIN
return( select sum(noofrooms) as RequiredRooms 
from event_rooms 
where folioid = pFolioID
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetFolioBalance` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `fGetFolioBalance`(
pFolioId varchar(30)
) RETURNS decimal(12,2)
BEGIN
return(
select sum(balancenet) as Balance
from folioledger
where folioid = pFolioId
group by folioid);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetFolioCount` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `fGetFolioCount`(pStartDate date, pEndDate date) RETURNS int(11)
BEGIN
return (select distinct count(distinct folioid) from folio where folio.foliotype!='GROUP' and date(arrivaldate) between pStartDate and pEndDate and folio.status!='CANCELLED' and folio.statuS!='NO SHOW' and folio.status!='DELETED' and folio.status!='REMOVED');
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetFolioStatus` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `fGetFolioStatus`(pFolioID varchar(30)) RETURNS varchar(50) CHARSET latin1
BEGIN
return (select folio.status from folio where folioid=pFolioID);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetFolioToDate` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `fGetFolioToDate`( pFolioId varchar(20)) RETURNS varchar(20) CHARSET latin1
BEGIN
return (select folioschedules.toDate from folioschedules
where folioId = pFolioId);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetFolioTransferDebitForSalesExecutive` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `fGetFolioTransferDebitForSalesExecutive`(pTransactionCode varchar(5), pHotelID int, pSubFolio varchar(5), pAcctside varchar(10), pFolioID varchar(30)) RETURNS double(12,2)
BEGIN
return (ifnull((select sum(netAmount) from foliotransactions, transactioncode where foliotransactions.transactioncode=transactioncode.trancode and transactioncode.trancode=pTransactionCode and foliotransactions.acctside=pAcctside and foliotransactions.hotelid=pHotelID and foliotransactions.subfolio=pSubFolio and foliotransactions.folioid=pFolioid),0));
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetGovernmentTax` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `fGetGovernmentTax`(pTransactionCode varchar(10), pAcctSide varchar(10), pFolioID varchar(30), pTransactionDate date) RETURNS double(12,2)
BEGIN
return (select sum(foliotransactions.governmentTax) from foliotransactions where transactionCode=pTransactionCode and acctSide=pAcctSide and date(transactionDate)=pTransactionDate);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetGrossAmount` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `fGetGrossAmount`(pTransactionCode varchar(10), pAcctSide varchar(10), pFolioID varchar(30), pTransactionDate date) RETURNS double(12,2)
BEGIN
return (select sum(foliotransactions.grossAmount) from foliotransactions where transactionCode=pTransactionCode and acctSide=pAcctSide and date(transactionDate)=pTransactionDate);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetGroupAccountType` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 FUNCTION `fGetGroupAccountType`(pFolioID varchar(20)) RETURNS varchar(100) CHARSET latin1
BEGIN
return (select accounttype from folio where folioid=pFolioID);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetGroupArrivalDate` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 FUNCTION `fGetGroupArrivalDate`(pFolioID varchar(20)) RETURNS datetime
BEGIN
return (select fromdate from folio where folioid=pFolioID);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetGroupDepartureDate` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 FUNCTION `fGetGroupDepartureDate`(pFolioID varchar(20)) RETURNS datetime
BEGIN
return (select todate from folio where folioid=pFolioID);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetGroupedRooms` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `fGetGroupedRooms`(pFolioID varchar(30)) RETURNS text CHARSET latin1
BEGIN
set sql_big_selects = 1;
return (select group_concat(distinct roomid) from (select roomid from blockingdetails, roomblock where roomblock.blockid=blockingdetails.blockid and roomblock.folioid=pFolioID union select roomid from folioschedules, folio where folioschedules.folioid=folio.folioid and folio.masterfolio=pFolioID) as blockedRoomsTable);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetGroupName` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `fGetGroupName`(pFolioID varchar(30)) RETURNS text CHARSET latin1
BEGIN
return (select groupname from folio where folioid=pFolioid);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetGroupTotalPax` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 FUNCTION `fGetGroupTotalPax`(pFolioID varchar(20)) RETURNS int(10)
BEGIN
return (select (sum(event_booking_info.noOfPaxLiveIn) + sum(event_booking_info.noOfPaxLiveOut)) from event_booking_info where folioid=pFolioID);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetGuestAddress` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `fGetGuestAddress`(pAccountID varchar(30)) RETURNS text CHARSET latin1
BEGIN
return (select concat(guests.street,", ",guests.city, ", ",guests.country) from guests where accountid=pAccountID);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetGuestName` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 FUNCTION `fGetGuestName`(pAccountID varchar(30)) RETURNS text CHARSET latin1
BEGIN
return (select concat(lastname, ', ', firstname) from guests where accountid=pAccountID);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `FGetGuestNameByFolioID` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `FGetGuestNameByFolioID`( pFolioid varchar(20)
) RETURNS varchar(500) CHARSET latin1
BEGIN
return (Select distinct concat(Guests.Lastname,", ",Guests.Firstname," ",Guests.MiddleName)
from Guests,folio where Guests.Accountid = folio.Accountid and 
folio.folioid=pFolioid);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetGuestsCreateTime` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `fGetGuestsCreateTime`(pAccountID varchar(30)) RETURNS date
BEGIN
return (select date(createTime) from guests where accountID=pAccountID);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `FGetLastNameByFolioID` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `FGetLastNameByFolioID`( pFolioid varchar(20)
) RETURNS varchar(100) CHARSET latin1
BEGIN
return (Select distinct lcase(concat(title," ",Guests.Lastname))
from Guests,folio where Guests.Accountid = folio.Accountid and 
folio.folioid=pFolioid);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetLiveInMeals` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 FUNCTION `fGetLiveInMeals`(pFolioID varchar(20), mealDate date) RETURNS text CHARSET latin1
BEGIN
return (concat((select count(*) from event_meal_requirements where folioid=pFolioID AND mealtype not like '%SNACKS' and date(eventDate)=mealDate and liveInPax>0), ' MEAL(s)'));
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetLiveInSnacks` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 FUNCTION `fGetLiveInSnacks`(pFolioID varchar(20), mealDate date) RETURNS text CHARSET latin1
BEGIN
return (concat((select count(*) from event_meal_requirements where folioid=pFolioID AND mealtype like '%SNACKS' and date(eventDate)=mealDate and liveInPax>0), ' SNACK(s)'));
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetLiveOutMeals` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 FUNCTION `fGetLiveOutMeals`(pFolioID varchar(20), mealDate date) RETURNS text CHARSET latin1
BEGIN
return (concat((select count(*) from event_meal_requirements where folioid=pFolioID AND mealtype not like '%SNACKS' and date(eventDate)=mealDate and liveOutPax>0), ' MEAL(s)'));
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetLiveOutSnacks` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 FUNCTION `fGetLiveOutSnacks`(pFolioID varchar(20), mealDate date) RETURNS text CHARSET latin1
BEGIN
return (concat((select count(*) from event_meal_requirements where folioid=pFolioID AND mealtype like '%SNACKS' and date(eventDate)=mealDate and liveOutPax>0), ' SNACK(s)'));
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetLiveOutTotal` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 FUNCTION `fGetLiveOutTotal`(pFolioID varchar(20), pDate date) RETURNS text CHARSET latin1
BEGIN
return (CONCAT('P ', (select sum(rateAmount) from event_applied_rates, event_meal_requirements where description like '%LIVE-OUT' AND event_applied_rates.folioid=pFolioID and description=concat(mealtype,' LIVE-OUT') and liveoutpax>0 and date(eventdate)=pDate), '/pax/day'));
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetLocalTax` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `fGetLocalTax`(pTransactionCode varchar(10), pAcctSide varchar(10), pFolioID varchar(30), pTransactionDate date) RETURNS double(12,2)
BEGIN
return (select sum(foliotransactions.localTax) from foliotransactions where transactionCode=pTransactionCode and acctSide=pAcctSide and date(transactionDate)=pTransactionDate);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetMasterFolioCompany` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `fGetMasterFolioCompany`(pFolioID varchar(30)) RETURNS text CHARSET latin1
BEGIN
return (SELECT if((substr(`folio`.`companyID`,1,1) = _latin1'G'),`hotel_test`.`fGetCompanyName`(`folio`.`companyID`),`hotel_test`.`fGetGuestName`(`folio`.`companyID`)) from folio where folio.folioid=pFolioid);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetMealrates` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 FUNCTION `fGetMealrates`(pFolioID varchar(20)) RETURNS double(12,2)
BEGIN
return (select if(sum(rateAmount) is null, 0, sum(rateAmount)) from event_applied_rates where folioid=pFolioID and noOfOccupants=0 and description not like '%OCC%' and description not like '%OUT%');
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetNetAmount` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `fGetNetAmount`(pTransactionCode varchar(10), pAcctSide varchar(10), pFolioID varchar(30), pTransactionDate date) RETURNS double(12,2)
BEGIN
return (select sum(foliotransactions.netAmount) from foliotransactions where transactionCode=pTransactionCode and acctSide=pAcctSide and date(transactionDate)=pTransactionDate);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetNetBaseAmount` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `fGetNetBaseAmount`(pTransactionCode varchar(10), pAcctSide varchar(10), pFolioID varchar(30), pTransactionDate date) RETURNS double(12,2)
BEGIN
return (select sum(foliotransactions.netBaseAmount) from foliotransactions where transactionCode=pTransactionCode and acctSide=pAcctSide and date(transactionDate)=pTransactionDate);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetNonGuestTransactionNetBaseAmountMonthToDate` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `fGetNonGuestTransactionNetBaseAmountMonthToDate`(
pTransactionCode varchar(20),
pAcctSide varchar(10),
pTranDate date,
pHotelId int(5)
) RETURNS decimal(12,2)
BEGIN
set  sql_big_selects = 1;
return(
select 
sum(nonguesttransaction.netBaseAmount) as NetBaseAmount
from
nonguesttransaction  force index(primary),
transactioncode  force index(primary)
where 	
nonguesttransaction.transactioncode = transactioncode.trancode and 
nonguesttransaction.transactioncode = pTransactionCode and
nonguesttransaction.acctSide = pAcctSide and
(month(transactiondate) = month(pTranDate) and transactiondate <= pTranDate and year(transactiondate)=year(pTranDate))
and nonguesttransaction.statusFlag = 'ACTIVE'
group by nonguesttransaction.transactioncode
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetNonGuestTransactionNetBaseAmountYearToDate` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `fGetNonGuestTransactionNetBaseAmountYearToDate`(
pTransactionCode varchar(20),
pAcctSide varchar(10),
pTranDate date,
pHotelId int(5)
) RETURNS decimal(12,2)
BEGIN
set  sql_big_selects = 1;
return(
select 
sum(nonguesttransaction.netBaseAmount) as NetBaseAmount
from
nonguesttransaction  force index(primary),
transactioncode  force index(primary)
where 	
nonguesttransaction.transactioncode = transactioncode.trancode and 
nonguesttransaction.transactioncode = pTransactionCode and
nonguesttransaction.acctSide = pAcctSide and
(year(transactiondate) = year(pTranDate) and transactiondate <= pTranDate)
and nonguesttransaction.statusFlag = 'ACTIVE'
group by nonguesttransaction.transactioncode
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetNumberOfPax` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `fGetNumberOfPax`(pFolioID varchar(30), pRoomType varchar(80)) RETURNS double(12,2)
BEGIN
return (select noOfPax/noOfRooms from event_rooms where folioid=pFolioID and roomType=pRoomType);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetPackageName` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `fGetPackageName`(pPackageID varchar(5)) RETURNS text CHARSET latin1
BEGIN
return (select description from event_package_header where packageID=pPackageID);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetRoomEngineeringJobDescription` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `fGetRoomEngineeringJobDescription`(
pReportDate date,
pRoomId varchar(20)
) RETURNS varchar(100) CHARSET latin1
BEGIN
set  sql_big_selects=1;
return(select 
concat(engineeringservices.description,
", start: ", engineeringjobs.startDate, 
" end: ", engineeringjobs.endDate,
", assigned to: ",
engineeringjobs.assignedperson)
as Description
from
engineeringjobs
left join engineeringservices on engineeringservices.enggserviceid = engineeringjobs.enggserviceid
where
(date(startDate) <= pReportDate and
date(endDate) >= pReportDate) and
roomid = pRoomId and
engineeringjobs.stateFlag = 'ACTIVE');
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetRoomOccupancyArrivalDate` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 FUNCTION `fGetRoomOccupancyArrivalDate`(
pRoomId varchar(10)
) RETURNS datetime
BEGIN
return (
select folioschedules.fromDate as ArrivalDate
from
folioschedules left join folio on folio.folioid = folioschedules.folioid
where
folio.status = 'CHECKED IN' and
folioschedules.roomid = pRoomId
limit 0,1);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetRoomOccupancyCompanyName` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 FUNCTION `fGetRoomOccupancyCompanyName`(
pRoomId varchar(10)
) RETURNS text CHARSET latin1
BEGIN
return (
select company.companyName as Company
from
folioschedules left join folio on folio.folioid = folioschedules.folioid
left join company on folio.companyid = company.companyid
where
folio.status = 'CHECKED IN' and
folioschedules.roomid = pRoomId
limit 0,1);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetRoomOccupancyDepartureDate` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 FUNCTION `fGetRoomOccupancyDepartureDate`(
pRoomId varchar(10)
) RETURNS datetime
BEGIN
return (
select folioschedules.toDate as DepartureDate
from
folioschedules left join folio on folio.folioid = folioschedules.folioid
where
folio.status = 'CHECKED IN' and
folioschedules.roomid = pRoomId
limit 0,1);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetRoomOccupancyGuestName` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 FUNCTION `fGetRoomOccupancyGuestName`(
pRoomId varchar(10)
) RETURNS text CHARSET latin1
BEGIN
return (select concat(guests.lastname,' , ',guests.firstname) as Guestname
from
folioschedules left join folio on folio.folioid = folioschedules.folioid
left join guests on folio.accountid = guests.accountid
where
folio.status = 'CHECKED IN' and
folioschedules.roomid = pRoomId
limit 0,1);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetRoomOccupancyNights` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 FUNCTION `fGetRoomOccupancyNights`(
pRoomId varchar(10)
) RETURNS int(5)
BEGIN
return (
select folioschedules.days as Nights
from
folioschedules left join folio on folio.folioid = folioschedules.folioid
where
folio.status = 'CHECKED IN' and
folioschedules.roomid = pRoomId
limit 0,1);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetRoomOccupancyNoOfPax` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 FUNCTION `fGetRoomOccupancyNoOfPax`(
pRoomId varchar(10)
) RETURNS int(5)
BEGIN
return (
select folio.noofadults as Pax
from
folioschedules left join folio on folio.folioid = folioschedules.folioid
where
folio.status = 'CHECKED IN' and
folioschedules.roomid = pRoomId
limit 0,1);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetRoomOccupancyRemarks` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 FUNCTION `fGetRoomOccupancyRemarks`(
pRoomId varchar(10)
) RETURNS text CHARSET latin1
BEGIN
return (
select folio.remarks as Remarks
from
folioschedules left join folio on folio.folioid = folioschedules.folioid
where
folio.status = 'CHECKED IN' and
folioschedules.roomid = pRoomId
limit 0,1);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetRoomOccupancyStatus1` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `fGetRoomOccupancyStatus1`(
pReportDate date,
pRoomId varchar(20)
) RETURNS varchar(100) CHARSET latin1
BEGIN
set  sql_big_selects=1;
return(select 
if(folioschedules.fromdate = pReportDate,"EXPECTED ARRIVAL",
if(folioschedules.toDate = pReportDate,"EXPECTED DEPARTURE","-")) as Status1 from 
folioschedules left join folio on folio.folioId = folioschedules.folioid
where roomid = pRoomId and
(folio.status != 'CANCELLED' or folio.status != 'NO SHOW')
limit 0,1
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetRoomOccupancyStatus2` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `fGetRoomOccupancyStatus2`(
pReportDate date,
pRoomId varchar(20)
) RETURNS varchar(100) CHARSET latin1
BEGIN
set  sql_big_selects=1;
return(select 
if(folioschedules.fromdate = pReportDate,"EXPECTED ARRIVAL",
if(folioschedules.toDate = pReportDate,"EXPECTED DEPARTURE","-")) as Status1 from 
folioschedules left join folio on folio.folioId = folioschedules.folioid
where roomid = pRoomId and
(folio.status != 'CANCELLED' or folio.status != 'NO SHOW')
limit 1,1
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetRoomRates` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 FUNCTION `fGetRoomRates`(pFolioID varchar(20), pNoOfOccupants double(12, 2)) RETURNS double(12,2)
BEGIN
return (select if(sum(rateAmount)/noOfOccupants is null, 0, sum(rateAmount)/noOfOccupants) from event_applied_rates where folioid=pFolioID and description like '%OCC%' and description not like '%OUT%' and noOfOccupants=pNoOfOccupants);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetRoomStatus` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `fGetRoomStatus`(pRoomid varchar(10)) RETURNS text CHARSET latin1
BEGIN
return (select concat(stateflag,' ', cleaningstatus) from rooms where roomid=pRoomid);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `FGetRoomType` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `FGetRoomType`( pRoomID varchar(15)) RETURNS varchar(200) CHARSET latin1
BEGIN
return(select roomtypecode from rooms where roomid = pRoomID);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetSalesExecutive` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `fGetSalesExecutive`(pUserID varchar(30)) RETURNS text CHARSET latin1
BEGIN
return (select concat(firstname, ' ', lastname) from users where UserID=pUserID);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetServiceCharge` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `fGetServiceCharge`(pTransactionCode varchar(10), pAcctSide varchar(10), pFolioID varchar(30), pTransactionDate date) RETURNS double(12,2)
BEGIN
return (select sum(foliotransactions.serviceCharge) from foliotransactions where transactionCode=pTransactionCode and acctSide=pAcctSide and date(transactionDate)=pTransactionDate);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetTempRSVBTotalPax` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 FUNCTION `fGetTempRSVBTotalPax`(
pRsvNum varchar(20)
) RETURNS int(4)
BEGIN
return( select sum(pax) as TotalRooms from _tempRSVB where rsvnum = pRsvNum group by rsvnum );
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetTempRSVBTotalPaxByRoomType` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 FUNCTION `fGetTempRSVBTotalPaxByRoomType`(
pRsvNum varchar(20),
pRmType varchar(20)
) RETURNS int(4)
BEGIN
return( select sum(pax) as TotalRooms from _tempRSVB 
where rsvnum = pRsvNum and rmcode = pRmType group by rsvnum, rmCode );
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetTempRSVBTotalRooms` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 FUNCTION `fGetTempRSVBTotalRooms`(
pRsvNum varchar(20)
) RETURNS int(4)
BEGIN
return( select sum(number) as TotalRooms from _tempRSVB where rsvnum = pRsvNum group by rsvnum );
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetTempRSVBTotalRoomsByRoomType` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 FUNCTION `fGetTempRSVBTotalRoomsByRoomType`(
pRsvNum varchar(20),
pRmType varchar(20)
) RETURNS varchar(20) CHARSET latin1
BEGIN
return( select number as TotalRooms from _tempRSVB 
where rsvnum = pRsvNum and rmCode = pRmType);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetTotalFolioAmountForSalesExecutive` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `fGetTotalFolioAmountForSalesExecutive`(pTransactionType varchar(5), pHotelID int, pSubFolio varchar(5), pAcctside varchar(10), pFolioID varchar(30)) RETURNS double(12,2)
BEGIN
return (ifnull((select sum(netAmount) from foliotransactions, transactioncode, trantypes where foliotransactions.transactioncode=transactioncode.trancode and transactioncode.trantypeid=trantypes.trantypeid and foliotransactions.hotelid=pHotelID and trantypes.trantypeid=pTransactionType and foliotransactions.subfolio=pSubFolio and foliotransactions.acctside=pAcctside and foliotransactions.folioid=pFolioID),0));
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `FGetTotalFunctionRooms` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `FGetTotalFunctionRooms`() RETURNS int(4)
BEGIN
return(
select count(roomid) 
from rooms 
where stateFlag != 'DELETED' and 
roomtypecode = 'FUNCTION');
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetTotalOutOfOrderRooms` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `fGetTotalOutOfOrderRooms`(
pReportDate date
) RETURNS int(4)
BEGIN
return(
select count(distinct roomid) 
from engineeringjobs
where
stateFlag = 'ACTIVE' and
(date(startDate) <= pReportDate and
date(endDate) > pReportDate)
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `FGetTotalRooms` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `FGetTotalRooms`() RETURNS int(4)
BEGIN
return(
select count(roomid) 
from rooms 
where stateFlag != 'DELETED' and 
roomtypecode != 'FUNCTION');
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetTransactionCodeAcctSide` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 FUNCTION `fGetTransactionCodeAcctSide`(pTranCode varchar(20)) RETURNS varchar(20) CHARSET latin1
BEGIN
return (select acctside from transactioncode where trancode=pTranCode);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetTransactionDescription` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `fGetTransactionDescription`(pTransCode varchar(10)) RETURNS text CHARSET latin1
BEGIN
return (select memo from transactioncode where tranCode=pTransCode);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetTransactionNetBaseAmountMonthToDate` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `fGetTransactionNetBaseAmountMonthToDate`(
pTransactionCode varchar(20),
pAcctSide varchar(10),
pTranDate date,
pHotelId int(5)
) RETURNS decimal(12,2)
BEGIN
set  sql_big_selects = 1;
return(
select 
sum(foliotransactions.netBaseAmount) as NetBaseAmount
from
foliotransactions  force index(FolioID,SubFolio,AccountID),
transactioncode  force index(primary)
where 	
foliotransactions.transactioncode = transactioncode.trancode and 
foliotransactions.transactioncode = pTransactionCode and
foliotransactions.acctSide = pAcctSide and
(month(transactiondate) = month(pTranDate) and transactiondate <= pTranDate and year(transactiondate)=year(pTranDate))
and foliotransactions.status = 'ACTIVE'
group by foliotransactions.transactioncode
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fGetTransactionNetBaseAmountYearToDate` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `fGetTransactionNetBaseAmountYearToDate`(
pTransactionCode varchar(20),
pAcctSide varchar(10),
pTranDate date,
pHotelId int(5)
) RETURNS decimal(12,2)
BEGIN
set  sql_big_selects = 1;
return(
select 
sum(foliotransactions.netBaseAmount) as NetBaseAmount
from
foliotransactions  force index(FolioID,SubFolio,AccountID),
transactioncode  force index(primary)
where 	
foliotransactions.transactioncode = transactioncode.trancode and 
foliotransactions.transactioncode = pTransactionCode and
foliotransactions.acctSide = pAcctSide and
(year(transactiondate) = year(pTranDate) and transactiondate <= pTranDate) and
foliotransactions.status = 'ACTIVE'
group by foliotransactions.transactioncode
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fHK_GetUnitPrice` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `fHK_GetUnitPrice`(
pId int(11)
) RETURNS double(12,2)
BEGIN
return(select unitPrice 
from hk_minibaritems 
where 
hk_minibaritems.statusFlag = 'ACTIVE' and  itemCode = pId
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP FUNCTION IF EXISTS `fnc_pivot` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 FUNCTION `fnc_pivot`(tCode varchar(10), fieldName varchar(20) ) RETURNS varchar(200) CHARSET latin1
BEGIN
return( 'if(transactioncode = \"1000\", Amount , 0) as HotelRate');
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `getRoomReservationStatus` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `getRoomReservationStatus`(
in pHotelId int(4),
in pRoomId varchar(50),
in pDate date
)
BEGIN
select eventType from roomevents
where roomid = pRoomId and hotelid = pHotelId
and date(eventDate)=pDate and 
(eventtype='RESERVATION' or eventtype = 'ENGINEERING JOB')
union all
select 'BLOCKED' as eventType from blockingdetails
where roomid=pRoomId and pDate between date(blockfrom) and date(blockto)
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `GetTranCodeAccountSide` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `GetTranCodeAccountSide`(
in ptrancode varchar(20),
in photelid int(5)
)
BEGIN
select acctside from transactioncode
where
trancode = ptrancode and
hotelid = photelid and 
stateflag = 'ACTIVE';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `pSelectAccount` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `pSelectAccount`(
pHotelId int(5)
)
BEGIN
Select accountid,lastname,firstname from guests
Where HotelId=pHotelId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spAcknowledgeShiftEndorsement` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spAcknowledgeShiftEndorsement`(
pId                  int(10),
pEndorsementRemarks  text,
pAcknowledgedBy      varchar(50),
pAcknowledgeAtTerminal varchar(10),
pAcknowledgeAtShiftCode varchar(10)
)
BEGIN
update shiftendorsements set
statusFlag = 'ACKNOWLEDGED',
updateTime = now(),
endorsementRemarks = pEndorsementRemarks,
acknowledgedBy = pAcknowledgedBy,
acknowledgeAtTerminal = pAcknowledgeAtTerminal,
acknowledgeAtShiftCode = pAcknowledgeAtShiftCode
where
id = pId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spActivateRoom` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spActivateRoom`(proomid varchar(10),pupdatedby varchar(20),photelid int(5))
BEGIN
update rooms set stateflag = 'VACANT',updatetime = now(),updatedby = pupdatedby where roomid = proomid and hotelid = photelid;  
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spAddRoomAmenity` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spAddRoomAmenity`(
in proomid varchar(10),
in pamenityid varchar(20),
in photelid int(5),
in pcreatedby varchar(20)
)
BEGIN
insert into roomamenities
values
(
proomid,
pamenityid,
photelid,
now(),
pcreatedby,
now(),
pcreatedby,
'ACTIVE'
);
update amenities 
set stateflag = 'ASSIGNED' where
amenityid = pamenityid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spArrivalsView` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spArrivalsView`()
BEGIN
select distinct folioid from folioschedules 
where 
departuredate = now();
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spAuthenticateUser` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spAuthenticateUser`(
in pUserId varchar(20),
in pPassword text
)
BEGIN
Select 
HotelId 
from 
users force index(primary)
WHERE 
userid = pUserId and `password` = md5(pPassword) and stateflag!='DELETED';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spBanquetFoodBevRequirements` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spBanquetFoodBevRequirements`(pFolioID varchar(35))
BEGIN
select event_meal_requirements.eventDate, event_meal_requirements.venue, event_meal_requirements.startTime, event_meal_requirements.endTime, event_meal_requirements.setup, event_meal_requirements.over, event_meal_requirements.remarks, event_meal_header.mealType, event_meal_details.description
from event_meal_requirements, event_meal_header, event_meal_details
where event_meal_requirements.folioid=pFolioID and event_meal_requirements.folioid=event_meal_header.folioid and event_meal_header.eventDate=event_meal_requirements.eventdate and event_meal_header.mealID=event_meal_details.mealID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spCancelRoomEvent` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spCancelRoomEvent`(
in pEventID varchar(20),
in pEventType varchar(30),
in pEventType1 varchar(30),
in pHotelId int(5)
)
BEGIN
Update Roomevents set EventType=pEventType1 where EventID=pEventID and EventType=pEventType and hotelId=pHotelId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spChangeAuditDate` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spChangeAuditDate`(
pTriggeredBy varchar(20),
pAuditDate datetime
)
BEGIN
delete from auditdatetable;
insert into auditdatetable values (date_format(date_sub(now(),INTERVAL 1 DAY),'%Y-%m-%d'),0,'PROCESSED',date_sub(now(),INTERVAL 1 DAY),pTriggeredBy),(date_format(now(),'%Y-%m-%d'),0,'AM',now(),pTriggeredBy);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spChangeFolioPackage` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spChangeFolioPackage`(
in pFolioID varchar(20),
in pHotelID int(5),
in pPackageID varchar(20)
)
BEGIN
Update Folio set packageID=pPackageID where folioID=pFOlioID and hotelID=pHOtelID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spChangeUserPassword` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spChangeUserPassword`(
in pUserId varchar(20),
in pPassword varchar(20)
)
BEGIN
update users
set       
`Password` = md5(pPassword)
where
userid = pUserId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spCheckConflictRoomEvents` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spCheckConflictRoomEvents`( in pRoomid varchar(20),
in pEventDate date,
in pHotelID int(5),
in pFolioId varchar(20)
)
BEGIN
Select roomevents.eventno
from roomevents left join folio on folio.folioid = roomevents.eventid 
where
roomevents.roomid = proomid and
roomevents.Eventdate = pEventDate and
roomevents.eventid != pFolioId and
roomevents.hotelid = pHotelid and 
if(eventtype='ENGINEERING JOB', true, (folio.status!='CANCELLED' AND FOLIO.STATUS!='DELETED' AND FOLIO.STATUS!='REMOVED' AND FOLIO.STATUS!='NO SHOW' AND date(folio.departuredate)!=pEventDate and folio.status!='CHECKED OUT'))
and
(if(roomevents.eventtype='ENGINEERING JOB', true, folio.foliotype != 'SHARE') );
end */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spCheckIfGuestIsCheckedIn` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spCheckIfGuestIsCheckedIn`(in pAccountID varchar(20), in pHotelid int(5),
in pRoomNo varchar(10))
BEGIN
select count(folio.folioid) from folio, folioschedules where folio.accountid=pAccountID and folio.hotelid=pHotelID and folio.`status`='CHECKED IN' and folio.folioid=folioschedules.folioid and roomid!=pRoomNo;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spCheckIfRoomIsBlock` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spCheckIfRoomIsBlock`(
pRoomId varchar(10),
pDate date,
pFolioID varchar(20)
)
BEGIN
if(pFolioID!="") then
select rooms.roomid,
blockingdetails.blockfrom,
blockingdetails.blockto,
roomblock.folioid
from rooms,blockingdetails, roomblock
where
rooms.roomid=blockingdetails.roomid and
pDate between date(blockingdetails.blockfrom) and date(blockingdetails.blockto) and
rooms.roomid=pRoomId and blockingdetails.blockid=roomblock.blockid and roomblock.folioid!=pfolioid and date(blockingdetails.blockto)!=pDate;
else
select rooms.roomid,
blockingdetails.blockfrom,
blockingdetails.blockto,
roomblock.folioid
from rooms,blockingdetails, roomblock
where
rooms.roomid=blockingdetails.roomid and
pDate between date(blockingdetails.blockfrom) and date(blockingdetails.blockto) and
rooms.roomid=pRoomId and blockingdetails.blockid=roomblock.blockid and date(blockingdetails.blockto)!=pDate;
end if;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spCheckMealHeaderExists` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spCheckMealHeaderExists`(pMealType varchar(30), pEventDate date, pFolioID varchar(20))
BEGIN
select * from event_meal_requirements where mealType=pMealType and date(eventDate)=pEventDate and folioID=pFolioID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spCloseCityLedgerAccount` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spCloseCityLedgerAccount`(
in pAccountId varchar(20),
in pHotelId int(5)
)
BEGIN
update cityledger 
set closed = '1' where
acctId = pAccountId and
hotelId = pHotelId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spClosePaymentLedgerAccount` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spClosePaymentLedgerAccount`()
BEGIN
update paymentledger
set 
closed = '1' 
where
acctId = pAcctId and
hotelId = pHotelId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spCountGroupWaitList` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spCountGroupWaitList`(pDate date)
BEGIN
select count(distinct event_rooms.folioid) as groupCount from event_rooms, folio where noOfRooms>blockedRooms and event_rooms.folioid=folio.folioid and (folio.status='TENTATIVE' or folio.status='CONFIRMED'or folio.status='WAIT LIST') and date(folio.fromDate)>=pDate and folio.foliotype='GROUP';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spCountNoOfPax` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spCountNoOfPax`(
in pDate DateTime,
in pHotelId int(5),
in pFilter varchar(50)
)
BEGIN
if(pFilter = 'ALL')then
select roomtype, DateNow, sum(Pax) as Pax, sum(rooms) as rooms from
(select folioschedules.roomtype, pDate as DateNow,sum(folio.noofadults) as Pax, count(folio.folioid) as rooms
from folio,
folioschedules
where
folio.folioid = folioschedules.folioid and
folio.hotelid = folioschedules.hotelid and
folio.hotelid = pHotelId and
(folio.Status ='CHECKED IN' or folio.Status ='CONFIRMED' or folio.status='WAIT LIST' or folio.status='TENTATIVE') and
(pDate >= date(folioschedules.fromdate)
and pdate < date(folioschedules.todate)) and folioschedules.roomtype!='FUNCTION'
group by roomtype 
union
select rooms.roomtypecode as roomtype, pDate as DateNow, 0 as Pax, count(roomblock.folioid) as `rooms` from rooms, roomblock, blockingdetails where roomblock.blockid=blockingdetails.blockid and rooms.roomid=blockingdetails.roomid and roomblock.folioid!='' and pDate>=date(blockingdetails.blockfrom) and pDate<date(blockingdetails.blockto) and rooms.roomtypecode!='FUNCTION' group by roomtype) as paxTable group by roomtype;
elseif(pFilter = 'CONFIRMED WAIT LIST') THEN
select roomtype, DateNow, sum(Pax) as Pax, sum(rooms) as rooms from
(select folioschedules.roomtype, pDate as DateNow, sum(folio.noofadults) as Pax, count(folio.folioid) as rooms
from folio,
folioschedules
where
folio.folioid = folioschedules.folioid and
folio.hotelid = folioschedules.hotelid and
folio.hotelid = pHotelId and
(folio.status = 'WAIT LIST' or folio.Status ='CONFIRMED' or folio.status='TENTATIVE') and
(pDate >= date(folioschedules.fromdate)
and pdate < date(folioschedules.todate)) and folioschedules.roomtype!='FUNCTION'
group by roomtype
union
select rooms.roomtypecode as roomtype, pDate as DateNow, 0 as Pax, count(roomblock.folioid) as `rooms` from rooms, roomblock, blockingdetails where roomblock.blockid=blockingdetails.blockid and rooms.roomid=blockingdetails.roomid and roomblock.folioid!='' and pDate>=date(blockingdetails.blockfrom) and pDate<date(blockingdetails.blockto) and rooms.roomtypecode!='FUNCTION' group by roomtype) as paxTable group by roomtype;
elseif(pFilter = 'CONFIRMED CHECKED IN') THEN
select folioschedules.roomtype, pDate as DateNow,sum(folio.noofadults) as Pax, count(folio.folioid) as rooms
from folio,
folioschedules
where
folio.folioid = folioschedules.folioid and
folio.hotelid = folioschedules.hotelid and
folio.hotelid = pHotelId and
(folio.status = 'CHECKED IN' or folio.Status ='CONFIRMED' or folio.status='TENTATIVE') and
(pDate >= date(folioschedules.fromdate)
and pdate < date(folioschedules.todate)) and folioschedules.roomtype!='FUNCTION'
group by (folioschedules.roomtype);
elseif(pFilter = 'CHECKED IN WAIT LIST') THEN
select roomtype, DateNow, sum(Pax) as Pax, sum(rooms) as rooms from
(select folioschedules.roomtype, pDate as DateNow,sum(folio.noofadults) as Pax, count(folio.folioid) as rooms
from folio,
folioschedules
where
folio.folioid = folioschedules.folioid and
folio.hotelid = folioschedules.hotelid and
folio.hotelid = pHotelId and
(folio.status = 'WAIT LIST' or folio.Status ='CHECKED IN') and
(pDate >= date(folioschedules.fromdate)
and pdate < date(folioschedules.todate)) and folioschedules.roomtype!='FUNCTION'
group by roomtype 
union
select rooms.roomtypecode as roomtype, pDate as DateNow, 0 as Pax, count(roomblock.folioid) as `rooms` from rooms, roomblock, blockingdetails where roomblock.blockid=blockingdetails.blockid and rooms.roomid=blockingdetails.roomid and roomblock.folioid!='' and pDate>=date(blockingdetails.blockfrom) and pDate<date(blockingdetails.blockto) and rooms.roomtypecode!='FUNCTION' group by roomtype) as paxTable group by roomtype;
elseif(pFilter='CONFIRMED') then
select folioschedules.roomtype, pDate as DateNow,sum(folio.noofadults) as Pax, count(folio.folioid) as rooms
from folio,
folioschedules
where
folio.folioid = folioschedules.folioid and
folio.hotelid = folioschedules.hotelid and
folio.hotelid = pHotelId and
(folio.Status ='CONFIRMED' or folio.status='TENTATIVE') and
(pDate >= date(folioschedules.fromdate)
and pdate < date(folioschedules.todate)) and folioschedules.roomtype!='FUNCTION'
group by (folioschedules.roomtype);
elseif(pFilter='WAIT LIST') then
select roomtype, DateNow, sum(Pax) as Pax, sum(rooms) as rooms from
(select folioschedules.roomtype, pDate as DateNow,sum(folio.noofadults) as Pax, count(folio.folioid) as rooms
from folio,
folioschedules
where
folio.folioid = folioschedules.folioid and
folio.hotelid = folioschedules.hotelid and
folio.hotelid = pHotelId and
(folio.Status ='WAIT LIST') and
(pDate >= date(folioschedules.fromdate)
and pdate < date(folioschedules.todate)) and folioschedules.roomtype!='FUNCTION'
group by roomtype 
union 
select rooms.roomtypecode as roomtype, pDate as DateNow, 0 as Pax, count(roomblock.folioid) as `rooms` from rooms, roomblock, blockingdetails where roomblock.blockid=blockingdetails.blockid and rooms.roomid=blockingdetails.roomid and roomblock.folioid!='' and pDate>=date(blockingdetails.blockfrom) and pDate<date(blockingdetails.blockto) and rooms.roomtypecode!='FUNCTION' group by roomtype) as paxTable group by roomtype;
else
select folioschedules.roomtype, pDate as DateNow,sum(folio.noofadults) as Pax, count(folio.folioid) as rooms
from folio,
folioschedules
where
folio.folioid = folioschedules.folioid and
folio.hotelid = folioschedules.hotelid and
folio.hotelid = pHotelId and
folio.Status ='CHECKED IN' and
(pDate >= date(folioschedules.fromdate)
and pdate < date(folioschedules.todate)) AND folioschedules.roomtype!='FUNCTION'
group by (folioschedules.roomtype);
end if;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spCountOccupiedRooms` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spCountOccupiedRooms`(in pStartDate varchar(20),
in pHotelID int(3)
)
BEGIN
select distinct roomtypecode,count(roomtypecode) as OccupiedRooms,eventdate from rooms,roomevents 
where not (roomevents.eventtype='CHECKED OUT' or roomevents.eventtype='CANCELLED' or roomevents.eventtype='NO SHOW' )  and roomevents.transferflag<>'1' and
roomevents.roomid = rooms.roomid  and rooms.HotelID=pHotelID and roomevents.eventdate >=pStartDate
group by roomtypecode,eventdate ;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spCountRefNoExistence` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spCountRefNoExistence`(pTrancode varchar(40),
prefno varchar(20),
pHotelID int(3)
)
BEGIN
set  sql_big_selects=1;
select sum(transactioncode) from
(
select count(transactioncode) as transactionCode from folioTransactions force index (`primary`)
where transactionsource=pTrancode and (ReferenceNo=pRefno OR referenceNo=concat(pRefNo,'(VOID)')) and (`status`='ACTIVE' or `status`='VOID')
union
select count(transactioncode) as transactionCode from nonguesttransaction force index (`primary`)
where transactionsource=pTrancode and (ReferenceNo=pRefno OR referenceNo=concat(pRefNo,'(VOID)')) and (`statusflag`='ACTIVE' or `statusflag`='VOID')) as transactionTable;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spCountRoomTypes` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spCountRoomTypes`(in pHotelID int(5))
BEGIN
select roomtypecode,count(roomtypecode) as vacant from rooms where 
HotelID=pHOtelID
group by roomtypecode ;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeductCompanyXDealAmount` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeductCompanyXDealAmount`(
in pCompanyId varchar(20),
in pAmount double(12,2),
in pHotelId int(4)
)
BEGIN
update company
set X_DEAL_AMOUNT = X_DEAL_AMOUNT - pAmount
where companyId = pCompanyId
and hotelid = pHotelId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteAccountPrivileges` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteAccountPrivileges`(
in pAccountId varchar(20),
In pHotelId int(5)
)
BEGIN
DELETE from accountprivileges 
WHERE AccountId=pAccountId 
AND HotelId=pHotelId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteAgent` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteAgent`(
in pAgentID         int(10),
in pUPDATED_BY       varchar(50), 
in pHOTEL_ID         int(4)
)
BEGIN
delete from agents where 
agentID = pAgentID and
HOTEL_ID = pHOTEL_ID
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteAllFolioRoomEvents` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spDeleteAllFolioRoomEvents`(
in pFolioId varchar(20),
in pHotelId int(4)
)
BEGIN
delete from 
roomevents
where
EventID = pFolioId and
HOTELID = pHotelId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteAllFolioRouting` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteAllFolioRouting`(
in pHotelId int(5),
in pFolioId varchar(20)
)
BEGIN
Delete from foliorouting where folioId=pFolioId and hotelId=pHOtelId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteAllPackageDetails` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteAllPackageDetails`(
in pPackageId varchar(20),
in pHotelId int(5)
)
BEGIN
DELETE FROM packagedetails WHERE packageID=pPackageId and HotelID=pHotelID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteAllPrivilegeDetails` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteAllPrivilegeDetails`(
in pPrivilegeId varchar(20),
in pHotelId int(5)
)
BEGIN
DELETE FROM privilegedetails WHERE PrivilegeID=pPrivilegeId and HotelID=pHotelID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteAmenity` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteAmenity`(
in pamenityid varchar(20), 
in photelid int(5),
in pupdatedby varchar(20)
)
BEGIN
update amenities 
set 
stateflag = 'DELETED',
updatedby = pupdatedby,
updatetime = now()
where amenities.amenityid = pamenityid and hotelid = photelId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteAppliedRate` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteAppliedRate`(pAppliedRateID varchar(5), pHotelID int(5), pUser varchar(20))
BEGIN
update appliedRates set `status`='inactive', updatedby=puser, updatetime=now() where appliedRateID=pAppliedRateID and hotelid=pHotelID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteAppliedRates` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spDeleteAppliedRates`(
pAppliedRateID bigint(10),
pHotelID int(10),
pUser varchar(20))
BEGIN
update appliedRates set `status`='deleted', updatedby=pUser, updatetime=now() where appliedRateID=pAppliedRateID and hotelID=pHotelID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteBackOfficeConfig` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteBackOfficeConfig`(
in pHotelId int(4)
)
BEGIN
delete from back_office_config
where HOTEL_ID = pHotelId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteBlocking` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteBlocking`(
in pRoomID int(11),
in pFrom date
)
BEGIN
Delete from Blocking where roomID=pRoomid and `from`=pFrom;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteCashier` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteCashier`(
in pcashierid varchar(10)
)
BEGIN
delete from cashier
where 
cashierid = pcashierid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteCompany` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteCompany`(
in pcompanyid varchar(12),
in pHotelID int(5),	
in pupdatedby varchar(20)
)
BEGIN
update company
set
stateflag = 'DELETED',
updatetime = now(),
updatedby = pupdatedby
where
companyid = pcompanyid and hotelId=pHOtelId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteContact` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteContact`(
pConctactId int(20)
)
BEGIN
update contacts
set statusFlag = 'DELETED'
where
id = pConctactId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteContractAmendment` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteContractAmendment`(pID bigint(12))
BEGIN
update ContractAmmendments set StateFlag='DELETED' where id = pID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteContractAmendments` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteContractAmendments`(pAmmendmentID varchar(50), pFolioID varchar(30))
BEGIN
UPDATE ContractAmmendments set StateFlag='DELETED' where AmmendmentID = pAmmendmentID and FolioID = pFolioID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteCurrencyCode` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteCurrencyCode`(
in pcurrencycode varchar(10),
in photelid int(5),
in pupdatedby varchar(20)
)
BEGIN
UPDATE CurrencyCodes
SET
stateFlag='DELETED',
UPDATEDBY=pupdatedby,
UPDATETIME=now()
WHERE
currencycode=pcurrencycode AND HOTELID=photelId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteDepartment` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteDepartment`(
in pDeptId      varchar(20),       
in pHotelId     int(5)        
)
BEGIN
Update department set stateFlag='DELETED' 
Where DeptId=pDeptId and HotelId=pHotelId;
end */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteDriver` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteDriver`(
in pDriverId         int(10),
in pUPDATED_BY       varchar(50), 
in pHOTEL_ID         int(4)
)
BEGIN
update drivers
set 
STATUS_FLAG = "DELETED",
UPDATED_DATE = now(), 
UPDATED_BY = pUPDATED_BY
where
driverId = pDriverId and
HOTEL_ID = pHOTEL_ID
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteEnggJobRoomEvent` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteEnggJobRoomEvent`(
in peventid varchar(20),
in photelid int(5)
)
BEGIN
delete from roomevents
where
eventid = peventid and hotelid = photelid and eventtype = 'ENGINEERING JOB';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteEngineeringJob` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteEngineeringJob`(
IN penggjobno varchar(20),
in photelid int(5),
in pupdatedby varchar(20),
in pEndDate varchar(20),
in pEndTime varchar(20)
)
BEGIN
update engineeringjobs
set 
stateflag = 'DELETED',
updatedby = pupdatedby,
updatetime = now(),
endDate = pEndDate,
endTime = pEndTime
where enggjobno = penggjobno and hotelid = photelid;  
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteEngineeringService` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteEngineeringService`(
in penggserviceid varchar(20),
in pupdatedby varchar(20),
in photelid int(5)
)
BEGIN
update engineeringservices
set    
engineeringservices.stateflag = 'DELETED',
updatetime = now(),
updatedby = pupdatedby
where  enggserviceid = penggserviceid and hotelid = photelid;	
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteEvent` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spDeleteEvent`(pFolioID varchar(30))
BEGIN
delete from event_booking_info where folioid=pfolioid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteEventPackage` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteEventPackage`(pPackageID bigint(20), pHotelD int(10), pUser varchar(20))
BEGIN
update event_package_header set `status`='deleted' where hotelID=pHotelD and packageID=pPackageID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteEventPackageDetails` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteEventPackageDetails`(pPackageID int(20))
BEGIN
delete from event_package_detail where packageID=pPackageID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteEventPackageRequirements` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteEventPackageRequirements`(pPackageID int(20))
BEGIN
delete from event_package_requirement where packageID=pPackageID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteEventType` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteEventType`(
in pTypeID    varchar(10),
in pUPDATED_BY       varchar(50)
)
BEGIN
update event_type
set 
`status` = "DELETED",
UPDATETIME = now(), 
UPDATEDBY = pUPDATED_BY
where
typeID = pTypeID 
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteFloor` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteFloor`(
in pfloor varchar(25),
in photelid int(5),
in pupdatedby varchar(20)
)
BEGIN
update floors
set
stateflag = 'DELETED',
updatedby = pupdatedby,
updatetime = now()
where
`floor` = pfloor and
hotelid = photelid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteFolio` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteFolio`(in pFolioID varchar(12))
BEGIN
Delete from Folio where folioId=pFolioID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteFolioInclusions` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteFolioInclusions`(
in pFolioId varchar(30),
in pHotelId int(5))
BEGIN
delete from FolioInclusions where
folioid = pFolioId and 
hotelId= pHotelId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteFolioPackage` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteFolioPackage`(
in pFolioId varchar(20),
in pHotelId int(5))
BEGIN
delete from foliopackage where
folioid = pFolioId and 
hotelId= pHotelId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteFolioPrivilege` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteFolioPrivilege`(
in pFolioID varchar(20),
in pHotelID int(4)
)
BEGIN
delete from folioprivilege where FolioID = pFolioID and
HotelID = pHotelID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteFolioRecurringCharge` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteFolioRecurringCharge`(
in pHotelId int(5),
in pFolioId varchar(20),
in pTranCode varchar(20)
)
BEGIN
Delete from 
FolioRecurringCharge 
where 
folioId=pFolioId and 
hotelId=pHotelId and 
TransactionCode=pTranCode;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteFolioRecurringCharges` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteFolioRecurringCharges`(
in pHotelId int(5),
in pFolioId varchar(20)
)
BEGIN
Delete from 
FolioRecurringCharge 
where 
folioId=pFolioId and 
hotelId=pHotelId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteFolioRouting` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteFolioRouting`(
in pHotelId int(5),
in pFolioId varchar(20),
in pTranCode varchar(20)
)
BEGIN
Delete from foliorouting where folioId=pFolioId and hotelId=pHOtelId and TransactionCode=pTranCode;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteFolioRoutings` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteFolioRoutings`(
in pFolioId varchar(20),
in pHotelId int(5)
)
BEGIN
Delete from foliorouting where folioId=pFolioId and hotelId=pHOtelId ;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteFolioSchedule` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteFolioSchedule`(
in pFolioID varchar(20),
in pHotelID int(5)
)
BEGIN
Delete from FolioSchedules where folioID=pFolioID and hotelID=pHOtelID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteFolioScheduleRefArrivalDate` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteFolioScheduleRefArrivalDate`(
in pArrivalDate date,
in pEventID varchar(20),
in pHotelID int(5)
)
BEGIN
Delete from folioSchedules where fromdate=pArrivalDate and folioid=pEventID and hotelID=pHotelID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteFolioSchedules` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteFolioSchedules`(
in pFolioID varchar(20),
in pRoomID varchar(20),
in pHotelID int(5)
)
BEGIN
Delete from folioSchedules where folioID=pFolioID and roomID=pRoomID and hotelid=pHotelID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteFolioTransaction` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteFolioTransaction`(
in ptrandate datetime,
in pFolioID varchar(20),
in ptrancode varchar(5)
)
BEGIN
delete from foliotransactions where 
transactiondate=ptrandate and 
folioid=pFolioID and 
transactioncode=ptrancode;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteGroup` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteGroup`(
pGROUP_ID     varchar(10),
pUPDATEDBY varchar(30),
pRESTOID	INT(5)
)
BEGIN
update `group` set
`STATUS`='DELETED',
UPDATEDBY=pUPDATEDBY,
UPDATETIME=now()
Where 
GROUP_ID=pGROUP_ID AND RESTO_ID=pRESTOID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteGuest` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteGuest`(
in paccountid varchar(12),
in pHotelId int(5),
in pupdatedby varchar(20)
)
BEGIN
update guests 
set 
stateflag = 'DELETED',
updatetime = now(),
updatedby  = pupdatedby
where
accountid = paccountid and hotelId=pHOtelID
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteHotel` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteHotel`(
pHotelId int(3)
)
BEGIN
Update Hotel 
set stateFlag='DELETED'
Where HotelID=pHotelID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteHouseKeeper` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteHouseKeeper`(
in phousekeeperid varchar(20),
in pupdatedby varchar(20),
in photelid int(5)
)
BEGIN
update hk_housekeepers
set 
stateflag = 'DELETED',
updatedby = pupdatedby,
updatetime = now()
where housekeeperid = phousekeeperid and hotelid = photelid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteHouseKeepingJob` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteHouseKeepingJob`(in phousekeepingjobno int)
BEGIN
update housekeepingjobs
set    housekeepingjobs.stateflag = 'DELETED'
where  housekeepingjobs.housekeepingjobno = phousekeepingjobno;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteIndividualRoleMenu` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteIndividualRoleMenu`(
pRoleName varchar(30),
pMenu varchar(50),
pHotelId     int(5) 
)
BEGIN
Delete from RoleMenu Where RoleName=pRoleName and Menu=pMenu and HotelId=pHotelId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteItem` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteItem`(
pITEM_ID varchar(30),
pUpdatedBy varchar(30)
)
BEGIN
update item set
`STATUS`='DELETED',
UpdatedBy=pUpdatedBy,
UpdateTime=now()
Where 
ITEM_ID=pITEM_ID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteMainGroup` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteMainGroup`(
pGROUP_ID     varchar(10),
pUPDATEDBY varchar(30)
)
BEGIN
update `main_item_group` set
`STATUS`='DELETED',
UPDATEDBY=pUPDATEDBY,
UPDATEDTIME=now()
Where 
ID=pGROUP_ID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteMainMealHeader` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteMainMealHeader`(pFolioID varchar(20), pEventDate date)
BEGIN
declare pMealID bigint(10);
delete from event_meal_requirements where folioID=pFolioID and date(eventDate)=date(pEventDate);
set pMealID=(select mealID from event_meal_header where folioID=pFolioID and date(eventDate)=date(pEventDate) limit 1);
delete from event_meal_header where folioID=pFolioID and date(eventDate)=pEventDate;
delete from event_meal_details where mealID=pMealID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteMealGroup` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteMealGroup`(pGroupID bigint(20), pHotelID int(10), pUser varchar(20))
BEGIN
update meal_group set `status`='deleted', updatedby=pUser, updatetime=now() where groupID=pGroupID and hotelID=pHotelID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteMealItem` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteMealItem`(pItemID varchar(30), pHotelID int(10), pUser varchar(20))
BEGIN
update meal_items set `status`='deleted', updatedby=pUser, updatetime=now() where hotelID=pHotelID and itemID=pItemID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteMealMenu` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteMealMenu`(pMenuID bigint(10), pHotelID int(10), pUser varchar(20))
BEGIN
update meal_menu set `status`='deleted', updatedby=pUser, updatetime=now() where hotel_id=pHotelID and menuID=pMenuID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteMenu` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteMenu`(
pMENU_ID       varchar(10),       
pUPDATEDBY     varchar(30)
)
BEGIN
update menu
set 
`STATUS`='DELETED',
UPDATEDBY=pUPDATEDBY,
UPDATETIME=now()
where
MENU_ID=pMENU_ID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteMenuDetail` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteMenuDetail`(
pMENU_ID     varchar(10)
)
BEGIN
delete from `menu detail` WHERE MENU_ID=pMENU_ID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeletePackageDetail` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeletePackageDetail`(
in pPackageId varchar(20) ,
in pTransactionCode varchar(20),
in pHotelID int(5)
)
BEGIN
UPDATE 
packagedetails 
SET 
stateFlag='DELETED'
WHERE 
PackageID=pPackageID AND 
TransactionCode=pTransactionCode AND
HotelID=pHotelID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeletePackages` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeletePackages`(
in pPackageID varchar(20),
in pHotelID int(5)
)
BEGIN
UPDATE packageheader 
SET 
stateFlag='DELETED'
WHERE 
PackageID=pPackageID
AND HotelID=pHotelID;
UPDATE packagedetails
SET 
stateFlag='DELETED'
WHERE 
PackageID=pPackageID
AND HotelID=pHotelID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeletePrivilegeDetail` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeletePrivilegeDetail`(
in pPrivilegeId varchar(20) ,
in pTransactionCode varchar(20),
in pHotelID int(5)
)
BEGIN
UPDATE 
privilegedetails 
SET 
stateFlag='DELETED'
WHERE 
PrivilegeID=pPrivilegeID AND 
TransactionCode=pTransactionCode AND
HotelID=pHotelID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeletePrivilegeHeader` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeletePrivilegeHeader`(
in pPrivilegeID varchar(20),
in pHotelID int(5)
)
BEGIN
UPDATE privilegeheader 
SET 
stateFlag='DELETED'
WHERE 
PrivilegeID=pPrivilegeID
AND HotelID=pHotelID;
UPDATE privilegedetails
SET 
stateFlag='DELETED'
WHERE 
PrivilegeID=pPrivilegeID
AND HotelID=pHotelID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeletePromo` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeletePromo`(IN ppromocode INT)
BEGIN
update promos
set promos.stateflag = 'DELETED'
where promos.promocode = ppromocode;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteRateCode` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteRateCode`(
in pratecode varchar(50),
in photelid int(5),
in pupdatedby varchar(20)
)
BEGIN
update ratecodes
set 
stateflag = 'DELETED',
updatedby = pupdatedby,
updatetime = now()
where ratecode = pratecode and hotelid = photelid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteRateType` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteRateType`(
in proomtypecode varchar(50),
in pratecode varchar(50),
in photelid int(5),
in pupdatedby varchar(20)
)
BEGIN
update ratetypes
set `statusFlag` = 'DELETED',
updatedby = pupdatedby,
updatetime = now()
where
roomtypecode = proomtypecode and
ratecode = pratecode and
hotelid = photelid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteRequirement` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteRequirement`(
in pRequirementId         int(10),
in pUPDATED_BY       varchar(50), 
in pHOTEL_ID         int(4)
)
BEGIN
update requirement_header
set 
`status` = "DELETED",
UPDATETIME = now(), 
UPDATEDBY = pUPDATED_BY
where
requirementID = pRequirementId and
hotelID = pHOTEL_ID
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteRole` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteRole`(
pRoleName varchar(30),
pHotelId int(5)
)
BEGIN
Delete from Roles
Where RoleName=pRoleName AND HotelId=pHotelId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteRoleMenu` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteRoleMenu`(
pRoleName varchar(30),
pHotelId     int(5) 
)
BEGIN
Delete from RoleMenu Where RoleName=pRoleName  and HotelId=pHotelId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteRoom` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteRoom`(
in proomid varchar(10),
in pupdatedby varchar(20),
in photelid int(5)
)
BEGIN
update rooms 
set 
stateflag = 'DELETED',
updatetime = now(),
updatedby = pupdatedby
where roomid = proomid and hotelid = photelid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteRoomAmenities` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteRoomAmenities`(
in pRoomId varchar(20),
in pHotelId int(4)
)
BEGIN
delete from roomamenities
where
roomid = pRoomId and
hotelid = pHotelId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteRoomAmenity` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteRoomAmenity`( 
in pamenityid varchar(20),
in proomid varchar(10),
in photelid int(5)
)
BEGIN
UPDATE roomamenities
set stateflag = 'DELETED' 
where amenityid = pamenityid and roomid = proomid and hotelid = photelid;
update amenities set amenities.stateflag = 'UNASSIGNED'
where amenities.amenityid = pamenityid and hotelid = photelid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteRoomBlock` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteRoomBlock`(
in pblockid int(11),in proomid varchar(10)
)
BEGIN
delete from blockingdetails where
blockid = pblockid and roomid = proomid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteRoomBlockedByEvent` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spDeleteRoomBlockedByEvent`(pRoomID varchar(10), pFolio varchar(20))
BEGIN
delete blockingdetails from blockingdetails,roomblock where roomid=pRoomID and blockingdetails.blockid=roomblock.blockid and folioid=pFolio;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteRoomBlockNoDetail` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteRoomBlockNoDetail`(
)
BEGIN
delete from roomblock 
where not exists
(select * from blockingdetails 
where blockingdetails.blockid = roomblock.blockid);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteRoomEvent` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteRoomEvent`(
in pEventID varchar(20),
in pRoomID varchar(20),
in pEventType varchar(25),
in pHotelID int(5),
in pEventdate date
)
BEGIN
Delete from Roomevents where EventID=pEventID and RoomID=pRoomID and eventtype=pEventType and hotelID=pHotelID and EventDate=pEventDate;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteRoomEventByEventType` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteRoomEventByEventType`(
in peventtype varchar(30)
)
BEGIN
Delete from Roomevents 
where EventID = pEventID and Roomevents.EventType = peventtype;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteRoomEvents` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteRoomEvents`(
in pEventID varchar(20),
in pRoomID varchar(20),
in pEventType varchar(25),
in pHotelID int(5)
)
BEGIN
Delete from Roomevents where EventID=pEventID and RoomID=pRoomID and eventtype=pEventType and hotelID=pHotelID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteRoomRequirements` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spDeleteRoomRequirements`(pFolioID varchar(20))
BEGIN
delete from event_rooms where folioID=pFolioID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteRoomsEvents` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteRoomsEvents`(
in pEventID varchar(20),
in pRoomID varchar(20),
in pHotelID int(5)
)
BEGIN
Delete from Roomevents where EventID=pEventID and RoomID=pRoomID and hotelID=pHotelID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteRoomType` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteRoomType`(
in proomtypecode varchar(20),
in pupdatedby varchar(20),
in photelid int(5)
)
BEGIN
update roomtypes 
set 
roomtypes.statusFlag = 'DELETED',
updatedby = pupdatedby,
updatetime = now()
where roomtypecode = proomtypecode and hotelid = photelid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteTransactionCode` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteTransactionCode`(
in ptrancode varchar(20),
in pupdatedby varchar(20),
in photelid int(5)
)
BEGIN
update transactioncode
set
stateflag = 'DELETED',
updatetime = now(),
updatedby = pupdatedby
where
trancode = ptrancode and hotelid = photelid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteTransactionCodeSubAccount` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spDeleteTransactionCodeSubAccount`(
pTransactionCode         varchar(20), 
pSubAccountCode          varchar(20), 
pUpdatedBy               varchar(50), 
pHotelId                 int(4)
)
BEGIN
update `transctioncode_subaccount` 
set 
statusFlag = 'DELETED',
updatedBy = pUpdatedBy, 
updatedDate = now()
where
transactionCode = pTransactionCode and 
subAccountCode = pSubAccountCode and
hotelId = pHotelId
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteTransactionSourceDocument` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spDeleteTransactionSourceDocument`(
in pTransactionSourceId int(10),
in pUpdatedBy varchar(50)
)
BEGIN
update transactionsourcedocuments	
set 
statusFlag = 'DELETED',
updatedDate = now(),
updatedBy = pUpdatedBy
where
transactionSourceId = pTransactionSourceId
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteTranType` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteTranType`(
in ptrantypeid varchar(20),
in pupdatedby varchar(20),
in photelid int(5)
)
BEGIN
update trantypes
set
stateflag = 'DELETED',
updatedby = pupdatedby,
updatetime = now()
where
trantypeid = ptrantypeid and
hotelid = photelid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteUser` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteUser`(
in pUserId varchar(30)
)
BEGIN
update users
set
Stateflag = 'DELETED'
where UserId = pUserId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteUserRole` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteUserRole`(
in pUserId varchar(20),
in pHotelId int(5)
)
BEGIN
delete from userRole
where
userid = pUserId and
hotelid = pHotelid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDeleteUserRoles` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDeleteUserRoles`(
in pUserId varchar(20),
in pHotelId int(5)
)
BEGIN
delete from userRoles
where
userid = pUserId and
hotelid = pHotelid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDepartureView` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDepartureView`(
in pdate date
)
BEGIN
select folioid from folioschedules
where
arrivaldate = pdate;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDisplayAllRoomRequirements` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spDisplayAllRoomRequirements`(pFolioID varchar(20))
BEGIN
select * from event_rooms where folioID=pFolioID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDisplayCharges` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDisplayCharges`(in photelid int(5))
BEGIN
select * from Transactioncode where trantypeid=1 and hotelid=photelid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDisplayCompanyAccounts` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDisplayCompanyAccounts`()
BEGIN
Select 
(companyid) as `ID#`,
COMPANYCODE as CODE,
(COMPANYNAME) AS `NAME OF COMPANY`,
COMPANYURL,CONTACTPERSON,DESIGNATION,
ACCOUNT_TYPE, THRESHOLD_VALUE, TOTAL_SALES_CONTRIBUTION,
concat(STREET1,', ',CITY1,', ',COUNTRY1,', ',ZIP1) AS COMPANYADDRESS, contactnumber1
from company
where stateflag <>'DELETED' order by companyname;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDisplayEvent` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spDisplayEvent`(pFolioID varchar(20))
BEGIN
set sql_big_selects=1;
select * from events where folioID=pFolioID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDisplayFoodRequirement` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spDisplayFoodRequirement`(pEventDate date, pFolioID varchar(30))
BEGIN
select * from event_meal_requirements where date(eventDate)=pEventDate and folioid=pFolioID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDisplayFoodRequirements` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spDisplayFoodRequirements`(pFolioID varchar(20))
BEGIN
select * from event_meal_requirements where folioID=pFolioID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDisplayListOfGuest` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDisplayListOfGuest`(in pHotelID int(5))
BEGIN
select *
from guests
where hotelid=pHotelID and stateflag='ACTIVE';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spDisplayReservationList` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spDisplayReservationList`()
BEGIN
Select schedule.Roomid,(roomtype.`name`) as RoomType,concat(account.firstname, ' ' , account.lastname) as `Name of Guest`,schedule.`From`,schedule.`To`,event.eventtype from room,schedule,folio,roomtype,account,event where schedule.Roomid=room.roomid and folio.folioid=schedule.folioid and folio.accountid=account.accountid and schedule.eventid=event.eventid and room.roomtypeid=roomtype.roomtypeid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spExact_DeleteCostCenter` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spExact_DeleteCostCenter`(
pCostCenterCode  varchar(20), 
pUpdatedBy       varchar(20)
)
BEGIN
update `exact_costcenter` 
set 
StatusFlag = 'DELETED', 
UpdatedDate = now(), 
UpdatedBy = pUpdatedBy
where 
CostCenterCode = pCostCenterCode;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spEXACT_DeleteGLaccounts` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spEXACT_DeleteGLaccounts`(
pAccountID       varchar(30),  
pUpdatedBy       varchar(30)
)
BEGIN
update `exact_glaccounts` 
set 
StatusFlag = 'DELETED',
UpdatedDate = now(), 
UpdatedBy = pUpdatedBy
where
AccountID = pAccountID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spEXACT_DeleteJournalEntryCode` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spEXACT_DeleteJournalEntryCode`(
pJournalEntryCode  varchar(30), 
pUpdatedBy         varchar(30)
)
BEGIN
update `exact_journalentrycodes` 
set 
StatusFlag = 'DELETED', 
UpdatedBy = pUpdatedBy, 
UpdatedDate = now()
where
JournalEntryCode = pJournalEntryCode;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spEXACT_GetAllCostCenters` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spEXACT_GetAllCostCenters`(
in pHotelID int(4)
)
BEGIN
select * from exact_costcenter
order by CostCenterCode;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spEXACT_GetAllGLaccounts` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spEXACT_GetAllGLaccounts`(
in pHotelID int(4)
)
BEGIN
select * from exact_glaccounts
order by AccountID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spEXACT_GetAllJournalEntryCodes` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spEXACT_GetAllJournalEntryCodes`(
in pHotelID int(4)
)
BEGIN
select * from exact_journalentrycodes
order by JournalEntryCode;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spEXACT_GetNewGuests` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spEXACT_GetNewGuests`(
pHotelID int(4),
pExportDate date
)
BEGIN
select * from guests
where
date(createtime) > pExportDate
order by createtime asc;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spEXACT_GetTransactionCodeMapping` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spEXACT_GetTransactionCodeMapping`(
in pHotelID int(4),
in pTransactionCode varchar(20)
)
BEGIN
select 
exact_gltofoliomapping.*, 
exact_glaccounts.description
from 
exact_gltofoliomapping
left join exact_glaccounts on 
exact_glaccounts.AccountID = exact_gltofoliomapping.Exact_GLAccountID 
where FolioPlus_TranCode = pTransactionCode
order by lineno;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spExact_InsertCostCenter` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spExact_InsertCostCenter`(
pCostCenterCode  varchar(20), 
pDescription     varchar(50), 
pCreatedBy       varchar(20)
)
BEGIN
insert into `exact_costcenter` 
(CostCenterCode, Description, StatusFlag, 
CreatedDate, CreatedBy, UpdatedDate, 
UpdatedBy)
values
(pCostCenterCode, pDescription, 'ACTIVE', 
now(), pCreatedBy, now(), 
pCreatedBy);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spEXACT_InsertGLaccounts` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spEXACT_InsertGLaccounts`(
pAccountID       varchar(30), 
pDescription     varchar(50), 
pCostCenterCode  varchar(30), 
pAccountNature   varchar(10), 
pCreatedBy       varchar(30)
)
BEGIN
insert into `exact_glaccounts` 
(AccountID, Description, CostCenterCode, 
AccountNature, StatusFlag, CreatedDate, 
CreatedBy, UpdatedDate, UpdatedBy
)
values
(pAccountID, pDescription, pCostCenterCode, 
pAccountNature, 'ACTIVE', now(), 
pCreatedBy, now(), pCreatedBy
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spEXACT_InsertJournalEntryCode` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spEXACT_InsertJournalEntryCode`(
pJournalEntryCode  varchar(30), 
pDescription       varchar(50), 
pCreatedBy         varchar(30)
)
BEGIN
insert into `exact_journalentrycodes` 
(JournalEntryCode, Description, StatusFlag, 
CreatedBy, CreatedDate, UpdatedBy, 
UpdatedDate)
values
(pJournalEntryCode, pDescription, 'ACTIVE', 
pCreatedBy, now(), pCreatedBy, 
now());
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spEXACT_InsertTransactionCodeMapping` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spEXACT_InsertTransactionCodeMapping`(
pFolioPlus_TranCode        varchar(30), 
pExact_GLAccountID         varchar(30), 
pLineNo                    int(2), 
pAmountColumnInFolioTrans  varchar(50), 
pCostCenterCode            varchar(30), 
pJournalEntryCode          varchar(30), 
pCreatedBy                 varchar(30)
)
BEGIN
insert into `exact_gltofoliomapping` 
(FolioPlus_TranCode, Exact_GLAccountID, 
LineNo, AmountColumnInFolioTrans, CostCenterCode, 
JournalEntryCode, StatuFlag, CreatedBy, 
CreatedDate, UpdatedBy, UpdatedDate)
values
(pFolioPlus_TranCode, pExact_GLAccountID, 
pLineNo, pAmountColumnInFolioTrans, pCostCenterCode, 
pJournalEntryCode, 'ACTIVE', pCreatedBy, 
now(), pCreatedBy, now());
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spEXACT_ReportPostedAndUnpostedDailyHotelRevenue` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spEXACT_ReportPostedAndUnpostedDailyHotelRevenue`(
in pHotelId int(4),
in pStartDate date,
in pEndDate date
)
BEGIN
(
select
foliotransactions.postingDate,
foliotransactions.transactionDate,
foliotransactions.`ReferenceNo`,
foliotransactions.`TransactionSource`,
foliotransactions.`FolioID`,
guests.accountid,
concat(guests.`lastname`,", " , guests.`firstname`) as GuestName,
foliotransactions.transactioncode,
if(foliotransactions.AcctSide='DEBIT',foliotransactions.`baseAmount`,
(foliotransactions.`baseAmount` * -1) ) as baseAmount,
if(foliotransactions.AcctSide='DEBIT',foliotransactions.`netBaseAmount`,
(foliotransactions.`netBaseAmount` * -1) ) as netBaseAmount,
if(foliotransactions.AcctSide='DEBIT',foliotransactions.`grossAmount`,
(foliotransactions.`grossAmount` * -1) ) as grossAmount,
if(foliotransactions.AcctSide='DEBIT',foliotransactions.`discount`,
(foliotransactions.`discount` * -1) ) as discount,
if(foliotransactions.AcctSide='DEBIT',foliotransactions.`serviceCharge`,
(foliotransactions.`serviceCharge` * -1) ) as serviceCharge,
if(foliotransactions.AcctSide='DEBIT',foliotransactions.`governmentTax`,
(foliotransactions.`governmentTax` * -1) ) as governmentTax,
if(foliotransactions.AcctSide='DEBIT',foliotransactions.`localTax`,
(foliotransactions.`localTax` * -1) ) as localTax,
if(foliotransactions.AcctSide='DEBIT',foliotransactions.`mealAmount`,
(foliotransactions.`mealAmount` * -1) ) as mealAmount,
foliotransactions.`Memo`,
foliotransactions.subFolio,
if(foliotransactions.AcctSide='DEBIT',foliotransactions.`netAmount`,
(foliotransactions.`netAmount` * -1) ) as netAmount,
if(foliotransactions.AcctSide='DEBIT',foliotransactions.`netBaseAmount`,
(foliotransactions.`netBaseAmount` * -1) ) as Amount,
foliotransactions.`CREATEDBY`,
if(substring(foliotransactions.`Memo`,-3,3) > 0,substring(foliotransactions.`Memo`,-3,3),folioschedules.roomid) as roomid,
folioschedules.roomtype,
company.companyName,
'' as REMARKS
from
foliotransactions
left join transactioncode on transactioncode.tranCode = foliotransactions.transactioncode
left join folioschedules on folioschedules.folioid = foliotransactions.folioid
left join folio on folioschedules.folioid = folio.folioid
left join company on folio.companyid = company.companyid
left join guests on guests.accountid = folio.accountid
where
date(foliotransactions.`TransactionDate`) >= pStartDate and 
date(foliotransactions.`TransactionDate`) <= pEndDate and
foliotransactions.status = 'ACTIVE' and
transactioncode.tranTypeID = 1 group by folioid, referenceno, transactionsource
)
UNION
(
select
nonguesttransaction.postingDate,
nonguesttransaction.transactionDate,
nonguesttransaction.referenceNo,
nonguesttransaction.transactionSource,
nonguesttransaction.referenceFolioId as FolioId,
nonguesttransaction.accountId,
if(nonguesttransaction.guestName="","WALK-IN GUEST",nonguesttransaction.guestName) as GuestName,
nonguesttransaction.transactionCode,
if(nonguesttransaction.AcctSide='DEBIT',nonguesttransaction.baseAmount,
(nonguesttransaction.baseAmount * -1) ) as baseAmount,
if(nonguesttransaction.AcctSide='DEBIT',nonguesttransaction.netBaseAmount,
(nonguesttransaction.netBaseAmount * -1) ) as netBaseAmount,
if(nonguesttransaction.AcctSide='DEBIT',nonguesttransaction.grossAmount,
(nonguesttransaction.grossAmount * -1) ) as grossAmount,
if(nonguesttransaction.AcctSide='DEBIT',nonguesttransaction.discount,
(nonguesttransaction.discount * -1) ) as discount,
if(nonguesttransaction.AcctSide='DEBIT',nonguesttransaction.serviceCharge,
(nonguesttransaction.serviceCharge * -1) ) as serviceCharge,
if(nonguesttransaction.AcctSide='DEBIT',nonguesttransaction.governmentTax,
(nonguesttransaction.governmentTax * -1) ) as governmentTax,
if(nonguesttransaction.AcctSide='DEBIT',nonguesttransaction.localTax,
(nonguesttransaction.localTax * -1) ) as localTax,
0 as mealAmount,
nonguesttransaction.memo,
"A " as subFolio,
if(nonguesttransaction.AcctSide='DEBIT',nonguesttransaction.netAmount,
(nonguesttransaction.netAmount * -1) ) as netAmount,
if(nonguesttransaction.AcctSide='DEBIT',nonguesttransaction.netbaseAmount,
(nonguesttransaction.netbaseAmount * -1) ) as Amount,
nonguesttransaction.CREATEDBY,
nonguesttransaction.roomNumber as roomid,
'' as roomtype,
nonguesttransaction.companyName,
'' as REMARKS
from nonguesttransaction force index(primary)
left join transactioncode on transactioncode.tranCode = nonguesttransaction.transactioncode
where
date(nonguesttransaction.transactionDate) >= pStartDate and 
date(nonguesttransaction.`TransactionDate`) <= pEndDate and
nonguesttransaction.statusFlag = 'ACTIVE' and
nonguesttransaction.hotelID = pHotelId and
transactioncode.tranTypeID = 1 group by folioid, referenceno, transactionsource
)
UNION
(
select
h.order_date,
h.order_date,
h.order_id,
'POSCHECK#' as TransactionSource,
h.customer_id,
concat(if(substring(h.customer_id,1,1) = 'F', 
pos.fGetHotelFolioAccountID(h.customer_id),h.customer_id),
if(h.employee_id = "","",
concat("E-",h.employee_id))) as customerID,
pos.fGetCustomerNamePerOrder(h.Customer_ID,
h.EMPLOYEE_ID) as GuestName,
(case g.maingroup_id
when 'FOOD' then
'1200'
when 'BEVERAGES' then
'1202'
else
'1402'
end) as TransCode,
sum(d.Unit_Price * d.Quantity) as baseAmount,
sum(d.Amount) as VatSale,
sum(d.Unit_Price * d.Quantity) as grossAmount,
sum(d.discount) as discount,
sum(d.service_charge) as ServiceCharge,
sum(d.VAT) as governmentTax,
sum(d.LOCAL_TAX) as localTax,
0 as mealAmount,
concat('RESTAURANT - DINE-IN - ',g.maingroup_id) as `Memo`,
'DINE-IN' as subFolio,
(sum(d.Unit_Price * d.Quantity)-sum(d.discount)) as netAmount,
sum(d.Amount) as Amount,
d.createdBy,
'' as roomid,
'' as roomtype,
'' as companyName,
'' as Remarks
from 
pos.`order detail` d
left join 
pos.`order header` h on d.Order_Id = h.Order_Id
left join pos.item i on i.Item_ID = d.Item_Id
left join pos.`group` g on g.group_id = i.group_id
left join pos.payment p on h.order_id = p.order_id
where
g.maingroup_id is not null
and date(p.payment_date) >= pStartDate 
and date(p.payment_date) <= pEndDate 
and p.`status` != 'VOID' 
and p.payment_type IN ('CASH','Credit','ACCOUNT_EMPLOYEE')
and d.operation_status!='CANCELLED'
group by
g.maingroup_id,
h.order_id
)
order by transactionCode, transactionSource, ReferenceNo;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spEXACT_ReportUnpostedDailyHotelRevenue` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spEXACT_ReportUnpostedDailyHotelRevenue`(
in pHotelId int(4),
in pStartDate date,
in pEndDate date
)
BEGIN
(
select
foliotransactions.postingDate,
foliotransactions.transactionDate,
foliotransactions.`ReferenceNo`,
foliotransactions.`TransactionSource`,
foliotransactions.`FolioID`,
guests.accountid,
concat(guests.`lastname`,", " , guests.`firstname`) as GuestName,
foliotransactions.transactioncode,
if(foliotransactions.AcctSide='DEBIT',foliotransactions.`baseAmount`,
(foliotransactions.`baseAmount` * -1) ) as baseAmount,
if(foliotransactions.AcctSide='DEBIT',foliotransactions.`netBaseAmount`,
(foliotransactions.`netBaseAmount` * -1) ) as netBaseAmount,
if(foliotransactions.AcctSide='DEBIT',foliotransactions.`grossAmount`,
(foliotransactions.`grossAmount` * -1) ) as grossAmount,
if(foliotransactions.AcctSide='DEBIT',foliotransactions.`discount`,
(foliotransactions.`discount` * -1) ) as discount,
if(foliotransactions.AcctSide='DEBIT',foliotransactions.`serviceCharge`,
(foliotransactions.`serviceCharge` * -1) ) as serviceCharge,
if(foliotransactions.AcctSide='DEBIT',foliotransactions.`governmentTax`,
(foliotransactions.`governmentTax` * -1) ) as governmentTax,
if(foliotransactions.AcctSide='DEBIT',foliotransactions.`localTax`,
(foliotransactions.`localTax` * -1) ) as localTax,
if(foliotransactions.AcctSide='DEBIT',foliotransactions.`mealAmount`,
(foliotransactions.`mealAmount` * -1) ) as mealAmount,
foliotransactions.`Memo`,
foliotransactions.subFolio,
if(foliotransactions.AcctSide='DEBIT',foliotransactions.`netAmount`,
(foliotransactions.`netAmount` * -1) ) as netAmount,
if(foliotransactions.AcctSide='DEBIT',foliotransactions.`netBaseAmount`,
(foliotransactions.`netBaseAmount` * -1) ) as Amount,
foliotransactions.`CREATEDBY`,
if(substring(foliotransactions.`Memo`,-3,3) > 0,substring(foliotransactions.`Memo`,-3,3),folioschedules.roomid) as roomid,
folioschedules.roomtype,
company.companyName,
'' as REMARKS
from
foliotransactions
left join transactioncode on transactioncode.tranCode = foliotransactions.transactioncode
left join folioschedules on folioschedules.folioid = foliotransactions.folioid
left join folio on folioschedules.folioid = folio.folioid
left join company on folio.companyid = company.companyid
left join guests on guests.accountid = folio.accountid
where
date(foliotransactions.`TransactionDate`) >= pStartDate and 
date(foliotransactions.`TransactionDate`) <= pEndDate and
foliotransactions.status = 'ACTIVE' and
transactioncode.tranTypeID = 1 and
foliotransactions.postToLedger = 0 group by folioid, referenceno, transactionsource
)
UNION
(
select
nonguesttransaction.postingDate,
nonguesttransaction.transactionDate,
nonguesttransaction.referenceNo,
nonguesttransaction.transactionSource,
nonguesttransaction.referenceFolioId as FolioId,
nonguesttransaction.accountId,
if(nonguesttransaction.guestName="","WALK-IN GUEST",nonguesttransaction.guestName) as GuestName,
nonguesttransaction.transactionCode,
if(nonguesttransaction.AcctSide='DEBIT',nonguesttransaction.baseAmount,
(nonguesttransaction.baseAmount * -1) ) as baseAmount,
if(nonguesttransaction.AcctSide='DEBIT',nonguesttransaction.netBaseAmount,
(nonguesttransaction.netBaseAmount * -1) ) as netBaseAmount,
if(nonguesttransaction.AcctSide='DEBIT',nonguesttransaction.grossAmount,
(nonguesttransaction.grossAmount * -1) ) as grossAmount,
if(nonguesttransaction.AcctSide='DEBIT',nonguesttransaction.discount,
(nonguesttransaction.discount * -1) ) as discount,
if(nonguesttransaction.AcctSide='DEBIT',nonguesttransaction.serviceCharge,
(nonguesttransaction.serviceCharge * -1) ) as serviceCharge,
if(nonguesttransaction.AcctSide='DEBIT',nonguesttransaction.governmentTax,
(nonguesttransaction.governmentTax * -1) ) as governmentTax,
if(nonguesttransaction.AcctSide='DEBIT',nonguesttransaction.localTax,
(nonguesttransaction.localTax * -1) ) as localTax,
0 as mealAmount,
nonguesttransaction.memo,
"A " as subFolio,
if(nonguesttransaction.AcctSide='DEBIT',nonguesttransaction.netAmount,
(nonguesttransaction.netAmount * -1) ) as netAmount,
if(nonguesttransaction.AcctSide='DEBIT',nonguesttransaction.netbaseAmount,
(nonguesttransaction.netbaseAmount * -1) ) as Amount,
nonguesttransaction.CREATEDBY,
nonguesttransaction.roomNumber as roomid,
'' as roomtype,
nonguesttransaction.companyName,
'' as REMARKS
from nonguesttransaction force index(primary)
left join transactioncode on transactioncode.tranCode = nonguesttransaction.transactioncode
where
date(nonguesttransaction.transactionDate) >= pStartDate and 
date(nonguesttransaction.`TransactionDate`) <= pEndDate and
nonguesttransaction.statusFlag = 'ACTIVE' and
nonguesttransaction.hotelID = pHotelId and
transactioncode.tranTypeID = 1 and
nonguesttransaction.postedToLedger = 0 group by folioid, referenceno, transactionsource
)
UNION
(
select
pos.payment.payment_date,
pos.payment.payment_date,
pos.payment.order_id,
'POSCHECK#' as TransactionSource,
pos.`order header`.customer_id,
concat(if(substring(pos.`order header`.customer_id,1,1) = 'F', 
pos.fGetHotelFolioAccountID(pos.`order header`.customer_id),pos.`order header`.customer_id),
pos.`order header`.employee_id) as customerID,
pos.fGetCustomerNamePerOrder(pos.`order header`.Customer_ID,
pos.`order header`.EMPLOYEE_ID) as GuestName,
'1201' as transactioncode,
pos.`order header`.total_amount as baseAmount,
pos.`order header`.vat_sales as netBaseAmount,
pos.`order header`.total_amount as grossAmount,
0 as discount,
pos.`order header`.service_charge as serviceCharge,
pos.`order header`.vat_amount as governmentTax,
pos.`order header`.local_Tax as localTax,
0 as mealAmount,
'RESTAURANT - DINE-IN' as `Memo`,
'DINE-IN' as subFolio,
pos.`order header`.total_amount as netAmount,
pos.`order header`.vat_sales as Amount,
pos.`order header`.`CREATEDBY`,
'' as roomid,
'' as roomtype,
'' as companyName,
pos.payment.payment_type as REMARKS
from
pos.`payment`
left join pos.`order header` on pos.payment.order_id = pos.`order header`.order_id
where
date(pos.payment.payment_date) >= pStartDate and 
date(pos.payment.payment_date) <= pEndDate and
pos.payment.`status` != 'VOID' and
(pos.payment.payment_type = 'CASH'
or pos.payment.payment_type = 'Credit'
or pos.payment.payment_type = 'ACCOUNT_EMPLOYEE')
and pos.payment.PostedToLedger = 0
)
order by transactionCode, transactionSource, ReferenceNo;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spEXACT_SetDailyHotelRevenueAsPosted` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spEXACT_SetDailyHotelRevenueAsPosted`(
in pHotelId int(4),
in pStartDate date,
in pEndDate date
)
BEGIN
update
foliotransactions
left join transactioncode on transactioncode.tranCode = foliotransactions.transactioncode
set 
postToLedger = 1
where
date(foliotransactions.`TransactionDate`) >= pStartDate and 
date(foliotransactions.`TransactionDate`) <= pEndDate and
foliotransactions.status = 'ACTIVE' and
transactioncode.tranTypeID = 1 and
foliotransactions.postToLedger = 0;
update
nonguesttransaction
left join transactioncode on transactioncode.tranCode = nonguesttransaction.transactioncode
set
nonguesttransaction.postedToLedger = 1
where
date(nonguesttransaction.transactionDate) >= pStartDate and 
date(nonguesttransaction.`TransactionDate`) <= pEndDate and
nonguesttransaction.statusFlag = 'ACTIVE' and
nonguesttransaction.hotelID = pHotelId and
transactioncode.tranTypeID = 1 and
nonguesttransaction.postedToLedger = 0;
update
pos.payment
set
pos.payment.PostedToLedger = 1
where
date(pos.payment.payment_date) >= pStartDate and 
date(pos.payment.payment_date) <= pEndDate and
pos.payment.`status` != 'VOID' and
(pos.payment.payment_type = 'CASH'
or pos.payment.payment_type = 'Credit'
or pos.payment.payment_type = 'ACCOUNT_EMPLOYEE')
and pos.payment.PostedToLedger = 0;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spExact_UpdateCostCenter` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spExact_UpdateCostCenter`(
pCostCenterCode  varchar(20), 
pDescription     varchar(50), 
pStatusFlag      varchar(20),
pUpdatedBy       varchar(20)
)
BEGIN
update `exact_costcenter` 
set 
Description = pDescription, 
StatusFlag = pStatusFlag, 
UpdatedDate = now(), 
UpdatedBy = pUpdatedBy
where 
CostCenterCode = pCostCenterCode;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spEXACT_UpdateGLaccounts` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spEXACT_UpdateGLaccounts`(
pAccountID       varchar(30), 
pDescription     varchar(50), 
pCostCenterCode  varchar(30), 
pAccountNature   varchar(10), 
pStatusFlag      varchar(10), 
pUpdatedBy       varchar(30)
)
BEGIN
update `exact_glaccounts` 
set 
Description = pDescription, 
CostCenterCode = pCostCenterCode, 
AccountNature = pAccountNature, 
StatusFlag = pStatusFlag,
UpdatedDate = now(), 
UpdatedBy = pUpdatedBy
where
AccountID = pAccountID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spEXACT_UpdateJournalEntryCode` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spEXACT_UpdateJournalEntryCode`(
pJournalEntryCode  varchar(30), 
pDescription       varchar(50), 
pStatusFlag        varchar(10),
pUpdatedBy         varchar(30)
)
BEGIN
update `exact_journalentrycodes` 
set 
Description = pDescription, 
StatusFlag = pStatusFlag, 
UpdatedBy = pUpdatedBy, 
UpdatedDate = now()
where
JournalEntryCode = pJournalEntryCode;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spFilterGuest` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spFilterGuest`(
in pFirstname varchar(50),
in pLastname varchar(50),
in pMiddleName varchar(50)
)
BEGIN
select * from guests
where
firstname like concat(pfirstname,'%') and
lastname like concat(plastname,'%') and
middlename like concat(pMiddlename,'%')
and stateflag <> 'DELETED';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spFilterGuestRecord` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spFilterGuestRecord`(
in pAccountName varchar(30),
in pFirstname varchar(50),
in pLastName varchar(50),
in pMiddleName varchar(50),
in pCitizenship varchar(100),
in pSex varchar(6)
)
BEGIN
Select AccountId,AccountName,FirstName,MiddleName,LastName,Sex,CitizenShip from guests where  firstname=pFirstName and lastname=pLastName and middlename=pMiddlename and citizenship=pCitizenship and sex=pSex;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spFilterQuery` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spFilterQuery`(
in pFields varchar(100),
in pTable varchar(25),
in pRefField varchar(25),
in pRefData varchar(50)
)
BEGIN
select pFields from pTable where pRefField like pRefData;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spFilterReservation` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spFilterReservation`(IN pStatus VARCHAR(15))
BEGIN
Select (Folio.FolioID) as `ID`,folio.FolioType,guest.Firstname,guest.Lastname,folio.AccountType,Folio.Status 
from folio,guest
where folio.accountid=guest.accountid and folio.status=pStatus;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetAccountID` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetAccountID`(
IN pAccountID int
)
BEGIN
Select accountid from guests where accountid=pAccountID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetAccountIDFromFolio` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetAccountIDFromFolio`(pFolioID varchar(12))
BEGIN
Select Accountid from folio where folioid = pFolioID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetAccountIDofAgent` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetAccountIDofAgent`(pfolioid int(10))
BEGIN
select agents.agentID as accountid from agents,folio
where agents.agentID = folio.agentcode and folio.folioid=pfolioid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetAccountPrivileges` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetAccountPrivileges`(
in pAccountId varchar(20),
in pHotelId int(5)
)
BEGIN
select 
AccountPrivileges.*,
privilegeheader.description,
privilegeheader.daysapplied
from
accountPrivileges
left join privilegeheader on accountprivileges.privilegeId = privilegeheader.privilegeId
where
accountPrivileges.AccountID = pAccountId and
accountPrivileges.hotelId = pHotelId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetAgentByFolio` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetAgentByFolio`(pfolioid varchar(12))
BEGIN
select agentcode from folio where folioid = pfolioid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetAgentCommissions` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetAgentCommissions`(
pAccountID varchar(11)
)
BEGIN
select * from AgentCommission where Accountid = pAccountID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetAgentInfo` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetAgentInfo`(
in paccountid int(4)
)
BEGIN
select *, agency as agentname from agents where agentid = paccountid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetAgents` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetAgents`()
BEGIN
select agentid as ID,agency as `Name of Agent`,Address,ContactNumber, agency as agentname from agents order by agency;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetAllFolioIdsByRoom` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetAllFolioIdsByRoom`(
in pRoomId varchar(20)
)
BEGIN
select 
folio.folioid,
folioschedules.roomid
from
folio left join folioschedules on folioschedules.folioid = folio.folioId
where folio.status = 'CHECKED IN'
and folioschedules.roomid = pRoomId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetAnnualAverageRoomRate` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetAnnualAverageRoomRate`(
in pHotelId int(2),
in pYear int(4)
)
BEGIN
select  sum(rate) as TOTALRATE, 
count(distinct folioschedules.folioid) as TOTALFOLIO,
sum(rate)/count(distinct folioschedules.folioid) as AverageRoomRate
from folioschedules
left join folio on folio.folioid = folioschedules.folioid
where
(folio.status = "CHECKED IN" or
folio.status = "CHECKED OUT" or
folio.status = "CONFIRMED" or
folio.status = "TENTATIVE") and
( year(folioschedules.fromDate) = pYear ) or
( year(folioschedules.toDate) = pYear );
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetAnnualAverageRoomRatePerGuest` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetAnnualAverageRoomRatePerGuest`(
in pHotelId int(1),
in pYear int(4)
)
BEGIN
select  sum(rate) as TOTALRATE, 
sum(folio.noofadults) as TOTALFOLIO,
sum(rate)/sum(folio.noofadults) as AverageRoomRate
from folioschedules
left join folio on folio.folioid = folioschedules.folioid
where
(folio.status = "CHECKED IN" or
folio.status = "CHECKED OUT" or
folio.status = "CONFIRMED" or
folio.status = "TENTATIVE") and
(
( year(folioschedules.fromdate) = pYear ) or
( year(folioschedules.todate) = pYear )
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetAnnualCancelledNoShowReservations` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetAnnualCancelledNoShowReservations`(
in pHotelId int(4),
in pYear int(4)
)
BEGIN
select 
folio.status,
count(if(folio.foliotype != "SHARE",folioschedules.roomid,null)) as Rooms
from 
folio,
folioschedules 
where 
folio.hotelid = pHotelId and
folio.folioid = folioschedules.folioid and
(folio.status = 'CANCELLED' or
folio.status = 'NO SHOW') and 
year(folioschedules.fromdate) = pYear 
group by folio.status,year(folioschedules.fromdate);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetAnnualGuestAR` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetAnnualGuestAR`(
in pHotelId int(4),
in pLastYearDate datetime
)
BEGIN
select
foliotransactions.postingdate,
sum(if(foliotransactions.acctside='DEBIT',baseamount,0)) - sum(if(acctside='CREDIT',baseamount,0)) as BALANCE
from
foliotransactions 
left join folio on folio.folioid = foliotransactions.folioid
where
foliotransactions.`status` = 'ACTIVE' and
foliotransactions.postingdate <= pLastYearDate  and
foliotransactions.hotelid = pHotelId
group by
date(pLastYearDate);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetAnnualHotelRevenue` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetAnnualHotelRevenue`(pStartYear int, pEndYear int)
BEGIN
select
year(transactiondate) as transactionDate,
sum(header1) as header1,
sum(header2) as header2,
sum(header3) as header3,
sum(header4) as header4,
sum(header5)as header5,
sum(header6)as header6,
sum(header7)as header7,
sum(header8)as header8,
sum(header9)as header9,
sum(header10)as header10,
sum(header11)as header11,
sum(header12)as header12,
sum(header13)as header13,
sum(header14)as header14,
sum(header15)as header15,
sum(header16)as header16,
sum(header17)as header17,
sum(header18)as header18,
sum(header19)as header19,
sum(header20)as header20,
sum(header21)as header21,
sum(header22)as header22,
sum(header23)as header23,
sum(header24)as header24,
sum(header25)as header25,
sum(header26)as header26,
sum(header27)as header27,
sum(header28)as header28,
sum(header29)as header29,
sum(header30)as header30,
sum(header31)as header31,
sum(header32)as header32,
sum(header33)as header33,
sum(header34)as header34,
sum(header35)as header35,
sum(header36)as header36,
sum(header37)as header37,
sum(header38)as header38,
sum(header39)as header39,
sum(header40)as header40,
sum(header41)as header41,
sum(header42)as header42,
sum(header43)as header43,
sum(header44)as header44,
sum(header45)as header45,
sum(header46)as header46,
sum(header47)as header47,
sum(header48)as header48,
sum(header49)as header49,
sum(header50)as header50,
sum(header51)as header51,
sum(header52)as header52,
sum(header53)as header53,
sum(header54)as header54,
sum(header55)as header55,
sum(header56)as header56,
sum(header57)as header57,
sum(header58)as header58,
sum(header59)as header59,
sum(header60)as header60,
sum(header61)as header61,
sum(header62)as header62,
sum(header63)as header63,
sum(header64)as header64,
sum(header65)as header65,
sum(header66)as header66,
sum(header67)as header67,
sum(header68)as header68,
sum(header69)as header69,
sum(header70)as header70,
sum(header71)as header71,
sum(header72)as header72,
sum(header73)as header73,
sum(header74)as header74,
sum(header75)as header75,
sum(header76)as header76,
sum(header77)as header77,
sum(header78)as header78,
sum(header79)as header79,
sum(header80)as header80,
sum(header81)as header81,
sum(header82)as header82,
sum(header83)as header83,
sum(header84)as header84,
sum(header85)as header85,
sum(header86)as header86,
sum(header87)as header87,
sum(header88)as header88,
sum(header89)as header89,
sum(header90)as header90,
sum(header91)as header91,
sum(header92)as header92,
sum(header93)as header93,
sum(header94)as header94,
sum(header95)as header95,
sum(header96)as header96,
sum(header97)as header97,
sum(header98)as header98,
sum(header99)as header99,
sum(header100)as header100,
sum(header101)as header101,
sum(header102)as header102,
sum(header103)as header103,
sum(header104)as header104,
sum(header105)as header105,
sum(header106)as header106,
sum(header107)as header107,
sum(header108)as header108,
sum(header109)as header109,
sum(header110)as header110,
sum(header111)as header111,
sum(header112)as header112,
sum(header113)as header113,
sum(header114)as header114,
sum(header115)as header115,
sum(header116)as header116,
sum(header117)as header117,
sum(header118)as header118,
sum(header119)as header119,
sum(header120)as header120
from
(select * from hotelrevenue) as hotelrevenue where year(transactiondate) between pStartYear and pEndYear group by year(transactiondate) order by transactiondate;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetAnnualReservationsByAccountType` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetAnnualReservationsByAccountType`(
in pHotelId int(4),
in pYear int(4)
)
BEGIN
select 
folio.accounttype,
count(if(folio.foliotype != "SHARE",folioschedules.roomid,null)) as Rooms
from 
folio,
folioschedules 
where 
folio.hotelid = pHotelId and
folio.folioid = folioschedules.folioid and
year(folioschedules.fromdate) = pYear 
group by folio.accounttype,year(folioschedules.fromdate);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetAnnualReservationSummaryBySource` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetAnnualReservationSummaryBySource`(
in pHotelId int(4),
in pYear int(4)
)
BEGIN
select 
if(folio.`source`= "WALK IN","WALK IN","RESERVE") as SOURCE,
count(*) as Total
from 
folio 
where (`status` = 'CHECKED IN' or `status` = 'CHECKED OUT' or 
`status` = 'CONFIRMED') and
year(folio.fromDate) = pYear
and hotelId = pHotelId
group by folio.`source`
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetAnnualTotalFunctions` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetAnnualTotalFunctions`(
in pHotelId int(4),
in pYear int(4)
)
BEGIN
select *
from folio 
where
(folio.status = 'CHECKED IN' or folio.status = 'CHECKED OUT') and
foliotype = 'GROUP' and 
(year(fromdate) = pYear or year(todate) = pYear)
and
hotelid = pHotelId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetAnnualTotalRoomStayOver` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetAnnualTotalRoomStayOver`(
in pHotelId int(4),
in pYear int(4)
)
BEGIN
select count(*) from folio 
where
(
(year(fromDate) = pYear) or
(year(toDate) = pYear)
) and
(folio.status = 'CHECKED IN' or folio.status = 'CHECKED OUT') and
foliotype = 'INDIVIDUAL' and
folio.hotelId = pHotelId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetAnnualWalkinCorporateFolio` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetAnnualWalkinCorporateFolio`(
in pHotelId int(5),
in pYear int(4)
)
BEGIN
select 
count(*) as Total,
accounttype
from folio 
left join guests on guests.accountid = folio.accountid
where 
(`status` = 'CHECKED IN' or
`status` = 'CHECKED OUT' or
`status` = 'CONFIRMED' or
`status` = 'TENTATIVE') and
folio.accounttype = 'CORPORATE' and
year(folio.fromdate) = pYear and
folio.source = 'WALK IN' and
folio.hotelid = pHotelId
group by folio.accounttype;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetAnnualWalkinPersonalFolio` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetAnnualWalkinPersonalFolio`(
in pHotelId int(5),
in pYear int(4)
)
BEGIN
select 
count(*) as Total,
if(date(guests.createtime) = date(folio.createtime),"NEW","OLD") as guestType
from folio 
left join guests on guests.accountid = folio.accountid
where 
(`status` = 'CHECKED IN' or
`status` = 'CHECKED OUT' or
`status` = 'CONFIRMED' or
`status` = 'TENTATIVE') and
folio.accounttype = "PERSONAL" and
year(folio.fromdate) = pYear and
folio.source = 'WALK IN' and
folio.hotelId = pHotelId
group by guestType;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetApplicablePackages` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetApplicablePackages`(
in pAuditDate date,
in pHotelID int(5)
)
BEGIN
select 
* 
from 
packageHeader 
where 
fromdate <= pAuditDate and todate >= pAuditDate
and hotelid = photelId and stateFlag='ACTIVE';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetApplicablePromos` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetApplicablePromos`(
in pStartDate date,
in pEndDate date,
in pHotelID int(5)
)
BEGIN
select 
* 
from 
packageHeader 
where 
(pStartDate >= fromDate and pStartDate < toDate) or (pEndDate > fromDate and pEndDate < toDate) or
(fromDate between pStartDate and pEndDate) or (toDate between pStartDate and pEndDate)
and hotelid = photelId and stateFlag='ACTIVE';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetAppliedRatesForEvents` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetAppliedRatesForEvents`(pFolioID varchar(20))
BEGIN
select * from event_applied_rates where folioID=pFolioID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetAttributesForEventTypes` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetAttributesForEventTypes`(pEventType varchar(40))
BEGIN
select * from event_attributes where eventID=pEventType;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetAuditDate` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetAuditDate`()
BEGIN
Select * from AuditDateTable order by AuditDate DESC limit 0,1;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetAvailableRoomNoByDate` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetAvailableRoomNoByDate`(
pRoomId varchar(10),
pRoomType varchar(80),
pDate date,
pHotelID int(10)
)
BEGIN
select 
distinct
folioschedules.roomid,
folio.folioid,
folioschedules.fromdate,
folioschedules.todate
from 
folio,
folioschedules 
where 
folio.folioid = folioschedules.folioid  and 
not ( folio.status = 'CHECKED OUT' OR folio.status ='CANCELLED' OR folio.status ='NO SHOW') and
date(folioschedules.todate) < pDate and
folioschedules.roomid=pRoomId and
folioschedules.hotelid = folio.hotelid and
folioschedules.roomtype = pRoomType and
folio.hotelid = pHotelID and
not exists(
select folioid
from folioschedules 
where date(todate) < pDate and
folio.folioid = folioschedules.folioid
)
; 
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetBanquetContractRooms` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetBanquetContractRooms`(pFolioID varchar(30))
BEGIN
select `folio`.`masterFolio` AS `folioid`,
`folioschedules`.`FROMDATE` AS `fromDate`,
`folioschedules`.`TODATE` AS `toDate`,
if((`folioschedules`.`RATETYPE` <> _latin1'APPLIED'),`folioschedules`.`RoomType`,`appliedrates`.`description`) AS `roomtype`,
concat(count(distinct `folioschedules`.`FolioId`),_latin1' rm(s).') AS `qty`,
if((`folioschedules`.`RATETYPE` = _latin1'APPLIED'),concat(_latin1'P ',(cast(`folioschedules`.`RATE`/folio.noOfAdults as decimal(12, 2)) + `hotel_test`.`fGetMealrates`(`folio`.`masterFolio`)),_latin1'/pax/day'),concat(_latin1'P ',`folioschedules`.`RATE`,_latin1'/rm./day')) AS `rate`,
_latin1'ROOM REQUIREMENTS' AS `header` 
from ((`folio` join `folioschedules`) join `appliedrates`) where ((`folio`.`folioID` = `folioschedules`.`FolioId`) and (`folio`.`noOfAdults` = `appliedrates`.`noOfOccupants`) and (`folio`.`folioType` = _latin1'DEPENDENT')) and folio.masterfolio=pFolioID group by fromdate, `folioschedules`.`RATE` 
union all
select roomblock.folioid,
cast(blockingdetails.blockfrom as datetime) as fromDate,
cast(blockingdetails.blockto as datetime) as toDate,
(select description from appliedrates where noOfOccupants=(select noOfPax/noOfRooms from event_rooms where folioid=roomblock.folioid and roomtype=(select roomtypecode from rooms where roomid=blockingdetails.roomid)) and rateType='ROOM RATES') as roomtype,
concat(count(roomid), ' rm(s).') as qty,
concat('P ', fGetMealRates(roomblock.folioid)+fGetRoomRates(roomblock.folioid,fGetNumberOfPax(roomblock.folioid,(select roomtypecode from rooms where roomid=blockingdetails.roomid))),'/pax/day') as rate,
'ROOM REQUIREMENTS' AS `header` from roomblock, blockingdetails where roomblock.blockid=blockingdetails.blockid and roomblock.folioid!='' and roomblock.folioid=pfolioid group by fromdate, roomtype, folioid order by folioid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetBlockedRoomInDate` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetBlockedRoomInDate`(
in pDate varchar(20)
)
BEGIN
select roomid from blockingdetails
where date(blockfrom) > pDate and date(blockto) < pDate;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetBreakDownOfChargePayment` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetBreakDownOfChargePayment`(pfolioid varchar(20))
BEGIN
select foliotransactions.transactioncode as AccountID,foliotransactions.folioid,foliotransactions.subfolio,transactioncode.memo,sum(foliotransactions.netbaseamount) as Amount
from foliotransactions,transactioncode,folio,cardco
where foliotransactions.transactioncode=transactioncode.trancode and transactioncode.trancode=cardco.vendorid
and foliotransactions.posttoledger='0' and foliotransactions.folioid=folio.folioid and foliotransactions.folioid=pFolioID
group by foliotransactions.transactioncode;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetCalls` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetCalls`()
BEGIN
select * from `callmgtsystem`.`log` force index(primary)
where `callmgtsystem`.`log`.PostFlag = 0 and `callmgtsystem`.`log`.Cost > 0
and (`callmgtsystem`.`log`.CallDate <= curdate() and `callmgtsystem`.`log`.CallDate >= adddate(curdate(),-1));
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetChangesLogs` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetChangesLogs`(
in pStartDate date,
in pEndDate date
)
BEGIN
select * from changes_log
where date(DATE_CHANGED) >= pStartDate and 
date(DATE_CHANGED) <= pEndDate;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetChargedRecurringCharges` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetChargedRecurringCharges`(pFolioID varchar(35), pHotelID int(5), pTransactionDate date, pTransactionCode varchar(10))
BEGIN
select hotelid, folioid, transactioncode, transactiondate, memo from foliotransactions where folioid=pFolioID and hotelid=pHotelID and date(transactiondate)=pTransactionDate and transactionCode=pTransactionCode;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetCharges` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetCharges`(
in pFolioID varchar(20), 
in photelid int(5),
in pSubFolio varchar(1)
)
BEGIN
select sum(netamount),subfolio
from 
folioTransactions 
where 
acctside = 'DEBIT' and
folioId= pFolioId and 
hotelid = pHotelId AND
`status` = 'ACTIVE' and
subfolio = pSubFolio
group by subfolio;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetCheckedInGroups` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetCheckedInGroups`(pDate date, pHotelid int(5))
BEGIN
select folioid from folio where foliotype='GROUP' and pDate>=date(fromdate) and pDate<=date(todate) and folio.status='CHECKED IN' and hotelid=pHotelID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetChildFolioRoomEvents` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetChildFolioRoomEvents`(pFolioID varchar(25), pHotelID bigint(10))
BEGIN
select roomrate, eventid from roomevents where eventid in (select folioid from folio where masterfolio=pFolioID) and hotelid=photelid and eventtype!='CANCELLED';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetChildFolios` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetChildFolios`(
in pFolioID varchar(20),in pHotelID int(5)
)
BEGIN
select 
folio.folioId,
noOfAdults,
noofchild,
folio.status,
folio.todate,
folio.fromdate,
folio.accountid,
folio.packageid,
folio.arrivaldate,
folio.masterfolio,
folio.foliotype,
folio.folioeta
from 
folio
where 
folio.masterfolio=pFolioID and folio.`status`!='REMOVED' and folio.status!='DELETED' and hotelID=pHOtelID or folio.masterfolio in (select 
folio.folioId
from 
folio
where 
folio.masterfolio=pFolioID and hotelID=pHOtelID);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetChildFoliosAllFields` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetChildFoliosAllFields`(
in pFolioID varchar(12),in photelid int(5)
)
BEGIN
select 
*
from 
folio
where 
folio.masterfolio=pFolioID and `status`!='CHECKED OUT' and `status`!='CANCELLED' and hotelid=photelid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetCityLedgerSummary` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetCityLedgerSummary`()
BEGIN
select acctid,FGetCompany(acctid)as accountname,sum(debit) as debit ,if(FComputePaymentByAcctID(acctid)is NULL,0,FComputePaymentByAcctID(acctid)) as credit,if((sum(debit) -FComputePaymentByAcctID(acctid)) is null,sum(debit),sum(debit) -FComputePaymentByAcctID(acctid)) as balance  from cityledger where closed='0'
group by acctid,FGetCompany(acctid) order by accountname;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetCommission` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetCommission`(pfolioID varchar(20),
ptrancode varchar(20)
)
BEGIN
Select distinct percentcommission from agentcommission,folio,foliotransactions
where foliotransactions.folioid =folio.folioid and
folio.agentid = agentcommission.accountid and 
agentcommission.trancode = ptrancode and foliotransactions.folioid=pfolioid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetCompanyAccount` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetCompanyAccount`(
in pCompanyId varchar(50),
in pHotelId int(5)
)
BEGIN
Select *
from 
company
where 
(companyid = pCompanyId or companycode = pCompanyId)and
hotelid = photelid and companycode != '';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetCompanyByName` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetCompanyByName`(
pCompName varchar(100),
pHotelId int(5)
)
BEGIN
select * from company where companyname=pCompName and HotelId=pHotelId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetCompanyFolios` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetCompanyFolios`(
in photelid int(5)
)
BEGIN
Select 
folio.companyid,
folio.groupname,
if(substring(folio.companyid,1,1)='G',fGetCompanyName(folio.companyid), fGetGuestName(folio.companyid)) as companyName,
folioid,
folio.fromdate,
folio.todate
from 	
folio
where 
folio.foliotype = "GROUP" and
(`folio`.`status` = 'CHECKED IN') and
folio.hotelid = photelid and
masterfolio = "";
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetCompanyGuests` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetCompanyGuests`(
in pCompanyId varchar(20),
in pHotelId int(5)
)
BEGIN
select distinct
if(foliotype='GROUP', folio.companyid, folio.accountid) as accountid,
if(foliotype='GROUP', if(substring(folio.companyid,1,1)='G',fGetCompanyName(folio.companyid), fGetGuestName(folio.companyid)), fGetGuestName(folio.accountid)) as GuestName
from
folio
where
folio.companyid = pCompanyId and
folio.hotelid = pHotelId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetCompanyInfo` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetCompanyInfo`(
in pFolioId varchar(20),
in pHotelId int(5)
)
BEGIN
Select company.*
from 
company,
folio
where 
folio.folioid = pfolioid and
company.companyid = folio.companyid and
folio.hotelid = photelid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetCompanyPrivelege` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetCompanyPrivelege`(
in pCompanyId varchar(20),
in photelid int(5)
)
BEGIN
select
transactioncode,
basis,
percentoff,
amountoff
from
companyprivilegedetails,
companyprivilegeheader
where
companyprivilegedetails.privilegeid = companyprivilegeheader.privilegeid and
companyprivilegedetails.hotelid = companyprivilegeheader.hotelid and
companyprivilegeheader.companyid = pCompanyId and
companyprivilegeheader.hotelid = photelid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetCompanyPrivilege` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetCompanyPrivilege`(in pCompanyID varchar(20),in pHotelId int(5))
BEGIN
Select *,transactioncode.memo from CompanyPrivilegeheader,CompanyPrivilegedetails,transactioncode where CompanyPrivilegeheader.companyID=pcompanyID and CompanyPrivilegeheader.hotelId=pHotelId and CompanyPrivilegeheader.privilegeid=CompanyPrivilegedetails.privilegeid and CompanyPrivilegedetails.transactioncode=transactioncode.trancode;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetCompanyRefCompanyName` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetCompanyRefCompanyName`(
in pCompanyName varchar(100)
)
BEGIN
select * from company where companyname=pCompanyName;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetCurrency` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetCurrency`(in pCurrencyCode varchar(10))
BEGIN
Select CURRENCYCODE,CURRENCY,CONVERSIONRATE from CurrencyCodes where currencycode=pCurrencyCode;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetCurrencyCodes` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetCurrencyCodes`(in pHOtelid int(5))
BEGIN
Select * from currencyCodes where hotelid =photelid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetCurrencyRate` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetCurrencyRate`(
in pcurrencycode varchar(15)
)
BEGIN
select currencyrate from currencycodes where currencycode=pcurrencycode;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGETCURRENCYRATEANDCODE` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGETCURRENCYRATEANDCODE`()
BEGIN
Select CurrencyCode,ConversionRate from currencyCodes;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetCurrentAuditDate` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetCurrentAuditDate`(
in pAuditDate varchar(15)
)
BEGIN
Select * from auditdatetable where auditdate = pAuditDate;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetCurrentDayFolioIdByRoom` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetCurrentDayFolioIdByRoom`(
in pRoomId varchar(20),
in pEventType varchar(50),
in pAuditDate date
)
BEGIN
select eventid from roomevents
where	
roomid = pRoomId and `eventdate` = pAuditDate and eventtype = pEventType
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetCurrentRoomOccupied` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetCurrentRoomOccupied`(
in pFolioID VARCHAR(20),
in pHotelId int(5),
in pAuditDate date
)
BEGIN
select 
RoomID 
from 
roomevents force index(eventid,`eventdate`)
where 
EventID = pFolioID and 
`eventdate`= pAuditDate and
hotelid = photelid and 
transferFlag <>'1';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetDailyAverageRoomRate` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetDailyAverageRoomRate`(
in pHotelId int(2),
in pDate date
)
BEGIN
select  sum(rate) as TOTALRATE, 
count(distinct folioschedules.folioid) as TOTALFOLIO,
sum(rate)/count(distinct folioschedules.folioid) as AverageRoomRate
from folioschedules
left join folio on folio.folioid = folioschedules.folioid
where
(folio.status = "CHECKED IN" or
folio.status = "CHECKED OUT" or
folio.status = "CONFIRMED" or
folio.status = "TENTATIVE") and
date(folioschedules.fromdate) <= date(pDate) and 
date(folioschedules.todate) >= date(pDate);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetDailyAverageRoomRatePerGuest` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetDailyAverageRoomRatePerGuest`(
in pHotelId int(1),
in pDate date
)
BEGIN
select  sum(rate) as TOTALRATE, 
sum(folio.noofadults) as TOTALFOLIO,
sum(rate)/sum(folio.noofadults) as AverageRoomRate
from folioschedules
left join folio on folio.folioid = folioschedules.folioid
where
(folio.status = "CHECKED IN" or
folio.status = "CHECKED OUT" or
folio.status = "CONFIRMED" or
folio.status = "TENTATIVE") and
date(folioschedules.fromdate) <= date(pDate) and 
date(folioschedules.todate) >= date(pDate);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetDailyCancelledNoShowReservations` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetDailyCancelledNoShowReservations`(
in pHotelId int(4),
in pDate date,
in pEndDate date
)
BEGIN
select 
date(folio.fromdate) as fromDate,
folio.status,
count(if(folio.foliotype != "SHARE" and folio.foliotype!='JOINER',folio.folioid,null)) as Rooms
from 
folio
where 
folio.hotelid = pHotelId and
(folio.status = 'CANCELLED' or
folio.status = 'NO SHOW') and 
date(folio.fromdate) >= pDate and date(folio.fromdate) <= pEndDate
group by folio.status,date(folio.fromdate);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetDailyFolioComputation` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetDailyFolioComputation`(
in pHotelId int(4),
in pDate date)
BEGIN
select date(startDate) as fromDate, description, sum(roomCount) as rooms from
(
select 
date(folio.fromdate) as startDate,
folio.status as description,
count(if(folio.foliotype!='JOINER',folio.folioid,null)) as roomCount
from 
folio
where 
folio.hotelid = pHotelId and
(folio.status = 'CANCELLED' or
folio.status = 'NO SHOW') and 
date(folio.updateTime) = pDate
group by folio.fromdate, description
UNION ALL
select 
date(folio.fromdate) as startDate,
folio.accounttype as description,
count(if(folio.foliotype!='JOINER',folio.folioid,null)) as roomCount
from 
folio
where 
folio.hotelid = pHotelId and
date(folio.fromdate) = pDate and
folio.source!='WALK IN' and (folio.status = 'CHECKED IN' or folio.status = 'CHECKED OUT' OR `status` = 'CONFIRMED' or `status` = 'TENTATIVE') and folio.foliotype!='JOINER' and folio.foliotype!='GROUP'
group by folio.fromdate, description
UNION ALL
select 
date(folio.fromdate) as startDate,
if(folio.`source`= "WALK IN","WALK IN","RESERVE") as description,
count(*) as roomCount
from 
folio 
where (`status` = 'CHECKED IN' or `status` = 'CHECKED OUT' OR `status` = 'CONFIRMED' or `status` = 'TENTATIVE') and
date(folio.fromdate) = pDate and
hotelId = pHotelId and folio.foliotype!='JOINER' and folio.foliotype!='GROUP'
group by folio.fromdate, description
UNION ALL
select 
pDate as startDate,
'FUNCTIONS' as description,
count(folio.folioid) as roomCount
from folio, folioschedules
where
(folio.status = 'CHECKED IN' or folio.status = 'CHECKED OUT' OR `status` = 'CONFIRMED' or `status` = 'TENTATIVE') and
foliotype = 'GROUP' and (date(folio.fromDate) = pDate or (pDate >= date(folio.fromDate) and pDate < date(folio.todate))) and
folio.hotelid = pHotelId and folio.folioid=folioschedules.folioid and folioschedules.roomid!='' group by folio.folioid, startDate
UNION ALL
select 
pDate as startDate,
'ROOMS STAY-OVER' as description,
count(*) as roomCount
from folio 
where
date(folio.fromdate) < pDate and date(folio.todate)>pdate
and 
(folio.status = 'CHECKED IN' or (folio.status = 'CHECKED OUT' AND date(folio.todate)>=pDate)) and
foliotype != 'JOINER' AND foliotype != 'GROUP' and
folio.hotelId = pHotelId group by description
UNION ALL
select 
date(folio.fromdate) as startDate,
if(fGetGuestsCreateTime(folio.accountid) = date(folio.createtime),"WALK IN NEW","WALK IN OLD") as description,
count(folioid) as roomCount
from folio 
where 
(`status` = 'CHECKED IN' or
`status` = 'CHECKED OUT' or
`status` = 'CONFIRMED' or
`status` = 'TENTATIVE') and
folio.accounttype = "PERSONAL" and
date(folio.fromdate) = pDate and
folio.source = 'WALK IN' and
foliotype != 'JOINER' AND foliotype != 'GROUP' and
folio.hotelId = pHotelId
group by startDate, description
UNION ALL
select 
date(folio.fromdate) as startDate,
'WALK IN CORPORATE' as description,
count(folioid) as roomCount
from folio 
where 
(`status` = 'CHECKED IN' or
`status` = 'CHECKED OUT' or
`status` = 'CONFIRMED' or
`status` = 'TENTATIVE') and
folio.accounttype = "CORPORATE" and
date(folio.fromdate) = pDate and
folio.source = 'WALK IN' and
foliotype != 'JOINER' AND foliotype != 'GROUP' and
folio.hotelId = pHotelId
group by startDate, description
UNION ALL
select  distinct
pDate as startDate,
'AVERAGEROOMRATE' as description,
(select sum(if(foliotransactions.acctside = "CREDIT", foliotransactions.netbaseamount * -1, foliotransactions.netbaseamount))+if(fGetDailyNonGuestRoomTotal(pDate) is null, 0, fGetDailyNonGuestRoomTotal(pDate))+if(fGetDailyFOCRoomTotal(pDate) is null, 0, fGetDailyFOCRoomTotal(pDate))+if(fGetDailyFOCNonGuestRoomTotal(pDate) is null, 0, fGetDailyFOCNonGuestRoomTotal(pDate)) from foliotransactions where transactioncode='1000' and date(transactiondate)=pDate group by transactioncode)/count(distinct folioschedules.folioid) as roomCount
from folioschedules
left join folio on folio.folioid = folioschedules.folioid
where
(folio.status = "CHECKED IN" or
folio.status = "CHECKED OUT" or
folio.status = "CONFIRMED" or
folio.status = "TENTATIVE") and
foliotype != 'JOINER' AND foliotype != 'GROUP' and
pDate>=date(folioschedules.fromdate) and pDate<date(folioschedules.todate)
group by description
UNION ALL
select distinct
pDate as startDate,
'AVERAGEROOMRATEPERGUEST' as description,
(select sum(if(foliotransactions.acctside = "CREDIT", foliotransactions.netbaseamount * -1, foliotransactions.netbaseamount)) from foliotransactions where transactioncode='1000' and date(transactiondate)=pDate group by transactioncode)/(sum(folio.noofadults)) as roomCount
from folio
left join folioschedules on folio.folioid = folioschedules.folioid
where
(folio.status = "CHECKED IN" or
folio.status = "CHECKED OUT" or
folio.status = "CONFIRMED" or
folio.status = "TENTATIVE") and
pDate>=date(folioschedules.fromdate) and pDate<date(folioschedules.todate) and
foliotype != 'JOINER' AND foliotype != 'GROUP'
group by startDate, description
) as folios group by description
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetDailyGuestAR` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetDailyGuestAR`(
in pHotelId int(4),
in pDate datetime
)
BEGIN
select
foliotransactions.postingdate,
sum(if(foliotransactions.acctside='DEBIT',baseamount,0)) - sum(if(acctside='CREDIT',baseamount,0)) as BALANCE
from
foliotransactions 
left join folio on folio.folioid = foliotransactions.folioid
where
foliotransactions.`status` = 'ACTIVE' and
foliotransactions.postingdate <= pDate and
foliotransactions.hotelid = pHotelId
group by
date(pDate);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetDailyReservationsByAccountType` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetDailyReservationsByAccountType`(
in pHotelId int(4),
in pDate date,
in pEndDate date
)
BEGIN
select 
date(folio.fromdate) as fromdate,
folio.accounttype,
count(if(folio.foliotype != "SHARE" and folio.foliotype!='JOINER',folio.folioid,null)) as Rooms
from 
folio
where 
folio.hotelid = pHotelId and
date(folio.fromdate) >= pdate and date(folio.fromdate) <= pEndDate
group by folio.accounttype,date(folio.fromdate)
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetDailyReservationSummaryBySource` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetDailyReservationSummaryBySource`(
in pHotelId int(4),
in pDate date,
in pEndDate date
)
BEGIN
select 
date(folio.fromdate) as fromDate,
if(folio.`source`= "WALK IN","WALK IN","RESERVE") as FOLIOSOURCE,
count(*) as Total
from 
folio 
where (`status` = 'CHECKED IN' or `status` = 'CHECKED OUT' or 
`status` = 'CONFIRMED' or `status`='TENTATIVE') and
date(folio.fromdate) >= pDate and date(folio.fromdate) <= pEndDate and
hotelId = pHotelId and folio.foliotype!='JOINER' and folio.foliotype!='SHARE'
group by folio.fromdate, FOLIOSOURCE
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetDailyTotalFunctions` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetDailyTotalFunctions`(
in pHotelId int(4),
in pDate date
)
BEGIN
select count(folioid) as rooms
from folio 
where
(folio.status = 'CHECKED IN' or folio.status = 'CHECKED OUT') and
foliotype = 'GROUP' and (date(fromdate) <= pDate and
date(toDate) >= pDate) and
hotelid = pHotelId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetDailyTotalRoomStayOver` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetDailyTotalRoomStayOver`(
in pHotelId int(4),
in pDate date
)
BEGIN
select count(*) from folio 
where
date(fromdate) < pDate and
date(toDate) > pDate
and 
(folio.status = 'CHECKED IN' or folio.status = 'CHECKED OUT') and
foliotype = 'INDIVIDUAL' and
folio.hotelId = pHotelId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetDailyWalkinCorporateFolio` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetDailyWalkinCorporateFolio`(
in pHotelId int(5),
in pDate date
)
BEGIN
select 
count(*) as Total,
accounttype
from folio 
left join guests on guests.accountid = folio.accountid
where 
(`status` = 'CHECKED IN' or
`status` = 'CHECKED OUT' or
`status` = 'CONFIRMED' or
`status` = 'TENTATIVE') and
folio.accounttype = 'CORPORATE' and
date(folio.fromdate) = pDate and
folio.source = 'WALK IN' and
folio.hotelid = pHotelId
group by folio.accounttype;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetDailyWalkinPersonalFolio` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetDailyWalkinPersonalFolio`(
in pHotelId int(5),
in pDate date
)
BEGIN
select 
count(*) as Total,
if(date(guests.createtime) = date(folio.createtime),"NEW","OLD") as guestType
from folio 
left join guests on guests.accountid = folio.accountid
where 
(`status` = 'CHECKED IN' or
`status` = 'CHECKED OUT' or
`status` = 'CONFIRMED' or
`status` = 'TENTATIVE') and
folio.accounttype = "PERSONAL" and
date(folio.fromdate) = pDate and
folio.source = 'WALK IN' and
folio.hotelId = pHotelId
group by guestType;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetDataToApplyCommission` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetDataToApplyCommission`(pfolioID varchar(20),in psubfolio varchar(1),in pHotelID int(5))
BEGIN
select foliotransactions.transactioncode,foliotransactions.subfolio,folio.AgentID ,sum(foliotransactions.netbaseamount) as NetAmount from foliotransactions,folio
where  folio.folioid=foliotransactions.folioid and  folio.folioid=pfolioID and foliotransactions.posttoledger="0" and foliotransactions.hotelid=pHotelID and subfolio=psubfolio
group by transactioncode,folio.AgentID,foliotransactions.subfolio;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetDataToBePostedToLedger` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetDataToBePostedToLedger`(pfolioid int(10))
BEGIN
select * from vdatatobepostedtoledger where folioid=pfolioid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetDataToPostServiceCharge` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetDataToPostServiceCharge`(
pFolioid varchar(20),
pHotelid int(5)
)
BEGIN
select 
transactioncode.departmentId,
foliotransactions.transactioncode as trancode,
sum(foliotransactions.servicecharge) as amount 
from 
transactioncode,
foliotransactions
where 
transactioncode.trancode = foliotransactions.transactioncode and 
foliotransactions.folioid = pFolioid and 
foliotransactions.hotelid = pHotelid and 
foliotransactions.posttoledger="0"
group by 
transactioncode.departmentId,
foliotransactions.transactioncode
having sum(foliotransactions.servicecharge) > 0;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetDateMealTypes` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetDateMealTypes`(
pFolioID varchar(20), 
pDate date
)
BEGIN
select distinct mealType 
from event_meal_requirements 
where folioID=pFolioID and 
date(eventDate)=pDate 
order by cast(`event_meal_requirements`.`starttime` as time);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetDateRangeNationalityReport` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetDateRangeNationalityReport`(pStartDate date, pEndDate date)
BEGIN
select 
countryname, 
nationality, 
fCountPaxPerNationality(pStartDate, pEndDate, countryname, nationality) as pax,
fGetFolioCount(pStartDate, pEndDate) as totalPax,
(select count(roomid) from folioschedules where roomtype!='FUNCTION' and date(fromdate) between pStartDate and pEndDate) as totalRoomsOccupied,
(select sum(rate*days) from folioschedules where roomtype!='FUNCTION' and date(fromdate) between pStartDate and pEndDate) as totalRoomRates,
fGetTotalRooms() as totalRooms
from countries;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetDatesForEvents` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetDatesForEvents`(pFolioID varchar(20), pEventDate date)
BEGIN
select * from event_meal_requirements where folioID=pFolioID and date(eventDate)=pEventDate;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetDeletedRoomIDs` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetDeletedRoomIDs`(pHotelId int(5))
BEGIN
select roomid from rooms where stateflag = 'DELETED' and hotelid = pHotelId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetDetailsForRequirements` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetDetailsForRequirements`(pReqCode varchar(40))
BEGIN
select * from requirement_details where requirementID=pReqCode;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetEngineeringJobsHistory` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetEngineeringJobsHistory`()
BEGIN
select servicename, assignedperson, enggjobno, roomid, startdate, enddate, starttime, endtime from engineeringjobs, engineeringservices where engineeringjobs.enggserviceid=engineeringservices.enggserviceid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetEventRoomVenues` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetEventRoomVenues`(pFolioID varchar(20))
BEGIN
select * from event_room_venues where folioID=pFolioID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetExpectedCheckIn` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetExpectedCheckIn`(
in pAuditDate date,
in photelid int(5)
)
BEGIN
select 
Distinct
folioschedules.roomid,
folioschedules.roomtype,
folioschedules.todate,
folio.status,
folio.folioid
from 
folio,
folioschedules 
where 
folio.folioid = folioschedules.folioid  and 
not (folio.status = 'CHECKED OUT' OR folio.status ='CANCELLED' OR folio.status ='NO SHOW') and
date(folioschedules.fromdate) = pAuditDate and
folioschedules.hotelid = folio.hotelid and
folio.hotelid = pHotelID union(
select distinct
'' as roomid,
'' as roomtype,
folio.todate,
folio.status,
folio.folioid
from folio where folio.foliotype='GROUP' and not (folio.status = 'CHECKED OUT' OR folio.status ='CANCELLED' OR folio.status ='NO SHOW') and
date(folio.fromdate) = pAuditDate and
folio.hotelid = pHotelID)
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetExpectedCheckInFunctionCount` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetExpectedCheckInFunctionCount`(
in pDate date,
in pHotelId int(2)
)
BEGIN
select 
count(distinct folio.folioid) as Total
from 
folio left join folioschedules on
folioschedules.folioid = folio.folioid
where 
(folio.status = 'CONFIRMED' or folio.status = 'TENTATIVE') and
date(folio.fromdate) = pDate and
folio.hotelid = pHotelId and
folioschedules.roomtype = 'FUNCTION'
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spgetexpectedcheckinroomcount` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spgetexpectedcheckinroomcount`(
in pDate date,
in pHotelId int(2)
)
BEGIN
select 
count(distinct folio.folioid) as Total
from 
folio left join folioschedules on
folioschedules.folioid = folio.folioid
where 
(folio.status = 'CONFIRMED' or folio.status = 'TENTATIVE') and
date(folio.fromdate) = pDate and
folio.hotelid = pHotelId and
folioschedules.roomtype != 'FUNCTION'
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetExpectedCheckOuts` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetExpectedCheckOuts`(
in pAuditDate date,
in photelid int(5)
)
BEGIN
select 
Distinct
folioschedules.roomid,
folioschedules.roomtype,
folioschedules.todate,
folio.status
from 
folio,
folioschedules 
where 
folio.folioid = folioschedules.folioid  and 
not (folio.status = 'CHECKED OUT' OR folio.status ='CANCELLED' OR folio.status ='NO SHOW') and
date(folio.departuredate) = pAuditDate and
folioschedules.hotelid = folio.hotelid and
folio.hotelid = pHotelID and
folioschedules.roomtype!='FUNCTION'
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetExpectedEndOOO` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetExpectedEndOOO`(
in pAuditDate date,
in photelid int(5)
)
BEGIN
select 
Distinct
roomevents.roomid,
engineeringjobs.startdate,
engineeringjobs.enddate,
engineeringjobs.stateflag as `status`
from 
engineeringjobs,
roomevents 
where 
engineeringjobs.enggjobno = roomevents.eventid  and 
not (stateflag = 'DELETED') and
date(engineeringjobs.enddate) = pAuditDate
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetFloorLayoutImage` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetFloorLayoutImage`(
in photelid int(5),
in pfloor varchar(10)
)
BEGIN
select floorlayoutimage
from floors
where
hotelid = photelid and `floor` = pfloor;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetFloors` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetFloors`()
BEGIN
select  hotelid,`floor`,floorlayoutimage
from
floors
where
not stateflag = 'DELETED';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetFOActualRoomSales` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetFOActualRoomSales`(
in pHotelId int(4),
in pDate date
)
BEGIN
select 
(sum(if(acctside='DEBIT',foliotransactions.netamount,0.00)) - 
sum(if(acctside='CREDIT',foliotransactions.netamount,0.00))) as RoomSale
from 
foliotransactions
where 
foliotransactions.transactionCode = '1000' and
(foliotransactions.transactionDate) = pDate
and foliotransactions.status = 'ACTIVE'
and foliotransactions.hotelId = pHotelId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetFOExpectedArrival` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetFOExpectedArrival`(
in pHotelId int(4),
in pDate date
)
BEGIN
select 
count(if(folio.foliotype != "JOINER" and folio.status!='WAIT LIST' and folio.status!='DELETED' and folio.status!='REMOVED' and folio.status!='CANCELLED',folioschedules.folioid,0))+(select count(*) from blockingdetails,roomblock where DATE(blockfrom)=pDate and blockingdetails.blockid=roomblock.blockid and roomblock.folioid!='')  as Rooms,
sum(folio.noofadults + folio.noofchild) as Pax,
(select distinct count(folio.folioid) from folio, folioschedules where pDate = date(folioschedules.fromdate) and folioschedules.folioid = folio.folioid and roomid != '' and foliotype='GROUP' and folio.status!='CANCELLED' and folio.status!='NO SHOW') as functionRoom,
(select distinct count(folio.folioid) from folio, folioschedules where date(folioschedules.fromdate)=pDate and folio.folioid=folioschedules.folioid and folio.status='WAIT LIST' and folio.foliotype!='JOINER') as waitList
from 
folio,
folioschedules 
where 
folio.hotelid = pHotelId and
folio.folioid = folioschedules.folioid and
(folio.status != 'CANCELLED' and
folio.status != 'NO SHOW' and
folio.status != 'REMOVED' and
folio.status != 'DELETED') and 
folio.status != 'WAIT LIST' and
date(folioschedules.fromdate) = pDate and
folioschedules.roomtype != 'FUNCTION'
group by pDate;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetFOExpectedDeparture` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetFOExpectedDeparture`(
in pHotelId int(4),
in pDate date
)
BEGIN
select sum(rooms) as rooms, sum(pax) as pax, sum(functionRoom) as functionRoom from
(
select 
count(folioschedules.roomid) as Rooms,
sum(folio.noofadults + folio.noofchild) as Pax,
0 as functionRoom
from 
folio,
folioschedules
where 
folio.hotelid = pHotelId and
folio.folioid = folioschedules.folioid and
(folio.status != 'CANCELLED' and
folio.status != 'NO SHOW' and
folio.status != 'DELETED' and
folio.status != 'REMOVED' and
folio.status != 'WAIT LIST') and
(pDate = date(folioschedules.todate)) and
folioschedules.roomtype != 'FUNCTION' and
folio.foliotype!='JOINER'
union (select count(*) as rooms, 0 as pax, 0 as functionRoom from blockingdetails,roomblock where pDate = date(blockto) and blockingdetails.blockid=roomblock.blockid and roomblock.folioid!='')
union (select distinct 0 as rooms, 0 as pax, count(folio.folioid) as functionRoom from folio, folioschedules where ((pDate = date(folioschedules.todate) and folio.status!='CHECKED OUT' and folio.status!='CANCELLED') or (pDate = date(folioschedules.todate) and folio.status!='CANCELLED')) and foliotype='GROUP' and folio.folioid=folioschedules.folioid)
) as expectedInHouse
group by pDate;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetFOExpectedInHouse` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetFOExpectedInHouse`(
in pHotelId int(4),
in pDate date
)
BEGIN
select sum(rooms) as rooms, sum(pax) as pax, sum(functionRoom) as functionRoom from
(
select 
count(folioschedules.roomid) as Rooms,
sum(folio.noofadults + folio.noofchild) as Pax,
0 as functionRoom
from 
folio,
folioschedules
where 
folio.hotelid = pHotelId and
folio.folioid = folioschedules.folioid and
(folio.status != 'CANCELLED' and
folio.status != 'NO SHOW' and
folio.status != 'DELETED' and
folio.status != 'REMOVED' and
folio.status != 'WAIT LIST') and
(pDate >= date(folioschedules.fromdate) and pDate <=
date(folioschedules.todate)) and
folioschedules.roomtype != 'FUNCTION' and
folio.foliotype!='JOINER'
union (select count(*) as rooms, 0 as pax, 0 as functionRoom from blockingdetails,roomblock where pDate >= date(blockfrom) and pDate <= date(blockto) and blockingdetails.blockid=roomblock.blockid and roomblock.folioid!='')
union (select distinct 0 as rooms, 0 as pax, count(folio.folioid) as functionRoom from folio, folioschedules where ((pDate > date(folioschedules.todate) and if(pDate <= (select auditdate from auditdatetable where meridian='AM'), folio.status!='CHECKED OUT', false) and folio.status!='CANCELLED') or (pDate between date(folioschedules.fromdate) and date(folioschedules.todate) and folio.status!='CANCELLED')) and foliotype='GROUP' and folio.folioid=folioschedules.folioid)
) as expectedInHouse
group by pDate;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetFOExpectedRoomSales` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetFOExpectedRoomSales`(
in pHotelId int(4),
in pDate datetime
)
BEGIN
select 
sum(roomevents.roomrate) as RoomSale
from 
roomevents
where 
roomevents.hotelid = pHotelId and
date(roomevents.eventdate) = date(pDate) and
(roomevents.eventtype != 'CANCELLED' and
roomevents.eventtype != 'NO SHOW' and 
roomevents.eventtype != "")
group by roomevents.eventdate;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetFolio` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetFolio`(in pFolioID varchar(20), in pHotelID int(5))
BEGIN
set sql_big_selects=1;
Select * from Folio force index(primary) where folioID = pFolioID and hotelId=pHotelID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetFolioId` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetFolioId`(
in pRoomId varchar(10)
)
BEGIN
select eventid from roomevents
where	
roomid = pRoomId and `eventdate` = curdate() and (eventtype = 'IN HOUSE' or eventtype='RESERVATION');
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetFolioIdFromRoomEventsByRoomId` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetFolioIdFromRoomEventsByRoomId`(
in pRoomId varchar(20)
)
BEGIN
Select DISTINCT 
Eventid as folioid
from roomevents 
where eventtype ='IN HOUSE' and RoomID = pRoomId limit 0,1;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetFolioInclusions` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetFolioInclusions`(in pFolioID varchar(20),in pHOtelId int(5))
BEGIN
select 
*
from 	folioinclusions
where 
folioinclusions.folioid=pFolioid and 
folioinclusions.hotelId=pHOtelID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetFolioPackage` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetFolioPackage`(in pFolioID varchar(20),in pHOtelId int(5))
BEGIN
select 
foliopackage.*,
transactioncode.memo 
from 	foliopackage,
transactioncode 
where 
foliopackage.folioid=pFolioid and 
foliopackage.hotelId=pHOtelID and 
foliopackage.transactioncode=transactioncode.trancode;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetFolioPrivilege` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetFolioPrivilege`(
in pFolioid varchar(20),
in pHotelid int(5)
)
BEGIN
select 
folioprivilege.*,
transactioncode.memo 
from folioprivilege,
transactioncode
where
transactioncode.trancode = folioprivilege.TransactionCode and
transactioncode.hotelid = folioprivilege.hotelid and
folioid = pfolioid and
folioprivilege.hotelid = photelid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetFolioRouting` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetFolioRouting`(in pFolioID varchar(20),in pHOtelId int(5))
BEGIN
Select TransactionCode, HotelID, FolioID, SubFOlio, Basis, PercentCharged, 
AmountCharged, CreateTime, CreatedBy, UpdateTime, UpdatedBy from FOlioRouting where folioid=pFolioID and hotelID=pHOtelID
order by transactionCode, subfolio;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetFoliosToCharge` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetFoliosToCharge`(in pDate datetime, in pHotelID int(5))
BEGIN
select distinct folio.folioid from folio, folioschedules where (folioschedules.roomid='' or folioschedules.roomid is null) and folio.folioid=folioschedules.folioid and pDate<folioschedules.todate
and folioschedules.hotelid=pHotelid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetFoliotoCharge` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetFoliotoCharge`(
in pTelephoneNo varchar(20),
in pHotelId int(5)
)
BEGIN
select
roomevents.eventid
from 
roomevents,
rooms
where
roomevents.eventtype = 'IN HOUSE' and
date(roomevents.eventdate) = curdate() and
roomevents.roomid = rooms.roomid and
rooms.telephoneNo = pTelephoneNo and
rooms.hotelid = roomevents.hotelid and
roomevents.hotelid = photelid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetFolioTransaction` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetFolioTransaction`(
in pFolioID varchar(20),
in pTranDate varchar(30),
in pTranCode varchar(5),
in pHotelID int(5)
)
BEGIN
Select 
TransactionDate,        
TransactionCode,        
ReferenceNo,        
Memo,         
AcctSide,      
CurrencyCode,      
ConversionRate,         
CurrencyAmount,      
BaseAmount,       
Discount,        
ServiceCharge,        
GovernmentTax,      
LocalTax,         
NetBaseAmount,       
RouteSequence,    
SourceFolio,        
SourceSubFolio,       
TerminalID,         
`Status`,    
PostToLedger,
HotelID,   
FolioID,      
SubFOlio,       
AccountID,          
CREATETIME,    
CREATEDBY,     
UPDATETIME,       
UPDATEDBY
from folioTransactions
where folioid=pFolioID and transactiondate=pTranDate and TransactionCode=pTranCode and hotelID=pHotelID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetFolioTransactionByTransactionCodeReferenceNo` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetFolioTransactionByTransactionCodeReferenceNo`(
in pTransactionCode varchar(50),
in pReferenceNo varchar(50)
)
BEGIN
select * from foliotransactions
where
transactionCode = pTransactionCode and
referenceNo = pReferenceNo;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetFolioTransactionByTransactionNo` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetFolioTransactionByTransactionNo`(
in pFolioTransactionNo int(20)
)
BEGIN
select * from foliotransactions
where
folioTransactionNo = pFolioTransactionNo;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetFolioTransactionLedger` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetFolioTransactionLedger`(
in pHotelId int(5),
IN pFolioID varchar(20),
in pSubFolio varchar(20)
)
BEGIN
select HOTELID, FOLIOID, SUBFOLIO, ACCOUNTID, CHARGES, PAYCASH, PAYCARD, PAYCHEQUE, 
PAYGIFTCHEQUE, BALANCEFORWARDED, BALANCENET, DISCOUNT, GOVERNMENTTAX, 
LOCALTAX, SERVICECHARGE, AGENTCOMMISSION, TOTALNET, POSTTOLEDGER, 
CREATETIME, CREATEDBY, UPDATETIME, UPDATEDBY 
from `folioledger` force index(folioid,subfolio)
where 
HOtelID=pHotelId and FolioId=pFolioID and SubFolio=pSubFolio;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetFolioTransactionRefTranCode` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetFolioTransactionRefTranCode`(
in pTranCode varchar(20),
in pHotelId int(5)
)
BEGIN
Select * FROM transactionCode where trancode=pTrancode and hotelID =pHOtelID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetFolioTransactions` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetFolioTransactions`(
in pFolioID varchar(20),
in pSubFolio varchar(50),
in pHotelID int(5)
)
BEGIN
Select       
*
from 
foliotransactions
where 
folioid=pFolioID and 
subfolio=pSubFolio and 
hotelID=pHOtelID and
`status`='ACTIVE';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetFolioTransPackage` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetFolioTransPackage`(
in pfolioid varchar(20),
in ptrancode varchar(20),
in photelid int(5)
)
BEGIN
select * from foliopackage
where
folioid = pfolioid and
transactioncode = pTrancode and
hotelid = photelid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetFolioTransPrivilege` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetFolioTransPrivilege`(
in pFolioId varchar(20),
in pTransactionCode varchar(20),
in pHotelid int(5)
)
BEGIN
select * 
from 
FolioPrivilege
where
folioid = pFolioId and
transactioncode = pTransactionCode and
hotelid = pHotelid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetFolioTransRouting` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetFolioTransRouting`(
in pfolioid varchar(20),
in ptrancode varchar(20),
in photelid int(5)
)
BEGIN
select * from foliorouting
where
folioid = pfolioid and
transactioncode = pTrancode and
hotelid = photelid
order by subfolio asc;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetFoodDates` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetFoodDates`(pFolioID varchar(20))
BEGIN
select distinct eventDate from event_meal_requirements where folioID=pFolioID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetFORoomCount` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetFORoomCount`(
in pHotelId int(4)
)
BEGIN
select count(roomid) from rooms where
hotelid = pHotelid and
rooms.stateflag != 'DELETED' and rooms.roomtypecode!='FUNCTION';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetFO_ExpectedArrival` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetFO_ExpectedArrival`(
in pHotelId int(4),
in pDate date
)
BEGIN
select 
count(if(folio.foliotype != "SHARE",folioschedules.roomid,null)) as Rooms,
sum(folio.noofadults + folio.noofchild) as Pax
from 
folio,
folioschedules 
where 
folio.hotelid = pHotelId and
folio.folioid = folioschedules.folioid and
(folio.status != 'CANCELLED' and
folio.status != 'NO SHOW') and 
date(folioschedules.fromdate) = pDate
group by date(folioschedules.fromdate);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetFO_ExpectedDeparture` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetFO_ExpectedDeparture`(
in pHotelId int(4),
in pDate date
)
BEGIN
select 
count(if(folio.foliotype != "SHARE",folioschedules.roomid,null)) as Rooms,
sum(folio.noofadults + folio.noofchild) as Pax
from 
folio,
folioschedules 
where 
folioschedules.roomid != "" and
folio.hotelid = pHotelId and
folio.folioid = folioschedules.folioid and
(folio.status != 'CANCELLED' and
folio.status != 'NO SHOW') and 
date(folioschedules.todate) = pDate
group by date(folio.hotelid);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetFO_ExpectedInHouse` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetFO_ExpectedInHouse`(
in pHotelId int(4),
in pDate date
)
BEGIN
select 
count(if(folio.foliotype!="SHARE",folioschedules.roomid,null)) as Rooms,
sum(folio.noofadults + folio.noofchild) as Pax
from 
folio,
folioschedules 
where 
folio.hotelid = pHotelId and
folio.folioid = folioschedules.folioid and
(folio.status != 'CANCELLED' and
folio.status != 'NO SHOW') and 
folioschedules.roomid != "" and
(date(folioschedules.fromdate) <= pDate and
date(folioschedules.todate) >= pDate)
group by date(folio.hotelid);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetFO_RoomCount` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetFO_RoomCount`(
in pHotelId int(4)
)
BEGIN
select count(roomid) from rooms where
hotelid = pHotelid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetFunctionStatusAndCleaningSummary` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetFunctionStatusAndCleaningSummary`(
in pHotelId int(4)
)
BEGIN
select 
rooms.stateflag,
rooms.cleaningstatus,
count(*) as Total
from rooms
where
rooms.roomtypecode = 'FUNCTION' and
rooms.hotelId = pHotelId and rooms.stateflag != 'DELETED'
group by rooms.stateflag,rooms.cleaningstatus;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetGroupBlockings` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetGroupBlockings`(
in pHotelId int(4)
)
BEGIN
set sql_big_selects = 1;
select 
folio.folioid,
folio.fromdate,
folio.todate,
fGetEventTotalRequiredRooms(folio.folioid) as RequiredRooms,
fGetEventTotalBlockedRooms(folio.folioid) as BlockedRooms,
folio.status,
folio.remarks
from
folio
left join folioledger on
folioledger.folioid = folio.folioid
where 
foliotype = 'GROUP' and
folio.hotelid = pHotelId and
folio.status != 'CANCELLED' and
folio.status != 'CHECKED OUT'
group by
folio.folioid
order by
folio.folioid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetGroupBookingDropDown` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetGroupBookingDropDown`()
BEGIN
select * from GroupBookingDropDown
where StatusFlag = 'ACTIVE';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetGroupBookingForExportToExcel` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetGroupBookingForExportToExcel`(
)
BEGIN
select 
date_format(folio.fromdate, '%m/%e/%y') as FromDate,
date_format(folio.toDate, '%m/%e/%y') as ToDate,
folio.status,
concat(folio.groupname, ' - ', if(eventtype is null, '', event_booking_info.eventType), ' [',folio.folioid,']') as eventtype,
if(date_format(folioschedules.starttime,'%H') > 0,0,1) as WholeDayEvent,
if(folioschedules.starttime is null, '00:00', folioschedules.starttime) as starttime,
if(folioschedules.endtime is null, '00:00', folioschedules.endtime) as endtime
from 
folio left join 
event_booking_info on event_booking_info.folioId = folio.folioId 
left join folioschedules on folioschedules.folioid = folio.folioid
where
folio.foliotype = 'GROUP' and
not(folio.status = 'CHECKED OUT' 
or folio.status = 'CANCELLED' 
or folio.status = 'NO SHOW');
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetGroupCancellations` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetGroupCancellations`(pAuditDate date)
BEGIN
select distinct
folio.folioid,
if(foliotype='GROUP', folio.folioid, folio.masterfolio) as masterfolio,
foliotype,
groupname,
if(substr(folio.companyid,1,1)='G', fGetCompanyName(folio.companyid), fGetGuestName(folio.companyid)) as companyName,
if(foliotype='GROUP', folioschedules.roomid, 'NONE') as grouproom,
folioschedules.roomid as room,
date(folioschedules.fromdate) as blockfrom,
date(folioschedules.todate) as blockto,
if(foliotype='DEPENDENT', fGetGroupTotalPax(folio.masterfolio), fGetGroupTotalPax(folio.folioid)) as totalPax,
if(foliotype='DEPENDENT', fGetGroupArrivalDate(folio.masterfolio), date_format(folio.fromdate,'%c/%d/%y')) as groupArrivalDate,
if(foliotype='DEPENDENT', fGetGroupDepartureDate(folio.masterfolio), date_format(folio.todate,'%c/%d/%y')) as groupDepartureDate,
if(foliotype='DEPENDENT', fGetGroupAccountType(folio.masterfolio), accounttype) as groupAccountType,
folio.status,
(select distinct roomtypecode from rooms where rooms.roomid=room) as roomtype,
folio.reason_for_cancel
from folio left join folioschedules on (folio.folioid=folioschedules.folioid) where (foliotype='GROUP' or foliotype='DEPENDENT') and folio.status='CANCELLED' and date(folio.updateTime)=pAuditDate union all
select distinct
roomblock.folioid as folioid,
roomblock.folioid as masterfolio,
'DEPENDENT' as foliotype,
(select groupname from folio where folioid = roomblock.folioid) as groupname,
'' as companyname,
if((select folioschedules.roomid from folioschedules where folioid=roomblock.folioid limit 1)!='',
(select folioschedules.roomid from folioschedules where folioid=roomblock.folioid limit 1), 'NONE') as grouproom,
blockingdetails.roomid as room,
blockingdetails.blockfrom as blockfrom,
blockingdetails.blockto as blockto,
0 as totalPax,
(select date_format(fromdate,'%c/%d/%y') from folio where folioid=roomblock.folioid) as groupArrivalDate,
(select date_format(todate,'%c/%d/%y') from folio where folioid=roomblock.folioid) as groupDepartureDate,
fGetGroupAccountType(roomblock.folioid) as groupAccountType,
'BLOCKED' as `status`,
(select distinct `rooms`.`roomtypecode` AS `roomtypecode` from `rooms` where `rooms`.`roomid` = `room`) as roomType,
'' as reason_for_cancel
from roomblock, blockingdetails where roomblock.blockid=blockingdetails.blockid and (select date(updatetime) from folio where folioid=roomblock.folioid)=pAuditDate and (select folio.status from folio where folioid=roomblock.folioid)='CANCELLED';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetGroupedRoomingList` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetGroupedRoomingList`()
BEGIN
select folio.folioid,
if(foliotype='GROUP', folio.folioid, masterfolio) as masterfolio,
foliotype,
groupname,
if(substring(folio.companyid,1,1)='G',fGetCompanyName(folio.companyid), fGetGuestName(folio.companyid)) as companyName,
noOfAdults,
folioschedules.roomid,
folioschedules.roomtype,
date(folio.fromdate) as fromdate,
date(folio.todate) as todate,
folio.status,
foliotype
from folio left join folioschedules on folio.folioid=folioschedules.folioid where foliotype = 'GROUP'
union all
select companyID as folioid,
'' as masterfolio,
foliotype,
'' as groupname,
if(substring(folio.companyid,1,1)='G',fGetCompanyName(folio.companyid), fGetGuestName(folio.companyid)) as companyName,
0 as noOfAdults,
'' as roomid,
'' as roomtype,
curdate() as fromdate,
curdate() as todate,
folio.status,
foliotype
from folio where foliotype!='JOINER' and foliotype!='GROUP' and foliotype!='DEPENDENT' and (folio.status='CHECKED IN' or folio.status='CONFIRMED' or folio.status='TENTATIVE') and companyid!=''
group by folio.companyid order by masterfolio, folioid
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetGroupExpectedCheckIn` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetGroupExpectedCheckIn`(pAuditDate date)
BEGIN
select distinct
folio.folioid,
if(foliotype='GROUP', folio.folioid, folio.masterfolio) as masterfolio,
foliotype,
groupname,
if(substr(folio.companyid,1,1)='G', fGetCompanyName(folio.companyid), fGetGuestName(folio.companyid)) as companyName,
if(foliotype='GROUP', folioschedules.roomid, 'NONE') as grouproom,
folioschedules.roomid as room,
date(folioschedules.fromdate) as blockfrom,
date(folioschedules.todate) as blockto,
if(foliotype='DEPENDENT', fGetGroupTotalPax(folio.masterfolio), fGetGroupTotalPax(folio.folioid)) as totalPax,
if(foliotype='DEPENDENT', fGetGroupArrivalDate(folio.masterfolio), folio.fromdate) as groupArrivalDate,
if(foliotype='DEPENDENT', fGetGroupDepartureDate(folio.masterfolio), folio.todate) as groupDepartureDate,
if(foliotype='DEPENDENT', fGetGroupAccountType(folio.masterfolio), accounttype) as groupAccountType,
folio.status,
(select distinct roomtypecode from rooms where rooms.roomid=room) as roomtype
from folio left join folioschedules on (folio.folioid=folioschedules.folioid) where (foliotype='GROUP' or foliotype='DEPENDENT') and folio.status!='NO SHOW' and folio.status!='CHECKED OUT' and folio.status!='CANCELLED' and folio.status!='CHECKED IN' and date(folioschedules.fromdate)=pAuditDate union all
select distinct
roomblock.folioid as folioid,
roomblock.folioid as masterfolio,
'DEPENDENT' as foliotype,
(select groupname from folio where folioid = roomblock.folioid) as groupname,
'' as companyname,
if((select folioschedules.roomid from folioschedules where folioid=roomblock.folioid limit 1)!='',
(select folioschedules.roomid from folioschedules where folioid=roomblock.folioid limit 1), 'NONE') as grouproom,
blockingdetails.roomid as room,
blockingdetails.blockfrom as blockfrom,
blockingdetails.blockto as blockto,
0 as totalPax,
(select fromdate from folio where folioid=roomblock.folioid) as groupArrivalDate,
(select todate from folio where folioid=roomblock.folioid) as groupDepartureDate,
fGetGroupAccountType(roomblock.folioid) as groupAccountType,
'BLOCKED' as `status`,
(select distinct `rooms`.`roomtypecode` AS `roomtypecode` from `rooms` where `rooms`.`roomid` = `room`) as roomType from roomblock, blockingdetails where roomblock.blockid=blockingdetails.blockid and date(blockingdetails.blockfrom)=pAuditDate;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetGroupExpectedCheckOut` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetGroupExpectedCheckOut`(pAuditDate date)
BEGIN
select distinct
folio.folioid,
if(foliotype='GROUP', folio.folioid, folio.masterfolio) as masterfolio,
foliotype,
groupname,
if(substr(folio.companyid,1,1)='G', fGetCompanyName(folio.companyid), fGetGuestName(folio.companyid)) as companyName,
if(foliotype='GROUP' and folioschedules.roomid!='', folioschedules.roomid, 'NONE') as grouproom,
folioschedules.roomid as room,
date(folioschedules.fromdate) as blockfrom,
date(folioschedules.todate) as blockto,
if(foliotype='DEPENDENT', fGetGroupTotalPax(folio.masterfolio), fGetGroupTotalPax(folio.folioid)) as totalPax,
if(foliotype='DEPENDENT', fGetGroupArrivalDate(folio.masterfolio), date_format(folio.fromdate,'%c/%d/%y')) as groupArrivalDate,
if(foliotype='DEPENDENT', fGetGroupDepartureDate(folio.masterfolio), date_format(folio.todate,'%c/%d/%y')) as groupDepartureDate,
if(foliotype='DEPENDENT', fGetGroupAccountType(folio.masterfolio), accounttype) as groupAccountType,
folio.status,
(select distinct roomtypecode from rooms where rooms.roomid=room) as roomtype
from folio left join folioschedules on (folio.folioid=folioschedules.folioid) where (foliotype='GROUP' or foliotype='DEPENDENT') and folio.status!='NO SHOW' and folio.status!='CHECKED OUT' and folio.status!='CANCELLED' and date(folioschedules.todate)=pAuditDate union all
select distinct
roomblock.folioid as folioid,
roomblock.folioid as masterfolio,
'DEPENDENT' as foliotype,
(select groupname from folio where folioid = roomblock.folioid) as groupname,
'' as companyname,
if((select folioschedules.roomid from folioschedules where folioid=roomblock.folioid limit 1)!='',
(select folioschedules.roomid from folioschedules where folioid=roomblock.folioid limit 1), 'NONE') as grouproom,
blockingdetails.roomid as room,
blockingdetails.blockfrom as blockfrom,
blockingdetails.blockto as blockto,
0 as totalPax,
(select date_format(fromdate,'%c/%d/%y') from folio where folioid=roomblock.folioid) as groupArrivalDate,
(select date_format(todate,'%c/%d/%y') from folio where folioid=roomblock.folioid) as groupDepartureDate,
fGetGroupAccountType(roomblock.folioid) as groupAccountType,
'BLOCKED' as `status`,
(select distinct `rooms`.`roomtypecode` AS `roomtypecode` from `rooms` where `rooms`.`roomid` = `room`) as roomType from roomblock, blockingdetails where roomblock.blockid=blockingdetails.blockid and date(blockingdetails.blockto)=pAuditDate;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetGroupIndividualFolios` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetGroupIndividualFolios`(
in photelid int(5)
)
BEGIN
Select 
guests.accountid as companyid,
folio.groupname,
concat(guests.lastname, ', ', guests.firstname) as companyname,
folioid
from 	
folio,guests
where 
guests.accountid = folio.companyid and
(folio.accountType!="PERSONAL") and 
`status` = 'CHECKED IN' and folio.hotelid = photelid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spgetgrouplist` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spgetgrouplist`(
in pHotelId int(4)
)
BEGIN
set sql_big_selects = 1;
select 
folio.folioid,
folio.groupname,
if(substring(folio.companyid,1,1)='G',fGetCompanyName(folio.companyid), fGetGuestName(folio.companyid)) as companyName,
folio.fromdate,
folio.todate,
sum(folioledger.balancenet) as Balance,
sum(folioledger.charges) as Charges,
fGetEventTotalRequiredRooms(folio.folioid) as RequiredRooms,
fGetEventTotalBlockedRooms(folio.folioid) as BlockedRooms,
folio.status,
folio.remarks
from
folio
left join folioledger on
folioledger.folioid = folio.folioid
where 
foliotype = 'GROUP' and
folio.hotelid = pHotelId and
folio.status != 'CANCELLED' and
folio.status != 'CHECKED OUT'
group by
folio.folioid
order by
folio.folioid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spgetgroupreservationlist` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spgetgroupreservationlist`(
in pHotelId int(4)
)
BEGIN
set sql_big_selects = 1;
select 
folio.folioid,
folio.groupname,
if(substring(folio.companyid,1,1)='G',fGetCompanyName(folio.companyid), fGetGuestName(folio.companyid)) as companyName,
folio.fromdate,
folio.todate,
sum(folioledger.balancenet) as Balance,
sum(folioledger.charges) as Charges,
fGetEventTotalRequiredRooms(folio.folioid) as RequiredRooms,
fGetEventTotalBlockedRooms(folio.folioid) as BlockedRooms,
folio.status,
folio.remarks,
'' as roomsBlocked
from
folio
left join folioledger on
folioledger.folioid = folio.folioid
where 
foliotype = 'GROUP' and
folio.hotelid = pHotelId and
folio.status != 'CHECKED IN' and
folio.status != 'CANCELLED' and
folio.status != 'CHECKED OUT'
group by
folio.folioid
order by
folio.folioid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetGroupRoomBlocks` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetGroupRoomBlocks`(pDate date)
BEGIN
select reason, roomid, blockfrom, blockto from roomblock, blockingdetails 
where roomblock.blockid=blockingdetails.blockid and folioid!=''
and pDate between date(blockFrom) and date(blockTo)
order by blockfrom;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetGuestByCriteria` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetGuestByCriteria`(
in plastname varchar(50),
in pfirstname varchar(50)
)
BEGIN
select 
LASTNAME,
FIRSTNAME,
MIDDLENAME,
TITLE,
accountid,
accountname,
sex,
street,
city,
country,
zip,
emailaddress,
citizenship,
passportid,
TelephoneNo,
MobileNo,
FaxNo,
guestImage,
noofvisits,
memo
from guests
where
firstname like pfirstname and
lastname like plastname
and stateflag <> 'DELETED';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetGuestFolioHistory` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetGuestFolioHistory`(
in pAccountID varchar(20),
in pHotelID int(5)
)
BEGIN
select *, fGetDriverName(folio.folioid) as driver
from folio
where 
if(foliotype='GROUP', folio.companyid = pAccountid, folio.accountid = pAccountid) and 
folio.hotelid= pHotelId and
folio.status!='CANCELLED' aND folio.status!='DELETED' and folio.status != 'REMOVED' and folio.status != 'NO SHOW'
union
select distinct folio.*, fGetDriverName(folio.folioid) as driver
from folio, folioledger
where 
folioledger.accountid = pAccountid and 
folio.hotelid= pHotelId and 
folio.status != 'CANCELLED' aND 
folio.status != 'DELETED' and
FOLIO.STATUS != 'REMOVED' AND
folio.status != 'NO SHOW' and
folioledger.folioid=folio.folioid and
folio.foliotype != 'DEPENDENT'
order by folioid desc
limit 0, 15;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetGuestFolioInfo` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetGuestFolioInfo`(
in pFolioId varchar(20),
in photelid int(5)
)
BEGIN
select 
guests.accountid,
concat(guests.firstname, " ",guests.lastname) as GuestName,
concat(guests.street," , ",guests.city," , ",guests.country) as GuestAddress,
folio.masterfolio,
folio.foliotype,
folio.companyid,
folio.status,
folio.remarks
from
folio
left join
guests on
guests.accountid = folio.accountid and
guests.hotelid = folio.hotelid
where
folio.folioid = pFolioId and
folio.hotelid = pHotelId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetGuestInfo` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetGuestInfo`(
in pfolioid varchar(20)
)
BEGIN
select 
folio.folioid,
date(folioschedules.fromdate) as ARRIVALDATE,
DATE(folioschedules.todate) as DEPARTUREDATE,
concat(folioschedules.roomid," ",folioschedules.roomtype) as ROOM,
folioschedules.roomid,folioschedules.roomtype,
folioschedules.RATE,
folioschedules.DAYS,
folio.noofadults,
folio.noofchild,
folio.updatedby,
guests.TITLE,
guests.LASTNAME,
guests.FIRSTNAME,
guests.MIDDLENAME,
guests.CITIZENSHIP,	
guests.PASSPORTID,
folio.source,
guests.TelephoneNo,
company.companyname,
folio.remarks,
concat(guests.street," ",guests.city," ", guests.country, " ",guests.zip) as ADDRESS
from
folioschedules,
guests,
folio left join company on company.companyid = folio.companyid
where
guests.accountid = folio.accountid and
folioschedules.folioid = if(folio.folioType = 'JOINER',folio.masterFolio ,folio.folioid) and
folio.folioid = pfolioid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetGuestLatestCompanyId` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetGuestLatestCompanyId`(
pAccountId varchar(20),
pHotelId int(4)
)
BEGIN
select 
companyID 
from folio 
where 
accountID = pAccountId and 
companyID != "" and
hotelId = pHotelId
order by folioid desc limit 0,1;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetGuestListDefaults` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetGuestListDefaults`()
BEGIN
select * 
from guestlistdefaults;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetGuestListSummary` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetGuestListSummary`(
in pAuditDate date
)
BEGIN
(select 
`status`, 
count(distinct folioschedules.folioid) as Total
from folio
left join folioschedules 
on folioschedules.folioid = folio.folioid
where
(foliotype <> 'JOINER' and foliotype <> 'GROUP') and
roomtype != 'FUNCTION' and
(`status` = 'CONFIRMED' or
`status` = 'TENTATIVE' or
`status` = 'WAIT LIST')
group by `status`
)UNION
(select 
`status`, 
count(distinct folioschedules.folioid) as Total
from folio
left join folioschedules 
on (folioschedules.folioid = folio.folioid)
where
(foliotype <> 'JOINER' and foliotype <> 'GROUP') and
roomtype != 'FUNCTION' and
(`status` = 'CHECKED IN') AND
pAuditDate >= date(folioschedules.fromdate) and pAuditDate <= date(folioschedules.todate)
group by `status`
)
UNION(
select 
'EXPECTED CHECK-IN' as `status`, 
count(distinct folio.folioid)  as Total
from folio
where
(
foliotype <> 'JOINER' and foliotype <> 'GROUP') and
date(folio.fromdate) = pAuditDate and
(folio.status = 'CONFIRMED' or
folio.status = 'TENTATIVE')
group by 'EXPECTED CHECK-IN'
)UNION(
select 
'EXPECTED CHECK-OUT' as `status`, 
count(distinct folio.folioid)  as Total
from folio
where
(
foliotype <> 'JOINER') and
date(folio.toDate) = pAuditDate and
(folio.status = 'CHECKED IN')
group by 
'EXPECTED CHECK-OUT'
)UNION(
select 
`status`, 
count(distinct folio.folioid) as Total 
from folio
where
(
foliotype <> 'JOINER') and
(`status` = 'CHECKED OUT')
and
date(folio.departuredate) = pAuditDate
group by `status`)
UNION(
select 
`status`, 
count(distinct folio.folioid) as Total 
from folio
where
(
foliotype <> 'JOINER') and
(`status` = 'CANCELLED' or
`status` = 'NO SHOW')
and
date(folio.updatetime) = pAuditDate
group by `status`);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetGuestPrivelege` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetGuestPrivelege`(
in pAccountid varchar(20),
in photelid int(5)
)
BEGIN
select
trancode,
basis,
percentoff,
amountoff
from
guestprivilegedetails,
guestprivilegeheader
where
guestprivilegedetails.privilegeid = guestprivilegeheader.privilegeid and
guestprivilegedetails.hotelid = guestprivilegeheader.hotelid and
guestprivilegeheader.companyid = pAccountid and
guestprivilegeheader.hotelid = photelid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetGuestPrivilege` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetGuestPrivilege`(in pAccountId varchar(20),in pHotelId int(5))
BEGIN
Select *,transactioncode.memo from guestprivilegeheader,guestprivilegedetails,transactioncode where guestPrivilegeheader.accountid=pAccountId and guestPrivilegeheader.hotelId=pHotelId and guestPrivilegeheader.privilegeid=guestprivilegedetails.privilegeid and guestprivilegedetails.trancode=transactioncode.trancode;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetGuestRecord` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetGuestRecord`(
in pAccountid varchar(12),
in pHotelID int(5)
)
BEGIN
set sql_big_selects = 1;
Select * from Guests force index(primary) where accountid=pAccountid and HotelID=pHotelID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetGuestRefName` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetGuestRefName`(
in pLastname varchar(50),
in pFirstname varchar(50),
in pMiddlename varchar(50),
in photelid int(5)
)
BEGIN
select *
from guests
where
Lastname=pLastname and
Firstname=pFirstname and
Middlename=pMiddlename and
hotelid = photelid
and stateflag = 'ACTIVE';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetGuestsList` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetGuestsList`(
in pHotelID int(4)
)
BEGIN
set sql_big_selects=1;
select 
folio.folioid,
guests.accountID,
concat(guests.lastname,', ',guests.firstname) as guestName,
guests.concierge,
guests.remark,
guests.ACCOUNT_TYPE,
guests.THRESHOLD_VALUE,
folio.groupname,
company.companyName,
folio.fromdate,
folio.todate,
sum(folioledger.balancenet) as Balance,
folio.status,
folio.remarks,	
folio.foliotype,
folio.masterfolio,
concat(folio.noofadults,'/',folio.noofchild) as Pax,
folio.folioETA,
folio.folioETD,
folio.REASON_FOR_CANCEL,
folio.sales_executive,
folio.createdBy,
folio.updateTime
from
folio force index(folioid)
left join folioledger on
folioledger.folioid = folio.folioid
left join company on
company.companyid = folio.companyid
left join guests on
guests.accountid = folio.accountid
where 
foliotype <> 'GROUP'
and folio.hotelid = pHotelID
group by
folio.folioid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetGuestsToTransfer` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetGuestsToTransfer`()
BEGIN
select 
folio.folioid,
concat(guests.lastname,", ",guests.firstname) as GUESTNAME,
folioschedules.roomid,
folioschedules.type
from
folio,
guests,
folioschedules
where
guests.accountid = folio.accountid and
folioschedules.folioid = folio.folioid and 
exists(
select * 
from 
folioschedules 
where departuredate = curdate()) 
and
folio.status = 'CHECKED IN' and
folioschedules.arrivaldate = adddate(curdate(),1);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetHKForecast` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetHKForecast`(
pFromDate datetime,
pToDate datetime		
)
BEGIN
select EVENTDATE,count(*) as TotalRooms,count(EventType) as TotalCheckOut from RoomEvents
WHERE date(EVENTDATE) between pFromDate and pToDate
group by date(EVENTDATE);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetHKForecastDetail` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetHKForecastDetail`(
pFromDate datetime,
pToDate datetime
)
BEGIN
select EVENTDATE,RoomID,EventType from RoomEvents
WHERE date(EVENTDATE) between pFromDate and pToDate;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetHK_Housekeepers` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetHK_Housekeepers`()
BEGIN
select CONCAT(housekeeperid,'-',lastname,',',firstname) as HouseKeeper from hk_housekeepers where stateflag='ACTIVE';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetHouseKeepingLogs` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetHouseKeepingLogs`()
BEGIN
select Hk_Date,roomid, concat(housekeepers.housekeeperid,'-',housekeepers.`firstname`,' ',housekeepers.`lastname`) as housekeeper, TransID, Time from `hk_log`,`housekeepers`
WHERE 
(housekeepers.`housekeeperid`=hk_log.`housekeeperid` and TransID ='FINISH' and parseFlag=0) or 		(housekeepers.`housekeeperid`=hk_log.`housekeeperid` and parseFlag=0);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetHouseKeeping_Logs` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetHouseKeeping_Logs`(IN pStatus VARCHAR(30), IN pDate DATE)
BEGIN
if pStatus='ALL' then
(
Select rooms.`roomid` as RoomId,rooms.roomtypecode as RoomType,starttime as StartTime,endtime as EndTime,
elapsedtime as Duration,concat(hk_housekeepers.housekeeperid,'-',lastname,', ',firstname) as Housekeeper,cleaningstatus,rooms.stateflag
from
rooms left join hk_housekeepingjobs on  hk_housekeepingjobs.`roomid`=rooms.`roomid`
left join hk_housekeepers on hk_housekeepers.housekeeperid=hk_housekeepingjobs.housekeeperid
WHERE housekeepingdate =pDate and rooms.stateflag!='DELETED'
)
Union
(Select rooms.`roomid` as RoomId,rooms.roomtypecode as RoomType,'' as StartTime,'' as EndTime,
'' as Duration,'' as Housekeeper,cleaningstatus,rooms.stateflag
from rooms
WHERE  rooms.`roomid` not in(Select roomid from `hk_housekeepingjobs` WHERE housekeepingdate=pDate) and rooms.stateflag!='DELETED'
);
else
(
Select rooms.`roomid` as RoomId,rooms.roomtypecode as RoomType,starttime as StartTime,endtime as EndTime,
elapsedtime as Duration,concat(hk_housekeepers.housekeeperid,'-',lastname,', ',firstname) as Housekeeper,cleaningstatus,rooms.stateflag
from
rooms
left join hk_housekeepingjobs on  hk_housekeepingjobs.`roomid`=rooms.`roomid`
left join hk_housekeepers on hk_housekeepers.housekeeperid=hk_housekeepingjobs.housekeeperid
WHERE cleaningstatus=pStatus and housekeepingdate =pDate and rooms.stateflag!='DELETED'
)
UNION
(Select rooms.`roomid` as RoomId,rooms.roomtypecode as RoomType,'' as StartTime,'' as EndTime,
'' as Duration,'' as Housekeeper,cleaningstatus,rooms.stateflag
from rooms
WHERE cleaningstatus=pStatus and rooms.`roomid` not in(Select roomid from `hk_housekeepingjobs` WHERE housekeepingdate=pDate) and rooms.stateflag!='DELETED'
)
;
end if;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetIndividualFolios` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetIndividualFolios`(
in photelid int(5)
)
BEGIN
Select 
concat(guests.lastname," , ",guests.firstname) as GuestName,
folioid,
foliotype,
fromdate,
todate,
(noofAdults+noofChild) as NoOfGuest, 
companyid,
groupname,
masterfolio,
folio.accountid,
guests.threshold_value
from 	
folio,guests 
where 
guests.accountid = folio.accountid and
folio.folioType != "GROUP" and folio.foliotype != 'JOINER' and 
`status` = 'CHECKED IN' and folio.hotelid = photelid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetIndividualRoomingList` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetIndividualRoomingList`(pAccountId varchar(30))
BEGIN
select distinct folio.folioid,
if(foliotype='GROUP', folio.folioid, masterfolio) as groupFolio,
foliotype,
groupname,
if(substring(folio.companyid,1,1)='G',fGetCompanyName(folio.companyid), fGetGuestName(folio.companyid)) as companyName,
fGetGuestName(folio.accountid) as accountName,
noOfAdults,
folioschedules.roomid,
folioschedules.roomtype,
date(folio.fromdate) as fromdate,
date(folio.todate) as todate
from folio left join folioschedules on folio.folioid=folioschedules.folioid where foliotype != 'GROUP' and 
folio.status!='CANCELLED' and folio.status!='NO SHOW' and folio.status!='CHECKED OUT' and folio.companyid=pAccountId
order by roomid, folioid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetIndividualRoomsToCharge` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetIndividualRoomsToCharge`(
in pDate date,
in pHotelId int(5)
)
BEGIN
select
eventid,
roomid,
max(roomrate) as roomrate
from 	
roomevents, folio
where 	
eventDate = pDate and
eventType = 'IN HOUSE' and
transferflag = '0' and
roomevents.hotelid = photelid and
(chargeflag='0' or eventid not in (select folioid from foliotransactions where transactioncode='1000' and date(transactiondate)=pDate and foliotransactions.status<>'VOID' and foliotransactions.acctside<>'CREDIT' and adjustmentFlag<>'1'))
and folio.folioid=roomevents.eventid and folio.foliotype!='GROUP'
group by eventid order by roomid;
end */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetItem` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetItem`(
in pItem_ID varchar(20),
in pResto_id int(10)
)
BEGIN
Select *,maingroup_id from `item`, `group`
where item_id=pItem_ID and item.group_id=group.group_id
AND ITEM.RESTO_ID=pResto_id;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetLastPocessedAuditDate` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetLastPocessedAuditDate`(
)
BEGIN
Select SystemDate from auditdatetable where  Meridian="PROCESSED" order by SystemDate DESC limit 0,1;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetLedgerType` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetLedgerType`( pTrancode varchar(11))
BEGIN
select ledger from transactioncode where trancode=ptrancode;	
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetLoggedUserPersonalInfo` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetLoggedUserPersonalInfo`(
in puserid varchar(20)
)
BEGIN
select 
UserId,
`Password`,
EmployeeIdNo,
LastName,
FirstName,
Department,
Designation,
Stateflag,
HotelId   
from users
where
userid = puserid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetLookUpValue` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetLookUpValue`(
in pCategory varchar(25)
)
BEGIN
select Code,Description from Lookuptable where category=pCategory;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetMainItemGroup` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetMainItemGroup`(pGroupID varchar(30))
BEGIN
select maingroup_id from `group` where group_id=pGroupID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetMealDetails` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetMealDetails`(pMealID bigint(20), pMealDate date, pFolioID varchar(30))
BEGIN
select event_meal_details.mealID, event_meal_details.menuCode, event_meal_details.menuItemCode, event_meal_details.description, event_meal_details.remarks, event_meal_details.price from event_meal_details, event_meal_requirements where event_meal_details.mealID=pMealID and event_meal_details.mealID=event_meal_requirements.mealID and date(event_meal_requirements.eventDate)=pMealDate and folioid=pFolioID order by event_meal_details.id, event_meal_details.description;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetMealHeader` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetMealHeader`(pFolioID varchar(20), pEventDate date)
BEGIN
select * from event_meal_header where folioID=pFolioID and date(eventDate)=pEventDate;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetMealHeaderDetails` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetMealHeaderDetails`(pFolioID varchar(20), pMealType varchar(30))
BEGIN
select * from event_meal_header where folioID=pFolioID and mealType=pMealType;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spgetMealItemsForMenu` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spgetMealItemsForMenu`(pMenuID varchar(30))
BEGIN
select distinct meal_menu.description as menu_description, meal_menu.menuID, meal_items.description as item_description, meal_items.itemID from meal_menu, meal_items, meal_menu_detail where meal_menu.`status`='active' and meal_items.`status`='active' and meal_menu.menuID=meal_menu_detail.menuID and meal_menu_detail.itemID=meal_items.itemID and cast(meal_menu.menuID as char)=pMenuID order by meal_menu_detail.id, meal_menu.description, meal_items.description;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetMealMenu` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetMealMenu`()
BEGIN
select * from meal_menu where `status`='active' order by description;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetMealMenuItem` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetMealMenuItem`()
BEGIN
select distinct * from meal_items where meal_items.`status`='active' order by description;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetMenu` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetMenu`(
in pMenu_id varchar(10)
)
BEGIN
Select * from `menu`
where menu_id=pMenu_id;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetMenus` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetMenus`(
pMenu varchar(30) 
)
BEGIN
Select * from Menus where menu=pMenu order by menu;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetMonthlyAverageRoomRate` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetMonthlyAverageRoomRate`(
in pHotelId int(2),
in pMonth int(2),
in pYear int(4)
)
BEGIN
select  sum(rate) as TOTALRATE, 
count(distinct folioschedules.folioid) as TOTALFOLIO,
sum(rate)/count(distinct folioschedules.folioid) as AverageRoomRate
from folioschedules
left join folio on folio.folioid = folioschedules.folioid
where
(folio.status = "CHECKED IN" or
folio.status = "CHECKED OUT" or
folio.status = "CONFIRMED" or
folio.status = "TENTATIVE") and
(month(folioschedules.fromdate) = pMonth and year(folioschedules.fromDate) = pYear) or
(month(folioschedules.toDate) = pMonth and year(folioschedules.toDate) = pYear);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetMonthlyAverageRoomRatePerGuest` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetMonthlyAverageRoomRatePerGuest`(
in pHotelId int(1),
in pMonth int(2),
in pYear int(4)
)
BEGIN
select  sum(rate) as TOTALRATE, 
sum(folio.noofadults) as TOTALFOLIO,
sum(rate)/sum(folio.noofadults) as AverageRoomRate
from folioschedules
left join folio on folio.folioid = folioschedules.folioid
where
(folio.status = "CHECKED IN" or
folio.status = "CHECKED OUT" or
folio.status = "CONFIRMED" or
folio.status = "TENTATIVE") and
(
(month(folioschedules.fromdate) = pMonth and 
year(folioschedules.fromdate) = pYear ) or
(month(folioschedules.todate) = pMonth and 
year(folioschedules.todate) = pYear )
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetMonthlyCancelledNoShowReservations` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetMonthlyCancelledNoShowReservations`(
in pHotelId int(4),
in pMonth int(4),
in pYear int(4)
)
BEGIN
select 
folio.status,
count(if(folio.foliotype != "SHARE",folioschedules.roomid,null)) as Rooms
from 
folio,
folioschedules 
where 
folio.hotelid = pHotelId and
folio.folioid = folioschedules.folioid and
(folio.status = 'CANCELLED' or
folio.status = 'NO SHOW') and 
month(folioschedules.fromdate) = pMonth and
year(folioschedules.fromdate) = pYear 
group by folio.status,month(folioschedules.fromdate);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetMonthlyGuestAR` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetMonthlyGuestAR`(
in pHotelId int(4),
in pDate datetime
)
BEGIN
select
foliotransactions.postingdate,
sum(if(foliotransactions.acctside='DEBIT',baseamount,0)) - sum(if(acctside='CREDIT',baseamount,0)) as BALANCE
from
foliotransactions 
left join folio on folio.folioid = foliotransactions.folioid
where
foliotransactions.`status` = 'ACTIVE' and
foliotransactions.postingdate <= concat(last_day(pDate),' ',time(pDate))  and
foliotransactions.hotelid = pHotelId
group by
date(concat(last_day(pDate),' ',time(pDate)));
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetMonthlyHotelRevenue` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetMonthlyHotelRevenue`(pStartMonth int, pEndMonth int, pStartYear int, pEndYear int)
BEGIN
select
transactionDate as dateOfTransaction,
concat(monthname(transactiondate), ' ', year(transactiondate)) as transactionDate,
sum(header1) as header1,
sum(header2) as header2,
sum(header3) as header3,
sum(header4) as header4,
sum(header5)as header5,
sum(header6)as header6,
sum(header7)as header7,
sum(header8)as header8,
sum(header9)as header9,
sum(header10)as header10,
sum(header11)as header11,
sum(header12)as header12,
sum(header13)as header13,
sum(header14)as header14,
sum(header15)as header15,
sum(header16)as header16,
sum(header17)as header17,
sum(header18)as header18,
sum(header19)as header19,
sum(header20)as header20,
sum(header21)as header21,
sum(header22)as header22,
sum(header23)as header23,
sum(header24)as header24,
sum(header25)as header25,
sum(header26)as header26,
sum(header27)as header27,
sum(header28)as header28,
sum(header29)as header29,
sum(header30)as header30,
sum(header31)as header31,
sum(header32)as header32,
sum(header33)as header33,
sum(header34)as header34,
sum(header35)as header35,
sum(header36)as header36,
sum(header37)as header37,
sum(header38)as header38,
sum(header39)as header39,
sum(header40)as header40,
sum(header41)as header41,
sum(header42)as header42,
sum(header43)as header43,
sum(header44)as header44,
sum(header45)as header45,
sum(header46)as header46,
sum(header47)as header47,
sum(header48)as header48,
sum(header49)as header49,
sum(header50)as header50,
sum(header51)as header51,
sum(header52)as header52,
sum(header53)as header53,
sum(header54)as header54,
sum(header55)as header55,
sum(header56)as header56,
sum(header57)as header57,
sum(header58)as header58,
sum(header59)as header59,
sum(header60)as header60,
sum(header61)as header61,
sum(header62)as header62,
sum(header63)as header63,
sum(header64)as header64,
sum(header65)as header65,
sum(header66)as header66,
sum(header67)as header67,
sum(header68)as header68,
sum(header69)as header69,
sum(header70)as header70,
sum(header71)as header71,
sum(header72)as header72,
sum(header73)as header73,
sum(header74)as header74,
sum(header75)as header75,
sum(header76)as header76,
sum(header77)as header77,
sum(header78)as header78,
sum(header79)as header79,
sum(header80)as header80,
sum(header81)as header81,
sum(header82)as header82,
sum(header83)as header83,
sum(header84)as header84,
sum(header85)as header85,
sum(header86)as header86,
sum(header87)as header87,
sum(header88)as header88,
sum(header89)as header89,
sum(header90)as header90,
sum(header91)as header91,
sum(header92)as header92,
sum(header93)as header93,
sum(header94)as header94,
sum(header95)as header95,
sum(header96)as header96,
sum(header97)as header97,
sum(header98)as header98,
sum(header99)as header99,
sum(header100)as header100,
sum(header101)as header101,
sum(header102)as header102,
sum(header103)as header103,
sum(header104)as header104,
sum(header105)as header105,
sum(header106)as header106,
sum(header107)as header107,
sum(header108)as header108,
sum(header109)as header109,
sum(header110)as header110,
sum(header111)as header111,
sum(header112)as header112,
sum(header113)as header113,
sum(header114)as header114,
sum(header115)as header115,
sum(header116)as header116,
sum(header117)as header117,
sum(header118)as header118,
sum(header119)as header119,
sum(header120)as header120
from
(select * from hotelrevenue) as hotelrevenue where month(transactiondate) between pStartMonth and pEndMonth and year(transactiondate) between pStartYear and pEndYear group by concat(monthname(transactiondate), ' ', year(transactiondate)) order by dateOfTransaction;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetMonthlyReservationsByAccountType` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetMonthlyReservationsByAccountType`(
in pHotelId int(4),
in pMonth int(4),
in pYear int(4)
)
BEGIN
select 
folio.accounttype,
count(if(folio.foliotype != "SHARE",folioschedules.roomid,null)) as Rooms
from 
folio,
folioschedules 
where 
folio.hotelid = pHotelId and
folio.folioid = folioschedules.folioid and
month(folioschedules.fromdate) = pMonth and
year(folioschedules.fromdate) = pYear 
group by folio.accounttype,month(folioschedules.fromdate);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetMonthlyReservationSummaryBySource` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetMonthlyReservationSummaryBySource`(
in pHotelId int(4),
in pMonth int(2),
in pYear int(4)
)
BEGIN
select 
if(folio.`source`= "WALK IN","WALK IN","RESERVE") as SOURCE,
count(*)  as Total
from 
folio 
where (`status` = 'CHECKED IN' or `status` = 'CHECKED OUT' or 
`status` = 'CONFIRMED') and
month(folio.fromdate) = pMonth and year(folio.fromDate) = pYear
and hotelId = pHotelId
group by folio.`source`
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetMonthlyTotalFunctions` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetMonthlyTotalFunctions`(
in pHotelId int(4),
in pMonth int(2),
in pYear int(4)
)
BEGIN
select *
from folio 
where
(folio.status = 'CHECKED IN' or folio.status = 'CHECKED OUT') and
foliotype = 'GROUP' and 
((month(fromdate) = pMonth and
year(fromdate) = pYear) or
(month(todate) = pMonth and
year(todate) = pYear))
and
hotelid = pHotelId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetMonthlyTotalRoomStayOver` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetMonthlyTotalRoomStayOver`(
in pHotelId int(4),
in pMonth int(2),
in pYear int(4)
)
BEGIN
select count(*) from folio 
where
(
(month(fromDate) = pMonth and
year(fromDate) = pYear) or
(month(toDate) = pMonth and
year(toDate) = pYear)
) and
(folio.status = 'CHECKED IN' or folio.status = 'CHECKED OUT') and
foliotype = 'INDIVIDUAL' and
folio.hotelId = pHotelId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetMonthlyWalkinCorporateFolio` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetMonthlyWalkinCorporateFolio`(
in pHotelId int(5),
in pMonth int(2),
in pYear int(4)
)
BEGIN
select 
count(*) as Total,
accounttype
from folio 
left join guests on guests.accountid = folio.accountid
where 
(`status` = 'CHECKED IN' or
`status` = 'CHECKED OUT' or
`status` = 'CONFIRMED' or
`status` = 'TENTATIVE') and
folio.accounttype = 'CORPORATE' and
month(folio.fromdate) = pMonth and
year(folio.fromdate) = pYear and
folio.source = 'WALK IN' and
folio.hotelid = pHotelId
group by folio.accounttype;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetMonthlyWalkinPersonalFolio` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetMonthlyWalkinPersonalFolio`(
in pHotelId int(5),
in pMonth int(2),
in pYear int(4)
)
BEGIN
select 
count(*) as Total,
if(date(guests.createtime) = date(folio.createtime),"NEW","OLD") as guestType
from folio 
left join guests on guests.accountid = folio.accountid
where 
(`status` = 'CHECKED IN' or
`status` = 'CHECKED OUT' or
`status` = 'CONFIRMED' or
`status` = 'TENTATIVE') and
folio.accounttype = "PERSONAL" and
month(folio.fromdate) = pMonth and
year(folio.fromdate) = pYear and
folio.source = 'WALK IN' and
folio.hotelId = pHotelId
group by guestType;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetName` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetName`(
in pAccountID varchar(20),photelID int(5)
)
BEGIN
select concat(firstname," ",lastname) from guests where accountid=pAccountID and hotelid=pHOtelID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetOutOfOrderRooms` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetOutOfOrderRooms`()
BEGIN
select roomid, roomtypecode
from
rooms
where
stateflag = 'OUT OF ORDER';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetOutOfOrderRoomsReport` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetOutOfOrderRoomsReport`()
BEGIN
select roomevents.roomid,rooms.roomtypecode,rooms.stateflag 
from roomevents,
rooms
where
roomevents.roomid = rooms.roomid 
and
roomevents.eventtype = 'ENGINEERING JOB' 
and 
roomevents.date = date(adddate(now(),1));
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetPackageDetails` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetPackageDetails`(in pPackageID varchar(20))
BEGIN
select distinct packageDetails.transactionCOde,packageDetails.percentOff,packageDetails.amountOff,transactionCode.Memo,packagedetails.basis,packageHeader.daysapplied from packageDetails,transactioncode,packageheader where packageheader.packageid = packagedetails.packageid and packagedetails.packageid=pPackageID and packagedetails.transactioncode=transactioncode.trancode;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetPackageHeaderInfo` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetPackageHeaderInfo`(
in pPackageId varchar(20),
in pHotelId int(5)
)
BEGIN
Select * FROM packageHeader where PackageId=pPackageId and hotelID =pHOtelID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetPackages` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetPackages`(in pHotelID int(5))
BEGIN
select * from packageHeader where hotelID=pHotelID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetPayments` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetPayments`(
in pFolioID varchar(20), 
in photelid int(5),
in pSubFolio varchar(1)
)
BEGIN
select sum(netamount),subfolio
from 
folioTransactions 
where 
acctside = 'CREDIT' and
folioId= pFolioId and 
hotelid = pHotelId AND
`status` = 'ACTIVE' and
subfolio = pSubFolio
group by subfolio;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetPercentSrvCharge` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetPercentSrvCharge`(
ptrancode varchar(20),
pdeptid varchar(20),
pHotelid int(5)
)
BEGIN
select percentSrvChrg from servicecharge
where trancode=ptrancode and deptid = pdeptid and hotelid=pHotelid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetRateAmount` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetRateAmount`(
in pRateTypeCode varchar(100),
in pRoomTypeCode varchar(50)
)
BEGIN
select rateamount from ratetypes where RATECODE=pRateTypeCode and roomtypecode=pRoomTypeCode;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetRateType` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetRateType`(
pRoomType varchar(80),
pHotelId int(2)
)
BEGIN
select ratecode from ratetypes where roomtypecode=pRoomType and HotelID=pHotelId
order by ratecode desc, rateamount desc, hasbreakfast desc;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetRateTypes` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetRateTypes`()
BEGIN
Select * from RATECODES order by ratecode desc;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetRecurringCharge` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetRecurringCharge`(
in pFolioID varchar(20),
in pHOtelId int(5))
BEGIN
Select * 
from 
foliorecurringcharge 
where folioid=pFolioID and hotelID=pHOtelID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetReferenceTime` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetReferenceTime`()
BEGIN
Select reftime,`min`,`max` from referencetime;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetRequirements` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetRequirements`(pRequirementCode varchar(40))
BEGIN
select * from requirement_details where requirementCode=pRequirementCode;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetRoleMenus` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetRoleMenus`(
in pRoleName varchar(30),
in pHotelId int(5)
)
BEGIN
select * 
from 
rolemenu 
where
rolename = pRoleName and
hotelid = pHotelId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetRolePrivileges` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetRolePrivileges`(
in pRoleName varchar(50),
in pHotelId int(4)
)
BEGIN
select * from role_privileges
where roleName = pRoleName and
hotelId = pHotelId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetRoleSystemPrivileges` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetRoleSystemPrivileges`(
in pRoleName varchar(50)
)
BEGIN
select * from `role_privileges`
where 
roleName = pRoleName;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetRoleUIPrivileges` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetRoleUIPrivileges`(
in pRoleName varchar(100)
)
BEGIN
select * from 
role_ui_privileges
where
roleName = pRoleName and
statusFlag = 'ACTIVE';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetRoom` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetRoom`(
in pRoomid varchar(20),
in photelid int(5)
)
BEGIN
select *
from rooms
where
stateflag != 'DELETED' and 
roomid = pRoomid and 
hotelid = photelid
order by roomid
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetRoomAmenity` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetRoomAmenity`(in pRoomID int(11))
BEGIN
Select AmenityId from RoomAmenities where RoomId =pRoomID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetRoomAndTypeOccupied` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetRoomAndTypeOccupied`(in pFrom date,
in pTo date,
in pHOtelID int(5)
)
BEGIN
select distinct roomevents.roomid,rooms.roomtypecode from 
roomevents,rooms
where roomevents.roomid=rooms.roomid and 
(date(roomevents.eventdate) > pFrom and date(roomevents.eventdate) 
<pTo) and !(roomevents.eventtype = 'CHECKED OUT' or roomevents.eventtype = 'NO SHOW'
or roomevents.eventtype ='CANCELLED') and rooms.roomtypecode!='FUNCTION' 
union
select folioschedules.roomid, folioschedules.roomtype as roomtypecode from folioschedules, folio where ((date(folioschedules.fromdate)=pFrom and date(folioschedules.todate)=pTo) or pFrom between date(folioschedules.fromdate) and date(folioschedules.todate)) and folioschedules.folioid=folio.folioid and !(folio.status='CHECKED OUT' or folio.status='NO SHOW' or folio.status='CANCELLED' or folio.status='REMOVED' or folio.status='DELETED') and folioschedules.roomtype!='FUNCTION' and (date(folioschedules.fromDate)<pTo and date(folioschedules.toDate)>pFrom) and folioschedules.roomid!=''
union
select engineeringjobs.roomid, rooms.roomtypecode from engineeringjobs, rooms where engineeringjobs.roomid=rooms.roomid and ((date(engineeringjobs.startdate)=pFrom and date(engineeringjobs.enddate)=pTo) or (pFrom > date(engineeringjobs.startdate) and pFrom < date(engineeringjobs.enddate)))
order by roomid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetRoomAndTypeOccupiedOrig` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetRoomAndTypeOccupiedOrig`(in pFrom date,
in pTo date,
in pHOtelID int(5)
)
BEGIN
select distinct roomevents.roomid,rooms.roomtypecode from 
roomevents,rooms
where roomevents.roomid=rooms.roomid and 
(date(roomevents.eventdate) >=pFrom and date(roomevents.eventdate) 
<pTo) and !(roomevents.eventtype = 'CHECKED OUT' or roomevents.eventtype = 'NO SHOW'
or roomevents.eventtype ='CANCELLED');
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetRoomBlockInfoById` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetRoomBlockInfoById`(
in pBlockId int(11)
)
BEGIN
select blockingdetails.blockid, blockingdetails.roomid, blockingdetails.blockfrom, blockingdetails.blockto, roomblock.reason, roomblock.folioID
from blockingdetails
left join roomblock on roomblock.blockid = blockingdetails.blockid
where
blockingdetails.blockid = pBlockId union
select blockingdetails.blockid, blockingdetails.roomid, blockingdetails.blockfrom, blockingdetails.blockto, roomblock.reason, roomblock.folioid
from blockingdetails left join roomblock on roomblock.blockid = blockingdetails.blockid where roomblock.folioid=(select folioid from roomblock where blockid=pBlockID and folioid!='') union
select pBlockId as blockid, folioschedules.roomid, date(folioschedules.fromDate) as blockfrom, date(folioschedules.toDate) as blockto, (select reason from roomblock where blockid=pBlockId) as reason, folio.masterfolio from folioschedules, folio where folio.folioid=folioschedules.folioid and folio.masterfolio=(select folioid from roomblock where blockid=pBlockID and folioid!='') and folio.status!='CANCELLED' and folio.status!='DELETED' and folio.STATUS!='NO SHOW' and folio.status!='REMOVED';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetRoomBlocksConflict` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetRoomBlocksConflict`(
in pFrom date,
in pTo date,
in pRoom varchar(1000),
in pHOtelID int(5)
)
BEGIN
select  distinct roomevents.roomid from 
roomevents,rooms
where roomevents.roomid=rooms.roomid and 
(date(roomevents.eventdate) >pFrom and date(roomevents.eventdate) 
<=pTo) and 
!(roomevents.eventtype='CHECKED OUT' or roomevents.eventtype='NO SHOW' or roomevents.eventtype='CANCELLED')and roomevents.roomid in (pRoom)
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetRoomCharges` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetRoomCharges`(
)
BEGIN
select 	
folioschedules.folioid,
folio.masterfolio,
roomevents.roomid,
folioschedules.rate,
transactioncode.trancode,
transactioncode.govtTax,
transactioncode.serviceCharge,
transactioncode.LocalTax 
from 	
folio,
folioschedules,
transactioncode,
roomevents
where 
folio.folioid = folioschedules.folioid
and 	transactioncode.memo = 'ROOM CHARGE'
and	roomevents.date = curdate()
and 	roomevents.eventtype = 'IN HOUSE' 
and 	folioschedules.folioid = roomevents.eventid 
and 	folioschedules.roomid = roomevents.roomid		
and	roomevents.chargeflag = 0;
end */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetRoomChargeTranCode` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetRoomChargeTranCode`(
in pHotelId int(5)
)
BEGIN
select * 
from 
transactioncode
where
hotelid = pHotelId and
(memo = 'ROOM CHARGE' or memo = 'ROOM RATE' or memo = 'ROOM CHARGES') and
stateflag = 'ACTIVE';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetRoomCleaningStatus` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetRoomCleaningStatus`(
in pHotelId int(4),
in pRoomId varchar(50)
)
BEGIN
select cleaningstatus from rooms
where roomid = pRoomId and hotelid = pHotelId and
roomtypecode != 'FUNCTION';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetRoomEvent` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetRoomEvent`(
in pEventNo int(5),
in pHotelid int(5)
)
BEGIN
select * from roomevents
where
eventno = pEventNo and
hotelid = pHotelid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetRoomEventByRoomForAvailability` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetRoomEventByRoomForAvailability`(
in pDate date,
in pHotelId int(4),
in pRoomId varchar(20)
)
BEGIN
select rooms.roomid,
if(roomevents.eventtype is null,"",roomevents.eventtype) as eventtype
from rooms force index(PRIMARY) left join roomevents on roomevents.roomid = rooms.roomid
and roomevents.eventdate = pDate
where rooms.hotelid = pHotelId
and rooms.roomid = pRoomId
order by rooms.roomtypecode;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetRoomEvents` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetRoomEvents`(
in pEventID int(11)
)
BEGIN
Select * from roomevents where eventid=pEventID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetRoomEventsFolioId` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetRoomEventsFolioId`(
in pRoomNo varchar(20),
in pEventDate date,
in pEventType varchar(50),
in pHotelId int(4)
)
BEGIN
select eventid,
folio.fromdate,
folio.todate
from roomevents 
left join folio on folio.folioid = roomevents.eventid
where 
roomid = pRoomNo
and eventdate = pEventDate 
and eventtype = pEventType
and roomevents.hotelId = pHotelId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetRoomHistory` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetRoomHistory`()
BEGIN
select folio.folioid,
folio.status,
folioschedules.roomid,
folioschedules.fromdate,
folioschedules.todate,
folioschedules.roomtype,
folioschedules.ratetype,
folioschedules.rate,
folio.remarks,
if(foliotype='GROUP', if(substring(folio.companyid,1,1)='G',fGetCompanyName(folio.companyid), fGetGuestName(folio.companyid)), fGetGuestName(folio.accountid)) as GuestsName
from
folio left join folioschedules on folioschedules.folioid = folio.folioid
where
folio.status = 'CHECKED OUT' or folio.status = 'CHECKED IN'
or folio.status = 'CONFIRMED'
order by
folioschedules.roomid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetRoomIDs` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetRoomIDs`(
in photelid int(5)
)
BEGIN
select RoomID
from rooms
where
stateflag != 'DELETED' and 
hotelid = photelid
order by roomid
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetRoomingList` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetRoomingList`(pFolioid varchar(30))
BEGIN
select 
folio.folioid,
if(foliotype='GROUP', folio.folioid, masterfolio) as groupFolio,
foliotype,
groupname,
if(substring(folio.companyid,1,1)='G',fGetCompanyName(folio.companyid), fGetGuestName(folio.companyid)) as companyName,
fGetGuestName(folio.accountid) as accountName,
noOfAdults,
folioschedules.roomid,
folioschedules.roomtype,
date(folio.arrivaldate) as fromdate,
date(folio.departuredate) as todate,
'' as remarks
from folio left join folioschedules on folio.folioid=folioschedules.folioid where foliotype = 'DEPENDENT' and 
folio.status='CHECKED IN' and (folio.masterfolio=pFolioid or folio.folioid=pFolioid)
union  
select folio.folioid,
masterfolio as groupFolio,
foliotype,
groupname,
if(substring(folio.companyid,1,1)='G',fGetCompanyName(folio.companyid), fGetGuestName(folio.companyid)) as companyName,
fGetGuestName(folio.accountid) as accountName,
noOfAdults,
folioschedules.roomid,
folioschedules.roomtype,
date(folio.arrivaldate) as fromdate,
date(folio.departuredate) as todate,
folio.remarks
from folio left join folioschedules on (folio.masterfolio=folioschedules.folioid) where foliotype = 'JOINER' and (select foliotype from folio where folioid=folio.masterfolio)='DEPENDENT' and 
folio.status='CHECKED IN' and (select masterfolio from folio where folioid=folio.masterfolio)=pFolioid
order by roomid, folioid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetRoomOccupancyStatus` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetRoomOccupancyStatus`(
in pHotelId int(4),
in pRoomId varchar(50)
)
BEGIN
select stateflag from rooms
where roomid = pRoomId and hotelid = pHotelId and
roomtypecode != 'FUNCTION';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetRoomPromo` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetRoomPromo`(in pRoomID varchar(12))
BEGIN
Select promos.percentoff,roomTypes.roomtypeid from promos,roomtypes,rooms
where rooms.roomid = pRoomid and
roomtypes.roomtypeid = rooms.roomtypeid and
roomtypes.promocode= promos.promocode;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetRoomRate` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetRoomRate`(
in proomid varchar(10), in pHotelId int(4) )
BEGIN
select ratetypes.rateamount,roomtypes.roomtypecode from ratetypes,roomtypes,rooms
where (rooms.roomid = proomid and
roomtypes.roomtypecode = rooms.roomtypecode and
ratetypes.roomtypecode = roomtypes.roomtypecode and rooms.hotelid = pHotelId);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetRoomRevenuePerDateRange` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetRoomRevenuePerDateRange`(
in pHotelId int(4),
in pStartDate date,
in pEndDate date
)
BEGIN
select 
eventdate,
roomid,
(select noOfAdults from folio where folio.folioid=eventid) as totalPax,
(select roomtypecode from rooms where rooms.roomid=roomevents.roomid) AS roomType,
sum(roomrate) as RoomRevenue from roomevents
where
eventdate between pStartDate and pEndDate and
HotelId = pHotelId and
eventtype != 'CANCELLED' and 
eventtype != 'NO SHOW' and
roomid != ''
group by eventdate, roomid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetRoomRevenuePerDay` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetRoomRevenuePerDay`(
in pHotelId int(4),
in pDate date
)
BEGIN
select 
eventdate,
roomid,
(select noOfAdults from folio where folio.folioid=eventid) as totalPax,
(select roomtypecode from rooms where rooms.roomid=roomevents.roomid) AS roomType,
sum(roomrate) as RoomRevenue 
from roomevents
where
eventDate = pDate and
HotelId = pHotelId and
eventtype != 'CANCELLED' and 
eventtype != 'NO SHOW' and 
roomid != ''
group by roomid,pDate;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetRoomRevenuePerMonth` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetRoomRevenuePerMonth`(
in pHotelId int(4),
in pMonth int(2),
in pYear int(4)
)
BEGIN
select roomid,
eventdate,
(select noOfAdults from folio where folio.folioid=eventid) as totalPax,
(select roomtypecode from rooms where rooms.roomid=roomevents.roomid) AS roomType,
sum(roomrate) as RoomRevenue from roomevents
where
month(eventDate) = pMonth and
year(eventDate) = pYear and
HotelId = pHotelId and
eventtype != 'CANCELLED' and 
eventtype != 'NO SHOW' and
roomid != ''
group by roomid,pMonth,pYear;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetRoomRevenuePerYear` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetRoomRevenuePerYear`(
in pHotelId int(4),
in pYear int(4)
)
BEGIN
select roomid,
eventdate,
(select noOfAdults from folio where folio.folioid=eventid) as totalPax,
(select roomtypecode from rooms where rooms.roomid=roomevents.roomid) AS roomType,
sum(roomrate) as RoomRevenue from roomevents
where
year(eventDate) = pYear and
HotelId = pHotelId and
eventtype != 'CANCELLED' and 
eventtype != 'NO SHOW' and
roomid != ''
group by roomid,pYear;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetRoomsBlocked` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetRoomsBlocked`(pEvent text)
BEGIN
select blockingdetails.roomid, blockfrom, blockto, blockingdetails.blockid from blockingdetails, roomblock, rooms where blockingdetails.blockid=roomblock.blockid and roomblock.folioid=pEvent and rooms.roomid=blockingdetails.roomid order by roomtypecode asc;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetRoomsBlockedByFolioID` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetRoomsBlockedByFolioID`(
pFolioID varchar(20))
BEGIN
select 
blockingdetails.roomid, 
blockfrom, 
blockto, 
blockingdetails.blockid,
folioid
from 
blockingdetails, 
roomblock, 
rooms 
where 
blockingdetails.blockid = roomblock.blockid 
and roomblock.folioId = pFolioID 
and rooms.roomid = blockingdetails.roomid 
order by roomtypecode asc;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetRoomsByMasterFolio` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetRoomsByMasterFolio`(pFolioID varchar(20))
BEGIN
select roomid from folioschedules, folio where folio.folioid=folioschedules.folioid and folio.masterfolio=pFolioID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetRoomScheculeByDateRange` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetRoomScheculeByDateRange`(
pRoomId varchar(10),
pRoomType varchar(80),
pDate date,
pHotelID int(10)
)
BEGIN
set sql_big_selects = 1;
select 
folioschedules.roomid,
folio.folioid,
folioschedules.fromdate,
folioschedules.todate
from 
folio force index(primary),
folioschedules force index(primary)
where 
folio.folioid = folioschedules.folioid  and 
not ( folio.status = 'CHECKED OUT' OR folio.status ='CANCELLED' OR folio.status ='NO SHOW') 
and folioschedules.roomid=pRoomId and
folioschedules.hotelid = folio.hotelid and
folioschedules.roomtype = pRoomType and (
date(pDate) >= date(folioschedules.fromdate) and date(pDate) <= date(folioschedules.todate)
)
and folio.hotelid = 1
and
not exists
(
select 
folioschedules.roomid,
folio.folioid,
folioschedules.fromdate,
folioschedules.todate
from 
folio force index(primary),
folioschedules force index(primary)
where 
folio.folioid = folioschedules.folioid  and 
not ( folio.status = 'CHECKED OUT' OR folio.status ='CANCELLED' OR folio.status ='NO SHOW') 
and folioschedules.roomid=pRoomId and
folioschedules.hotelid = folio.hotelid and
folioschedules.roomtype = pRoomType and
(date(pDate) = date(folioschedules.fromdate) or date(pDate) = date(folioschedules.todate))
and folio.hotelid = 1
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetRoomScheduleByDateRange` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetRoomScheduleByDateRange`(
pRoomId varchar(10),
pRoomType varchar(80),
pDate date,
pHotelID int(10)
)
BEGIN
set sql_big_selects = 1;
select 
folioschedules.roomid,
folio.folioid,
folioschedules.fromdate,
folioschedules.todate
from 
folio force index(primary),
folioschedules force index(primary)
where 
folio.folioid = folioschedules.folioid  and 
not ( folio.status = 'CHECKED OUT' OR folio.status ='CANCELLED' OR folio.status ='NO SHOW') 
and folioschedules.roomid=pRoomId and
folioschedules.hotelid = folio.hotelid and
folioschedules.roomtype = pRoomType and (
date(pDate) between date(folioschedules.fromdate) and date(folioschedules.todate)
)
and folio.hotelid = pHotelId
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetRoomsDestinationForTransfer` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetRoomsDestinationForTransfer`(
in pAuditDate date
)
BEGIN
select * from roomevents where eventdate = pAuditDate and
eventtype = 'IN HOUSE' and
transferflag = 0;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetRoomStatusAndCleaningSummary` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetRoomStatusAndCleaningSummary`(
in pHotelId int(4)
)
BEGIN
select 
rooms.stateflag,
rooms.cleaningstatus,
count(*) as Total
from rooms
where
rooms.roomtypecode != 'FUNCTION' and
rooms.hotelId = pHotelId and rooms.stateflag != 'DELETED'
group by rooms.stateflag,rooms.cleaningstatus;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetRoomsToCharge` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetRoomsToCharge`(
in pDate date,
in pHotelId int(5)
)
BEGIN
select
eventid,
roomid,
max(roomrate) as roomrate
from 	
roomevents
where 	
eventDate = pDate and
eventType = 'IN HOUSE' and
transferflag = '0' and
hotelid = photelid and
(chargeflag='0' or eventid not in (select folioid from foliotransactions where transactioncode='1000' and date(transactiondate)=pDate and foliotransactions.status<>'VOID' and foliotransactions.acctside<>'CREDIT' and adjustmentFlag<>'1'))
group by eventid order by roomid;
end */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetRoomsToTransfer` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetRoomsToTransfer`(
in pAuditDate date
)
BEGIN
select * from roomevents where
transferflag = 1 and
eventdate = pAuditDate and
eventtype = 'IN HOUSE';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetRoomToCharge` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetRoomToCharge`(
in pDate date,
in pHotelId int(5),
in pFolioID varchar(20)
)
BEGIN
select
eventid,
roomid,
roomrate
from 	
roomevents
where 	
eventDate = pDate and
eventType = 'IN HOUSE' and
chargeFlag = '0' and
transferflag = '0' and
hotelid = photelid and
eventid=pFolioID;
end */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetRoomType` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetRoomType`(in pRoomID varchar(12))
BEGIN
Select roomTypes.roomtypecode from Rooms,RoomTypes where rooms.roomtypecode=roomtypes.roomtypecode and rooms.roomid=pRoomID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetRoomTypeDateOccupied` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetRoomTypeDateOccupied`(in pFrom date,
in pTo date,
in pHOtelID int(5)
)
BEGIN
select distinct roomevents.roomid,rooms.roomtypecode,roomevents.eventdate from 
roomevents,rooms
where roomevents.roomid=rooms.roomid and 
(date(roomevents.eventdate) >=pFrom and date(roomevents.eventdate) 
<=pTo) and !(roomevents.eventtype = 'CHECKED OUT' or roomevents.eventtype = 'NO SHOW'
or roomevents.eventtype ='CANCELLED');
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetRoomTypes` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetRoomTypes`()
BEGIN
Select distinct roomtypecode from roomtypes;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetRoutingDetails` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetRoutingDetails`(in pFolioID varchar(20),in pHOtelId int(5),in pTCode varchar(20))
BEGIN
select
TransactionCode, HotelID, FolioID, SubFOlio, Basis, PercentCharged, 
AmountCharged, CreateTime, CreatedBy, UpdateTime, UpdatedBy from FOlioRouting where folioid=pFolioID and hotelID=pHOtelID and transactioncode=pTCode;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetSalesForecast` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetSalesForecast`(IN pFromDate VARCHAR(50), IN pToDate VARCHAR(50), IN pHotelId INTEGER(5))
BEGIN
select pFromDate,rooms.`roomtypecode` as RoomType,sum(roomevents.roomrate) as Amount,date(EventDate)  as EDate from rooms
left join roomevents on rooms.roomid=roomevents.roomid
where EventDate >= date(pFromDate) and EventDate <= date(pToDate)
and (roomevents.eventtype != 'NO SHOW' and roomevents.eventtype != 'CANCELLED')
group by rooms.`roomtypecode`,date(EventDate) ;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetSchedule` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetSchedule`(in pFolioID varchar(20), in pHotelID int(5))
BEGIN
Select 	
*
from 
folioschedules force index(hotelid,folioid)
where 
folioID=pFolioID  and 
hotelID=pHOtelID
order by FromDate;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetSequenceID` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetSequenceID`()
BEGIN
update sequence set id = last_insert_id(id+1);
Select last_insert_id() as id;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetServiceCharge` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetServiceCharge`()
BEGIN
select * from TransactionCode where Memo = 'SERVICE CHARGE';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetShareFolioIds` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetShareFolioIds`(
in pMasterFolioId varchar(20),
in pHotelId int(5)
)
BEGIN
select folioid from folio where masterfolio = pMasterFolioId and
hotelid = pHotelId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetStatementOfAccount` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetStatementOfAccount`(pFolioID varchar(30))
BEGIN
SELECT FOLIO.FOLIOID, FOLIO.ACCOUNTID, FGETGUESTNAME(FOLIO.ACCOUNTID) AS GUESTNAME, FOLIO.COMPANYID, if(substring(cityledger.acctid,1,1)='G',fGetCompanyName(cityledger.acctid), fGetGuestName(cityledger.acctid)) AS BILLEDTO, if(substring(cityledger.acctid,1,1)='G',fGetCompanyADDRESS(cityledger.acctid), FGETGUESTADDRESS(cityledger.acctid)) AS ADDRESS, FOLIO.ARRIVALDATE, FOLIO.DEPARTUREDATE, foliotransactions.transactiondate, foliotransactions.memo, foliotransactions.referenceno, if(foliotransactions.acctside='DEBIT', foliotransactions.netbaseamount, 0.00) as Debit, if(foliotransactions.acctside='CREDIT', foliotransactions.netbaseamount, 0.00) as Credit
FROM FOLIO left join FOLIOTRANSACTIONS on folio.folioid=foliotransactions.folioid and foliotransactions.transactioncode!='4200', cityledger where folio.folioid=pFolioID and folio.folioid=cityledger.reffolio;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetSubAccountForPackageDetail` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetSubAccountForPackageDetail`(pDescription text, pPackageID varchar(5))
BEGIN
select subaccount from event_package_detail where description=pDescription and packageID=pPackageID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetSystemPrivileges` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetSystemPrivileges`()
BEGIN
select * from `system_privileges`;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetTotalBlockFunctionCount` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetTotalBlockFunctionCount`(
in pAuditDate date
)
BEGIN
select 
count(*) as TotalBlock 
from 
blockingdetails left join
rooms on rooms.roomid = blockingdetails.roomid 
where
rooms.roomtypecode = 'FUNCTION' and
date(blockfrom) <= pAuditDate and date(blockto) > pAuditDate;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetTotalBlockRoomsCount` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetTotalBlockRoomsCount`(
in pAuditDate date
)
BEGIN
select 
count(*) as TotalBlock 
from 
blockingdetails left join
rooms on rooms.roomid = blockingdetails.roomid 
where
rooms.roomtypecode != 'FUNCTION' and
date(blockfrom) <= pAuditDate and date(blockto) > pAuditDate;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetTotalOutOfOrderFunctionCount` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetTotalOutOfOrderFunctionCount`(
in pAuditDate date
)
BEGIN
select 
count(*) as Total
from 
engineeringjobs left join
rooms on rooms.roomid = engineeringjobs.roomid 
where
rooms.roomtypecode = 'FUNCTION' and
date(startdate) <= pAuditDate and date(enddate) > pAuditDate;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetTotalOutOfOrderRoomsCount` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spGetTotalOutOfOrderRoomsCount`(
in pAuditDate date
)
BEGIN
select 
count(*) as Total
from 
engineeringjobs left join
rooms on rooms.roomid = engineeringjobs.roomid 
where
rooms.roomtypecode != 'FUNCTION' and
date(startdate) <= pAuditDate and date(enddate) >= pAuditDate;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetTranCodeGovtTax` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetTranCodeGovtTax`()
BEGIN
select trancode from transactioncode where
memo = 'GOVERNMENT TAX' or memo = 'VAT TAX';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetTranCodeLocalCall` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetTranCodeLocalCall`(
in photelid int(5)
)
BEGIN
select * from transactioncode where
(memo = 'TELEPHONE CHARGES' or memo = 'TELEPHONE CHARGES') and hotelid = photelid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetTranCodeLocalTax` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetTranCodeLocalTax`()
BEGIN
select trancode from transactioncode where
memo = 'LOCAL TAX';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetTranCodeLongDistanceCall` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetTranCodeLongDistanceCall`(
in photelid int(5)
)
BEGIN
select * from transactioncode where
(memo = 'IDD CALL' or memo = 'TELEPHONE CHARGES') and hotelid = photelid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetTranCodeMemo` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetTranCodeMemo`()
BEGIN
select Trancode,Memo,AcctSide,ServiceCharge,GovtTax,LocalTax from transactioncode;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetTranCodeNDDCall` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetTranCodeNDDCall`(
in photelid int(5)
)
BEGIN
select * from transactioncode where
(memo = 'NDD CALL' or memo='TELEPHONE CHARGES') and hotelid = photelid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetTranCodeRoomCharge` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetTranCodeRoomCharge`()
BEGIN
select trancode from transactioncode where
memo = 'ROOM CHARGE' or memo = 'ROOM CHARGES';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetTranCodeServiceCharge` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetTranCodeServiceCharge`()
BEGIN
select trancode from transactioncode where
memo = 'SERVICE CHARGE';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetTransactionCode` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetTransactionCode`(
in pTranCode varchar(20),
in pHotelId int(5)
)
BEGIN
select * 
from transactionCode 
where 
tranCode=pTranCode and 
hotelid = pHotelId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetTransactionCodes` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetTransactionCodes`(in pHotelID int(5))
BEGIN
select * from TransactionCode
where HotelID=pHotelID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetTransactionCodesGLAccounts` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetTransactionCodesGLAccounts`(in pHotelID int(5))
BEGIN
select 
transactioncode_glaccounts.TransactionCode,
transactioncode_glaccounts.subAccount,
TransactionCode.memo,
GLAccountCode,
GLCostCenterAccount,
FolioTransactionFieldName
from
transactioncode_glaccounts
left join TransactionCode on
transactioncode_glaccounts.transactioncode = TransactionCode.trancode
where TransactionCode.HotelID=pHotelID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetTransactionCodesWithSubAccounts` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetTransactionCodesWithSubAccounts`(pHotelID int(5))
BEGIN
select trancode, memo, memo as subAccount, acctside from transactioncode where trancode not in (select distinct transactioncode from transctioncode_subaccount) and stateflag!='DELETED' and hotelid=pHotelID union all
select transactioncode as trancode, concat((select memo from transactioncode where trancode=transactioncode),' - ',subaccountcode) as memo, subAccountcode as subaccount, (select acctside from transactioncode where trancode=transactioncode) as acctside from transctioncode_subaccount where hotelid=pHotelid order by trancode;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetTransactionTerminalId` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetTransactionTerminalId`(
in pHotelId int(5),
in pFolioId varchar(20),
in pSubFolio varchar(5),
in pPostingDate varchar(20),
in pTransactionCode varchar(10)
)
BEGIN
select terminalid from foliotransactions 
where
hotelid = pHotelId and
folioid = pFolioId and
subfolio = pSubFolio and
postingdate = pPostingDate and
transactioncode = pTransactionCode  ;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetTranTypeId` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetTranTypeId`(
in ptrancode varchar(20),
in photelid int(5)
)
BEGIN
select 
trantypeid 
from transactioncode 
where
trancode = ptrancode and
hotelid = photelid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetUnPostedFolioTransactions` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetUnPostedFolioTransactions`(
in pAuditDate date
)
BEGIN
select * from foliotransactions where auditflag = 0 and date(transactiondate) < pAuditDate;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetUserOldPass` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetUserOldPass`(
in pUserId varchar(20),
in pHotelID int(5)
)
BEGIN
Select aes_decrypt(`password`,'password')
from 
users
where
userid = puserId and hotelid = pHotelId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetUserRoles` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetUserRoles`(
in pUserId varchar(20),
in pHotelId int(5)
)
BEGIN
select userroles.rolename,
roles.description
from userRoles,roles
where
userroles.rolename = roles.rolename and
userroles.hotelid = roles.hotelid and
userid = pUserId and
userroles.hotelid = photelid and
userroles.stateflag = 'ACTIVE';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGetVoidedFolioTransactions` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGetVoidedFolioTransactions`(
in pFolioID varchar(20),
in photelid int(5)
)
BEGIN
Select  
*
from 
folioTransactions 
where 
`status`='VOID' and 
folioID=pFolioID and
hotelid = photelid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spGroupFolioTransactions` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spGroupFolioTransactions`(
in pFolioid varchar(20)
)
BEGIN
select distinct
folio.folioid,
folio.foliotype,
company.companyName,
concat(company.street1,", ",company.city1) as CityAdd,
concat(company.country1, " ",company.zip1) as CountryAdd,
trandate,
referenceno,
transactioncode,
foliotransactions.memo,
updatedby,
if(acctside='DEBIT',baseamount,0.00) as CHARGES,  
if(acctside='CREDIT',baseamount,0.00) as CREDIT
from
company,
folio,
foliotransactions
where
company.companycode = folio.companycode and
foliotransactions.folioid = folio.folioid and
folio.folioid = pFolioId
order by foliotransactions.trandate;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spHK_CheckHousekeeperPinCode` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spHK_CheckHousekeeperPinCode`(
pPinCode varchar(15)
)
BEGIN
select housekeeperid 
from hk_housekeepers 
where md5(pPinCode) = pincode;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spHK_CheckIfRoomIsOccupied` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spHK_CheckIfRoomIsOccupied`(
in pRoomID varchar(20)
)
BEGIN
select eventNo from
roomevents
where eventtype = 'IN HOUSE'
and roomid= pRoomID
order by eventNo
limit 0,1;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spHK_CheckRoomIfHKJobStarted` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spHK_CheckRoomIfHKJobStarted`(
pRoomid varchar(10),
pHKType int(10)
)
BEGIN
Select 
roomId 
from 
hk_housekeepingjobs 
where 
roomid = pRoomId and
housekeepingType = if(pHKType=1,'CLEANING','MAKE-UP') and 
housekeepingdate = curdate() and
isFinished = 0;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spHK_DeleteHousekeepingType` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spHK_DeleteHousekeepingType`(
pId int(5)
)
BEGIN
delete from hk_housekeepingtypes
where Id=pId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spHK_DeleteMinibarItem` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spHK_DeleteMinibarItem`(
pItem_code int(11),
pUsername varchar(30)
)
BEGIN
update hk_minibaritems set statusFlag = 'DELETED', 
updatedBy = pUsername ,
updatedDate = now() where itemCode = pItem_code;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spHK_DeleteMinibarItemCategory` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spHK_DeleteMinibarItemCategory`(
pCategoryID int(11),
pUsername varchar(30)
)
BEGIN
update hk_minibarItemCategory 
set `statusFlag` = 'DELETED',
updateTime = now(),
updateBy= pUsername
where categoryID = pCategoryID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spHK_DeleteStepProcedure` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spHK_DeleteStepProcedure`(
pId              int(10)   
)
BEGIN
update hk_stepprocedures
set `STATUS`='DELETED',
LastChanged=now()
where 
Id=pId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spHK_GetActiveHousekeepingJobPerRoom` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spHK_GetActiveHousekeepingJobPerRoom`(
in pHotelId int(4),
in pRoomId varchar(15),
in pHousekeeperId varchar(20)
)
BEGIN
Select 
housekeepingJobNo 
from 
hk_housekeepingjobs 
where 
isFinished = 0 and 
hotelId = pHotelId and
roomId = pRoomId and
housekeeperId = pHousekeeperId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spHK_GetActiveHousekeepingJobs` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spHK_GetActiveHousekeepingJobs`()
BEGIN
Select * 
from 
hk_housekeepingjobs 
where isFinished = 0;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spHK_GetHouseKeepersWithSales` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spHK_GetHouseKeepersWithSales`(
pFrom date,
pTo date
)
BEGIN
select distinct 
housekeeperid,
concat(lastname,', ' ,firstname) as name 
from hk_housekeepers,
hk_minibarSales
where hk_minibarSales.housekeeper_id =  housekeeperid  and 
voided = 0 and 
hk_minibarSales.salesdate between pFrom and pTo;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spHK_GetHouseKeepingLogs` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spHK_GetHouseKeepingLogs`(
pDate DATE
)
BEGIN
(
Select 
rooms.`roomid` as RoomId,
rooms.roomtypecode as RoomType,
time(starttime) as StartTime,
time(endtime) as EndTime,
elapsedtime as Duration,
concat(hk_housekeepers.housekeeperid,'-',
hk_housekeepers.lastname,', ',
hk_housekeepers.firstname) as Housekeeper,
hk_housekeepingjobs.housekeepingtype as Remarks,
hk_housekeepingjobs.verifiedby,
time(hk_housekeepingjobs.timeverified) as timeverified,
hk_housekeepingjobs.housekeepingjobno
from
rooms left join hk_housekeepingjobs on  hk_housekeepingjobs.roomid = rooms.roomid
left join 
hk_housekeepers on hk_housekeepers.housekeeperid = hk_housekeepingjobs.housekeeperid
WHERE (hk_housekeepingjobs.housekeepingdate = pDate and isFinished = 0)
)
Union
(
Select 
rooms.`roomid` as RoomId,
rooms.roomtypecode as RoomType,
'' as StartTime,
'' as EndTime,
'' as Duration,
'' as Housekeeper,
'' as remarks,
'' as verifiedby,
'' as timeverified,
'' as housekeepingjobno
from rooms
WHERE  rooms.`roomid` not in(Select roomid from `hk_housekeepingjobs` WHERE housekeepingdate=pDate)
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spHK_GetMinibarSalesDetailsInRange` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spHK_GetMinibarSalesDetailsInRange`( 
pFrom Date,
pTo Date
)
BEGIN
select 
hk_minibarsalesdetails.id as 'Transaction No.',
sales_id as 'Sales No.',
item_code as 'Item Code',
hk_minibaritems.description as Description,
hk_minibaritemcategory.categoryName as Category,
qty as Quantity,unit_price as 'Unit Price' 
from 
hk_minibarsales, hk_minibarsalesdetails
left join hk_minibaritems on 
hk_minibaritems.itemCode = hk_minibarsalesdetails.item_code
left join hk_minibaritemcategory on 	
hk_minibaritemcategory.categoryId = hk_minibaritems.categoryId
where 
hk_minibarsales.id = hk_minibarsalesdetails.sales_id and 
hk_minibarsalesdetails.voided=0 and
hk_minibarsales.salesdate between pFrom and pTo;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spHK_GetMinibarSalesInRange` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spHK_GetMinibarSalesInRange`( 
pFrom date,
pTo date
)
BEGIN
Select 
id as 'Sales No.',
salesdate as 'Sales Date',
housekeeper_id as 'Housekeeper',
room_id as 'Room No.',
amount as Amount, 
total_qty as Quantity 
from 
hk_minibarsales 
where voided = 0 and  
salesdate between pFrom and pTo;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spHK_GetSupervisorFullName` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spHK_GetSupervisorFullName`(
pHkID varchar(30),
pPin varchar(30)
)
BEGIN
Select concat(lastname,",",firstname) as Name 
from hk_housekeepers where 
housekeeperId = pHkID and 
pincode = md5(pPin);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spHK_GetUnfinishedTasks` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spHK_GetUnfinishedTasks`(
in pRoomNo varchar(20),
in pHousekeeperId varchar(20)
)
BEGIN
Select * 
from 
hk_housekeepingjobs 
where 
isFinished = 0 and 
roomid != pRoomNo and 
housekeeperId = pHousekeeperId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spHK_HousekeepingReport` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spHK_HousekeepingReport`(
pFromDate date,
pToDate date
)
BEGIN
SELECT 
hk_housekeepingjobs.roomid,
concat('ROOM',rooms.roomid) as name,
roomtypecode,
concat(hk_housekeepingjobs.housekeeperid,'-',
hk_housekeepers.lastname,', ',
hk_housekeepers.firstname) as Housekeeper,
housekeepingdate,
starttime,
endtime,
elapsedtime,
concat(hk_housekeepingjobs.housekeepingtype,'-',remarks)  as remarks,
verifiedby,
timeverified
from 
hk_housekeepers,
hk_housekeepingjobs,
rooms
where 
hk_housekeepers.housekeeperid=hk_housekeepingjobs.housekeeperid
and housekeepingdate BETWEEN pFromDate and pToDate
and rooms.roomid=hk_housekeepingjobs.roomid ;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spHK_HousekeepingReportByHousekeepers` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spHK_HousekeepingReportByHousekeepers`(
pFromDate date,
pToDate date
)
BEGIN
SELECT 
hk_housekeepingjobs.roomid,
concat("ROOM",rooms.roomid) as RoomName,
roomtypecode,
concat(hk_housekeepingjobs.housekeeperid,'-',
hk_housekeepers.lastname,', ',
hk_housekeepers.firstname) as Housekeeper,
housekeepingdate,
time(starttime) as starttime,
time(endtime) as endtime,
time(elapsedtime) as elapsedtime,
concat(hk_housekeepingjobs.housekeepingtype,'-',remarks) as remarks,
verifiedby,
timeverified
from 
hk_housekeepers,
hk_housekeepingjobs,
rooms
where 
hk_housekeepers.housekeeperid = hk_housekeepingjobs.housekeeperid
and housekeepingdate BETWEEN pFromDate and pToDate
and rooms.roomid = hk_housekeepingjobs.roomid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spHK_InsertHousekeepingJob` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spHK_InsertHousekeepingJob`(
pHousekeepingDate   date,
pHousekeeperId      varchar(20),
pHousekeepingType   varchar(20),
pRoomId             varchar(20),
pStartTime          datetime,
pEndTime            varchar(20),
pRemarks            varchar(100),
pVerifiedBy         varchar(50),
pTimeVerified       varchar(20),
pHotelId            int(4),
pCreatedBy          varchar(50)
)
BEGIN
insert into `hk_housekeepingjobs` 
(
housekeepingDate, 
housekeeperId, 
housekeepingType, 
roomId, 
startTime, 
endTime, 
elapsedTime, 
remarks, 
isFinished, 
verifiedBy, 
timeVerified, 
hotelId, 
createTime, 
createdBy, 
updateTime, 
updatedBy, 
stateFlag)
values
(
pHousekeepingDate, 
pHousekeeperId, 
pHousekeepingType, 
pRoomId, 
pStartTime, 
pEndTime, 
timediff(pEndTime,pStartTime), 
pRemarks, 
0, 
pVerifiedBy, 
pTimeVerified, 
pHotelId, 
now(), 
pCreatedBy, 
now(), 
pCreatedBy, 
"ACTIVE"
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spHK_InsertHousekeepingType` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spHK_InsertHousekeepingType`(
pId              int(10)   ,      
pName            varchar(30),
pCode            varchar(10)  
)
BEGIN
insert into hk_housekeepingtypes 
(Id, Name, Code, `Status`, CreatedDate, 
LastUpdateDate, Lastchanged)
values
(pId, pName, pCode,'ACTIVE', now(), 
now(), now());
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spHK_InsertMinibarCategory` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spHK_InsertMinibarCategory`(
pCategoryName varchar(200),
pUsername varchar(30)
)
BEGIN
Insert into hk_minibarItemCategory
(categoryName,createTime,createdBy,updateTime,updateBy)
values(pCategoryName,now(),pUsername,now(),pUsername);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spHK_InsertMinibarItem` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spHK_InsertMinibarItem`(
pItemCode int(11),
pDescription text,
pUnitPrice double(12,2),
pCategory int(11),
pUsername varchar(30)
)
BEGIN
insert into hk_minibaritems
(itemCode,categoryId,
description,unitPrice,
createdDate,createdBy,updatedDate,updatedBy)
values(pItemCode,pCategory,
pDescription,
pUnitPrice,now(),
pUsername,now(),pUsername);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spHK_InsertMiniBarSale` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spHK_InsertMiniBarSale`(
pHouseKeeper_id varchar(11),
pRoom_id varchar(15),
pAmount double(12,2),
pTotal_qty int(3)
)
BEGIN
Insert into 
hk_minibarsales
(salesdate,
housekeeper_id,
room_id,
amount,
total_qty,
date_created,
created_by,
updated_by,
update_time)
values(
now(),
pHouseKeeper_id,
pRoom_id,
pAmount,
pTotal_qty,
now(),'admin','admin',now());
Select last_insert_id();
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spHK_InsertMinibarSales_Detail` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spHK_InsertMinibarSales_Detail`(
pSales_Id int(11),
pItem_code int(11),
pQty int(11)
)
BEGIN
Insert into 
hk_minibarsalesdetails
(sales_id,item_code,qty,unit_price)
values(pSales_Id,pItem_code,pQty,fHK_GetUnitPrice(pItem_code));
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spHK_InsertStepProcedure` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spHK_InsertStepProcedure`(
pId              int(10)   ,
pName            varchar(30),
pUseSoundFile    tinyint(4)  ,
pSoundFile       varchar(255) ,
pTextToSpeak     text ,  
pRank            int(10), 
pisBefore        tinyint(4),
pmaxDigit        int(10),
pExpectedDigit   int(3)    
)
BEGIN
insert into `hk_stepprocedures` 
(Id, Name, UseSoundFile, SoundFile, 
TextToSpeak, Rank, isBefore, maxDigit, 
ExpectedDigit, CreatedDate, LastUpdateDate, 
LastChanged)
values
(pId, pName, pUseSoundFile, pSoundFile, 
pTextToSpeak, pRank, pisBefore, pmaxDigit, 
pExpectedDigit, now(), now(), 
now());
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spHK_ReportDateRangeMinibarSales` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spHK_ReportDateRangeMinibarSales`(
pStartDate date,
pEndDate date
)
BEGIN
Select 
hk_minibarSales.id,
hk_minibarSales.salesdate,
concat(hk_housekeepers.lastname,",",
hk_housekeepers.firstname) as name,
hk_minibarSales.room_id,
hk_minibarSales.total_qty,
hk_minibarSales.amount as TotalAmount,
hk_minibaritems.description,
hk_minibaritemcategory.categoryName as Category,
hk_minibarSalesDetails.qty,
hk_minibarSalesDetails.unit_price,
(hk_minibarSalesDetails.qty * hk_minibarSalesDetails.unit_price) as amount
from 
hk_minibarSales,
hk_minibarItems
left join hk_minibaritemcategory on hk_minibaritemcategory.categoryId = 
hk_minibarItems.categoryId,
hk_minibarSalesDetails,
hk_housekeepers
where 
hk_minibarSales.id = hk_minibarSalesDetails.sales_id and 
hk_minibarSalesDetails.item_Code = hk_minibarItems.itemCode and 
hk_minibarSales.housekeeper_id = hk_housekeepers.housekeeperid and 
hk_minibarSales.voided = 0 and 
hk_minibarSalesDetails.voided = 0 and 
(salesdate between pStartDate and pEndDate) 
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spHK_ReportHousekeepingSummary` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spHK_ReportHousekeepingSummary`(
pFromDate date,
pToDate date
)
BEGIN
SELECT 
count(roomid) as totalRoomId,
concat(hk_housekeepingjobs.housekeeperid,'-',
hk_housekeepers.lastname,', ',hk_housekeepers.firstname) as Housekeeper,
sum(time_to_sec(time(starttime))) as starttime,
sum(time_to_sec(time(endtime))) as endtime,
sum(time_to_sec(time(elapsedtime))) as elapsedtime
from 
hk_housekeepers,
hk_housekeepingjobs
where 
hk_housekeepers.housekeeperid=hk_housekeepingjobs.housekeeperid
and housekeepingdate BETWEEN pFromDate and pToDate
group by hk_housekeepers.housekeeperid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spHK_SelectAfterStepProcedures` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spHK_SelectAfterStepProcedures`()
BEGIN
select 	
id,
isBefore as IsBefore,
maxDigit as MaxDigit,
Name,
Rank,
SoundFile,
TextToSpeak,
UseSoundFile,
ExpectedDigit  
from 
hk_stepprocedures 
where (isBefore=0 and `Status`='ACTIVE') order by Rank;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spHK_SelectBeforeStepProcedures` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spHK_SelectBeforeStepProcedures`()
BEGIN
select 
id,
isBefore as IsBefore,
maxDigit as MaxDigit,
Name,
Rank,
SoundFile,
TextToSpeak,
UseSoundFile,
ExpectedDigit  
from 
hk_stepprocedures 
where (isBefore=1 and `Status`='ACTIVE') order by Rank;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spHK_SelectHousekeepingTypes` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spHK_SelectHousekeepingTypes`()
BEGIN
select * from hk_housekeepingtypes where `status`='ACTIVE';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spHK_SelectMinbarItemsList` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spHK_SelectMinbarItemsList`(
pCategory int(11) 
)
BEGIN
Select 
CategoryName,
itemCode,
description,
unitPrice 
from 
hk_minibaritemcategory,
hk_minibaritems 
where hk_minibaritemcategory.categoryID = hk_minibaritems.categoryId and  
hk_minibaritems.statusFlag = 'ACTIVE' and 
hk_minibaritemcategory.categoryId = pCategory;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spHK_SelectMinibarCategories` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spHK_SelectMinibarCategories`()
BEGIN
Select * 
from 
hk_minibarItemCategory 
where statusFlag != 'DELETED';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spHK_SelectMinibarItemPerCode` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spHK_SelectMinibarItemPerCode`(
in pItemCode varchar(20)
)
BEGIN
Select * 
from hk_minibarItems 
where statusFlag = 'ACTIVE'
and itemCode = pItemCode;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spHK_SelectMinibarItems` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spHK_SelectMinibarItems`()
BEGIN
Select * 
from hk_minibarItems 
where statusFlag = 'ACTIVE';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spHK_SelectMiniBarSalesStepProcedures` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spHK_SelectMiniBarSalesStepProcedures`()
BEGIN
select 	
id,
isBefore as IsBefore,
maxDigit as MaxDigit,
Name,
Rank,
SoundFile,
TextToSpeak,
UseSoundFile,
ExpectedDigit  
from 
hk_stepprocedures 
where 
(isBefore=3 and `Status`='ACTIVE') order by Rank;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spHK_SelectStepProcedures` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spHK_SelectStepProcedures`()
BEGIN
select * from hk_stepprocedures where `Status`='ACTIVE';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spHK_SelectVerifyStepProcedures` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spHK_SelectVerifyStepProcedures`()
BEGIN
select 
id,
isBefore as IsBefore,
maxDigit as MaxDigit,
Name,
Rank,
SoundFile,
TextToSpeak,
UseSoundFile,
ExpectedDigit  
from 
hk_stepprocedures 
where 
(isBefore=2 and `Status`='ACTIVE') order by Rank;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spHK_UpdateHousekeepingJobEndTime` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spHK_UpdateHousekeepingJobEndTime`(
pHKJobNo int(20)
)
BEGIN
update hk_housekeepingJobs
set 
endTime = now(),
elapsedTime = timediff(now(),startTime),
isFinished = 1
where
housekeepingJobNo = pHKJobNo;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spHK_UpdateHousekeepingType` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spHK_UpdateHousekeepingType`(
pId              int(10)   ,      
pName            varchar(30),
pCode            varchar(10) 
)
BEGIN
update hk_housekeepingtypes
set
Name     =   pName     ,
Code     = pCode , 
Lastchanged=now()	
where
Id      =    pId ;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spHK_UpdateMinibarItem` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spHK_UpdateMinibarItem`(
pItem_Code int(11),
pDescription text,
pUnit_Price double(12,2),
pCategory int(11),
pUsername varchar(30)
)
BEGIN
update hk_minibaritems 
set 
description = pDescription,
categoryId = pCategory,
unitPrice = pUnit_Price,
updatedBy = pUsername,
updatedDate = now()
where itemCode = pItem_Code and statusFlag = 'ACTIVE';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spHK_UpdateMinibarItemCategory` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spHK_UpdateMinibarItemCategory`(
pCategoryID int(11),
pCategoryName varchar(200),
pUsername varchar(30)
)
BEGIN
update hk_minibarItemCategory 
set 
categoryName = pCategoryName,
updateTime = now(),
updateBy = pUsername
where categoryID = pCategoryID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spHK_UpdateStepProcedure` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spHK_UpdateStepProcedure`(
pId              int(10)   ,
pName            varchar(30),
pUseSoundFile    tinyint(4)  ,
pSoundFile       varchar(255) ,
pTextToSpeak     text ,  
pRank            int(10), 
isBefore        tinyint(4),
pmaxDigit        int(10),
pExpectedDigit   int(3)  
)
BEGIN
update hk_stepprocedures
set
Name=pName,
UseSoundFile=pUseSoundFile ,
SoundFile=pSoundFile ,
TextToSpeak     =pTextToSpeak  ,  
Rank     =pRank, 
isBefore=isBefore,
maxDigit=pmaxDigit,
ExpectedDigit =pExpectedDigit ,
LastChanged=now()
where
Id =pId ;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spHK_VerifyHouseKeepingJob` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spHK_VerifyHouseKeepingJob`(
pVisor varchar(50),
pJobno int(10),
pTimeVerified varchar(15)
)
BEGIN
update 
hk_housekeepingjobs 
set 
verifiedby = pVisor,
TimeVerified = now()
where housekeepingjobno = pJobno;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spHK_VerifyHouseKeepingJobByRoomID` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spHK_VerifyHouseKeepingJobByRoomID`(
pVisor varchar(50),
pRoomID varchar(10)
)
BEGIN
update 
hk_housekeepingjobs 
set 
verifiedby = pVisor,TimeVerified = now()
where 
roomid = pRoomID and 
housekeepingdate = curdate() and 
isFinished=1 and 
(verifiedby is null or verifiedby='') ;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spHK_VoidMinibarSaleDetail` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spHK_VoidMinibarSaleDetail`(
pTransID int(11),
pUsername varchar(30)
)
BEGIN
update 
hk_minibarsalesdetails 
set voided = 1,
update_time = now(),
updated_by = pUsername 
where id = pTransID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spHK_VoidMinibarSales` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spHK_VoidMinibarSales`(
pID int(11),
pUsername varchar(30)
)
BEGIN
update hk_minibarsales 
set voided = 1,
update_time = now(),
updated_by = pUsername 
where id = pID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spHousekeepingReportByHousekeepers` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spHousekeepingReportByHousekeepers`(
pFromDate date,
pToDate date
)
BEGIN
SELECT 
hk_housekeepingjobs.roomid,
concat("ROOM",rooms.roomid) as RoomName,
roomtypecode,
concat(hk_housekeepingjobs.housekeeperid,'-',
hk_housekeepers.lastname,', ',
hk_housekeepers.firstname) as Housekeeper,
housekeepingdate,
time(starttime) as starttime,
time(endtime) as endtime,
time(elapsedtime) as elapsedtime,
concat(hk_housekeepingtypes.Name,'-',memo) as remarks,
verifiedby,
timeverified
from 
hk_housekeepers,
hk_housekeepingjobs,
rooms,
hk_housekeepingtypes
where 
hk_housekeepers.housekeeperid = hk_housekeepingjobs.housekeeperid
and housekeepingdate BETWEEN pFromDate and pToDate
and rooms.roomid = hk_housekeepingjobs.roomid and
hk_housekeepingjobs.housekeepingtypecode = hk_housekeepingtypes.id;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertAccountingAdjustment` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertAccountingAdjustment`(
pHotelID             int(5),
pTransactionDate     date, 
pTransactionCode     varchar(20),
pSubAccount              varchar(100), 
pReferenceNo             varchar(20),
pTransactionSource       varchar(20), 
pMemo                    varchar(500), 
pAcctSide                varchar(10), 
pCurrencyCode            varchar(10), 
pConversionRate          decimal(12,5), 
pCurrencyAmount          decimal(12,5), 
pBaseAmount              decimal(12,5), 
pGrossAmount             decimal(12,5), 
pDiscount                decimal(12,5), 
pServiceCharge           decimal(12,5), 
pServiceChargeInclusive  tinyint(1), 
pGovernmentTax           decimal(12,5), 
pGovernmentTaxInclusive  tinyint(1), 
pLocalTax                decimal(12,5), 
pLocalTaxInclusive       tinyint(1), 
pNetBaseAmount           decimal(12,5), 
pNetAmount               decimal(12,5), 
pReferenceFolioId        varchar(20), 
pRoomNumber              varchar(20), 
pAccountId               varchar(20), 
pGuestName               varchar(200), 
pCompanyName             varchar(20), 
pArrivalDate             datetime, 
pDepartureDate           datetime, 
pReferenceDriverId       varchar(20), 
pCarCompany              varchar(100), 
pMakeModel               varchar(100), 
pPlateNumber             varchar(10), 
pCreditCardNo          varchar(20), 
pChequeNo               varchar(20), 
pAccountName            varchar(100), 
pBankName               varchar(100), 
pChequeDate             date, 
pFOCGrantedBy          varchar(100), 
pCreditCardType        varchar(20), 
pApprovalSlip           varchar(20), 
pCreditCardExpiry      datetime, 
pTerminalID              varchar(10), 
pShiftCode               varchar(10),
pCreatedBy               varchar(50)
)
BEGIN
insert into `accountingadjustments` 
(
hotelID, 
postingDate, 
transactionDate, 
transactionCode, 
subAccount, 
referenceNo, 
transactionSource, 
memo, 
acctSide, 
currencyCode, 
conversionRate, 
currencyAmount, 
baseAmount, 
grossAmount, 
discount, 
serviceCharge, 
serviceChargeInclusive, 
governmentTax, 
governmentTaxInclusive, 
localTax, 
localTaxInclusive, 
netBaseAmount, 
netAmount, 
referenceFolioId, 
roomNumber, 
accountId, 
guestName, 
companyName, 
arrivalDate, 
departureDate, 
referenceDriverId, 
carCompany, 
makeModel, 
plateNumber, 
creditCardNo, 
chequeNo, 
accountName, 
bankName, 
chequeDate, 
FOCGrantedBy, 
creditCardType, 
approvalSlip, 
creditCardExpiry, 
terminalID, 
shiftCode, 
statusFlag, 
postedToLedger, 
auditFlag, 
createdDate, 
createdBy, 
updatedDate, 
updatedBy
)
values
(
pHotelID, 
now(), 
pTransactionDate, 
pTransactionCode, 
pSubAccount, 
pReferenceNo, 
pTransactionSource, 
pMemo, 
pAcctSide, 
pCurrencyCode, 
pConversionRate, 
pCurrencyAmount, 
pBaseAmount, 
pGrossAmount, 
pDiscount, 
pServiceCharge, 
pServiceChargeInclusive, 
pGovernmentTax, 
pGovernmentTaxInclusive, 
pLocalTax, 
pLocalTaxInclusive, 
pNetBaseAmount, 
pNetAmount, 
pReferenceFolioId, 
pRoomNumber, 
pAccountId, 
pGuestName, 
pCompanyName, 
pArrivalDate, 
pDepartureDate, 
pReferenceDriverId, 
pCarCompany, 
pMakeModel, 
pPlateNumber, 
pCreditCardNo, 
pChequeNo, 
pAccountName, 
pBankName, 
pChequeDate, 
pFOCGrantedBy, 
pCreditCardType, 
pApprovalSlip, 
pCreditCardExpiry, 
pTerminalID, 
pShiftCode, 
'ACTIVE', 
0, 
0, 
now(), 
pCreatedBy, 
now(), 
pCreatedBy)
;
update 
drivers 
set 
totalCommission = totalCommission + if(pReferenceDriverId != "", pNetAmount, 0)
where driverId = pReferenceDriverId;
select last_insert_id();
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertAccountPrivilege` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertAccountPrivilege`(
pHotelID          int(5),     
pAccountID        varchar(20),       
pPrivilegeID      varchar(20),    
pCreatedBy        varchar(20)       
)
BEGIN
insert into `hotel_test`.`accountprivileges` 
(HotelID, AccountID, PrivilegeID, 
stateFlag, CreatedDate, CreatedBy, 
UpdatedDate, UpdatedBy)
values
(pHotelID, pAccountID, pPrivilegeID, 
"ACTIVE", now(), pCreatedBy, 
now(), pCreatedBy);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertAgent` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertAgent`(
in pAddress    	text,
in pAgency      varchar(150), 
in pContactNo   varchar(50), 
in pContactPerson  varchar(100),
in pHOTEL_ID    int(4),
in pCREATED_BY  varchar(50)
)
BEGIN
insert into `hotel_test`.`agents` 
(agency, contactPerson, address, 
contactNumber, CREATED_DATE, 
CREATED_BY, UPDATED_DATE, UPDATED_BY, 
HOTEL_ID)
values
(pAgency, pContactPerson, address, 
pContactPerson, now(), 
pContactNo, now(), pCREATED_BY, 
pHOTEL_ID)
;
select last_insert_id()
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertAmenity` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertAmenity`(
IN pamenityid varchar(20), 
IN pname VARCHAR(50), 
IN pdescription VARCHAR(50),
in photelId int(5),
in pcreatedBy varchar(50)
)
BEGIN
insert into amenities
values(
pamenityid,
pname,
pdescription,
'ACTIVE',
pHotelId,
now(),
pcreatedBy,
now(),
pcreatedBy
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertAppliedRates` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spInsertAppliedRates`(
pDescription text,
pOccupants int(5),
pHotelID int(10),
pUser varchar(20), 
pRateType varchar(20))
BEGIN
insert into appliedRates (description, rateType, noOfOccupants, `status`, hotelID, createdby, createtime, updatedby, updatetime) values(pDescription, pRateType, pOccupants, 'active', pHotelID, pUser, now(), pUser, now());
select last_insert_id();
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertAudit` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertAudit`(in pAuditDate Date,
in pShiftCode int(3),
in pMeridian varchar(15),
in pTriggeredBy varchar(30)
)
BEGIN
insert into auditdateTable (AuditDate,ShiftCode,Meridian,SystemDate,TriggeredBy)
values(pAuditDate,pShiftCode,pMeridian,now(),pTriggeredBy);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertBackOfficeConfig` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertBackOfficeConfig`(
pBACK_OFFICE_CODE        varchar(100),
pBACK_OFFICE_NAME        varchar(200),
pBACK_OFFICE_VERSION     varchar(150),
pPOSTING_SCHEDULE        enum('DAILY','WEEKLY','MONTHLY','ANNUAL'),
pPOSTING_SCHEDULE_YEAR   varchar(10),
pPOSTING_SCHEDULE_MONTH  datetime,
pPOSTING_SCHEDULE_DAY    varchar(10),
pPOSTING_SCHEDULE_TIME   varchar(12),
pCONNECTION_STRING       text,
pHOTEL_ID                int(4),
pCREATED_BY              varchar(50)
)
BEGIN
insert into `hotel_test`.`back_office_config` 
(BACK_OFFICE_CODE, BACK_OFFICE_NAME, BACK_OFFICE_VERSION, 
POSTING_SCHEDULE, POSTING_SCHEDULE_YEAR, 
POSTING_SCHEDULE_MONTH, POSTING_SCHEDULE_DAY, 
POSTING_SCHEDULE_TIME, CONNECTION_STRING, 
HOTEL_ID, CREATED_BY, CREATE_TIME, UPDATED_BY, 
UPDATE_TIME)
values
(pBACK_OFFICE_CODE, pBACK_OFFICE_NAME, pBACK_OFFICE_VERSION, 
pPOSTING_SCHEDULE, pPOSTING_SCHEDULE_YEAR, 
monthname(pPOSTING_SCHEDULE_MONTH), pPOSTING_SCHEDULE_DAY, 
pPOSTING_SCHEDULE_TIME, pCONNECTION_STRING, 
pHOTEL_ID, pCREATED_BY, now(), pCREATED_BY, 
now());
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertBlockDetails` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertBlockDetails`(
in pBlockid int(11),
in pRoomId varchar(11),
in pBlockFrom date,
in pBlockTo date
)
BEGIN
Insert into blockingdetails(blockid,roomid,blockfrom,blockto)
values(pBlockid,pRoomId,pBlockFrom,pBlockTo);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertCallCharges` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertCallCharges`(  
in pCallNo int(4),
in pTrunkNo int(4),            
in pCallDate date,             
in pCallTime time,             
in pDuration time,             
in pCost decimal(9,2)
)
BEGIN
insert into callcharges
(
CallNo,
TrunkNo,
CallDate,
CallTime,
Duration,
Cost
)
values
(
pCallNo,
pTrunkNo,
pCallDate,
pCallTime,
pDuration,
pCost
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertCallLog` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertCallLog`(pDay varchar(10),
pCallDate date,
pCallTime time,
pDuration time,
pTrunk varchar(11),
pDigits varchar(26),
pLocation varchar(10),
pDestination varchar(26),
pDialID	varchar(16),
pPIN   varchar(16),
pCallType varchar(10),
pRemarks varchar(10),
pCost decimal(9,2),
pExtension varchar(11),
pSerial varchar(11),
pAccCode varchar(11)
)
BEGIN
insert into `log`
(			
`Day`,
`CallDate`,
`Calltime`,
`Duration`,
`Trunk`,
`Digits`,	
`Location`,
`Destination`,
`DialID`,
`PIN`,
`CallType`,
`Remarks`,
`Cost`,
`Extension`,
`Serial`,
`AccCode`
)	
values
(
pDay,
pCallDate,
pCalltime,
pDuration,
pTrunk,
pDigits,
pLocation,
pDestination,
pDialID,
pPIN,
pCallType,
pRemarks,
pCost,
pExtension,
pSerial,
pAccCode);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertCashier` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertCashier`(
in pterminalid int(5),
in pterminal varchar(10),
in pcashierid varchar(10),
in pshiftcode varchar(10),
in popeningbalance double(9,2),
in popeningadjustment double(9,2),
in pbeginningbalance double(9,2),
in pchargeinamount double(9,2),
in pcash double(9,2),
in pcreditcard double(9,2),
in pcheck double(9,2),
in pothers double(9,2),
in padjustment double(9,2),
in pnetamount double(9,2)
)
BEGIN
insert into cashier
(
terminalid,
terminal,
cashierid,
shiftcode,
openingbalance,
openingadjustment,
beginningbalance,
chargeinamount,
cash,
creditcard,
`check`,
others,
adjustment,
netamount
)
values
(
pterminalid,
pterminal,
pcashierid,
pshiftcode,
popeningbalance,
popeningadjustment,
pbeginningbalance,
pchargeinamount,
pcash,
pcreditcard,
pcheck,
pothers,
padjustment,
pnetamount
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertCashier_Logs` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertCashier_Logs`(
pAuditDate           date,
pType                enum('OPEN','CLOSE'), 
pTerminalid          int(4), 
pCashierid           varchar(10), 
pShiftcode           varchar(10), 
pOpeningbalance      double(12,2), 
pOpeningadjustment   double(12,2), 
pBeginningbalance    double(12,2), 
pChargeinamount      double(12,2), 
pCash                double(12,2), 
pCreditcard          double(12,2), 
pCheque              double(12,2), 
pOthers              double(12,2), 
pAdjustment          double(12,2),
pAmountRemitted	     double(12,2),
pNetamount           double(12,2), 
pHOTELID             int(5), 
pCREATEDBY           varchar(20),
pRemarks	     text
)
BEGIN
insert into `cashiers_logs`
values
(
pAuditDate,
pType, 
pTerminalid, 
pCashierid, 
pShiftcode, 
pOpeningbalance, 
pOpeningadjustment, 
pBeginningbalance, 
pChargeinamount, 
pCash, 
pCreditcard, 
pCheque, 
pOthers, 
pAdjustment,
pAmountRemitted,
pNetamount, 
pHOTELID, 
now(), 
pCREATEDBY, 
now(), 
pCREATEDBY,
pRemarks
)
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertCityLedger` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertCityLedger`(
pAcctID         varchar(20), 
pDate           date, 
pRefno          varchar(20), 
pDebit          double(12,2), 
pCredit         double(12,2), 
pReffolio       varchar(200), 
pSubfolio       varchar(1), 
pHOTELID        int(5),
pCREATEDBY      varchar(20)
)
BEGIN
insert into `cityledger` 
(AcctID, Date, refno, debit, credit, 
reffolio, subfolio, HOTELID, CREATETIME, 
CREATEDBY, UPDATETIME, UPDATEDBY, posttoacctng, 
closed)
values
(pAcctID, pDate, pRefno, pDebit, pCredit, 
pReffolio, pSubfolio, pHOTELID, now(), 
pCREATEDBY, now(), pCREATEDBY, '0', 
'0');
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertCityLedgerPayment` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertCityLedgerPayment`(
pAcctID varchar(20), 
prefno varchar(20),
pdebit decimal(12,2),
pcredit decimal(12,2), 
preffolio varchar(20), 
psubfolio varchar(20), 
pHOTELID int(4), 
pCREATEDBY varchar(20)
)
BEGIN
insert into `hotel_test`.`cityledger` 
(AcctID, Date, refno, debit, credit, 
reffolio, subfolio, HOTELID, 
CREATETIME, CREATEDBY, UPDATETIME, 
UPDATEDBY, posttoacctng)
values
(pAcctID, curdate(), prefno, pdebit, pcredit, 
preffolio, psubfolio, pHOTELID, 
now(), pCREATEDBY, now(), 
pCREATEDBY, 0);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertCompanyAccount` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertCompanyAccount`(
in pcompanyid varchar(20),
in `pcompanycode` text,         
in `pcompanyname` text,
in `pcompanyurl` text,                  
in `pcontactperson` varchar(200),         
in `pdesignation` varchar(200),           
in `pstreet1` varchar(50),                 
in `pcity1`  varchar(50),                   
in `pcountry1` varchar(30),                
in `pzip1` varchar(10),                    
in `pstreet2` varchar(50),                 
in `pcity2` varchar(30),                   
in `pcountry2` varchar(30),                
in `pzip2` varchar(10),                    
in `pstreet3` varchar(50),                 
in `pcity3` varchar(30),                   
in `pcountry3` varchar(30),                
in `pzip3` varchar(10),                    
in `pemail1` varchar(50),                  
in `pemail2` varchar(50),                  
in `pemail3` varchar(50),                  
in `pcontactnumber1` varchar(15),          
in `pcontactnumber2` varchar(15),          
in `pcontactnumber3` varchar(15),          
in `pcontacttype1` varchar(15),            
in `pcontacttype2` varchar(15),            
in `pcontacttype3` varchar(15),
in photelid int(5),
in pcreatedby varchar(20),
in pAccount_Type varchar(100),
in pCard_No varchar(100),
in pThreshold_Value double(12,2),
in pNo_Of_Visit int(4),
in pTotal_Sales_Contribution double(12,2),
in pX_DEAL_AMOUNT double(12,2),
in pRemarks text
)
BEGIN
insert into company 
values
(
pcompanyid,
`pcompanycode`,         
`pcompanyname`,
`pcompanyurl`,                  
`pcontactperson`,         
`pdesignation`,           
`pstreet1` ,                 
`pcity1` ,                   
`pcountry1` ,                
`pzip1` ,                    
`pstreet2` ,                 
`pcity2` ,                   
`pcountry2` ,                
`pzip2` ,                    
`pstreet3` ,                 
`pcity3` ,                   
`pcountry3` ,                
`pzip3` ,                    
`pemail1` ,                  
`pemail2` ,                  
`pemail3` ,                  
`pcontactnumber1` ,          
`pcontactnumber2` ,          
`pcontactnumber3` ,          
`pcontacttype1` ,            
`pcontacttype2` ,            
`pcontacttype3`,
'ACTIVE',
photelid,
now(),
pcreatedby,
now(),
pcreatedby,
pAccount_Type,
pCard_No,
pThreshold_Value,
0,
pTotal_Sales_Contribution,
pX_DEAL_AMOUNT,
pRemarks
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertContact` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertContact`(
pContactNumber  varchar(100),
pContactType    varchar(20),
pContactName    varchar(100),
pFullName       varchar(200),
pDesignation    varchar(50),
pCompany        varchar(100),
pAddress        varchar(200),
pEmailAddress   varchar(100),
pRemarks        varchar(500),
pCreatedBy      varchar(20),
pHotelId        int(4)
)
BEGIN
insert into `contacts` 
(contactNumber, contactType, contactName, 
fullName, designation, company, address, 
emailAddress, remarks, statusFlag, createdBy, 
createTime, updatedBy, updateTime, hotelId
)
values
(pContactNumber, pContactType, pContactName, 
pFullName, pDesignation, pCompany, pAddress, 
pEmailAddress, pRemarks, 'ACTIVE', pCreatedBy, 
now(), pCreatedBy, now(), pHotelId
);
select last_insert_id();
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertContractAmendment` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertContractAmendment`(pAmendmentID varchar(50),
pFolioID varchar(30),
pOldValue text,
pNewValue text,
pUser varchar(30),
pHotelID int(5))
BEGIN
insert into ContractAmmendments (AmmendmentID, FolioID, OldValue, NewValue, CreatedBy, CreateTime, UpdatedBy, UpdateTime, HotelID) values (pAmendmentID, pFolioID, pOldValue, pNewValue, pUser, now(), pUser, now(), pHotelID);
select last_insert_id();
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertCurrencyCode` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertCurrencyCode`(
pcurrencycode    varchar(10),        
pcurrency        varchar(20),        
pconversionrate  decimal(12,2),    
pHOTELID         int(5),         
pCREATEDBY       varchar(20)      
)
BEGIN
insert into `currencycodes` 
(currencycode, currency, conversionrate, 
stateFlag,HOTELID, CREATETIME, CREATEDBY, UPDATETIME, 
UPDATEDBY)
values
(pcurrencycode, pcurrency, pconversionrate,'ACTIVE', 
pHOTELID, now(), pCREATEDBY, now(), 
pCREATEDBY);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertDepartment` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertDepartment`(
in pDeptId      varchar(20),       
in pName        varchar(100),       
in pHotelId     int(5),         
in pCreatedBy   varchar(30)  
)
BEGIN
insert into `department`
(DeptId, Name, HotelId, stateFlag, CreatedBy, CreateTime, UpdatedBy, UpdateTime)
values
(pDeptId, pName, pHotelId,'ACTIVE', pCreatedBy, now(), pCreatedBy, now());
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertDriver` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertDriver`(
in pLicenseNumber    varchar(100),
in pLastName         varchar(50), 
in pFirstName        varchar(50), 
in pMiddleName       varchar(100),
in pCREATED_BY       varchar(50), 
in pHOTEL_ID         int(4),
in pCompany	varchar(60),
in pCarModel	varchar(50),
in pBrand	varchar(50),
in pPlateNumber	varchar(10)
)
BEGIN
insert into `hotel_test`.`drivers` 
(licenseNumber, lastName, firstName, 
middleName, totalCommission, CREATED_DATE, 
CREATED_BY, UPDATED_DATE, UPDATED_BY, 
HOTEL_ID, company, carModel, brand, plateNumber)
values
(pLicenseNumber, pLastName, pFirstName, 
pMiddleName, 0.00, now(), 
pCREATED_BY, now(), pCREATED_BY, 
pHOTEL_ID, pCompany, pCarModel, pBrand, pPlateNumber)
;
select last_insert_id()
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertEngineeringJob` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertEngineeringJob`(
in penggjobno varchar(20),
in penggserviceid varchar(20),
in passignedperson varchar(50),
in proomid varchar(10),
in pstartdate varchar(15),
in penddate varchar(15),
in pstarttime varchar(15),
in pendtime varchar(15),
in photelid int(5),
in pcreatedby varchar(20)
)
BEGIN
insert into engineeringjobs
values(
penggjobno,
penggserviceid,
passignedperson,
proomid,
pstartdate,
penddate,
pstarttime,
pendtime,
'ACTIVE',
photelid,
now(),
pcreatedby,
now(),
pcreatedby);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertEngineeringService` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertEngineeringService`(
in photelid int(5),
IN penggserviceid varchar(20), 
IN pservicename VARCHAR(50), 
IN pdescription VARCHAR(100),
in pcreatedby varchar(20)
)
BEGIN
insert into 
engineeringservices
values(
photelid,
penggserviceid,
pservicename,
pdescription,
'ACTIVE',
now(),
pcreatedby,
now(),
pcreatedby
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertEvent` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spInsertEvent`(pFolioID varchar(20),
pEventType varchar(40),
pBookingDate datetime,
pLiveIn int(5),
pLiveOut int(5),
pGuaranteed int(5),
pBillingArrangement text,
pAuthorizedSignatory text,
pLobbyPosting text,
pCreatedBy varchar(20),
pHotelID int(2),
pEventPackage bigint(10),
pPackageAmount double(12,2),
pContactPerson text,
pContactAddress text,
pContactPosition varchar(200),
pContactNumber varchar(20),
pMobileNumber varchar(30),
pFaxNumber varchar(20),
pTotal double(12,2),
pEmailAdd varchar(100)
)
BEGIN
insert into event_booking_info values (
pFolioID, 
pEventType, 
pBookingDate, 
pLiveIn, 
pLiveOut, 
pGuaranteed, 
pBillingArrangement, 
pAuthorizedSignatory, 
pLobbyPosting, 
pHotelID, 
now(), 
pCreatedBy, 
now(), 
pCreatedBy, 
pEventPackage, 
pPackageAmount, 
pContactPerson, 
pContactAddress, 
pContactPosition, 
pContactNumber,
pMobileNumber,
pFaxNumber,
pTotal,
0,
pEmailAdd);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertEventAppliedRates` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spInsertEventAppliedRates`(pFolioID varchar(20),
pRateType varchar(5),
pDescription text,
pRateAmount double(10,2),
pUser varchar(20),
pOccupants int(5))
BEGIN
insert into event_applied_rates values(pFolioID, pRateType, pDescription, pRateAmount, pOccupants, pUser, now(), pUser, now());
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertEventAttributes` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spInsertEventAttributes`(pEventID bigint(10), pKey varchar(40), pUser varchar(20))
BEGIN
insert into event_attributes values(pEventID, pKey, now(), pUser, now(), pUser);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertEventDetails` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spInsertEventDetails`(pFolioID varchar(20), pHeader text, pDescription text, pUser varchar(30))
BEGIN
insert into event_details values (pFolioID, pHeader, pDescription, now(), pUser, now(), pUser);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertEventPackage` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertEventPackage`(pDescription text, pDaysApplied int(5), pEventType varchar(40), pPackageAmount double(12,2), pHoteliD int(10), pUser varchar(20), pMinimumPax int(5), pMaximumPax int(5))
BEGIN
insert into event_package_header (description, daysApplied, eventType, packageAmount, hotelID, `status`, createdby, createtime, updatedby, updatetime, minimumpax, maximumpax) values(pDescription, pDaysApplied, pEventType, pPackageAmount, pHotelID, 'active', pUser, now(), pUser, now(), pMinimumPax, pMaximumPax);
select last_insert_id();
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertEventPackageDetails` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertEventPackageDetails`(pPackageID bigint(20), pTransactionCode int(10), pDescription text, pAmount double(12,2), pSubAccount varchar(50))
BEGIN
insert into event_package_detail values(pPackageID, pTransactionCode, pDescription, pAmount, ltrim(pSubAccount));
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertEventPackageRequirements` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertEventPackageRequirements`(pPackageID bigint(20), pHeader text, pDetail text)
BEGIN
insert into event_package_requirement values(pPackageID, pHeader, pDetail);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertEventRequirements` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spInsertEventRequirements`(pFolioID varchar(20), pCode varchar(50), pDescription text, pUser varchar(30))
BEGIN
insert into event_requirements (folioID, requirementID, description, createtime, createdby, updatetime, updatedby) values (pFolioID, pCode, pDescription, now(), pUser, now(), pUser);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertEventRoomVenues` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertEventRoomVenues`(pFolioID varchar(20), pRoomVenue varchar(35), pFromDate date, pToDate date, pStartTime varchar(15), pEndTime varchar(15), pUser varchar(30))
BEGIN
insert into event_room_venues values(pFolioID, pRoomVenue, pFromDate, pToDate, pStartTime, pEndTime, pUser, now(), pUser, now());
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertEventTypes` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spInsertEventTypes`(in pEventType varchar(40), in pDescription text, pUser varchar(20), pBanquet int(2))
BEGIN
insert into event_type(eventType, description, `status`, createtime, createdby, updatetime, updatedby, banquetType) values(pEventType, pDescription, 'ACTIVE', now(), pUser, now(), pUser, pBanquet);
select last_insert_id();
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertFloor` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertFloor`(
in pHotelId int(5),
in pFloor varchar(25),
in pFloorLayoutImage text,
in pupdatedBy varchar(20)
)
BEGIN
insert into floors
values
(
pHotelId,
pFloor,
pFloorLayoutImage,
'ACTIVE',
now(),
pupdatedby,
now(),
pupdatedby
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertFolio` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertFolio`(
pHotelID            int(5), 
pFolioID            varchar(20), 
pAccountID          varchar(20), 
pFolioType          varchar(25), 
pGroupName          varchar(100), 
pAccountType        varchar(25), 
pNoOfAdults         int(2), 
pNoOfChild          int(2), 
pMasterFolio        varchar(20), 
pCompanyID          varchar(20), 
pAgentID            varchar(20), 
pSource             varchar(50), 
pFromDate           datetime, 
pToDate             datetime, 
pArrivalDate        datetime, 
pDepartureDate      datetime, 
pPackageId          varchar(20), 
pStatus             varchar(15), 
pRemarks            text, 
pTerminal_Id        varchar(20), 
pShift_Code         varchar(20), 
pSupervisor_Id      varchar(50), 
pSales_Executive    varchar(20), 
pPayment_Mode       varchar(20), 
pPurpose            varchar(20), 
pReason_For_Cancel  text, 
pTaxExempted        tinyint(1), 
pFolioETA	    varchar(10),
pFolioETD	    varchar(10),
pCreatedBy           varchar(20)
)
BEGIN
insert into folio
(
hotelID, 
folioID, 
accountID, 
folioType, 
groupName, 
accountType, 
noOfAdults, 
noOfChild, 
masterFolio, 
companyID, 
agentID, 
source, 
fromDate, 
toDate, 
arrivalDate, 
departureDate, 
packageId, 
`status`, 
remarks, 
terminal_Id, 
shift_Code, 
supervisor_Id, 
sales_Executive, 
payment_Mode, 
purpose, 
reason_For_Cancel, 
taxExempted, 
folioETA,
folioETD,
createTime, 
createdBy, 
updateTime, 
updatedBy
)
values
(
pHotelID, 
pFolioID, 
pAccountID, 
pFolioType, 
pGroupName, 
pAccountType, 
pNoOfAdults, 
pNoOfChild, 
pMasterFolio, 
pCompanyID, 
pAgentID, 
pSource, 
pFromDate, 
pToDate, 
pArrivalDate, 
pDepartureDate, 
pPackageId, 
pStatus, 
pRemarks, 
pTerminal_Id, 
pShift_Code, 
pSupervisor_Id, 
pSales_Executive, 
pPayment_Mode, 
pPurpose, 
pReason_For_Cancel, 
pTaxExempted, 
pFolioETA,
pFolioETD,
now(), 
pCreatedBy, 
now(), 
pCreatedBy
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertFolioInclusions` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertFolioInclusions`(
in pHotelId int(5),
in pFolioID varchar(20),
in pMemo text,
in pCreatedby varchar(20)
)
BEGIN
insert into 
FolioInclusions
(hotelid, folioid, memo, createdby, createtime, updatedby, updatetime)
values
(
pHotelId,
pFolioID,
pMemo,
pCreatedBy,
now(),
pCreatedBy,
now()
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertFolioLedger` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertFolioLedger`(
in pHtelID int(5),
in pFolioID varchar(20),
in pSubFolio varchar(2),
in pAccountid varchar(20),
in pCharges decimal(12,2),
in pPaycash decimal(12,2),
in pPaycard decimal(12,2),
in pPaycheque decimal(12,2),
in pPayGiftCheque decimal (12,2),
in pBalanceFowarded decimal(12,2),
in pBalanceNet decimal(12,2),
in pDiscount decimal(12,2),
in pGovernmentTax decimal(12,2),
in pLocalTax decimal(12,2),
in pServiceCharge decimal(12,2),
in pAgentComission decimal(12,2),
in pTotalNet decimal(12,2),
in pPostToLedger varchar(2),
in pCreatedBy varchar(20)
)
BEGIN
insert into folioledger 
values
(
pHtelID,
pFolioID,
pSubfolio,
pAccountid,
pCharges,
pPaycash ,
pPaycard,
pPaycheque,
pPayGiftCheque,
pBalanceFowarded,
pBalanceNet,
pDiscount,
pGovernmentTax,
pLocalTax,
pServiceCharge,
pAgentComission,
pTotalNet,
pPostToLedger,
now(),
pCreatedBy,
now(),
pCreatedBy
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertFolioPackages` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertFolioPackages`(
in pHotelId int(5),
in pFolioID varchar(20),
in pTransactionCode varchar(20),
in pBasis varchar(2),
in pPercentOff decimal(5,2),
in pAmountOff decimal(12,2),
in pDaysApplied varchar(50),
in pCreatedby varchar(20),
in pDateFrom datetime,
in pDateTo datetime
)
BEGIN
insert into 
foliopackage
(hotelid, folioid, transactioncode, basis, percentoff, amountoff, daysapplied, datefrom, dateto, createtime, createdby, updatetime, updatedby)
values
(
pHotelId,
pFolioID,
pTransactionCode,
pBasis,
pPercentOff,
pAmountOff,
pDaysApplied,
pDateFrom,
pDateTo,
now(),
pCreatedBy,
now(),
pCreatedBy
)
on duplicate key update 
Basis = pBasis,
PercentOff = pPercentOff,
AmountOff = pAmountOff,
DaysApplied = pDaysApplied,
updatedBy = pCreatedBy,
updatetime = now()
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertFolioPrivilege` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertFolioPrivilege`(
in pHotelID          int(5),
in pFolioID          varchar(20),
in pTransactionCode  varchar(20),
in pBasis            varchar(1),
in pPercentoff       decimal(5,2),
in pAmountOff        decimal(12,2)
)
BEGIN
insert into
folioprivilege
values
(
pHotelId,
pFolioId,
pTransactionCode,
pBasis,
pPercentOff,
pAmountOff
) on duplicate
key update percentOff = if(pPercentOff > percentOff,pPercentOff , percentOff),
amountOff = if(pAmountOff > amountOff, pAmountOff, amountOff);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertFolioRecurringCharge` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertFolioRecurringCharge`(
pHotelID int(5),
pFolioID varchar(20),
pTransactionCode  varchar(20),
pMemo TEXT,
pAmount decimal(12,2),
pFromDate datetime,
pTodate datetime,
pCreatedBy varchar(20),
pSummaryFlag int(2),
pPackageID int(5),
pSubAccount varchar(50)
)
BEGIN
insert into 
`foliorecurringcharge` 
values
(
pHotelID, 
pFolioID,
pTransactionCode,
pMemo,
pAmount, 
pFromDate, 
pTodate, 
now(), 
pCreatedBy, 
now(), 
pCreatedBy,
pSummaryFlag,
pPackageID,
pSubAccount
)
on duplicate key update
Amount = pAmount,
FromDate = pFromDate,
Todate = pTodate,
updatedby = pCreatedBy,
updateTime = now(),
summaryFlag  = pSummaryFlag,
packageID = pPackageID,
subAccount=pSubAccount
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertFolioRouting` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertFolioRouting`(
pHotelID int(5),
pFolioID varchar(20),
pSubFOlio varchar(1),
pTransactionCode  varchar(20),
pBasis varchar(1),
pPercentCharged   decimal(12,2),
pAmountCharged decimal(12,2),
pCreatedBy varchar(20),
pUpdatedBy  varchar(20)
)
BEGIN
insert into folioRouting
values
(
photelid,
pfolioid,
pSubFolio,
pTransactionCode,
pBasis,
pPercentCharged,
pAmountCharged,
now(),
pCreatedby,
now(),
pUpdatedBy
)
on duplicate key update 
Basis = pBasis, 
PercentCharged = pPercentCharged,
AmountCharged = pAmountCharged,
updateTime = now(), 
updatedby = pUpdatedBy;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertFolioSchedule` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertFolioSchedule`(
pHOTELID     int(5),        
pFolioId     varchar(20),        
pRoomID      varchar(10),        
pRoomType    varchar(80),     
pFROMDATE    datetime,          
pTODATE      datetime,         
pDays        int(3),        
pRATETYPE    varchar(25),      
pRATE        decimal(12,2),       
pBREAKFAST   varchar(20),       
pCREATEDBY   varchar(20),         
pUPDATEDBY   varchar(20),
pTerminalId  varchar(20),
pShiftCode   varchar(20),
pSupervisorId varchar(50),
pStartTime   time,
pEndTime     time,
pVenue 	     text,
pSetup       text,
pRemarks     text
)
BEGIN
insert into `folioschedules`
(
HOTELID,
FolioId,
RoomID ,
RoomType,
FROMDATE, 
TODATE,  
Days,   
RATETYPE,    
RATE,        
BREAKFAST,   
CREATEDBY,   
UPDATETIME,  
UPDATEDBY,   
CREATETIME,
TERMINAL_ID,
SHIFT_CODE,
SUPERVISOR_ID,
startTime,
endTime,
venue,
setup,
remarks
)
values
(
pHOTELID,
pFolioId,
pRoomID ,
pRoomType,
pFROMDATE, 
pTODATE,  
pDays,   
pRATETYPE,    
pRATE,        
pBREAKFAST,   
pCREATEDBY,   
now(),
pUPDATEDBY,   
now(),
pTerminalId,
pShiftCode,
pSupervisorId,
pStartTime,
pEndTime,
pVenue,
pSetup,
pRemarks
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertFolioTransaction` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertFolioTransaction`(	
pHotelId                 int(5),
pFolioId                 varchar(20),
pSubFolio                varchar(1),
pAccountId               varchar(20),
pTransactionDate         datetime,
pTransactionCode         varchar(20),
pSubAccount              varchar(100),
pReferenceNo             varchar(20),
pTransactionSource       varchar(20),
pMemo                    varchar(500),
pAcctSide                varchar(10),
pCurrencyCode            varchar(10),
pConversionRate          decimal(12,5),
pCurrencyAmount          decimal(12,5),
pBaseAmount              decimal(12,5),
pGrossAmount             decimal(12,5),
pDiscount                decimal(12,5),
pServiceCharge           decimal(12,5),
pServiceChargeInclusive  tinyint(1),
pGovernmentTax           decimal(12,5),
pGovernmentTaxInclusive  tinyint(1),
pLocalTax                decimal(12,5),
pLocalTaxInclusive       tinyint(1),
pNetBaseAmount           decimal(12,5),
pNetAmount               decimal(12,5),
pCreditCardNo            varchar(20),
pChequeNo                varchar(20),
pAccountName             varchar(100),
pBankName                varchar(100),
pChequeDate              date,
pFOCGrantedBy            varchar(100),
pCreditCardType          varchar(20),
pApprovalSlip            varchar(20),
pCreditCardExpiry        date,
pRouteSequence           varchar(100),
pSourceFolio             varchar(20),
pSourceSubFolio          varchar(1),
pTerminalID              varchar(10),
pShiftCode               varchar(10),
pCreatedBy               varchar(20),
pSummaryFlag		 int(1),
pPackageID		 varchar(5),
pMealAmount		decimal(12,5),
pAdjustmentFlag		varchar(1)
)
BEGIN
insert into `foliotransactions` (
hotelId, 
folioId, 
subFolio, 
accountId, 
transactionDate, 
postingDate, 
transactionCode, 
subAccount, 
referenceNo, 
transactionSource, 
memo, 
acctSide, 
currencyCode, 
conversionRate, 
currencyAmount, 
baseAmount, 
grossAmount, 
discount, 
serviceCharge, 
serviceChargeInclusive, 
governmentTax, 
governmentTaxInclusive, 
localTax, 
localTaxInclusive, 
netBaseAmount, 
netAmount, 
creditCardNo, 
chequeNo, 
accountName, 
bankName, 
chequeDate, 
FOCGrantedBy, 
creditCardType, 
approvalSlip, 
creditCardExpiry, 
routeSequence, 
sourceFolio, 
sourceSubFolio, 
terminalID, 
shiftCode, 
`status`, 
postToLedger, 
createTime, 
createdBy, 
updateTime, 
updatedBy, 
auditFlag,
summaryFlag,
packageID,
mealAmount,
adjustmentFlag )
values (
pHotelId , 
pFolioId, 
pSubFolio, 
pAccountId, 
pTransactionDate, 
now(), 
pTransactionCode, 
pSubAccount, 
pReferenceNo, 
pTransactionSource, 
pMemo, 
pAcctSide, 
pCurrencyCode, 
pConversionRate, 
pCurrencyAmount, 
pBaseAmount, 
pGrossAmount, 
pDiscount, 
pServiceCharge, 
pServiceChargeInclusive, 
pGovernmentTax, 
pGovernmentTaxInclusive, 
pLocalTax, 
pLocalTaxInclusive, 
pNetBaseAmount, 
pNetAmount, 
pCreditCardNo, 
pChequeNo, 
pAccountName, 
pBankName, 
pChequeDate, 
pFOCGrantedBy, 
pCreditCardType, 
pApprovalSlip, 
pCreditCardExpiry, 
pRouteSequence, 
pSourceFolio, 
pSourceSubFolio, 
pTerminalID, 
pShiftCode, 
'ACTIVE', 
0, 
now(), 
pCreatedBy, 
now(), 
pCreatedBy, 0,
pSummaryFlag,
pPackageID,
pMealAmount,
pAdjustmentFlag
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertFoodRequirements` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spInsertFoodRequirements`(pFolioID varchar(20),
pEventDate datetime,
pVenue varchar(30),
pPax int(5),
pStartTime varchar(25),
pEndTime varchar(25),
pOver text,
pSetup text,
pRemarks text,
pTotalCost double(12,2),
pUser varchar(20),
pMealID int(5),
pMealType varchar(30),
pLiveIn int(5),
pLiveOut int(5))
BEGIN
insert into event_meal_requirements
(folioID, eventDate, venue, pax, startTime, endTime, over, setup, remarks, totalMealCost, createtime, createdby, updatetime, updatedby, mealID, mealType, liveInPax, LiveOutPax)
values(pFolioID, pEventDate, pVenue, pPax, pStartTime, pEndTime, pOver, pSetup, pRemarks, pTotalCost, now(), pUser, now(), pUser, pMealID, pMealType, pLiveIn, pLiveOut);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertGroup` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertGroup`(
pGROUP_ID     varchar(20),
pMAINGROUP_ID VARCHAR(20),
pDESCRIPTION  varchar(100), 
pCREATEDBY    varchar(30),
pRESTOID	int(5)
)
BEGIN
insert into `pos`.`group` 
(RESTO_ID, GROUP_ID, MAINGROUP_ID, DESCRIPTION, STATUS, CREATEDBY, 
CREATETIME, UPDATEDBY, UPDATETIME)
values
(pRESTOID, pGROUP_ID, pMAINGROUP_ID, pDESCRIPTION, 'ACTIVE', pCREATEDBY, 
now(), pCREATEDBY, now());
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertGroupFolio` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertGroupFolio`(
IN pFolioID varchar(12),
IN pAccountID varchar(12),
in pEventID varchar(12),
IN pFolioType VARCHAR(25), 
in pOrgName varchar(75),
IN pBreakFast VARCHAR(15), 
iN pPromo VARCHAR(30), 
in pAccountType varchar(25),
IN pStatus VARCHAR(15), 
IN pSource VARCHAR(15),
in pNoAdult int(2),
in pNoChild int(2),
in pCompanyCode varchar(100)
)
BEGIN
insert into folio
(
folioId,Accountid,EventId,Foliotype,groupName,BreakFast,Promo,AccountType,`Status`,Source,NoofAdults,NoofChild,companycode
)
values
(
pFolioID,pAccountID,pEventId,pFolioType,pOrgName,pBreakFast,pPromo,pAccountType,pStatus,pSource,pNoAdult,pNoChild,pCompanyCode
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertGuest` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertGuest`(
paccountid     varchar(20)   ,       
paccountname   varchar(50)   ,
ptitle         varchar(5)   ,
plastname      varchar(50)  ,
pfirstname     varchar(50)  ,
pmiddlename    varchar(50)   ,
psex           varchar(6)    ,
pstreet        varchar(100)  ,
pcity          varchar(100)  ,
pcountry       varchar(100)  ,
pzip           varchar(10)   ,
pemailaddress  varchar(100)  ,
pcitizenship   varchar(100)  ,
ppassportid    varchar(30)   ,
pTelephoneNo   varchar(50)   ,
pMobileNo      varchar(50)  ,
pFaxNo         varchar(50)   ,
pguestImage    text          ,
pmemo          text          ,
pconcierge     text          ,
premarks       text          ,
pHOTELID       int(5)        ,
pCREATEDBY     varchar(20)   ,
pBIRTH_DATE     date	     ,
pACCOUNT_TYPE     varchar(50)   ,
pCARD_NO varchar(100),
pTHRESHOLD_VALUE double(12,2),
pTOTAL_SALES_CONTRIBUTION double(12,2),
pCreditCardType            varchar(50),
pCreditCardNo              varchar(50),
pCreditCardExpiry          varchar(10),
pTaxExempted tinyint(1),
pCreateTime datetime
)
BEGIN
insert into guests (
)
values
(
paccountid, 
paccountname, 
ptitle, 
plastname, 
pfirstname,
pmiddlename, 
psex, 
pstreet, 
pcity, 
pcountry, 
pzip, 
pemailaddress, 
pcitizenship, 
ppassportid, 
pTelephoneNo, 
pMobileNo, 
pFaxNo, 
pguestImage,
0, 
pmemo, 
pconcierge, 
premarks,
'ACTIVE', 
pHOTELID, 
pCreateTime, 
pCREATEDBY, 
now(), 
pCREATEDBY,
if(pBIRTH_DATE = '0001-01-01','1900-01-01',pBIRTH_DATE),
pACCOUNT_TYPE,
pCARD_NO,
pTHRESHOLD_VALUE,
pTOTAL_SALES_CONTRIBUTION,
pCreditCardType,
pCreditCardNo,
pCreditCardExpiry,
pTaxExempted
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertHotel` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertHotel`(
pHotelID     int(3),
pHotelName   varchar(100),
pNoOfFloors  int(5),      
pNoOfRooms   int(5),      
pCreatedBy   varchar(20)
)
BEGIN
insert into `hotel` 
(HotelID, HotelName, NoOfFloors, NoOfRooms, 
stateFlag, CreatedBy, CreateTime, UpdatedBy, 
UpdateTime)
values
(pHotelID, pHotelName, pNoOfFloors, pNoOfRooms, 
'ACTIVE', pCreatedBy, now(), pCreatedBy, 
now());
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertHouseKeeper` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertHouseKeeper`(
in photelid int(5),
IN phousekeeperid VARCHAR(20), 
IN plastname VARCHAR(50), 
IN pfirstname VARCHAR(50), 
IN pmiddlename VARCHAR(50),
in pcreatedby varchar(20)
)
BEGIN
insert into hk_housekeepers
values(
photelid,
phousekeeperid,
plastname,
pfirstname,
pmiddlename,
'ACTIVE',
now(),
pcreatedby,
now(),
pcreatedby,
''
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertHousekeepingJob` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertHousekeepingJob`(
pHousekeepingDate   date,
pHousekeeperId      varchar(20),
pHousekeepingType   varchar(20),
pRoomId             varchar(20),
pStartTime          datetime,
pEndTime            varchar(20),
pRemarks            varchar(100),
pVerifiedBy         varchar(50),
pTimeVerified       varchar(20),
pHotelId            int(4),
pCreatedBy          varchar(50)
)
BEGIN
insert into `hk_housekeepingjobs` 
(
housekeepingDate, 
housekeeperId, 
housekeepingType, 
roomId, 
startTime, 
endTime, 
elapsedTime, 
remarks, 
isFinished, 
verifiedBy, 
timeVerified, 
hotelId, 
createTime, 
createdBy, 
updateTime, 
updatedBy, 
stateFlag)
values
(
pHousekeepingDate, 
pHousekeeperId, 
pHousekeepingType, 
pRoomId, 
pStartTime, 
pEndTime, 
timediff(pEndTime,pStartTime), 
pRemarks, 
0, 
pVerifiedBy, 
pTimeVerified, 
pHotelId, 
now(), 
pCreatedBy, 
now(), 
pCreatedBy, 
"ACTIVE"
);
update rooms set cleaningstatus = 'CLEAN' where roomid = proomid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertHouseKeepingLog` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertHouseKeepingLog`(
pHkDate         date,    
proomid         varchar(10),    
phousekeeperid  varchar(10) ,     
pTransID        varchar(20) ,  
pTime           time        ,     
pparseFlag      tinyint(4)   
)
BEGIN
insert into `hk_log` 
(Hk_Date,roomid, housekeeperid, TransID, `Time`, 
parseFlag)
values
(pHkDate,proomid, phousekeeperid, pTransID, pTime, 
pparseFlag);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertMealDetails` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spInsertMealDetails`(pMealID bigint(20),
pmenuCode varchar(20),
pMenuItemCode varchar(20),
pDescription text,
pRemarks text,
pUser varchar(30),
pPrice double (12,2))
BEGIN
insert into event_meal_details (mealID, menuCode, menuItemCode, description, remarks, price, createTime, createdBy, updateTime, updatedBy) values
(pMealID, pmenuCode, pMenuItemCode, pDescription, pRemarks, pPrice, now(), pUser, now(), pUser);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertMealGroup` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertMealGroup`(pDescription varchar(100), pMainGroupId varchar(20), pHotelID int(10), pUser varchar(20))
BEGIN
insert into meal_group(description,mainGroupId, `status`, hotelID, createdby, createtime, updatedby, updatetime) values(pDescription, pMainGroupId,'active', pHotelID, pUser, now(), pUser, now());
select last_insert_id();
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertMealHeader` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spInsertMealHeader`(pMealID bigint(20),
pFolioID varchar(20),
pMealType varchar(30),
pReadyTime varchar(15),
pDeliverTime varchar(15),
pUser varchar(30),
pEventDate datetime,
pMealCost double(12,2),
pPaxLiveIn int(5),
pPaxLiveOut int(5))
BEGIN
insert into event_meal_header (mealID, folioID, mealType, readyTime, deliverTime, createtime, createdby, updatetime, updatedby, eventDate, mealCost, paxLiveIn, paxLiveOut)
values (pMealID, pFolioID, pMealType, pReadyTime, pDeliverTime, now(), pUser, now(), pUser, pEventDate, pMealCost, pPaxLiveIn, pPaxLiveOut);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertMealItems` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertMealItems`(pMealID varchar(30), pDescription text, pGroupID bigint(10), pUnit varchar(25), pUnitCost double(12,2), pSellingPrice double(12,2), pVat double(12,2), pServiceCharge double(12,2), pHotelID int(10), pUser varchar(20))
BEGIN
insert into meal_items(itemID, description, groupID, unit, unit_cost, selling_price, vat, service_charge, `status`, hotelID, createdby, createtime, updatedby, updatetime)
values (pMealID, pDescription, pGroupID, pUnit, pUnitCost, pSellingPrice, pVat, pServiceCharge, 'active', pHotelID, pUser, now(), pUser, now());
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertMealMenu` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertMealMenu`(pDescription text, pPrice double(12,2), pVat double(12,2), pServiceCharge double(12,2), pHotelID int(10), pUser varchar(20))
BEGIN
insert into meal_menu (description, price, vat, service_charge, `status`, hotel_id, createdby, createtime, updatedby, updatetime) values (pDescription, pPrice, pVat, pServiceCharge, 'active', pHotelID, pUser, now(), pUser, now());
select last_insert_id();
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertMealMenuDetail` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertMealMenuDetail`(pMenuID varchar(30), pItemID varchar(30))
BEGIN
insert into meal_menu_detail (menuID, itemID, quantity) values (pMenuID, pItemID, 0);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertMenuDetail` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertMenuDetail`(
pMENU_ID     varchar(10),  
pITEM_ID     varchar(10),   
pQUANTITY  	int
)
BEGIN
insert into `pos`.`menu detail` 
(MENU_ID, ITEM_ID, QUANTITY)
values
(pMENU_ID, pITEM_ID, pQUANTITY);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertNewCompany` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertNewCompany`(
in `pcompanycode` varchar(10),         
in `pcompanyname` varchar(150),
in `pcompanyurl` varchar(100),                  
in `pcontactperson` varchar(50),         
in `pdesignation` varchar(30),         
in `pstreet1` varchar(50),                 
in `pcity1` varchar(50),                   
in `pcountry1` varchar(30),                
in `pzip1` varchar(10),                     
in `pemail1` varchar(50) ,                                 
in `pcontactnumber1` varchar(15)           
)
BEGIN
insert into company 
(
`companycode`,         
`companyname`,
`companyurl`,                  
`contactperson`,         
`designation`,          
`street1` ,                 
`city1` ,                   
`country1` ,                
`zip1` ,                                   
`email1` ,                     
`contactnumber1`          
)
values
(	       
`pcompanycode`,         
`pcompanyname`,
`pcompanyurl`,                  
`pcontactperson`,         
`pdesignation`,           
`pstreet1` ,                 
`pcity1` ,                   
`pcountry1` ,                
`pzip1` ,                                     
`pemail1` ,                  
`pcontactnumber1`                 
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertNonGuestTransaction` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertNonGuestTransaction`(
pHotelID             int(5),
pTransactionDate     date, 
pTransactionCode     varchar(20),
pSubAccount              varchar(100), 
pReferenceNo             varchar(20),
pTransactionSource       varchar(20), 
pMemo                    varchar(500), 
pAcctSide                varchar(10), 
pCurrencyCode            varchar(10), 
pConversionRate          decimal(12,5), 
pCurrencyAmount          decimal(12,5), 
pBaseAmount              decimal(12,5), 
pGrossAmount             decimal(12,5), 
pDiscount                decimal(12,5), 
pServiceCharge           decimal(12,5), 
pServiceChargeInclusive  tinyint(1), 
pGovernmentTax           decimal(12,5), 
pGovernmentTaxInclusive  tinyint(1), 
pLocalTax                decimal(12,5), 
pLocalTaxInclusive       tinyint(1), 
pNetBaseAmount           decimal(12,5), 
pNetAmount               decimal(12,5), 
pReferenceFolioId        varchar(20), 
pRoomNumber              varchar(20), 
pAccountId               varchar(20), 
pGuestName               varchar(200), 
pCompanyName             varchar(200), 
pArrivalDate             datetime, 
pDepartureDate           datetime, 
pReferenceDriverId       varchar(20), 
pCarCompany              varchar(100), 
pMakeModel               varchar(100), 
pPlateNumber             varchar(10), 
pCreditCardNo          varchar(20), 
pChequeNo               varchar(20), 
pAccountName            varchar(100), 
pBankName               varchar(100), 
pChequeDate             date, 
pFOCGrantedBy          varchar(100), 
pCreditCardType        varchar(20), 
pApprovalSlip           varchar(20), 
pCreditCardExpiry      datetime, 
pTerminalID              varchar(10), 
pShiftCode               varchar(10),
pCreatedBy               varchar(50)
)
BEGIN
insert into `nonguesttransaction` 
(
hotelID, 
postingDate, 
transactionDate, 
transactionCode, 
subAccount, 
referenceNo, 
transactionSource, 
memo, 
acctSide, 
currencyCode, 
conversionRate, 
currencyAmount, 
baseAmount, 
grossAmount, 
discount, 
serviceCharge, 
serviceChargeInclusive, 
governmentTax, 
governmentTaxInclusive, 
localTax, 
localTaxInclusive, 
netBaseAmount, 
netAmount, 
referenceFolioId, 
roomNumber, 
accountId, 
guestName, 
companyName, 
arrivalDate, 
departureDate, 
referenceDriverId, 
carCompany, 
makeModel, 
plateNumber, 
creditCardNo, 
chequeNo, 
accountName, 
bankName, 
chequeDate, 
FOCGrantedBy, 
creditCardType, 
approvalSlip, 
creditCardExpiry, 
terminalID, 
shiftCode, 
statusFlag, 
postedToLedger, 
auditFlag, 
createdDate, 
createdBy, 
updatedDate, 
updatedBy
)
values
(
pHotelID, 
now(), 
pTransactionDate, 
pTransactionCode, 
pSubAccount, 
pReferenceNo, 
pTransactionSource, 
pMemo, 
pAcctSide, 
pCurrencyCode, 
pConversionRate, 
pCurrencyAmount, 
pBaseAmount, 
pGrossAmount, 
pDiscount, 
pServiceCharge, 
pServiceChargeInclusive, 
pGovernmentTax, 
pGovernmentTaxInclusive, 
pLocalTax, 
pLocalTaxInclusive, 
pNetBaseAmount, 
pNetAmount, 
pReferenceFolioId, 
pRoomNumber, 
pAccountId, 
pGuestName, 
pCompanyName, 
pArrivalDate, 
pDepartureDate, 
pReferenceDriverId, 
pCarCompany, 
pMakeModel, 
pPlateNumber, 
pCreditCardNo, 
pChequeNo, 
pAccountName, 
pBankName, 
pChequeDate, 
pFOCGrantedBy, 
pCreditCardType, 
pApprovalSlip, 
pCreditCardExpiry, 
pTerminalID, 
pShiftCode, 
'ACTIVE', 
0, 
0, 
now(), 
pCreatedBy, 
now(), 
pCreatedBy)
;
update 
drivers 
set 
totalCommission = totalCommission + if(pReferenceDriverId != "", pNetAmount, 0)
where driverId = pReferenceDriverId;
select last_insert_id();
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertPackageDetails` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertPackageDetails`(
pPackageID        varchar(20), 
pTransactionCode  varchar(20),   
pBasis            varchar(1),        
pPercentOff       decimal(5,2),   
pAmountOff        decimal(12,2),   
pHotelID          int(5),        
pCreatedBy        varchar(20)          
)
BEGIN
insert into `packagedetails` 
(PackageID, TransactionCode, Basis, PercentOff, 
AmountOff, HotelID,stateFlag, CreateTime, CreatedBy, 
Updatedby, UpdateTime)
values
(pPackageID, pTransactionCode, pBasis, pPercentOff, 
pAmountOff, pHotelID,'ACTIVE', now(), pCreatedBy, 
pCreatedBy, now());
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertPackageHeader` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertPackageHeader`(
pPackageID    varchar(20),        
pDescription  varchar(100),          
pFromDate     datetime,           
pToDate       datetime,            
pDaysApplied  varchar(50),           
pHotelID      int(5),          
pCreatedBy    varchar(50)        
)
BEGIN
insert into `packageheader` 
(PackageID, Description, FromDate, ToDate, 
DaysApplied, stateFlag, HotelID, CreatedBy, 
CreateTime, UpdatedBy, updateTime)
values
(pPackageID, pDescription,pFromDate, pToDate, 
pDaysApplied, 'ACTIVE', pHotelID, pCreatedBy, 
now(), pCreatedBy, now());			
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertPaymentLedger` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertPaymentLedger`(
pAcctID        varchar(20),
pDate          date,
pRefno         varchar(20),
pMemo	       text,
pAmountPaid    double(12,2),
pWithHoldingTax double(12,2),
pDebit         double(12,2),
pCredit        double(12,2),
pReffolio      varchar(20),
pSubfolio      varchar(1),
pHOTELID       int(5),
pCREATEDBY     varchar(20)
)
BEGIN
insert into `paymentledger` 
(acctid, date, refno,memo, amountPaid,withHoldingTax, debit, credit, 
reffolio, subfolio, HOTELID, CREATETIME, 
CREATEDBY, UPDATETIME, UPDATEDBY, posttoacctng, 
closed)
values
(pAcctid, pDate, pRefno,pMemo, pAmountPaid, pWithHoldingTax, pDebit, pCredit, 
pReffolio, pSubfolio, pHOTELID, now(), 
pCREATEDBY,now(), pCREATEDBY,'0', 
'0');
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertPrivilegeDetails` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertPrivilegeDetails`(
pPrivilegeID        varchar(20), 
pTransactionCode  varchar(20),   
pBasis            varchar(1),        
pPercentOff       decimal(5,2),   
pAmountOff        decimal(12,2),   
pHotelID          int(5),        
pCreatedBy        varchar(20)          
)
BEGIN
insert into `privilegedetails` 
(PrivilegeID, TransactionCode, Basis, PercentOff, 
AmountOff, HotelID,stateFlag, CreateTime, CreatedBy, 
Updatedby, UpdateTime)
values
(pPrivilegeID, pTransactionCode, pBasis, pPercentOff, 
pAmountOff, pHotelID,'ACTIVE', now(), pCreatedBy, 
pCreatedBy, now());
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertPrivilegeHeader` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertPrivilegeHeader`(
pPrivilegeID    varchar(20),        
pDescription  varchar(100),          
pFromDate     datetime,           
pToDate       datetime,            
pDaysApplied  varchar(50),           
pHotelID      int(5),          
pCreatedBy    varchar(50)        
)
BEGIN
insert into `privilegeheader` 
(PrivilegeID, Description, FromDate, ToDate, 
DaysApplied, stateFlag, HotelID, CreatedBy, 
CreateTime, UpdatedBy, updateTime)
values
(pPrivilegeID, pDescription,pFromDate, pToDate, 
pDaysApplied, 'ACTIVE', pHotelID, pCreatedBy, 
now(), pCreatedBy, now());	
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertPromo` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertPromo`(in ppromocode int,in ppromoname varchar(20),in ppercentoff int,in pstartdate date,in penddate date, in pbreakfastflag bool)
BEGIN
insert into promos(promocode,promoname,percentoff,startdate,enddate,breakfastflag)
values(ppromocode,ppromoname,ppercentoff,pstartdate,penddate,pbreakfastflag);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertRateCode` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertRateCode`(
in pratecode varchar(20), 
in pdescription varchar(30),
in photelid int(5),
in pcreatedby varchar(20)
)
BEGIN
insert into ratecodes
values(
pratecode, 
pdescription,
'ACTIVE',
photelid,
now(),
pcreatedby,
now(),
pcreatedby
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertRateType` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertRateType`(
in proomtypecode varchar(50),
in pratecode varchar(50),
in prateamount double(13,2),
in pHasBreakfast varchar(1),
in pBreakfastAmount double(12,2),
in photelid int(5),
in pcreatedby varchar(20)
)
BEGIN
insert into ratetypes
values(
proomtypecode,
pratecode,
prateamount,
pHasBreakfast,
pBreakfastAmount,
photelid,
now(),
pcreatedby,
now(),
pcreatedby,
'ACTIVE');
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertRequirementDetail` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spInsertRequirementDetail`(pRequirementID bigint(20), pDescription text, pUser varchar(20))
BEGIN
insert into requirement_details values(pRequirementID, pDescription, now(), pUser, now(), pUser);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertRequirementHeader` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spInsertRequirementHeader`(in pDescription text, in pTransactionCode varchar(20), in pHotelID bigint(20), in pUser varchar(20))
BEGIN
insert into requirement_header (requirementDescription, transactionCode, hotelID, `status`, createtime, createdby, updatetime, updatedby) values (pDescription, pTransactionCode, pHotelID, 'ACTIVE', now(), pUser, now(), pUser);
select last_insert_id();
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertRestaurantLedger` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spInsertRestaurantLedger`(
pMemo varchar(50),
pDate date,
pRefNo varchar(20),
pDebit double(12,2),
pCredit double(12,2),
pHOTELID int(5),
pCREATEDBY varchar(30),
pposttoacctng varchar(2),
pclosed varchar(2),
pRESTAURANT_ID varchar(10)
)
BEGIN
insert into `hotel_test`.`restaurantledger` 
(`Memo`, `Date`, `refno`, `debit`, `credit`, 
`HOTELID`, 
`CREATETIME`, 
`CREATEDBY`, 
`UPDATETIME`, 
`UPDATEDBY`, 
`posttoacctng`, 
`closed`, 
`RESTAURANT_ID`
)
values
(pMemo, pDate, prefno, pdebit, pcredit, pHOTELID,now(), 
pCREATEDBY, 
now(), 
pCREATEDBY, 
pposttoacctng, 
pclosed, 
pRESTAURANT_ID
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertRole` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertRole`(
pRoleName     varchar(30),
pDescription  varchar(100), 
pHotelId      int(5),    
pCreatedBy    varchar(30)
)
BEGIN
insert into `roles` 
(RoleName, Description, HotelId,
CreatedBy, CreateTime, UpdatedBy, UpdateTime
)
values
(pRoleName, pDescription, pHotelId, 
pCreatedBy, now(), pCreatedBy, now()
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertRoleMenu` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertRoleMenu`(
pRoleName   varchar(30),       
pMenu        varchar(50),         
pEnable      tinyint(1),
pHotelId     int(5),    
pCreatedBy   varchar(30) 
)
BEGIN
insert into `rolemenu` 
(RoleName, Menu, `Enable`, HotelId, 
stateFlag, CreatedBy, CreateTime, UpdatedBy, 
UpdateTime)
values
(pRoleName, pMenu, pEnable, pHotelId, 
'ACTIVE',pCreatedBy,now(),pCreatedBy,now())
on duplicate key update 
`Enable` = pEnable, 
updatedby = pCreatedby, 		
updateTime = now();
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertRoleSystemPrivilege` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertRoleSystemPrivilege`(
pHotelId               int(4),
pRoleName              varchar(50),
pPrivilegeDescription  varchar(500),
pIsAllowed             tinyint(1),
pCreatedBy             varchar(50)
)
BEGIN
insert into `role_privileges` 
(hotelId, roleName, privilegeDescription, 
isAllowed, createdBy, createTime, updatedBy, 
updateTime)
values
(pHotelId, pRoleName, pPrivilegeDescription, 
pIsAllowed, pCreatedBy, now(), pCreatedBy, 
now())
on duplicate key update 
isAllowed = pIsAllowed, 
updatedby = pCreatedby, 		
updateTime = now();
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertRoleUIPrivilege` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spInsertRoleUIPrivilege`(
in pRoleName     varchar(100),
in pModule       varchar(100),
in pFormName     varchar(100),
in pButtonName   varchar(100),
in pIsVisible    tinyint(1),
in pCreatedBy    varchar(50)
)
BEGIN
insert into `hotel_test`.`role_ui_privileges` 
(roleName, module, formName, buttonName, 
isVisible, statusFlag, createdDate, createdBy, 
updatedDate, updatedBy)
values
(pRoleName, pModule, pFormName, pButtonName, 
pIsVisible, 'ACTIVE', now(), pCreatedBy, 
now(), pCreatedBy)
on duplicate key update 
isVisible = pIsVisible, 
updatedby = pCreatedby, 		
updatedDate = now();
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertRoom` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertRoom`(
in proomid varchar(10),
in photelid int(5),
in proomtypecode varchar(50),
in pfloor int(4),
in pwindows tinyint(1),
in pdirfacing varchar(10),
in padjleft varchar(10),
in padjright varchar(10),
in proomimage varchar(80),
in psmokingtype tinyint(1),
in ptelephoneno varchar(15),
in pbedsplittable tinyint(1),
in pcreatedby varchar(20)
)
BEGIN
insert into rooms
values(
proomid,
photelid,
proomtypecode,
pfloor,
pwindows,
pdirfacing,
padjleft,
padjright,
proomimage,
'VACANT',
'CLEAN',
psmokingtype,
'0',
'0',
ptelephoneno,
pbedsplittable,
now(),
pcreatedby,
now(),
pcreatedby
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertRoomAmenity` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertRoomAmenity`(
in proomid int,in pamenityid int
)
BEGIN
insert into roomamenities(roomid,amenityid)
values (proomid,pamenityid);
update amenities set amenities.stateflag = 'ASSIGNED'
where amenities.amenityid = pamenityid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertRoomBlock` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertRoomBlock`(
in pBlockid int(11),
in pReason text,
in pFolioID varchar(20),
in pHotelID int(11)
)
BEGIN
Insert into RoomBlock(blockid,reason, FolioID, HotelID)
values(pBlockID,pReason,pFolioID, pHotelID);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertRoomEvents` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertRoomEvents`(
pEventID     varchar(20),        
pRoomID      varchar(10),       
pEVENTDATE   datetime,      
pEventType   varchar(25),       
pRoomRate    decimal(12,2),       
pCREATEDBY   varchar(20),      
pHOTELID  int(5),
pTransferFlag tinyint(1),
pStartTime time,
pEndTime time
)
BEGIN
insert into roomevents
(
EventID,
RoomID,
EVENTDATE,
EventType,
RoomRate,
CREATETIME,
CREATEDBY,
UPDATETIME,
Updatedby,
HOTELID,
transferFlag,
startTime,
endTime)  
values(
pEventID ,
pRoomID  ,
pEVENTDATE,
pEventType ,
pRoomRate   ,
now(),
pCREATEDBY   ,
now(),
pCREATEDBY   ,
pHOTELID  ,
pTransferFlag,
pStartTime,
pEndTime
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertRoomRequirements` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spInsertRoomRequirements`(
pFolioID varchar(20),
pRoomType varchar(80),
pNoOfPax int(5),
pGuaranteedPax int(5),
pNoOfRooms int(5),
pGuaranteedRooms int(5),
pBlockedRooms int(5),
pRemarks text,
pUser varchar(30))
BEGIN
insert into event_rooms(folioID, roomType, noOfPax, guaranteedPax, noOfRooms, guaranteedRooms, blockedRooms, remarks, createdby, createtime, updatedby, updatetime)
values
(pFolioID, pRoomType, pNoOfPax, pGuaranteedPax, pNoOfRooms, pGuaranteedRooms, pBlockedRooms, pRemarks, pUser, now(), pUser, now());
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertRoomSchedule` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertRoomSchedule`(
in pScheduleNo varchar(12),
in pRoomID varchar(12),
in pDate date,
in pEvent int(5),
in pEventType varchar(20)
)
BEGIN
insert into RoomSchedule(scheduleno,roomid,`date`,eventID,eventType)
values(pScheduleNO,pRoomnID,pDate,pEvent,pEventType);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertRoomType` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertRoomType`(
in proomtypecode varchar(80),
in pmaxoccupants int,
in pnoofbeds int,
in pnoofadult int,
in pnoofchild int ,
in psharetype varchar(15),
in photelid int(5),
in pcreatedby varchar(20)
)
BEGIN
insert into roomtypes
values(	
proomtypecode,
pmaxoccupants,
pnoofbeds,
pnoofadult,
pnoofchild, 
psharetype,
'ACTIVE',
photelid,
now(),
pcreatedby,
now(),
pcreatedby);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertSchedule` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertSchedule`(
in pScheduleNo varchar(12),
in pRoomNo varchar(12),
in pType varchar(15),
in pFrom date,
in pTo date,
in pDays int(3),
in pPromo int(3),
in pAmount double(10,2)
)
BEGIN
insert into Schedule(Scheduleno,Roomno,`Type`,`Fro`,`To`,Days,pDiscount,Amount)
values(pScheduleNo,RoomNo,pType,pFrom,pTo,pDays,pPromo,pAmount);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertShiftEndorsement` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertShiftEndorsement`(
pLogDate                 datetime,
pTerminalNo              varchar(5),
pShiftCode               varchar(5),
pLoggedUser              varchar(50),
pEndorsementDescription  text,
pHotelId                 int(1)
)
BEGIN
insert into `shiftendorsements` 
(logDate, TerminalNo, shiftCode, 
loggedUser, endorsementDescription, 
statusFlag, endorsementRemarks, acknowledgedBy, 
acknowledgeAtTerminal, acknowledgeAtShiftCode, 
priorityLevel, createdBy, createTime, 
updatedBy, updateTime, hotelId)
values
(pLogDate, pTerminalNo, pShiftCode, 
pLoggedUser, pEndorsementDescription, 
'ACTIVE', '', '', 
0, 0, 
1, pLoggedUser, now(), 
pLoggedUser, now(), pHotelId);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertTransactionCode` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertTransactionCode`(
pTranCode                  varchar(20),
pTranTypeId                varchar(20),
pMemo                      varchar(100),
pAcctSide                  varchar(10),
pServiceCharge             double(5,2),
pServiceChargeInclusive    tinyint(1),
pGovtTax                   double(5,2),
pGovtTaxInclusive          tinyint(1),
pLocalTax                  double(5,2),
pLocalTaxInclusive         tinyint(1),
pDefaultTransactionSource  varchar(100),
pDefaultAmount             double(12,2),
pWarningAmount             double(12,2),
pDepartmentId              varchar(20),
pLedger                    varchar(10),
pDebitSide                 varchar(20),
pCreditSide                varchar(20),
pHotelId                   int(5),
pCreatedBy                 varchar(20)
)
BEGIN
insert into `transactioncode` 
(tranCode, tranTypeId, memo, acctSide, 
serviceCharge, serviceChargeInclusive, 
govtTax, govtTaxInclusive, localTax, 
localTaxInclusive, defaultTransactionSource, 
defaultAmount, warningAmount, 
departmentId, ledger, debitSide, 
creditSide, hotelId, createTime, 
createdBy, updateTime, updatedBy, 
stateFlag)
values
(pTranCode, pTranTypeId, pMemo, pAcctSide, 
pServiceCharge, pServiceChargeInclusive, 
pGovtTax, pGovtTaxInclusive, pLocalTax, 
pLocalTaxInclusive, pDefaultTransactionSource, 
pDefaultAmount, pWarningAmount, 
pDepartmentId, pLedger, pDebitSide, 
pCreditSide, pHotelId, now(), 
pCreatedBy, now(), pCreatedBy, 
'ACTIVE');
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertTransactionCodeSubAccount` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spInsertTransactionCodeSubAccount`(
pTransactionCode         varchar(20), 
pSubAccountCode          varchar(20), 
pLocalTax                double(5,2), 
pLocalTaxInclusive       tinyint(1), 
pGovernmentTax           double(5,2), 
pGovernmentTaxInclusive  tinyint(1), 
pServiceCharge           double(5,2), 
pServiceChargeInclusive  tinyint(1), 
pCreatedBy               varchar(50), 
pHotelId                 int(4)
)
BEGIN
insert into `transctioncode_subaccount` 
(transactionCode, subAccountCode, localTax, 
localTaxInclusive, governmentTax, governmentTaxInclusive, 
serviceCharge, serviceChargeInclusive, 
statusFlag, createdBy, createdDate, updatedBy, 
updatedDate, hotelId)
values
(pTransactionCode, pSubAccountCode, pLocalTax, 
pLocalTaxInclusive, pGovernmentTax, pGovernmentTaxInclusive, 
pServiceCharge, pServiceChargeInclusive, 
'ACTIVE', pCreatedBy, now(), pCreatedBy, 
now(), pHotelId)
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertTransactionSourceDocument` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spInsertTransactionSourceDocument`(
in pDescription          varchar(100) , 
in pAbbreviation         varchar(10) , 
in pCreatedBy            varchar(50) 
)
BEGIN
insert into `transactionsourcedocuments` 
(description, abbreviation, 
statusFlag, createdBy, createdDate, updatedBy, 
updatedDate)
values
(pDescription, pAbbreviation, 
'ACTIVE', pCreatedBy, now(), pCreatedBy, 
now());
select last_insert_id();
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertTranType` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertTranType`(
in ptrantypeid varchar(20),
in ptrantype varchar(50),
in pacctgroup varchar(20),
in photelid int(5),
in pcreatedby varchar(20)
)
BEGIN
insert into trantypes
values
(
ptrantypeid,
ptrantype,
pacctgroup,
photelid,
now(),
pcreatedby,
now(),
pcreatedby,
'ACTIVE'
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertUser` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertUser`(
in pUserId           varchar(30),
in pPassword         varchar(20),
in pEmployeeIdNo      varchar(20),
in pLastName          varchar(30),      
in pFirstName         varchar(30),   
in pDepartment        varchar(100),  
in pDesignation       varchar(50),
in pHotelId 		int(5),
in pcreatedBy	varchar(20)
)
BEGIN
insert into users
(
UserId,
`Password`,
EmployeeIdNo,
LastName,
FirstName,
Department,
Designation,
Stateflag,
HotelId
)
values
(
pUserId,
md5(pPassword),
pEmployeeIdNo,
pLastName,
pFirstName,
pDepartment,
pDesignation,
'ACTIVE',
pHotelId
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spInsertUserRole` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spInsertUserRole`(
in pUserId varchar(20),
in pRoleName varchar(30),
in pHotelId int(5),
in pCreatedBy varchar(20)
)
BEGIN
insert into userroles
values
(
pUserId,
pRoleName,
pHotelId,
pCreatedBy,
now(),
pcreatedBy,
now(),
'ACTIVE'
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spPostAP` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spPostAP`(
in pAcctID varchar(20), 
in prefno varchar(20), 
in pdebit varchar(20), 
in pcredit varchar(20), 
in preffolio varchar(20), 
in psubfolio varchar(50),
in pHOTELID int(5), 
in pUPDATEDBY varchar(20)
)
BEGIN
insert into apLedger values	
(
pAcctID,
curdate(),
prefno,
pdebit,
pcredit, 
preffolio, 
psubfolio,
pHOTELID,
now(),  
pUPDATEDBY,
now(),
pUPDATEDBY,
0
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spPostAR` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spPostAR`(
in pAcctID varchar(20), 
in prefno varchar(20), 
in pdebit varchar(20), 
in pcredit varchar(20), 
in preffolio varchar(20), 
in psubfolio varchar(50),
in pHOTELID int(5), 
in pUPDATEDBY varchar(20)
)
BEGIN
insert into arLedger values	
(
pAcctID,
curdate(),
prefno,
pdebit,
pcredit, 
preffolio, 
psubfolio,
pHOTELID,
now(),  
pUPDATEDBY,
now(),
pUPDATEDBY,
0
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spPostCallCharge` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spPostCallCharge`(
in pfolioid int(6),
in ptransactioncode varchar(7),
in pmemo varchar(20),
in pbaseamount decimal(9,2),
in pupdatetime varchar(15),
in pupdatedby VARCHAR(20),
in pterminalid int(4)
)
BEGIN
insert into foliotransactions
(
folioid,
trandate,
transactioncode,
memo,
acctside,
currencycode,
currencyamount,
conversionrate,
baseamount,
updatetime,
updatedby,	
terminalid
)
values(
pfolioid,
now(),
ptransactioncode,
pmemo,
'DEBIT',
'Php',
pbaseamount,
'1.0',
pbaseamount,
pupdatetime,
pupdatedby,
pterminalid
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spPostCallToTransactions` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spPostCallToTransactions`(in pfolioid int(4),
in ptrandate datetime,
in preferenceno varchar(10),
in ptransactioncode varchar(7),
in pmemo varchar(20),
in pacctside varchar(10),
in pbaseamount decimal(9,2),
in pupdatetime varchar(15),
in pupdatedby VARCHAR(20),
in pterminalid int(4))
BEGIN
insert into
foliotransactions 
(folioid,
trandate,
referenceno,
transactioncode,
memo,
acctside,
baseamount,
updatetime,
updatedbyl,
terminalid )
values
(pfolioid,
ptrandate,
preferenceno,
ptransactioncode,
pmemo,
pacctside,
pbaseamount,
pupdatetime,
pupdatedbyl,
pterminalid );
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spPostCityLedger` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spPostCityLedger`(
in pAcctID varchar(20), 
in prefno varchar(20), 
in pdebit varchar(20), 
in pcredit varchar(20), 
in preffolio varchar(200), 
in psubfolio varchar(50),
in pHOTELID int(5), 
in pCREATEDBY varchar(20),
in pAuditDate date
)
BEGIN
insert into cityledger (                          
`AcctID` ,
`Date` ,
`refno` ,
`debit` ,
`credit`,
`reffolio`,
`subfolio` ,
`HOTELID` ,
`CREATETIME`,
`CREATEDBY` ,
`UPDATETIME` ,
`UPDATEDBY` ,
`posttoacctng`,
`closed` )   values	
(
pAcctID,
pAuditDate,
prefno,
pdebit,
pcredit, 
preffolio, 
psubfolio,
pHOTELID,
now(),  
pCREATEDBY, 
now(),
pCreatedBy, 
'0',
'0'
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spPostComledger` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spPostComledger`(
in pAcctID varchar(20), 
in prefno varchar(20), 
in pdebit varchar(20), 
in pcredit varchar(20), 
in preffolio varchar(20), 
in psubfolio varchar(50),
in pHOTELID int(5), 
in pCREATEDBY varchar(20)
)
BEGIN
insert into comledger values	
(
pAcctID,
curdate(),
prefno,
pdebit,
pcredit, 
preffolio, 
psubfolio,
pHOTELID,
now(),  
pCREATEDBY, 
now(),
pCREATEDBY, 
0
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spPostCreditCardLedger` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spPostCreditCardLedger`(
in pAcctID varchar(20), 
in prefno varchar(20), 
in pdebit decimal(12,2), 
in pcredit decimal(12,2),  
in preffolio varchar(20), 
in psubfolio varchar(50),
in pHOTELID int(5), 
in pCREATEDBY varchar(20)
)
BEGIN
insert into creditcardledger values	
(
pAcctID,
curdate(),
prefno,
pdebit,
pcredit, 
preffolio, 
psubfolio,
pHOTELID,
now(),  
pCREATEDBY, 
now(),
pCREATEDBY, 
0
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spPostCS` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spPostCS`(
paccountid varchar(20),
prefno varchar(20),
pdebit decimal(9,2),
pCredit decimal(9,2),	
pdiscount decimal(9,2),
pcashCredit decimal(9,2),
pcashdebit decimal(9,2),
prefFolio varchar(20),
pSubFolio varchar(20),
photelID varchar(5),
pCreatedby varchar(20)
)
BEGIN
insert into csledger(AcctID, `date`, refNo, debit, credit, discount, 
cashcredit, cashdebit, refFolio, subfolio, 
HOTELID, CREATETIME, CREATEDBY, UPDATETIME, 
UPDATEDBY, posttoacctng)
values
(paccountid,curdate(),prefno,pdebit,pcredit,pdiscount,pcashcredit,pcashdebit,preffolio,psubfolio,photelid,now(),pcreatedby,now(),pCreatedby,0);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spPostDepledger` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spPostDepledger`(
in pAcctID varchar(20), 
in prefno varchar(20), 
in pdebit varchar(20), 
in pcredit varchar(20), 
in preffolio varchar(20), 
in psubfolio varchar(50),
in pHOTELID int(5), 
in pCREATEDBY varchar(20),
in pUPDATEDBY varchar(20)
)
BEGIN
insert into cityledger values	
(
pAcctID,
curdate(),
prefno,
pdebit,
pcredit, 
preffolio, 
psubfolio,
pHOTELID,
now(),  
pCREATEDBY, 
now(),
pUPDATEDBY, 
0
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spPostGroupPackage` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spPostGroupPackage`(pFolioID varchar(30))
BEGIN
update event_booking_info set packagePosted=1 where folioid=pFolioID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spPostRoomCharge` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spPostRoomCharge`(
in ptrandate varchar(20),
in proomid varchar(10),
in preferenceno varchar(20),
in pamount double(13,2),
in ptrancode varchar(5)
)
BEGIN
insert into transactions(trandate,roomid,referenceno,amount,trancode)
values(ptrandate,proomid,preferenceno,pamount,ptrancode);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spPostSalesLedger` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spPostSalesLedger`(
in pAcctID varchar(20), 
in prefno varchar(20), 
in pdebit varchar(20), 
in pcredit varchar(20), 
in pnetSales decimal(12,2),
in preffolio varchar(20), 
in psubfolio varchar(50),
in pHOTELID int(5), 
in pUPDATEDBY varchar(20)
)
BEGIN
insert into SalesLedger values	
(
pAcctID,
curdate(),
prefno,
pdebit,
pcredit, 
pnetsales,
preffolio, 
psubfolio,
pHOTELID,
now(),  
pUPDATEDBY,
now(),
pUPDATEDBY,
0
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spPostsrvchrgledger` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spPostsrvchrgledger`(
in pDepartmentId varchar(20), 
in prefno varchar(20), 
in pdebit Decimal(12,2), 
in pcredit decimal(12,2), 
in preffolio varchar(20), 
in psubfolio varchar(50),
in pHOTELID int(5), 
in pCREATEDBY varchar(20)
)
BEGIN
insert into Srvchrgledger values	
(
pDepartmentId,
curdate(),
prefno,
pdebit,
pcredit, 
preffolio, 
psubfolio,
pHOTELID,
now(),  
pCREATEDBY,
now(),
pCREATEDBY, 
0
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spRecallFolioTransaction` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spRecallFolioTransaction`(
in pFolioTransactionNo int(20),
in pReferenceNo varchar(100),
in pUpdatedBy varchar(20)
)
BEGIN
update foliotransactions
set 
`status` = 'ACTIVE',
referenceNo = pReferenceNo,
updatedby = pUpdatedBy,
updatetime = now()
where
FolioTransactionNo = pFolioTransactionNo;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spRemoveFolioTransactionForTransfer` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spRemoveFolioTransactionForTransfer`(
in pTransactionCode varchar(20),
in pTranDate 	    date,
in pPostingDate 	    datetime,
in pFolioID          varchar(20),
in pSubFolio         varchar(1),
in pHotelID          int(5) 
)
BEGIN
delete from folioTransactions
where
transactioncode = pTransactionCode and
date(transactiondate) = pTranDate and
postingdate = pPostingdate and
folioid = pfolioid and
subfolio = pSubFolio and
hotelid = pHotelid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spRemovePackage` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spRemovePackage`(in pFolioID varchar(20), IN photelid int(5))
BEGIN
Update folio set `packageid`="" where folioID=pFolioID and hotelid=photelid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spRemoveUserRole` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spRemoveUserRole`(
in pUserId      varchar(20),
in pHotelId     int(5),
in pRoleName    varchar(30),
in pUpdatedBy   varchar(30)
)
BEGIN
update userroles
set
stateflag = 'DELETED',
updatetime = now(),
updatedby = pUpdatedBy
where
userid = pUserId and
hotelid = pHotelId and
roleName = pRoleName;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportActualGroupArrival` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportActualGroupArrival`(
in photelid int(5),
in pAuditDate date
)
BEGIN
select 
folio.folioid,
folio.companyid,
folio.accounttype,
if(substring(folio.companyid,1,1)='G',fGetCompanyName(folio.companyid), fGetGuestName(folio.companyid)) as GuestName,
folioschedules.roomid, 
folioschedules.roomtype,
folio.arrivalDate,
folio.DepartureDate,
folio.noOfadults as Pax,
folio.remarks,
folioschedules.todate as departure,
folioschedules.fromdate as arrival,
if(substring(folio.companyid,1,1)='G',fGetCompanyName(folio.companyid), fGetGuestName(folio.companyid)) as companyname,
fGetFolioBalance(folio.FolioId) as Balance,
rooms.floor
from
folioschedules left join rooms on rooms.roomid = folioschedules.roomid,
folio
where
folioschedules.folioid = folio.folioid and
date(folio.fromdate) = pAuditDate and
(folio.status = 'CHECKED IN' or folio.status = 'CHECKED OUT') and
folioschedules.hotelid = folio.hotelid and
folio.hotelid = photelid
order by folioid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportActualGuestDeparture` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportActualGuestDeparture`(
in pHotelID int(5),
in pAuditDate date
)
BEGIN
select 
folio.folioid,
guests.accountid,
guests.account_type,
concat(guests.lastname,", ",guests.firstname) as GuestName,
folio.remarks,
folioschedules.days,
folioschedules.roomid, folioschedules.roomtype,
folioschedules.fromdate,
date(folio.todate) as todate,
folio.arrivaldate,
folio.departuredate,
folio.noOfadults as Pax,
if(substring(folio.companyid,1,1)='G',fGetCompanyName(folio.companyid), folio.groupname) as companyname,
fGetFolioBalance(folio.FolioId) as Balance,
rooms.floor
from
guests,
folioschedules left join rooms on rooms.roomid = folioschedules.roomid,
folio
where
guests.accountid = folio.accountid and
folioschedules.folioid = folio.folioid and
date(folioschedules.todate) = pAuditDate and
folio.status = 'CHECKED OUT' and
guests.hotelid = folio.hotelid and
folioschedules.hotelid = folio.hotelid and
folio.hotelid = pHotelID and folioschedules.roomtype!='FUNCTION';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportActualGuestsArrival` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportActualGuestsArrival`(
in photelid int(5),
in pAuditDate date
)
BEGIN
select 
folio.folioid,
guests.accountid,
guests.account_type,
concat(guests.lastname,", ",guests.firstname) as GuestName,
folioschedules.roomid, 
folioschedules.roomtype,
folio.arrivalDate,
folio.DepartureDate,
folio.noOfadults as Pax,
folio.remarks,
folioschedules.todate as departure,
folioschedules.fromdate as arrival,
if(substring(folio.companyid,1,1)='G',fGetCompanyName(folio.companyid), folio.groupname) as companyname,
fGetFolioBalance(folio.FolioId) as Balance,
rooms.floor
from
guests,
folioschedules left join rooms on rooms.roomid = folioschedules.roomid,
folio
where
guests.accountid = folio.accountid and
folioschedules.folioid = folio.folioid and
date(folioschedules.fromdate) = pAuditDate and
(folio.status = 'CHECKED IN' or folio.status = 'CHECKED OUT') and
guests.hotelid = folio.hotelid and
folioschedules.hotelid = folio.hotelid and
folio.hotelid = photelid and folioschedules.roomtype!='FUNCTION'
order by guests.lastname;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportActualGuestsDeparture` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportActualGuestsDeparture`(
in photelid int(5),
in pAuditDate date
)
BEGIN
select 
folio.folioid,
guests.accountid,
concat(guests.lastname,", ",guests.firstname) as GuestName,
folioschedules.roomid, folioschedules.roomtype
from
guests,
folioschedules,
folio
where
guests.accountid = folio.accountid and
folioschedules.folioid = folio.folioid and
date(folio.departuredate) = pAuditDate and
folio.status = 'CHECKED OUT';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportAdjustmentTransactions` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportAdjustmentTransactions`()
BEGIN
(
select 
accountingadjustments.postingDate,
accountingadjustments.transactionDate,
accountingadjustments.referenceNo,
accountingadjustments.transactionSource as ReferenceType,
accountingadjustments.referenceFolioId as FolioId,
accountingadjustments.accountId,
accountingadjustments.guestName as GuestName,
if(accountingadjustments.statusFlag='VOID', 'VOID',accountingadjustments.transactioncode) as transactioncode,
if(accountingadjustments.statusFlag='VOID', 'VOIDED TRANSACTIONS', accountingadjustments.memo) as TransactionDescription,
accountingadjustments.baseAmount,
if(accountingadjustments.acctside='CREDIT' AND fGetTransactionCodeAcctSide(accountingadjustments.transactioncode)='DEBIT', 0-accountingadjustments.grossAmount,accountingadjustments.grossAmount) as grossAmount,
if(accountingadjustments.acctside='CREDIT' AND fGetTransactionCodeAcctSide(accountingadjustments.transactioncode)='DEBIT', 0-accountingadjustments.discount,accountingadjustments.discount) as discount,
if(accountingadjustments.acctside='CREDIT' AND fGetTransactionCodeAcctSide(accountingadjustments.transactioncode)='DEBIT', 0-accountingadjustments.servicecharge,accountingadjustments.servicecharge) as serviceCharge,
if(accountingadjustments.acctside='CREDIT' AND fGetTransactionCodeAcctSide(accountingadjustments.transactioncode)='DEBIT', 0-(accountingadjustments.governmentTax + 
accountingadjustments.localTax),accountingadjustments.governmentTax + 
accountingadjustments.localTax) as Tax,
0 as mealAmount,
accountingadjustments.memo,
"A " as subFolio,
if(accountingadjustments.AcctSide='DEBIT',accountingadjustments.netAmount,0.00) as DEBIT,
if(accountingadjustments.AcctSide='CREDIT',accountingadjustments.netAmount,0.00) as CREDIT,
accountingadjustments.CREATEDBY,
accountingadjustments.roomNumber as roomid,
"" as roomtype,
accountingadjustments.companyName,
fGetTransactionDescription(accountingadjustments.transactioncode) as description
from accountingadjustments force index(primary)
left join transactioncode on transactioncode.tranCode = accountingadjustments.transactioncode
)
order by transactioncode, ReferenceType, ReferenceNo;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportAllCashierTransaction` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportAllCashierTransaction`(
in pAuditDate date,
in pHotelId int(5),
in filter varchar(20)
)
BEGIN
(select
cashiers_logs.terminalid as Terminal,
cashiers_logs.cashierid,
cashiers_logs.shiftcode,
cashiers_logs.openingbalance,
cashiers_logs.openingadjustment,
cashiers_logs.beginningbalance,
cashiers_logs.chargeinamount,
cashiers_logs.cash,
cashiers_logs.creditcard,
cashiers_logs.cheque,	
cashiers_logs.others,
cashiers_logs.remarks,
cashiers_logs.adjustment,
cashiers_logs.netamount,
cashiers_logs.amountremitted,
cashiers_logs.updatedby,
foliotransactions.transactionDate,
foliotransactions.referenceno,
concat((fGetCurrentRoomOccupied(foliotransactions.folioid, foliotransactions.hotelid, pAuditDate)),' ', if(substring(foliotransactions.accountid,1,1)='G',fGetCompanyName(foliotransactions.accountid), fGetGuestName(foliotransactions.accountid))) as TransactionSource,
foliotransactions.transactioncode,
foliotransactions.transactionsource as referenceSource,
foliotransactions.memo,
foliotransactions.`status`,
foliotransactions.acctside,
foliotransactions.folioid,
if(foliotransactions.acctside='DEBIT',foliotransactions.baseamount,0.00) as CHARGES,  
if(foliotransactions.acctside='CREDIT',foliotransactions.baseamount,0.00) as CREDIT
from 	
transactioncode,
cashiers_logs
left join foliotransactions on foliotransactions.terminalid = cashiers_logs.terminalid and foliotransactions.shiftcode = cashiers_logs.shiftcode
where
foliotransactions.transactioncode = transactioncode.trancode and 
if(filter <> "ALL",
(transactioncode.trantypeid = 2 or transactioncode.trantypeid = 3 or 
transactioncode.trantypeid = 4 or transactioncode.trantypeid = 5 or 
transactioncode.trantypeid = 8 or transactioncode.trantypeid = 7 or
transactioncode.trantypeid = 9 or transactioncode.trantypeid = 11) and
(foliotransactions.transactioncode !='3100' and foliotransactions.transactioncode !='3200'and foliotransactions.transactioncode !='2501'),
((transactioncode.trantypeid != 1) or ((transactioncode.trantypeid=1 or transactioncode.trantypeid = 11 or transactioncode.trantypeid=9 or transactioncode.trantypeid=7) and foliotransactions.status='VOID')) and
(foliotransactions.transactioncode !='3100' and foliotransactions.transactioncode !='3200'and foliotransactions.transactioncode !='2501' ))
and
cashiers_logs.hotelid = pHotelid and
cashiers_logs.transactiondate = pAuditDate and
date(foliotransactions.transactiondate) = pAuditDate and
cashiers_logs.type = 'CLOSE'
)
UNION(
select
cashiers_logs.terminalid as Terminal,
cashiers_logs.cashierid,
cashiers_logs.shiftcode,
cashiers_logs.openingbalance,
cashiers_logs.openingadjustment,
cashiers_logs.beginningbalance,
cashiers_logs.chargeinamount,
cashiers_logs.cash,
cashiers_logs.creditcard,
cashiers_logs.cheque,	
cashiers_logs.others,
cashiers_logs.remarks,
cashiers_logs.adjustment,
cashiers_logs.netamount,
cashiers_logs.amountremitted,
cashiers_logs.updatedby,
nonguesttransaction.transactionDate,
nonguesttransaction.referenceNo,
if(nonguesttransaction.guestName="","WALK-IN",nonguesttransaction.guestName) as TransactionSource,
nonguesttransaction.transactionCode,
nonguesttransaction.transactionsource as referenceSource,
nonguesttransaction.memo,
nonguesttransaction.statusFlag as `status`,
nonguesttransaction.acctSide,
nonguesttransaction.referenceFolioId as folioId,
if(nonguesttransaction.acctside='DEBIT',nonguesttransaction.baseamount,0.00) as CHARGES,  
if(nonguesttransaction.acctside='CREDIT',nonguesttransaction.baseamount,0.00) as CREDIT
from cashiers_logs left join nonguesttransaction on (nonguesttransaction.terminalid = cashiers_logs.terminalid and nonguesttransaction.shiftcode = cashiers_logs.shiftcode) left join
transactioncode on nonguesttransaction.transactionCode = transactioncode.trancode
where
nonguesttransaction.transactionDate = pAuditDate and
nonguesttransaction.hotelID = pHotelId and
cashiers_logs.hotelid = pHotelid and
cashiers_logs.transactiondate = pAuditDate and
cashiers_logs.type = 'CLOSE' and
(transactioncode.trantypeid = 2 or transactioncode.trantypeid = 3 or 
transactioncode.trantypeid = 4 or transactioncode.trantypeid = 5 or 
transactioncode.trantypeid = 8 or transactioncode.trantypeid = 7 or
(transactioncode.trantypeid = 1 or 
transactioncode.trantypeid = 9 and nonguesttransaction.statusflag='VOID')) and
(nonguesttransaction.transactioncode !='3100' and nonguesttransaction.transactioncode !='3200'and nonguesttransaction.transactioncode !='2501' )
)
UNION
(
select
cashiers_logs.terminalid as Terminal,
cashiers_logs.cashierid,
cashiers_logs.shiftcode,
cashiers_logs.openingbalance,
cashiers_logs.openingadjustment,
cashiers_logs.beginningbalance,
cashiers_logs.chargeinamount,
cashiers_logs.cash,
cashiers_logs.creditcard,
cashiers_logs.cheque,	
cashiers_logs.others,
cashiers_logs.remarks,
cashiers_logs.adjustment,
cashiers_logs.netamount,
cashiers_logs.amountremitted,
cashiers_logs.updatedby,
cashiers_logs.transactionDate,
'' AS referenceno,
'' as TransactionSource,
'' AS transactioncode,
'' as referenceSource,
'' AS memo,
'ACTIVE' AS `status`,
'' AS acctside,
'' AS folioid,
0.00 as CHARGES,  
0.00 as CREDIT
from 	
cashiers_logs
where
cashiers_logs.hotelid = pHotelid and
date(cashiers_logs.transactiondate) = pAuditDate and
cashiers_logs.type = 'CLOSE'
order by transactiondate
)
order by transactiondate, referenceSource, referenceNo;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportAllCashierTransactions` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportAllCashierTransactions`(
in pterminalid int(4),
in pHotelId int(5),
in pAuditDate date
)
BEGIN
select 
concat(cashiers.terminalid,"-",cashiers.terminal) as Terminal,
cashiers.cashierid,
cashiers.shiftcode,
cashiers.openingbalance,
cashiers.openingadjustment,
cashiers.beginningbalance,
cashiers.chargeinamount,
cashiers.cash,
cashiers.creditcard,
cashiers.cheque,	
cashiers.others,
cashiers.adjustment,
cashiers.netamount,
foliotransactions.transactiondate,
foliotransactions.referenceno,
foliotransactions.transactioncode,
foliotransactions.transactionsource as referenceSource,
foliotransactions.memo,
foliotransactions.`status`,
foliotransactions.acctside,
if(foliotransactions.acctside='DEBIT',foliotransactions.baseamount,0.00) as CHARGES,  
if(foliotransactions.acctside='CREDIT',foliotransactions.baseamount,0.00) as CREDIT,
fGetTransactionDescription(foliotransactions.transactioncode) as description
from 	cashiers,
foliotransactions
where
cashiers.terminalid = foliotransactions.terminalid and
foliotransactions.terminalid = pterminalid and date(foliotransactions.transactiondate) = pAuditDate and
foliotransactions.hotelid = cashiers.hotelid and
cashiers.hotelid = pHotelId and
(date(foliotransactions.postingdate)=pAuditDate or (date(foliotransactions.postingdate)=date_add(pAuditDate, interval -1 day) and foliotransactions.transactionDate=pAuditDate))
order by transactiondate, referenceSource, referenceNo;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportAllCashierTransaction_Orig` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportAllCashierTransaction_Orig`(
in pAuditDate date,
in pHotelId int(5),
in filter varchar(20)
)
BEGIN
(select
cashiers_logs.terminalid as Terminal,
cashiers_logs.cashierid,
cashiers_logs.shiftcode,
cashiers_logs.openingbalance,
cashiers_logs.openingadjustment,
cashiers_logs.beginningbalance,
cashiers_logs.chargeinamount,
cashiers_logs.cash,
cashiers_logs.creditcard,
cashiers_logs.cheque,	
cashiers_logs.others,
cashiers_logs.remarks,
cashiers_logs.adjustment,
cashiers_logs.netamount,
cashiers_logs.amountremitted,
cashiers_logs.updatedby,
foliotransactions.transactionDate,
foliotransactions.referenceno,
concat((select roomid from folioschedules where folioid=foliotransactions.folioid limit 1),'  ',guests.lastname,', ',guests.firstname) as TransactionSource,
foliotransactions.transactioncode,
foliotransactions.transactionsource as referenceSource,
foliotransactions.memo,
foliotransactions.`status`,
foliotransactions.acctside,
foliotransactions.folioid,
if(foliotransactions.acctside='DEBIT',foliotransactions.baseamount,0.00) as CHARGES,  
if(foliotransactions.acctside='CREDIT',foliotransactions.baseamount,0.00) as CREDIT
from 	
transactioncode,
cashiers_logs
left join foliotransactions on foliotransactions.terminalid = cashiers_logs.terminalid and foliotransactions.shiftcode = cashiers_logs.shiftcode
left join guests on guests.accountid = foliotransactions.accountid
where
foliotransactions.transactioncode = transactioncode.trancode and 
if(filter <> "ALL",
(transactioncode.trantypeid = 2 or transactioncode.trantypeid = 3 or 
transactioncode.trantypeid = 4 or transactioncode.trantypeid = 5 or 
transactioncode.trantypeid = 8) and
(foliotransactions.transactioncode !='3100' and foliotransactions.transactioncode !='3200'and foliotransactions.transactioncode !='4200' and foliotransactions.transactioncode !='2501'),
(transactioncode.trantypeid = 2 or transactioncode.trantypeid = 3 or 
transactioncode.trantypeid = 4 or transactioncode.trantypeid = 5 or 
transactioncode.trantypeid = 8) and
(foliotransactions.transactioncode !='3100' and foliotransactions.transactioncode !='3200'and foliotransactions.transactioncode !='4200' and foliotransactions.transactioncode !='2501' ))
and
cashiers_logs.hotelid = pHotelid and
cashiers_logs.transactiondate = pAuditDate and
date(foliotransactions.transactiondate) = pAuditDate and
cashiers_logs.type = 'CLOSE'
)
UNION(
select
cashiers_logs.terminalid as Terminal,
cashiers_logs.cashierid,
cashiers_logs.shiftcode,
cashiers_logs.openingbalance,
cashiers_logs.openingadjustment,
cashiers_logs.beginningbalance,
cashiers_logs.chargeinamount,
cashiers_logs.cash,
cashiers_logs.creditcard,
cashiers_logs.cheque,	
cashiers_logs.others,
cashiers_logs.remarks,
cashiers_logs.adjustment,
cashiers_logs.netamount,
cashiers_logs.amountremitted,
cashiers_logs.updatedby,
nonguesttransaction.transactionDate,
nonguesttransaction.referenceNo,
if(nonguesttransaction.guestName="","WALK-IN",nonguesttransaction.guestName) as TransactionSource,
nonguesttransaction.transactionCode,
nonguesttransaction.transactionsource as referenceSource,
nonguesttransaction.memo,
nonguesttransaction.statusFlag as `status`,
nonguesttransaction.acctSide,
nonguesttransaction.referenceFolioId as folioId,
if(nonguesttransaction.acctside='DEBIT',nonguesttransaction.baseamount,0.00) as CHARGES,  
if(nonguesttransaction.acctside='CREDIT',nonguesttransaction.baseamount,0.00) as CREDIT
from cashiers_logs left join nonguesttransaction on (nonguesttransaction.terminalid = cashiers_logs.terminalid and nonguesttransaction.shiftcode = cashiers_logs.shiftcode) left join
transactioncode on nonguesttransaction.transactionCode = transactioncode.trancode
where
nonguesttransaction.transactionDate = pAuditDate and
nonguesttransaction.hotelID = pHotelId and
cashiers_logs.hotelid = pHotelid and
cashiers_logs.transactiondate = pAuditDate and
cashiers_logs.type = 'CLOSE' and
(transactioncode.trantypeid = 2 or transactioncode.trantypeid = 3 or 
transactioncode.trantypeid = 4 or transactioncode.trantypeid = 5 or 
transactioncode.trantypeid = 8) and
(nonguesttransaction.transactioncode !='3100' and nonguesttransaction.transactioncode !='3200'and nonguesttransaction.transactioncode !='4200' and nonguesttransaction.transactioncode !='2501' )
)
order by transactiondate, referenceSource, referenceNo;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportAllCashierVoidTransaction` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportAllCashierVoidTransaction`(
in pAuditDate date,
in pHotelId int(5),
in filter varchar(20)
)
BEGIN
(select
cashiers_logs.terminalid as Terminal,
cashiers_logs.cashierid,
cashiers_logs.shiftcode,
cashiers_logs.openingbalance,
cashiers_logs.openingadjustment,
cashiers_logs.beginningbalance,
cashiers_logs.chargeinamount,
cashiers_logs.cash,
cashiers_logs.creditcard,
cashiers_logs.cheque,	
cashiers_logs.others,
cashiers_logs.remarks,
cashiers_logs.adjustment,
cashiers_logs.netamount,
cashiers_logs.amountremitted,
cashiers_logs.updatedby,
foliotransactions.transactionDate,
foliotransactions.referenceno,
concat((fGetCurrentRoomOccupied(foliotransactions.folioid, foliotransactions.hotelid, pAuditDate)),' ', if(substring(foliotransactions.accountid,1,1)='G',fGetCompanyName(foliotransactions.accountid), fGetGuestName(foliotransactions.accountid))) as TransactionSource,
foliotransactions.transactioncode,
foliotransactions.memo,
foliotransactions.`status`,
foliotransactions.acctside,
foliotransactions.folioid,
if(foliotransactions.acctside='DEBIT',foliotransactions.baseamount,0.00) as CHARGES,  
if(foliotransactions.acctside='CREDIT',foliotransactions.baseamount,0.00) as CREDIT
from 	
transactioncode,
cashiers_logs
left join foliotransactions on foliotransactions.terminalid = cashiers_logs.terminalid and foliotransactions.shiftcode = cashiers_logs.shiftcode
left join folioschedules on folioschedules.folioid = foliotransactions.folioid
left join guests on guests.accountid = foliotransactions.accountid
where
foliotransactions.transactioncode = transactioncode.trancode and 
if(filter <> "ALL",
(transactioncode.trantypeid = 2 or transactioncode.trantypeid = 3 or 
transactioncode.trantypeid = 4 or transactioncode.trantypeid = 5 or 
transactioncode.trantypeid = 8) and
(foliotransactions.transactioncode !='3100' and foliotransactions.transactioncode !='3200'and foliotransactions.transactioncode !='4200' and foliotransactions.transactioncode !='2501'),
(transactioncode.trantypeid = 2 or transactioncode.trantypeid = 3 or 
transactioncode.trantypeid = 4 or transactioncode.trantypeid = 5 or 
transactioncode.trantypeid = 8) and
(foliotransactions.transactioncode !='3100' and foliotransactions.transactioncode !='3200'and foliotransactions.transactioncode !='4200' and foliotransactions.transactioncode !='2501' ))
and
cashiers_logs.hotelid = pHotelid and
cashiers_logs.transactiondate = pAuditDate and
date(foliotransactions.transactiondate) = pAuditDate and
cashiers_logs.type = 'CLOSE' and
foliotransactions.status = 'VOID'
order by transactiondate
)
UNION(
select
nonguesttransaction.terminalID as Terminal,
nonguesttransaction.terminalID as cashierId,
nonguesttransaction.shiftCode,
0 as openingbalance,
0 as openingadjustment,
0 as beginningbalance,
0 as chargeinamount,
0 as cash,
0 as creditcard,
0 as cheque,	
0 as others,
"" as remarks,
nonguesttransaction.UPDATEDBY,
0 as adjustment,
0 as netamount,
0 as amountremitted,
nonguesttransaction.transactionDate,
nonguesttransaction.referenceNo,
if(nonguesttransaction.guestName="","WALK-IN",nonguesttransaction.guestName) as TransactionSource,
nonguesttransaction.transactionCode,
nonguesttransaction.memo,
nonguesttransaction.statusFlag as `status`,
nonguesttransaction.acctSide,
nonguesttransaction.referenceFolioId as folioId,
if(nonguesttransaction.acctside='DEBIT',nonguesttransaction.baseamount,0.00) as CHARGES,  
if(nonguesttransaction.acctside='CREDIT',nonguesttransaction.baseamount,0.00) as CREDIT
from nonguesttransaction left join
transactioncode on nonguesttransaction.transactionCode = transactioncode.trancode
where
nonguesttransaction.transactionDate = pAuditDate and
nonguesttransaction.hotelID = pHotelId and
(transactioncode.trantypeid = 2 or transactioncode.trantypeid = 3 or 
transactioncode.trantypeid = 4 or transactioncode.trantypeid = 5 or 
transactioncode.trantypeid = 8) and
(nonguesttransaction.transactioncode !='3100' and nonguesttransaction.transactioncode !='3200'and nonguesttransaction.transactioncode !='4200' and nonguesttransaction.transactioncode !='2501' )
and nonguesttransaction.statusFlag = 'VOID'
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportAllHousekeepingJobs` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportAllHousekeepingJobs`(
in photelid int(5)
)
BEGIN
select 
hk_housekeepingjobs.roomid,
hk_housekeepingjobs.housekeepingdate,
hk_housekeepingjobs.starttime,
hk_housekeepingjobs.endtime,
hk_housekeepingjobs.elapsedtime,
concat(hk_housekeepers.lastname,", ",hk_housekeepers.firstname) as Housekeeper,
hk_housekeepingjobs.updatedby,
hk_housekeepingjobs.remarks as memo
from
hk_housekeepingjobs,
hk_housekeepers
where
hk_housekeepers.housekeeperid = hk_housekeepingjobs.housekeeperid and
hk_housekeepingjobs.hotelid = hk_housekeepers.hotelid and
hk_housekeepingjobs.hotelid = photelid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportAllIndividualFolio` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportAllIndividualFolio`(
in photelid int(5),
in pAuditDate date
)
BEGIN
select distinct
folio.folioid,
folio.foliotype,
folioschedules.roomid,
folioschedules.roomtype,
(folio.noofadults+folio.noofchild) as TotalGuests,
folioschedules.fromdate as ARRIVALDATE,
folioschedules.todate as DEPARTUREDATE,  
concat(guests.firstname," ",guests.lastname) as GuestName,
concat(guests.street,", ",guests.city) as CityAdd,
concat(guests.country, " ",guests.zip) as CountryAdd,
transactiondate,
referenceno,
transactioncode,
foliotransactions.netbaseamount,
foliotransactions.governmenttax,
foliotransactions.localtax,
foliotransactions.discount,
foliotransactions.memo,
foliotransactions.updatedby,
if(acctside='DEBIT',baseamount,0.00) as CHARGES,  
if(acctside='CREDIT',baseamount,0.00) as CREDIT
from
guests,
folio,
folioschedules,
foliotransactions
where
guests.accountid = folio.accountid and
folioschedules.folioid = folio.folioid and
date(folioschedules.fromdate) <= pAuditDate and
foliotransactions.folioid = folio.folioid and
foliotransactions.status = 'ACTIVE' and
folio.hotelid = photelid 
order by foliotransactions.transactiondate
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportAnnualActualGuestsArrival` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportAnnualActualGuestsArrival`(
in photelid int(5),
in pYear int
)
BEGIN
select 
folio.folioid,
guests.accountid,
guests.account_type,
concat(guests.lastname,", ",guests.firstname) as GuestName,
folioschedules.roomid, 
folioschedules.roomtype,
folio.arrivalDate,
folio.DepartureDate,
folio.noOfadults as Pax,
folio.remarks,
folioschedules.todate as departure,
folioschedules.fromdate as arrival,
company.companyname,
fGetFolioBalance(folio.FolioId) as Balance,
rooms.floor
from
guests,
folioschedules left join rooms on rooms.roomid = folioschedules.roomid,
folio left join company on company.companyid = folio.companyid
where
guests.accountid = folio.accountid and
folioschedules.folioid = folio.folioid and
year(folio.arrivaldate) = pYear and
(folio.status = 'CHECKED IN' or folio.status = 'CHECKED OUT') and
guests.hotelid = folio.hotelid and
folioschedules.hotelid = folio.hotelid and
folio.hotelid = photelid and folioschedules.roomtype!='FUNCTION'
order by guests.lastname;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportAnnualActualGuestsDeparture` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportAnnualActualGuestsDeparture`(
in photelid int(5),
in pYear int(4)
)
BEGIN
select 
folio.folioid,
guests.accountid,
guests.account_type,
concat(guests.lastname,", ",guests.firstname) as GuestName,
folio.remarks,
folioschedules.days,
folioschedules.roomid, folioschedules.roomtype,
folioschedules.fromdate,
date(folio.todate) as todate,
folio.arrivaldate,
folio.departuredate,
folio.noOfadults as Pax,
company.companyname,
fGetFolioBalance(folio.FolioId) as Balance,
rooms.floor
from
guests,
folioschedules left join rooms on rooms.roomid = folioschedules.roomid,
folio
left join company on company.companyid = folio.companyid
where
guests.accountid = folio.accountid and
folioschedules.folioid = folio.folioid and
( year(folioschedules.todate) = pYear ) and
folio.status = 'CHECKED OUT' and
guests.hotelid = folio.hotelid and
folioschedules.hotelid = folio.hotelid and
folio.hotelid = photelid AND folioschedules.roomtype!='FUNCTION';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportAnnualCancelledReservations` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportAnnualCancelledReservations`(
in pHotelID int(5),
in pYear int(4)
)
BEGIN
select 
folio.folioid,
if(folio.foliotype!='GROUP', folio.accountid, folio.companyid) as accountid,
if(folio.foliotype!='GROUP', fGetGuestName(folio.accountid), concat(folio.groupname, ' (', (if(substring(folio.companyid,1,1)='G',fGetCompanyName(folio.companyid), fGetGuestName(folio.companyid))), ')')) as GuestName,
if (folioschedules.roomid is null or folioschedules.roomid='', '', folioschedules.roomid) as roomid, 
if (folioschedules.roomid is null or folioschedules.roomid='', '', folioschedules.roomtype) as roomtype,
folio.remarks,
folio.noofadults,
if (folioschedules.roomid is null or folioschedules.roomid='', '', folioschedules.days) as days,
if (folioschedules.roomid is null or folioschedules.roomid='', '', folioschedules.rate) as rate,
folio.fromdate,
folio.todate as departure,
folio.reason_for_cancel,
folio.updatetime
from
folio left join folioschedules on (folioschedules.folioid = folio.folioid)
where
( year(folio.updatetime) = pYear ) and
(folio.status = 'CANCELLED' or folio.status='NO SHOW') and
folio.hotelid = photelid and foliotype!='DEPENDENT' AND foliotype!='JOINER';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportAnnualCashierTransactions` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportAnnualCashierTransactions`(
in pHotelId int(5),
in pYear int
)
BEGIN
set sql_big_selects = 1;
(
select
cashiers_logs.terminalid as Terminal,
cashiers_logs.cashierid,
cashiers_logs.shiftcode,
cashiers_logs.openingbalance,
cashiers_logs.openingadjustment,
cashiers_logs.beginningbalance,
cashiers_logs.chargeinamount,
cashiers_logs.cash,
cashiers_logs.creditcard,
cashiers_logs.cheque,	
cashiers_logs.others,
cashiers_logs.remarks,
cashiers_logs.adjustment,
cashiers_logs.netamount,
cashiers_logs.amountremitted,
cashiers_logs.updatedby,
foliotransactions.transactionDate,
foliotransactions.referenceno,
concat(folioschedules.roomid,'  ',guests.lastname,', ',guests.firstname) as TransactionSource,
foliotransactions.transactioncode,
foliotransactions.memo,
foliotransactions.`status`,
foliotransactions.acctside,
if(foliotransactions.acctside='DEBIT',foliotransactions.baseamount,0.00) as CHARGES,  
if(foliotransactions.acctside='CREDIT',foliotransactions.baseamount,0.00) as CREDIT
from 	
transactioncode force index(primary),
cashiers_logs force index(primary)
left join foliotransactions force index(primary) on foliotransactions.terminalid = cashiers_logs.terminalid and foliotransactions.shiftcode = cashiers_logs.shiftcode
left join folioschedules force index(primary) on folioschedules.folioid = foliotransactions.folioid
left join guests force index(primary) on guests.accountid = foliotransactions.accountid
where
foliotransactions.transactioncode = transactioncode.trancode and 
cashiers_logs.hotelid = pHotelid and
year(foliotransactions.transactionDate) = pYear and
cashiers_logs.type = 'CLOSE'
order by transactiondate
)
UNION(
select
nonguesttransaction.terminalID as Terminal,
nonguesttransaction.terminalID as cashierId,
nonguesttransaction.shiftCode,
0 as openingbalance,
0 as openingadjustment,
0 as beginningbalance,
0 as chargeinamount,
0 as cash,
0 as creditcard,
0 as cheque,	
0 as others,
"" as remarks,
0 as adjustment,
0 as netamount,
0 as amountremitted,
nonguesttransaction.updatedby,
nonguesttransaction.transactionDate,
nonguesttransaction.referenceNo,
if(nonguesttransaction.guestName="","WALK-IN",nonguesttransaction.guestName) as TransactionSource,
nonguesttransaction.transactionCode,
nonguesttransaction.memo,
nonguesttransaction.statusFlag as `status`,
nonguesttransaction.acctSide,
if(nonguesttransaction.acctside='DEBIT',nonguesttransaction.baseamount,0.00) as CHARGES,  
if(nonguesttransaction.acctside='CREDIT',nonguesttransaction.baseamount,0.00) as CREDIT
from nonguesttransaction force index(primary)
where
nonguesttransaction.hotelID = pHotelId and
year(nonguesttransaction.transactionDate) = pYear
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportAnnualCityTransferTransactions` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportAnnualCityTransferTransactions`(
in pHotelId int(4),
in pYear int
)
BEGIN
select 
(select roomid from folioschedules where folioid=folio.folioid limit 1) as roomid,
foliotransactions.folioid,
foliotransactions.accountid,
fGetGuestName(folio.accountid) as guestname,
folio.companyid,
if(substring(folio.companyid,1,1)='G',fGetCompanyName(folio.companyid), fGetGuestName(folio.companyid)) as companyname,
foliotransactions.postingdate,
foliotransactions.baseamount,
foliotransactions.updatedby
from foliotransactions left join folio on folio.folioid = foliotransactions.folioid
where foliotransactions.transactioncode='4200' and
year(foliotransactions.transactiondate) = pYear and 
foliotransactions.hotelid = pHotelId
union select roomNumber as roomID,
referenceFolioID as folioID,
accountID,
guestName,
accountID as companyID,
companyName,
postingdate,
baseamount,
updatedby
from nonguesttransaction
where transactioncode ='4200' and
year(transactiondate) = pYear and 
hotelid = pHotelId and
statusflag = 'ACTIVE';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportAnnualDriversSales` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportAnnualDriversSales`(pYear int, pHotelid int)
BEGIN
select drivers.*, netAmount as commission, transactiondate, referenceNo, referenceFolioId, accountId, roomNumber, guestName  from drivers, nonguesttransaction where referencedriverid=driverid and nonguesttransaction.hotelid=pHotelid and year(transactiondate) = pYear and statusflag!='VOID' order by lastname;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportAnnualExpectedGuestsArrival` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportAnnualExpectedGuestsArrival`(
in photelid int(5),
in pYear int(4)
)
BEGIN
select 
concat(guests.lastname, " , ", guests.firstname) as GuestName,
guests.memo,
folioschedules.roomid,
folioschedules.roomtype,
folioschedules.todate as departure,
FOLIO.remarks,
folioschedules.fromdate as arrival,
company.companyname,
(folio.noofadults + folio.noofchild) as pax,
rooms.floor
from 
guests,
folio left join company on company.companyid = folio.companyid,
folioschedules  left join rooms on folioschedules.roomid=rooms.roomid
where 
(folio.status != 'CANCELLED' and
folio.status != 'NO SHOW' and
folio.status != 'CHECKED IN' and
folio.status != 'CHECKED OUT') and
guests.accountid = folio.accountid and
folioschedules.folioid = folio.folioid and 
( year(folioschedules.fromdate) = pYear) and
guests.hotelid = folio.hotelid and
folioschedules.hotelid = folio.hotelid and
folio.hotelid = photelid
order by folioschedules.roomid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportAnnualExpectedGuestsDeparture` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportAnnualExpectedGuestsDeparture`(
in photelid int(5),
in pYear int(4)
)
BEGIN
select 
folio.folioid,
concat(guests.firstname,"  ",guests.lastname) as GuestName,
folioschedules.roomid,
folioschedules.roomtype,
folio.remarks,
rooms.floor
from 
guests,
folio,
folioschedules left join rooms on folioschedules.roomid=rooms.roomid
where 
folio.status != 'CANCELLED' and
folio.status != 'NO SHOW' and
guests.accountid = folio.accountid and
folio.folioid = folioschedules.folioid  and 
folio.status = 'CHECKED IN' and
( year(folioschedules.todate) = pYear )
and
folio.hotelid = guests.hotelid and
folioschedules.hotelid = folio.hotelid and
folio.hotelid = pHotelID
order by guests.lastname;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportAnnualMealAmount` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportAnnualMealAmount`(
in pYear int(5),
in pHotelId int(5)
)
BEGIN
select 
date(foliotransactions.transactiondate) as transactiondate,
'1002' as transactioncode,
sum(if(foliotransactions.acctside = "CREDIT", foliotransactions.mealAmount * -1, foliotransactions.mealAmount)) as NetBaseAmount,
transactioncode.acctside
from
foliotransactions  force index(FolioID,SubFolio,AccountID),
transactioncode  force index(primary)
where 	
foliotransactions.transactioncode=transactioncode.trancode and 
year(foliotransactions.transactiondate) = pYear and
foliotransactions.status = 'ACTIVE' and foliotransactions.transactioncode='1000'
group by foliotransactions.transactioncode;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportAnnualOutOfOrderRooms` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportAnnualOutOfOrderRooms`(
in pHotelId int(5),
in pYear int(4)
)
BEGIN
select distinct
roomevents.eventdate,
roomevents.roomid,
engineeringjobs.assignedperson,
engineeringjobs.startdate,
engineeringjobs.starttime,
engineeringjobs.enddate,
engineeringjobs.endtime,
engineeringservices.servicename
from 
roomevents left join
engineeringjobs on engineeringjobs.roomid = roomevents.roomid
left join engineeringservices on 
engineeringservices.enggserviceid = engineeringjobs.enggserviceid
where 
eventtype = 'ENGINEERING JOB' and
(year(eventdate) = pYear) and 
roomevents.hotelid = pHotelId
order by eventdate,roomid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportAnnualRoomOccupancyGraph` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportAnnualRoomOccupancyGraph`(
in pHotelId int(4),
in pYear int(4)
)
BEGIN
select roomevents.eventdate,((count(distinct roomevents.roomid)/FGetTotalRooms()) * 100) as Occupancy ,roomevents.eventtype from roomevents
where (roomevents.eventtype = "IN HOUSE" or roomevents.eventtype = "RESERVATION" or roomevents.eventtype = "CHECK OUT") and
year(roomevents.eventdate) = pYear
group by roomevents.eventdate,roomevents.eventtype
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportAnnualSales` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportAnnualSales`(
in pHotelid int(5),
in pYear int(4)
)
BEGIN
(
select
foliotransactions.transactiondate,
foliotransactions.folioid,
foliotransactions.referenceno, 
foliotransactions.netamount,
foliotransactions.updatetime,
foliotransactions.transactionsource,
folioschedules.updatedby,
folioschedules.roomid,
concat(transactioncode.trancode,"-",transactioncode.memo) as TRANCODE,
concat(guests.lastname,", ",guests.firstname) as GuestName
from 	foliotransactions
left join guests on guests.accountid = foliotransactions.accountid,
folioschedules,
transactioncode,
trantypes 
where 	
folioschedules.folioid = foliotransactions.folioid and
foliotransactions.transactioncode=transactioncode.trancode and 
transactioncode.trantypeid=trantypes.trantypeid and
trantypes.trantypeid = '1' and
( Year(transactiondate) = pYear) and
folioschedules.hotelid = foliotransactions.hotelid and
transactioncode.hotelid = foliotransactions.hotelid and
trantypes.hotelid = foliotransactions.hotelid and
foliotransactions.hotelid = photelid and
foliotransactions.status = 'ACTIVE'
order by transactiondate
)
UNION
(
select
nonguesttransaction.transactiondate,
nonguesttransaction.referenceFolioId as folioid,
nonguesttransaction.referenceNo, 
nonguesttransaction.netamount,
nonguesttransaction.updatedDate as updateTime,
nonguesttransaction.transactionSource,
nonguesttransaction.updatedby,
nonguesttransaction.roomNumber as roomid,
concat(transactioncode.trancode,"-",transactioncode.memo) as TRANCODE,
nonguesttransaction.guestName as GuestName
from 
nonguesttransaction force index(primary)
left join transactioncode on transactioncode.trancode = nonguesttransaction.transactionCode 
left join trantypes on transactioncode.trantypeid = trantypes.trantypeid
where 
nonguesttransaction.acctSide = 'DEBIT' and
trantypes.trantypeid = '1' and
( Year(transactionDate) = pYear ) and
nonguesttransaction.hotelid = pHotelid and
nonguesttransaction.statusflag = 'ACTIVE'
order by transactiondate
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportAnnualSalesExecutive` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportAnnualSalesExecutive`(pYear int, pHotelID int(2), pSalesExecutive varchar(30))
BEGIN
if(pSalesExecutive!='ALL') then
select 
(fGetTotalFolioAmountForSalesExecutive('1', pHotelID, 'A', 'DEBIT', folioid) +
fGetFolioTransferDebitForSalesExecutive('4100', pHotelID, 'A', 'DEBIT', folioid)) -
(fGetFolioTransferDebitForSalesExecutive('4100', pHotelID, 'A', 'CREDIT', folioid) +
fGetTotalFolioAmountForSalesExecutive('7', pHotelID, 'A', 'CREDIT', folioid) +
fGetTotalFolioAmountForSalesExecutive('1', pHotelID, 'A', 'CREDIT', folioid)) as totalSales,sales_executive, folioid, if(foliotype='GROUP', concat(if(substring(folio.companyid,1,1)='G',fGetCompanyName(folio.companyid), fGetGuestName(folio.companyid)), ' [', folio.groupname, ']'), concat(fGetGuestName(folio.accountid), ' [', folio.groupname, ']')) as companyName, 
source, arrivalDate as arrival, departureDate as departure from folio where sales_executive=pSalesExecutive and folio.status='CHECKED OUT' and folio.foliotype!='JOINER' and 
year(departureDate)=pYear
order by totalSales desc, sales_executive;
else
select 
(fGetTotalFolioAmountForSalesExecutive('1', pHotelID, 'A', 'DEBIT', folioid) +
fGetFolioTransferDebitForSalesExecutive('4100', pHotelID, 'A', 'DEBIT', folioid)) -
(fGetFolioTransferDebitForSalesExecutive('4100', pHotelID, 'A', 'CREDIT', folioid) +
fGetTotalFolioAmountForSalesExecutive('7', pHotelID, 'A', 'CREDIT', folioid) +
fGetTotalFolioAmountForSalesExecutive('1', pHotelID, 'A', 'CREDIT', folioid)) as totalSales,sales_executive, folioid, if(foliotype='GROUP', concat(if(substring(folio.companyid,1,1)='G',fGetCompanyName(folio.companyid), fGetGuestName(folio.companyid)), ' [', folio.groupname, ']'), concat(fGetGuestName(folio.accountid), ' [', folio.groupname, ']')) as companyName, 
source, arrivalDate as arrival, departureDate as departure from folio where folio.status='CHECKED OUT' and folio.foliotype!='JOINER' and 
year(departureDate)=pYear order by totalSales, sales_executive desc;
end if;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportAnnualSalesProduction` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportAnnualSalesProduction`(pYear int(5), pHotelID int(5))
BEGIN
select date_format(fromdate, '%d-%b-%Y') as fromDate, date_format(todate, '%d-%b-%Y') as toDate, folio.folioid, if(substring(folio.companyid,1,1)='G',fGetCompanyName(folio.companyid), fGetGuestName(folio.companyid)) as companyName, groupname, eventType, (fGetTotalFolioAmountForSalesExecutive('1', pHotelID, 'A', 'DEBIT', folio.folioid) +
fGetFolioTransferDebitForSalesExecutive('4100', pHotelID, 'A', 'DEBIT', folio.folioid)) -
(fGetFolioTransferDebitForSalesExecutive('4100', pHotelID, 'A', 'CREDIT', folio.folioid) +
fGetTotalFolioAmountForSalesExecutive('7', pHotelID, 'A', 'CREDIT', folio.folioid) +
fGetTotalFolioAmountForSalesExecutive('1', pHotelID, 'A', 'CREDIT', folio.folioid)) as packageAmount, if(folio.status='CANCELLED', 'LOST/UNREALIZED', if(folio.status='CHECKED OUT' or folio.status='CHECKED IN', 'REALIZED', folio.status)) as `status`, reason_for_cancel as reason
from folio left join event_booking_info on (folio.folioid=event_booking_info.folioid) where foliotype='GROUP' and year(fromdate)=pYear and folio.hotelid=pHotelId
order by `status`, fromdate;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportAnnualSalesSummary` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportAnnualSalesSummary`(
in pHotelid int(5),
in pYear int
)
BEGIN
(
select transactioncode, sum(baseamount) as BaseAmount, sum(grossAmount) as GrossAmount, sum(netAmount) as NetAmount, sum(netbaseamount) as NetBaseAmount, sum(discount) as Discount, sum(govttax) as GovtTax, sum(mealamount) as MealAmount, sum(localtax) as LocalTax, sum(servicecharge) as ServiceCharge, sum(transactioncount) as TransactionCount, TransactionDescription, acctside, sum(monthtodate) as MonthToDate, sum(yeartodate) as YearToDate from
(select 
foliotransactions.transactioncode,
sum(if(foliotransactions.acctside = "CREDIT", foliotransactions.baseAmount * -1, foliotransactions.baseAmount)) as BaseAmount,
sum(if(foliotransactions.acctside = "CREDIT", foliotransactions.grossAmount * -1, foliotransactions.grossAmount)) as GrossAmount,
sum(if(foliotransactions.acctside = "CREDIT", foliotransactions.netAmount * -1, foliotransactions.netAmount)) as NetAmount,
sum(if(foliotransactions.acctside = "CREDIT", foliotransactions.netBaseAmount * -1, foliotransactions.netBaseAmount)) as NetBaseAmount,
sum(if(foliotransactions.acctside = "CREDIT", foliotransactions.discount * -1, foliotransactions.discount)) as Discount,
sum(if(foliotransactions.acctside = "CREDIT", foliotransactions.governmentTax * -1, foliotransactions.governmentTax)) as GovtTax,
sum(if(foliotransactions.acctside = "CREDIT", foliotransactions.mealAmount * -1, foliotransactions.mealAmount)) as MealAmount,
sum(if(foliotransactions.acctside = "CREDIT", foliotransactions.localtax * -1, foliotransactions.localtax)) as LocalTax,
sum(if(foliotransactions.acctside = "CREDIT", foliotransactions.servicecharge * -1, foliotransactions.servicecharge)) as ServiceCharge,
count(foliotransactions.transactioncode) as TransactionCount,
transactioncode.memo as TransactionDescription,
transactioncode.acctside,
fGetTransactionNetBaseAmountMonthToDate(
foliotransactions.transactioncode,
foliotransactions.acctside,
transactiondate,
pHotelId
) as MonthToDate,
fGetTransactionNetBaseAmountYearToDate(
foliotransactions.transactioncode,
foliotransactions.acctside,
transactiondate,
pHotelId
) as YearToDate
from
foliotransactions  force index(FolioID,SubFolio,AccountID),
transactioncode  force index(primary),
trantypes  force index(primary)
where 	
foliotransactions.transactioncode=transactioncode.trancode and 
transactioncode.trantypeid=trantypes.trantypeid and
year(transactiondate) = pYear and
foliotransactions.status = 'ACTIVE'
group by foliotransactions.transactioncode, foliotransactions.acctside
UNION all
select 
nonguesttransaction.transactioncode,
sum(if(nonguesttransaction.acctside = "CREDIT", nonguesttransaction.baseAmount * -1, nonguesttransaction.baseAmount)) as BaseAmount,
sum(if(nonguesttransaction.acctside = "CREDIT", nonguesttransaction.grossAmount * -1, nonguesttransaction.grossAmount)) as GrossAmount,
sum(if(nonguesttransaction.acctside = "CREDIT", nonguesttransaction.netAmount * -1, nonguesttransaction.netAmount)) as NetAmount,
sum(if(nonguesttransaction.acctside = "CREDIT", nonguesttransaction.netBaseAmount * -1, nonguesttransaction.netBaseAmount)) as NetBaseAmount,
sum(if(nonguesttransaction.acctside = "CREDIT", nonguesttransaction.discount * -1, nonguesttransaction.discount)) as Discount,
sum(if(nonguesttransaction.acctside = "CREDIT", nonguesttransaction.governmentTax * -1, nonguesttransaction.governmentTax)) as GovtTax,
0 as MealAmount,
sum(if(nonguesttransaction.acctside = "CREDIT", nonguesttransaction.localtax * -1, nonguesttransaction.localtax)) as LocalTax,
sum(if(nonguesttransaction.acctside = "CREDIT", nonguesttransaction.servicecharge * -1, nonguesttransaction.servicecharge)) as ServiceCharge,
count(nonguesttransaction.transactioncode) as TransactionCount,
concat(transactioncode.memo, "-WALK IN") as TransactionDescription,
nonguesttransaction.acctside,
fGetNonGuestTransactionNetBaseAmountMonthToDate(
nonguesttransaction.transactioncode,
nonguesttransaction.acctside,
transactiondate,
pHotelId
)  as MonthToDate,
fGetNonGuestTransactionNetBaseAmountYearToDate(
nonguesttransaction.transactioncode,
transactioncode.acctside,
transactiondate,
pHotelId
)  as YearToDate
from
nonguesttransaction  force index(primary),
transactioncode force index(primary)
where 
year(transactiondate) = pYear and
nonguesttransaction.statusFlag = 'ACTIVE' and
nonguesttransaction.transactioncode=transactioncode.trancode
group by nonguesttransaction.transactioncode,nonguesttransaction.acctside) as transactionTable group by transactioncode
order by transactioncode asc, acctside desc
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportAnnualSalesSummaryBySubAccount` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportAnnualSalesSummaryBySubAccount`(
in pHotelid int(5),
in pYear int
)
BEGIN
(
select 
foliotransactions.subaccount,
if(foliotransactions.acctside = "DEBIT",
SUM(foliotransactions.baseamount),0) as DEBIT,
if(foliotransactions.acctside = "CREDIT",
SUM(foliotransactions.baseamount),0) as CREDIT,
count(foliotransactions.transactioncode) as Trans,
concat(transactioncode.trancode," - ",transactioncode.memo) as TRANCODE,
transactioncode.acctside
from
foliotransactions  force index(FolioID,SubFolio,AccountID),
transactioncode  force index(primary),
trantypes  force index(primary)
where 	
foliotransactions.subaccount != "" and
foliotransactions.transactioncode=transactioncode.trancode and 
transactioncode.trantypeid=trantypes.trantypeid and
year(transactiondate) = pYear
group by foliotransactions.subaccount, foliotransactions.acctside
order by foliotransactions.subaccount asc, foliotransactions.acctside desc
)
UNION
(
select
nonguesttransaction.subaccount,
if(nonguesttransaction.acctside = "DEBIT",
SUM(nonguesttransaction.baseamount),0) as DEBIT,
if(nonguesttransaction.acctside = "CREDIT",
SUM(nonguesttransaction.baseamount),0) as CREDIT,
count(nonguesttransaction.transactioncode) as Trans,
concat(nonguesttransaction.transactionCode," - ",nonguesttransaction.memo, " - WALK IN") as TRANCODE,
nonguesttransaction.acctside
from
nonguesttransaction  force index(primary)
where 
nonguesttransaction.subaccount != ""  and
year(transactiondate) = pYear
group by nonguesttransaction.subaccount,nonguesttransaction.acctside
order by nonguesttransaction.subaccount asc, nonguesttransaction.acctside desc
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportAnnualTransactionRegister` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportAnnualTransactionRegister`(
pHotelId int(4),
pYear int(4)
)
BEGIN
(
select
foliotransactions.postingDate,
foliotransactions.transactiondate,
foliotransactions.`ReferenceNo`,
foliotransactions.`TransactionSource` as ReferenceType,
foliotransactions.`FolioID`,
guests.accountid,
concat(guests.`lastname`,", " , guests.`firstname`) as GuestName,
foliotransactions.transactioncode,
foliotransactions.`Memo`,
if(AcctSide='DEBIT',foliotransactions.`netbaseamount`,0.00) as DEBIT,
if(AcctSide='CREDIT',foliotransactions.`netbaseamount`,0.00) as CREDIT,
foliotransactions.`CREATEDBY`,
(select roomid from folioschedules where folioid=foliotransactions.folioid limit 1) as roomid,
(select roomtype from folioschedules where folioid=foliotransactions.folioid limit 1) as roomtype,
if(foliotype="DEPENDENT", folio.groupname, company.companyName) as companyName,
fGetTransactionDescription(foliotransactions.transactioncode) as description
from
foliotransactions
left join folio on foliotransactions.folioid = folio.folioid
left join company on folio.companyid = company.companyid,
`guests`
where
foliotransactions.`AccountID`=guests.`accountid`
and 
(year(foliotransactions.`TransactionDate`) = pYear ) and
foliotransactions.Status='ACTIVE'
order by folioschedules.roomid
)
UNION
(
select 
nonguesttransaction.postingDate,
nonguesttransaction.transactiondate,
nonguesttransaction.referenceNo,
nonguesttransaction.transactionSource as ReferenceType,
nonguesttransaction.referenceFolioId as `FolioID`,
nonguesttransaction.accountId,
nonguesttransaction.guestName as GuestName,
nonguesttransaction.transactioncode,
nonguesttransaction.`Memo`,
if(AcctSide='DEBIT',nonguesttransaction.netamount,0.00) as DEBIT,
if(AcctSide='CREDIT',nonguesttransaction.netamount,0.00) as CREDIT,
nonguesttransaction.`CREATEDBY`,
nonguesttransaction.roomNumber as roomid,
"" as roomtype,
nonguesttransaction.companyName,
fGetTransactionDescription(nonguesttransaction.transactioncode) as description
from
nonguesttransaction force index(primary)
where
year(nonguesttransaction.transactionDate) = pYear 
order by nonguesttransaction.roomNumber
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportAnnualTransactions` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportAnnualTransactions`(
in photelid int(5),
in pYear int(4)
)
BEGIN
select 	
foliotransactions.*,
if(foliotransactions.acctside='DEBIT',foliotransactions.baseamount,0.00) as CHARGES,  
if(foliotransactions.acctside='CREDIT',foliotransactions.baseamount,0.00) as CREDIT,
folioschedules.roomid,
concat(guests.lastname,", ",guests.firstname) as GuestName
from foliotransactions 
left join folioschedules on foliotransactions.folioid = folioschedules.folioid
left join guests on guests.accountid = foliotransactions.accountid
where
YEAR(transactiondate) = pYear and
foliotransactions.hotelid = photelid
order by `status`,transactiondate;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportAnnualVoidTransactions` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportAnnualVoidTransactions`(
in pHotelId int(4),
in pYear int(4)
)
BEGIN
(
select
foliotransactions.postingDate,
foliotransactions.transactiondate,
foliotransactions.`ReferenceNo`,
foliotransactions.`TransactionSource` as ReferenceType,
foliotransactions.`FolioID`,
concat(guests.`lastname`,", " , guests.`firstname`) as GuestName,
foliotransactions.transactioncode,
foliotransactions.`Memo`,
if(AcctSide='DEBIT',foliotransactions.`netAmount`,0.00) as DEBIT,
if(AcctSide='CREDIT',foliotransactions.`netAmount`,0.00) as CREDIT,
foliotransactions.`UPDATEDBY` as CREATEDBY,
folioschedules.roomid,
company.companyName
from
foliotransactions
left join folioschedules on folioschedules.folioid = foliotransactions.folioid
left join folio on folioschedules.folioid = folio.folioid
left join company on folio.companyid = company.companyid,
`guests`
where
foliotransactions.`AccountID`=guests.`accountid` and
( year(foliotransactions.`updatetime`) = pYear) and
foliotransactions.Status='VOID'
order by folioschedules.roomid
)
UNION
(
select
nonguesttransaction.postingDate,
nonguesttransaction.transactiondate,
nonguesttransaction.referenceNo,
nonguesttransaction.transactionSource as ReferenceType,
nonguesttransaction.referenceFolioId as FolioID,
nonguesttransaction.guestName as GuestName,
nonguesttransaction.transactioncode,
nonguesttransaction.`Memo`,
if(AcctSide='DEBIT', nonguesttransaction.netAmount,0.00) as DEBIT,
if(AcctSide='CREDIT',nonguesttransaction.netAmount,0.00) as CREDIT,
nonguesttransaction.`UPDATEDBY` as CREATEDBY,
nonguesttransaction.roomNumber as roomid,
nonguesttransaction.companyName
from
nonguesttransaction force index(primary)
where
nonguesttransaction.statusFlag = 'VOID' and
year(nonguesttransaction.updatedDate) = pYear
order by nonguesttransaction.roomNumber
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportBanquetEventContractHeader` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportBanquetEventContractHeader`(pFolioID varchar(25), pHotelID int(5))
BEGIN
select distinct folio.folioid, 
if(folioschedules.days is not null, 
if(folioschedules.fromdate=folioschedules.todate, date_format(folioschedules.fromdate, '%b. %e, %Y'), concat(date_format(folioschedules.fromdate, '%b. %e, %Y'),' - ', date_format(folioschedules.todate, '%b. %e, %Y'))), 
concat(date_format(folio.fromdate, '%b. %e, %Y'),' - ', date_format(folio.todate, '%b. %e, %Y'))) as fromdate,
if(folioschedules.todate is not null, folioschedules.todate, folio.todate) as todate, 
if(folioschedules.days is not null, if(folioschedules.fromdate=folioschedules.todate, '1 day only', concat(folioschedules.days + 1, ' day/s only')), concat(datediff(folio.todate, folio.fromdate) + 1, ' day/s only')) as days, 
event_booking_info.eventtype, 
concat(event_booking_info.noOfPaxLiveIn, ' persons') as liveInPax, 
concat(event_booking_info.noOfPaxLiveOut, ' persons') as liveOutPax, 
(select folioschedules.venue from folioschedules where folioschedules.folioid=folio.folioid order by fromdate limit 1) as venue,
(select concat(date_format(folioschedules.starttime, '%h:%i %p'), ' - ', date_format(folioschedules.endtime, '%h:%i %p')) from folioschedules where folioschedules.folioid=folio.folioid order by fromdate limit 1) as time,
folio.groupname, 
event_booking_info.contactperson, 
event_booking_info.contactaddress, 
event_booking_info.contactNumber, 
event_booking_info.mobileNumber,
event_booking_info.faxNumber,
event_booking_info.billingarrangement, 
concat('P ', format(event_booking_info.totalEstimatedCost, 2)) as packageamount, 
event_booking_info.authorizedsignatory,
event_booking_info.lobbyPosting,
concat(users.firstname, ' ', users.lastname) as sales_executive,
folio.masterfolio,
sum(foliotransactions.currencyAmount) as payments,
group_concat(foliotransactions.referenceno) as referenceno,
'EVENT DETAILS' as header,
(event_booking_info.noOfPaxLiveIn+event_booking_info.noOfPaxLiveOut) as totalPax,
folioschedules.setup,
event_booking_info.contactPosition,
(select `value` from system_config where `key`='SALES_EXECUTIVE_MANAGER') AS salesExecutiveManager,
if(substring(folio.companyid,1,1)='G',fGetCompanyName(folio.companyid), fGetGuestName(folio.companyid)) as companyName,
cast(group_concat(if(folioschedules.days is not null, 
if(folioschedules.fromdate=folioschedules.todate, 
concat(date_format(folioschedules.fromdate, '%b. %e, %Y'), ' ', concat(date_format(folioschedules.starttime, '%h:%i %p'), ' - ', date_format(folioschedules.endtime, '%h:%i %p'))), concat(date_format(folioschedules.fromdate, '%b. %e, %Y'),' - ', date_format(folioschedules.todate, '%b. %e, %Y'), ' ', concat(date_format(folioschedules.starttime, '%h:%i %p'), ' - ', date_format(folioschedules.endtime, '%h:%i %p')))), 
concat(date_format(folio.fromdate, '%b. %e, %Y'),' - ', date_format(folio.todate, '%b. %e, %Y'), ' ', concat(date_format(folioschedules.starttime, '%h:%i %p'), ' - ', date_format(folioschedules.endtime, '%h:%i %p')))) separator ' / ') as char(10000)) as wholeSched,
count(folioschedules.folioid) as countSched,
event_booking_info.emailAddress,
folio.remarks
from folio left join users on (folio.sales_executive=users.userid) left join foliotransactions on (foliotransactions.folioid=folio.folioid and foliotransactions.acctside='CREDIT') left join folioschedules on (folio.folioid=folioschedules.folioid) left join event_booking_info on (folio.folioid=event_booking_info.folioid)
where 
folio.folioid=pFolioID and 
folio.hotelid=pHotelID group by folio.folioid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportBanquetEventContractMeals` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportBanquetEventContractMeals`(pFolioID varchar(25))
BEGIN
select distinct concat('MENU: ', event_meal_header.mealtype) as mealtype, event_meal_details.description, event_meal_header.folioid from event_meal_header, event_meal_details where event_meal_header.mealid=event_meal_details.mealid and event_meal_header.folioid=pFolioID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportBanquetEventContractRequirements` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportBanquetEventContractRequirements`(pFolioID varchar(25))
BEGIN
select distinct * from event_requirements where folioid=pFolioid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportBanquetWeddingDetails` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportBanquetWeddingDetails`(pFolioID varchar(30))
BEGIN
select event_details.* from event_details, event_booking_info where event_details.folioid=pFolioID and event_details.folioid=event_booking_info.folioid and event_booking_info.eventType='WEDDING';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportCancelledReservation` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportCancelledReservation`(
in pHotelID int(5),
in pAuditDate varchar(15)
)
BEGIN
if not(pAuditDate = "") then
select 
folio.folioid,
if(folio.foliotype!='GROUP', folio.accountid, folio.companyid) as accountid,
if(folio.foliotype!='GROUP', fGetGuestName(folio.accountid), concat(folio.groupname, ' (', (if(substring(folio.companyid,1,1)='G',fGetCompanyName(folio.companyid), fGetGuestName(folio.companyid))), ')')) as GuestName,
if (folioschedules.roomid is null or folioschedules.roomid='', '', folioschedules.roomid) as roomid, 
if (folioschedules.roomid is null or folioschedules.roomid='', '', folioschedules.roomtype) as roomtype,
folio.remarks,
folio.noofadults,
if (folioschedules.roomid is null or folioschedules.roomid='', '', folioschedules.days) as days,
if (folioschedules.roomid is null or folioschedules.roomid='', '', folioschedules.rate) as rate,
folio.fromdate,
folio.todate as departure,
folio.reason_for_cancel,
folio.updatetime
from
folioschedules right join
folio on (folioschedules.folioid = folio.folioid)
where
date(folio.updatetime) = cast(pAuditDate as date) and
(folio.status = 'CANCELLED' or folio.status = 'NO SHOW') and
folio.hotelid = photelid  order by roomid;
else
select 
folio.folioid,
if(folio.foliotype!='GROUP', folio.accountid, folio.companyid) as accountid,
if(folio.foliotype!='GROUP', fGetGuestName(folio.accountid), concat(folio.groupname, ' (', (if(substring(folio.companyid,1,1)='G',fGetCompanyName(folio.companyid), fGetGuestName(folio.companyid))), ')')) as GuestName,
if (folioschedules.roomid is null or folioschedules.roomid='', '', folioschedules.roomid) as roomid, 
if (folioschedules.roomid is null or folioschedules.roomid='', '', folioschedules.roomtype) as roomtype,
folio.remarks,
folio.noofadults,
if (folioschedules.roomid is null or folioschedules.roomid='', '', folioschedules.days) as days,
if (folioschedules.roomid is null or folioschedules.roomid='', '', folioschedules.rate) as rate,
folio.fromdate,
folio.todate as departure,
folio.reason_for_cancel,
folio.updatetime
from
folioschedules right join
folio on (folioschedules.folioid = folio.folioid)
where
(folio.status = 'CANCELLED' or folio.status = 'NO SHOW') and
folio.hotelid = photelid  order by roomid;
end if;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportCashierChargesTransaction` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportCashierChargesTransaction`(
in pterminalid int(4),
in pHotelId int(5),
in pAuditDate date
)
BEGIN
select 
concat(cashiers.terminalid,"-",cashiers.terminal) as Terminal,
cashiers.cashierid,
cashiers.shiftcode,
cashiers.openingbalance,
cashiers.openingadjustment,
cashiers.beginningbalance,
cashiers.chargeinamount,
cashiers.cash,
cashiers.creditcard,
cashiers.cheque,	
cashiers.others,
cashiers.adjustment,
cashiers.netamount,
foliotransactions.transactiondate,
foliotransactions.referenceno,
foliotransactions.transactioncode,
foliotransactions.memo,
foliotransactions.`status`,
foliotransactions.acctside,
foliotransactions.folioid,
if(foliotransactions.acctside='DEBIT',foliotransactions.baseamount,0.00) as CHARGES,  
if(foliotransactions.acctside='CREDIT',foliotransactions.baseamount,0.00) as CREDIT,
fGetTransactionDescription(foliotransactions.transactioncode) as description
from 	cashiers
left join foliotransactions on foliotransactions.terminalid = cashiers.terminalid and date(foliotransactions.transactiondate) = pAuditDate
left join transactioncode on transactioncode.trancode = foliotransactions.transactioncode and
transactioncode.trantypeid = 1
where
cashiers.terminalid = pterminalid and
cashiers.hotelid = pHotelId
order by transactiondate;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportCashierPaymentTransaction` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportCashierPaymentTransaction`(
in pterminalid int(4),
in pCashierId varchar(5),
in pShiftCode varchar(5),
in pHotelId int(5),
in pAuditDate date
)
BEGIN
(
select
cashiers_logs.terminalid as Terminal,
cashiers_logs.cashierid,
cashiers_logs.shiftcode,
cashiers_logs.openingbalance,
cashiers_logs.openingadjustment,
cashiers_logs.beginningbalance,
cashiers_logs.chargeinamount,
cashiers_logs.cash,
cashiers_logs.creditcard,
cashiers_logs.cheque,	
cashiers_logs.others,
cashiers_logs.remarks,
cashiers_logs.updatedby,
cashiers_logs.adjustment,
cashiers_logs.netamount,
cashiers_logs.amountremitted,
foliotransactions.transactionDate,
foliotransactions.referenceno,
concat((fGetCurrentRoomOccupied(foliotransactions.folioid, foliotransactions.hotelid, pAuditDate)),' ', if(substring(foliotransactions.accountid,1,1)='G',fGetCompanyName(foliotransactions.accountid), fGetGuestName(foliotransactions.accountid))) as TransactionSource,
foliotransactions.transactioncode,
foliotransactions.memo,
foliotransactions.`status`,
foliotransactions.acctside,
foliotransactions.folioid,
if(foliotransactions.acctside='DEBIT',foliotransactions.netAmount,0.00) as CHARGES,  
if(foliotransactions.acctside='CREDIT',foliotransactions.netAmount,0.00) as CREDIT,
fGetTransactionDescription(foliotransactions.transactioncode) as description
from 	
cashiers_logs
left join foliotransactions on cashiers_logs.terminalid = foliotransactions.terminalid and cashiers_logs.shiftcode = foliotransactions.shiftcode and foliotransactions.transactioncode !='3100' and 
foliotransactions.transactioncode != '3200' and
date(foliotransactions.transactiondate) = pAuditDate 
left join transactioncode on transactioncode.trancode = foliotransactions.transactioncode  and foliotransactions.status = 'ACTIVE'
where
cashiers_logs.terminalid = pTerminalid and 
cashiers_logs.shiftcode = pShiftCode and
cashiers_logs.cashierid = pCashierId and
cashiers_logs.hotelid = pHotelid and
date(cashiers_logs.transactiondate) = pAuditDate and
cashiers_logs.type = 'CLOSE' and
(transactioncode.trantypeid = 2 or transactioncode.trantypeid = 3 or 
transactioncode.trantypeid = 4 or transactioncode.trantypeid = 5 or 
transactioncode.trantypeid = 8 or transactioncode.trantypeid = 7 or
transactioncode.trantypeid = 9 or transactioncode.trantypeid = 11)
order by transactiondate
)
UNION(
select
cashiers_logs.terminalid as Terminal,
cashiers_logs.cashierid,
cashiers_logs.shiftcode,
cashiers_logs.openingbalance,
cashiers_logs.openingadjustment,
cashiers_logs.beginningbalance,
cashiers_logs.chargeinamount,
cashiers_logs.cash,
cashiers_logs.creditcard,
cashiers_logs.cheque,	
cashiers_logs.others,
cashiers_logs.remarks,
cashiers_logs.updatedby,
cashiers_logs.adjustment,
cashiers_logs.netamount,
cashiers_logs.amountremitted,
nonguesttransaction.transactionDate,
nonguesttransaction.referenceNo,
if(nonguesttransaction.guestName="","WALK-IN",nonguesttransaction.guestName) as TransactionSource,
nonguesttransaction.transactionCode,
nonguesttransaction.memo,
nonguesttransaction.statusFlag as `status`,
nonguesttransaction.acctSide,
nonguesttransaction.referenceFolioId as folioId,
if(nonguesttransaction.acctside='DEBIT',nonguesttransaction.netAmount,0.00) as CHARGES,  
if(nonguesttransaction.acctside='CREDIT',nonguesttransaction.netAmount,0.00) as CREDIT,
fGetTransactionDescription(nonguesttransaction.transactioncode) as description
from cashiers_logs left join nonguesttransaction on (nonguesttransaction.terminalid = cashiers_logs.terminalid and nonguesttransaction.shiftcode = cashiers_logs.shiftcode)
left join transactioncode on transactioncode.trancode = nonguesttransaction.transactioncode
where
cashiers_logs.terminalid = pTerminalid and 
cashiers_logs.shiftcode = pShiftCode and
cashiers_logs.cashierid = pCashierId and
cashiers_logs.hotelid = pHotelid and
date(cashiers_logs.transactiondate) = pAuditDate and
cashiers_logs.type = 'CLOSE' and
date(nonguesttransaction.transactiondate)=pAuditDate
and
(transactioncode.trantypeid = 2 or transactioncode.trantypeid = 3 or 
transactioncode.trantypeid = 4 or transactioncode.trantypeid = 5 or 
transactioncode.trantypeid = 8 or transactioncode.trantypeid = 7 or
transactioncode.trantypeid = 9 or transactioncode.trantypeid = 11) and
nonguesttransaction.statusFlag = 'ACTIVE'
)
UNION
(
select
cashiers_logs.terminalid as Terminal,
cashiers_logs.cashierid,
cashiers_logs.shiftcode,
cashiers_logs.openingbalance,
cashiers_logs.openingadjustment,
cashiers_logs.beginningbalance,
cashiers_logs.chargeinamount,
cashiers_logs.cash,
cashiers_logs.creditcard,
cashiers_logs.cheque,	
cashiers_logs.others,
cashiers_logs.remarks,
cashiers_logs.updatedby,
cashiers_logs.adjustment,
cashiers_logs.netamount,
cashiers_logs.amountremitted,
cashiers_logs.transactionDate,
'' AS referenceno,
'' as TransactionSource,
'' AS transactioncode,
'' AS memo,
'ACTIVE' AS `status`,
'' AS acctside,
'' AS folioid,
0.00 as CHARGES,  
0.00 as CREDIT,
'' as description
from 	
cashiers_logs
where
cashiers_logs.terminalid = pTerminalid and 
cashiers_logs.shiftcode = pShiftCode and
cashiers_logs.cashierid = pCashierId and
cashiers_logs.hotelid = pHotelid and
date(cashiers_logs.transactiondate) = pAuditDate and
cashiers_logs.type = 'CLOSE'
order by transactiondate
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportCashierVoidTransactions` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportCashierVoidTransactions`(
in pterminalid int(4),
in pCashierId varchar(5),
in pShiftCode varchar(5),
in pHotelId int(5),
in pAuditDate date
)
BEGIN
(
select
cashiers_logs.terminalid as Terminal,
cashiers_logs.cashierid,
cashiers_logs.shiftcode,
cashiers_logs.openingbalance,
cashiers_logs.openingadjustment,
cashiers_logs.beginningbalance,
cashiers_logs.chargeinamount,
cashiers_logs.cash,
cashiers_logs.creditcard,
cashiers_logs.cheque,	
cashiers_logs.others,
cashiers_logs.remarks,
cashiers_logs.updatedby,
cashiers_logs.adjustment,
cashiers_logs.netamount,
cashiers_logs.amountremitted,
foliotransactions.transactionDate,
foliotransactions.referenceno,
concat((fGetCurrentRoomOccupied(foliotransactions.folioid, foliotransactions.hotelid, pAuditDate)),' ', if(substring(foliotransactions.accountid,1,1)='G',fGetCompanyName(foliotransactions.accountid), fGetGuestName(foliotransactions.accountid))) as TransactionSource,
foliotransactions.transactioncode,
foliotransactions.memo,
foliotransactions.`status`,
foliotransactions.acctside,
foliotransactions.folioid,
if(foliotransactions.acctside='DEBIT',foliotransactions.netAmount,0.00) as CHARGES,  
if(foliotransactions.acctside='CREDIT',foliotransactions.netAmount,0.00) as CREDIT
from 	
cashiers_logs
left join foliotransactions on foliotransactions.terminalid = cashiers_logs.terminalid and foliotransactions.shiftcode = cashiers_logs.shiftcode and foliotransactions.transactioncode !='3100' and 
foliotransactions.transactioncode != '3200' and
foliotransactions.transactiondate = pAuditDate
left join transactioncode on transactioncode.trancode = foliotransactions.transactioncode
left join folioschedules on folioschedules.folioid = foliotransactions.folioid
left join guests on guests.accountid = foliotransactions.accountid
where
cashiers_logs.terminalid = pTerminalid and 
cashiers_logs.shiftcode = pShiftCode and
cashiers_logs.cashierid = pCashierId and
cashiers_logs.hotelid = pHotelid and
cashiers_logs.transactiondate = pAuditDate and
cashiers_logs.type = 'CLOSE'
and
foliotransactions.status = 'VOID'
order by transactiondate
)
UNION(
select
nonguesttransaction.terminalID as Terminal,
nonguesttransaction.terminalID as cashierId,
nonguesttransaction.shiftCode,
0 as openingbalance,
0 as openingadjustment,
0 as beginningbalance,
0 as chargeinamount,
0 as cash,
0 as creditcard,
0 as cheque,	
0 as others,
"" as remarks,
nonguesttransaction.UPDATEDBY,
0 as adjustment,
0 as netamount,
0 as amountremitted,
nonguesttransaction.transactionDate,
nonguesttransaction.referenceNo,
if(nonguesttransaction.guestName="","WALK-IN",nonguesttransaction.guestName) as TransactionSource,
nonguesttransaction.transactionCode,
nonguesttransaction.memo,
nonguesttransaction.statusFlag as `status`,
nonguesttransaction.acctSide,
nonguesttransaction.referenceFolioId as folioId,
if(nonguesttransaction.acctside='DEBIT',nonguesttransaction.netAmount,0.00) as CHARGES,  
if(nonguesttransaction.acctside='CREDIT',nonguesttransaction.netAmount,0.00) as CREDIT
from nonguesttransaction
left join transactioncode on transactioncode.trancode = nonguesttransaction.transactioncode
where
nonguesttransaction.terminalID = pterminalid and
nonguesttransaction.shiftCode = pShiftCode and
nonguesttransaction.transactionDate = pAuditDate and
nonguesttransaction.hotelID = pHotelId
and
nonguesttransaction.statusFlag = 'VOID'
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportCityLedger` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportCityLedger`(
in pHotelId int(5),
pDate date
)
BEGIN
select 
cityledger.reffolio,
cityledger.subfolio,
cityledger.debit,
cityledger.credit,
cityledger.updatedby,
folio.accountid,
fGetGuestName(folio.accountid) as GuestName,
folio.companyid,
if(substring(folio.companyid,1,1)='G',fGetCompanyName(folio.companyid), fGetGuestName(folio.companyid)) as companyName
from
cityledger left join folio on folio.folioid = cityledger.reffolio
where cityledger.Date=pDate
order by folio.companyid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportCityLedger1` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportCityLedger1`(
in pHotelId int(5),
pDate date
)
BEGIN
select 
cityledger.reffolio,
cityledger.subfolio,
cityledger.debit,
cityledger.credit,
cityledger.updatedby,
folio.accountid,
fGetGuestName(folio.accountid) as GuestName,
folio.companyid,
if(substring(folio.companyid,1,1)='G',fGetCompanyName(folio.companyid), fGetGuestName(folio.companyid)) as companyName
from
cityledger left join folio on folio.folioid = cityledger.reffolio
where cityledger.Date=pDate
order by folio.companyid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportCityLedgerSummary` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportCityLedgerSummary`()
BEGIN
select
sum(cityledger.debit) as debit,
sum(cityledger.credit) as credit,
if(cityledger.reffolio="",cityledger.acctid,folio.companyid) as companyid,
company.companyname
from
cityledger left join folio on folio.folioid = cityledger.reffolio
left join guests on guests.accountid = folio.accountid
left join company on company.companyid = if(cityledger.reffolio="",cityledger.acctid,folio.companyid)
group by folio.companyid
order by folio.companyid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportCityTransferTransactions` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportCityTransferTransactions`(
in pAuditDate date
)
BEGIN
select 
(select roomid from folioschedules where folioid=folio.folioid limit 1) as roomid,
foliotransactions.folioid,
foliotransactions.accountid,
if(folio.foliotype!='GROUP', fGetGuestName(folio.accountid), concat(folio.groupname, ' (', (if(substring(folio.companyid,1,1)='G',fGetCompanyName(folio.companyid), fGetGuestName(folio.companyid))), ')')) as GuestName,
folio.companyid as companyid,
if(substring(folio.companyid,1,1)='G',fGetCompanyName(folio.companyid), fGetGuestName(folio.companyid)) as companyname,
foliotransactions.postingdate,
foliotransactions.baseamount,
foliotransactions.updatedby
from foliotransactions left join folio on folio.folioid = foliotransactions.folioid
left join folioschedules on foliotransactions.folioid = folioschedules.folioid
where foliotransactions.transactioncode='4200' and
date(foliotransactions.postingdate) = pAuditDate
union
select roomNumber as roomID,
referenceFolioID as folioID,
accountID,
guestName,
accountID as companyID,
companyName,
postingdate,
baseamount,
updatedby
from nonguesttransaction
where transactioncode ='4200' and
date(transactiondate) >= pAuditDate and 
statusflag = 'ACTIVE';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spreportdailyhotelrevenue` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spreportdailyhotelrevenue`(
in pHotelId int(4),
in pStartDate date,
in pEndDate date
)
BEGIN
(
select
foliotransactions.postingDate,
foliotransactions.transactionDate,
foliotransactions.`ReferenceNo`,
foliotransactions.`TransactionSource`,
foliotransactions.`FolioID`,
guests.accountid,
concat(guests.`firstName`," " , guests.`lastName`) as GuestName,
foliotransactions.transactioncode,
if(foliotransactions.AcctSide='DEBIT',foliotransactions.`baseAmount`,
(foliotransactions.`baseAmount` * -1) ) as baseAmount,
if(foliotransactions.AcctSide='DEBIT',foliotransactions.`netBaseAmount`,
(foliotransactions.`netBaseAmount` * -1) ) as netBaseAmount,
if(foliotransactions.AcctSide='DEBIT',foliotransactions.`grossAmount`,
(foliotransactions.`grossAmount` * -1) ) as grossAmount,
if(foliotransactions.AcctSide='DEBIT',foliotransactions.`discount`,
(foliotransactions.`discount` * -1) ) as discount,
if(foliotransactions.AcctSide='DEBIT',foliotransactions.`serviceCharge`,
(foliotransactions.`serviceCharge` * -1) ) as serviceCharge,
if(foliotransactions.AcctSide='DEBIT',foliotransactions.`governmentTax`,
(foliotransactions.`governmentTax` * -1) ) as governmentTax,
if(foliotransactions.AcctSide='DEBIT',foliotransactions.`localTax`,
(foliotransactions.`localTax` * -1) ) as localTax,
if(foliotransactions.AcctSide='DEBIT',foliotransactions.`mealAmount`,
(foliotransactions.`mealAmount` * -1) ) as mealAmount,
foliotransactions.`Memo`,
foliotransactions.subFolio,
if(foliotransactions.AcctSide='DEBIT',foliotransactions.`netAmount`,
(foliotransactions.`netAmount` * -1) ) as netAmount,
if(foliotransactions.AcctSide='DEBIT',foliotransactions.`netBaseAmount`,
(foliotransactions.`netBaseAmount` * -1) ) as Amount,
foliotransactions.`CREATEDBY`,
folioschedules.roomid,
folioschedules.roomtype,
company.companyName,
'' as REMARKS
from
foliotransactions
left join transactioncode on transactioncode.tranCode = foliotransactions.transactioncode
left join folioschedules on folioschedules.folioid = foliotransactions.folioid
left join folio on (folioschedules.folioid = folio.folioid)
left join company on folio.companyid = company.companyid
left join guests on guests.accountid = folio.accountid
where
date(foliotransactions.`TransactionDate`) >= pStartDate and 
date(foliotransactions.`TransactionDate`) <= pEndDate and
foliotransactions.status = 'ACTIVE' and
transactioncode.tranTypeID = 1 group by folioid, referenceno, transactionsource
)
UNION
(
select
nonguesttransaction.postingDate,
nonguesttransaction.transactionDate,
nonguesttransaction.referenceNo,
nonguesttransaction.transactionSource,
nonguesttransaction.referenceFolioId as FolioId,
nonguesttransaction.accountId,
if(nonguesttransaction.guestName="","WALK-IN GUEST",nonguesttransaction.guestName) as GuestName,
nonguesttransaction.transactionCode,
if(nonguesttransaction.AcctSide='DEBIT',nonguesttransaction.baseAmount,
(nonguesttransaction.baseAmount * -1) ) as baseAmount,
if(nonguesttransaction.AcctSide='DEBIT',nonguesttransaction.netBaseAmount,
(nonguesttransaction.netBaseAmount * -1) ) as netBaseAmount,
if(nonguesttransaction.AcctSide='DEBIT',nonguesttransaction.grossAmount,
(nonguesttransaction.grossAmount * -1) ) as grossAmount,
if(nonguesttransaction.AcctSide='DEBIT',nonguesttransaction.discount,
(nonguesttransaction.discount * -1) ) as discount,
if(nonguesttransaction.AcctSide='DEBIT',nonguesttransaction.serviceCharge,
(nonguesttransaction.serviceCharge * -1) ) as serviceCharge,
if(nonguesttransaction.AcctSide='DEBIT',nonguesttransaction.governmentTax,
(nonguesttransaction.governmentTax * -1) ) as governmentTax,
if(nonguesttransaction.AcctSide='DEBIT',nonguesttransaction.localTax,
(nonguesttransaction.localTax * -1) ) as localTax,
0 as mealAmount,
nonguesttransaction.memo,
"A " as subFolio,
if(nonguesttransaction.AcctSide='DEBIT',nonguesttransaction.netAmount,
(nonguesttransaction.netAmount * -1) ) as netAmount,
if(nonguesttransaction.AcctSide='DEBIT',nonguesttransaction.netbaseAmount,
(nonguesttransaction.netbaseAmount * -1) ) as Amount,
nonguesttransaction.CREATEDBY,
nonguesttransaction.roomNumber as roomid,
'' as roomtype,
nonguesttransaction.companyName,
'' as REMARKS
from nonguesttransaction force index(primary)
left join transactioncode on transactioncode.tranCode = nonguesttransaction.transactioncode
where
date(nonguesttransaction.transactionDate) >= pStartDate and 
date(nonguesttransaction.`TransactionDate`) <= pEndDate and
nonguesttransaction.statusFlag = 'ACTIVE' and
nonguesttransaction.hotelID = pHotelId and
transactioncode.tranTypeID = 1 group by folioid, referenceno, transactionsource
)
UNION
(
select
h.createtime,
h.order_date,
h.order_id,
'POSCHECK#' as TransactionSource,
h.customer_id,
h.customer_id,
pos.fGetCustomerNamePerOrder(h.Customer_ID,
h.EMPLOYEE_ID) as GuestName,
(case g.maingroup_id
when 'FOOD' then
'1200'
when 'BEVERAGES' then
'1202'
when 'BANQUET' then
'1203'
else
'1402'
end) as TransCode,
sum(d.Unit_Price * d.Quantity) as baseAmount,
sum(d.Amount) as VatSale,
sum(d.Unit_Price * d.Quantity) as grossAmount,
sum(d.discount) as discount,
sum(d.service_charge) as ServiceCharge,
sum(d.VAT) as governmentTax,
sum(d.LOCAL_TAX) as localTax,
0 as mealAmount,
concat('RESTAURANT - DINE-IN - ',g.maingroup_id) as `Memo`,
'DINE-IN' as subFolio,
(sum(d.Unit_Price * d.Quantity)-sum(d.discount)) as netAmount,
sum(d.Amount) as Amount,
d.createdBy,
'' as roomid,
'' as roomtype,
'' as companyName,
'' as Remarks
from 
pos.`order detail` d
left join 
pos.`order header` h on d.Order_Id = h.Order_Id
left join pos.item i on i.Item_ID = d.Item_Id
left join pos.`group` g on g.group_id = i.group_id
left join pos.payment p on h.order_id = p.order_id
where
g.maingroup_id is not null
and date(h.order_date) >= pStartDate 
and date(h.order_date) <= pEndDate 
and p.`status` != 'VOID' 
and p.payment_type IN ('CASH','Credit','ACCOUNT_EMPLOYEE')
and d.operation_status!='CANCELLED'
group by
g.maingroup_id,
h.order_id
)
union
(
select
h.createtime,
h.order_date,
h.order_id,
'POSCHECK#' as TransactionSource,
h.customer_id,
h.customer_id,
pos.fGetCustomerNamePerOrder(h.Customer_ID,
h.EMPLOYEE_ID) as GuestName,
(case METHOD
when 'OPEN_FOOD' then
'1200'
when 'OPEN_BEVERAGE' then
'1202'
when 'BANQUET_FOOD' then
'1200'
WHEN 'BANQUET_BEVERAGE' THEN
'1202'
end) as TransCode,
sum(d.Unit_Price * d.Quantity) as baseAmount,
sum(d.Amount) as VatSale,
sum(d.Unit_Price * d.Quantity) as grossAmount,
sum(d.discount) as discount,
sum(d.service_charge) as ServiceCharge,
sum(d.VAT) as governmentTax,
sum(d.LOCAL_TAX) as localTax,
0 as mealAmount,
concat('RESTAURANT - DINE-IN - ',d.description) as `Memo`,
'DINE-IN' as subFolio,
(sum(d.Unit_Price * d.Quantity)-sum(d.discount)) as netAmount,
sum(d.Amount) as Amount,
d.createdBy,
'' as roomid,
'' as roomtype,
'' as companyName,
'' as Remarks
from 
pos.`order detail` d
left join 
pos.`order header` h on d.Order_Id = h.Order_Id
left join pos.`function mapping` i on i.function_id = d.Item_Id
left join pos.payment p on h.order_id = p.order_id
where
date(h.order_date) >= pStartDate
and date(h.order_date) <= pEndDate
and p.`status` != 'VOID'
and p.payment_type IN ('CASH','Credit','ACCOUNT_EMPLOYEE')
and d.operation_status!='CANCELLED'
group by
i.function_id,
h.order_id
)
order by transactionCode, transactionSource, ReferenceNo;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportDailyRevenue` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportDailyRevenue`(
in pHotelId int(4),
in pStartDate date,
in pEndDate date
)
BEGIN
(
select
foliotransactions.postingDate,
foliotransactions.transactionDate,
foliotransactions.`ReferenceNo`,
foliotransactions.`TransactionSource`,
foliotransactions.`FolioID`,
guests.accountid,
concat(guests.`firstName`," " , guests.`lastName`) as GuestName,
foliotransactions.transactioncode,
if(foliotransactions.AcctSide='DEBIT',foliotransactions.`baseAmount`,
(foliotransactions.`baseAmount` * -1) ) as baseAmount,
if(foliotransactions.AcctSide='DEBIT',foliotransactions.`netBaseAmount`,
(foliotransactions.`netBaseAmount` * -1) ) as netBaseAmount,
if(foliotransactions.AcctSide='DEBIT',foliotransactions.`grossAmount`,
(foliotransactions.`grossAmount` * -1) ) as grossAmount,
if(foliotransactions.AcctSide='DEBIT',foliotransactions.`discount`,
(foliotransactions.`discount` * -1) ) as discount,
if(foliotransactions.AcctSide='DEBIT',foliotransactions.`serviceCharge`,
(foliotransactions.`serviceCharge` * -1) ) as serviceCharge,
if(foliotransactions.AcctSide='DEBIT',foliotransactions.`governmentTax`,
(foliotransactions.`governmentTax` * -1) ) as governmentTax,
if(foliotransactions.AcctSide='DEBIT',foliotransactions.`localTax`,
(foliotransactions.`localTax` * -1) ) as localTax,
if(foliotransactions.AcctSide='DEBIT',foliotransactions.`mealAmount`,
(foliotransactions.`mealAmount` * -1) ) as mealAmount,
foliotransactions.`Memo`,
foliotransactions.subFolio,
if(foliotransactions.AcctSide='DEBIT',foliotransactions.`netAmount`,
(foliotransactions.`netAmount` * -1) ) as netAmount,
if(foliotransactions.AcctSide='DEBIT',foliotransactions.`netBaseAmount`,
(foliotransactions.`netBaseAmount` * -1) ) as Amount,
foliotransactions.`CREATEDBY`,
folioschedules.roomid,
folioschedules.roomtype,
company.companyName,
'' as REMARKS
from
foliotransactions
left join transactioncode on transactioncode.tranCode = foliotransactions.transactioncode
left join folioschedules on folioschedules.folioid = foliotransactions.folioid
left join folio on (folioschedules.folioid = folio.folioid)
left join company on folio.companyid = company.companyid
left join guests on guests.accountid = folio.accountid
where
date(foliotransactions.`TransactionDate`) >= pStartDate and 
date(foliotransactions.`TransactionDate`) <= pEndDate and
foliotransactions.status = 'ACTIVE' and
transactioncode.tranTypeID = 1 group by folioid, referenceno, transactionsource
)
UNION
(
select
nonguesttransaction.postingDate,
nonguesttransaction.transactionDate,
nonguesttransaction.referenceNo,
nonguesttransaction.transactionSource,
nonguesttransaction.referenceFolioId as FolioId,
nonguesttransaction.accountId,
if(nonguesttransaction.guestName="","WALK-IN GUEST",nonguesttransaction.guestName) as GuestName,
nonguesttransaction.transactionCode,
if(nonguesttransaction.AcctSide='DEBIT',nonguesttransaction.baseAmount,
(nonguesttransaction.baseAmount * -1) ) as baseAmount,
if(nonguesttransaction.AcctSide='DEBIT',nonguesttransaction.netBaseAmount,
(nonguesttransaction.netBaseAmount * -1) ) as netBaseAmount,
if(nonguesttransaction.AcctSide='DEBIT',nonguesttransaction.grossAmount,
(nonguesttransaction.grossAmount * -1) ) as grossAmount,
if(nonguesttransaction.AcctSide='DEBIT',nonguesttransaction.discount,
(nonguesttransaction.discount * -1) ) as discount,
if(nonguesttransaction.AcctSide='DEBIT',nonguesttransaction.serviceCharge,
(nonguesttransaction.serviceCharge * -1) ) as serviceCharge,
if(nonguesttransaction.AcctSide='DEBIT',nonguesttransaction.governmentTax,
(nonguesttransaction.governmentTax * -1) ) as governmentTax,
if(nonguesttransaction.AcctSide='DEBIT',nonguesttransaction.localTax,
(nonguesttransaction.localTax * -1) ) as localTax,
0 as mealAmount,
nonguesttransaction.memo,
"A " as subFolio,
if(nonguesttransaction.AcctSide='DEBIT',nonguesttransaction.netAmount,
(nonguesttransaction.netAmount * -1) ) as netAmount,
if(nonguesttransaction.AcctSide='DEBIT',nonguesttransaction.netbaseAmount,
(nonguesttransaction.netbaseAmount * -1) ) as Amount,
nonguesttransaction.CREATEDBY,
nonguesttransaction.roomNumber as roomid,
'' as roomtype,
nonguesttransaction.companyName,
'' as REMARKS
from nonguesttransaction force index(primary)
left join transactioncode on transactioncode.tranCode = nonguesttransaction.transactioncode
where
date(nonguesttransaction.transactionDate) >= pStartDate and 
date(nonguesttransaction.`TransactionDate`) <= pEndDate and
nonguesttransaction.statusFlag = 'ACTIVE' and
nonguesttransaction.hotelID = pHotelId and
transactioncode.tranTypeID = 1 group by folioid, referenceno, transactionsource
)
order by transactionCode, transactionSource, ReferenceNo;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportDailyTotalMealAmount` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportDailyTotalMealAmount`(
in pTranDate date,
in pEndDate date,
in pHotelId int(5)
)
BEGIN
select 
date(foliotransactions.transactiondate) as transactiondate,
'1002' as transactioncode,
sum(if(foliotransactions.acctside = "CREDIT", foliotransactions.mealAmount * -1, foliotransactions.mealAmount)) as NetBaseAmount,
transactioncode.acctside
from
foliotransactions  force index(FolioID,SubFolio,AccountID),
transactioncode  force index(primary)
where 	
foliotransactions.transactioncode=transactioncode.trancode and 
date(foliotransactions.transactiondate) >= pTrandate and date(foliotransactions.transactiondate)<=pEndDate and
foliotransactions.status = 'ACTIVE' and foliotransactions.transactioncode='1000'
group by foliotransactions.transactiondate, foliotransactions.transactioncode;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportDailyTransactions` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportDailyTransactions`(
in photelid int(5),
in pAuditDate date
)
BEGIN
select 	
foliotransactions.*,
if(foliotransactions.acctside='DEBIT',foliotransactions.baseamount,0.00) as CHARGES,  
if(foliotransactions.acctside='CREDIT',foliotransactions.baseamount,0.00) as CREDIT,
folioschedules.roomid,
concat(guests.lastname,", ",guests.firstname) as GuestName
from foliotransactions 
left join folioschedules on foliotransactions.folioid = folioschedules.folioid
left join guests on guests.accountid = foliotransactions.accountid
where
date(transactiondate) = pAuditDate and
foliotransactions.hotelid = photelid
order by `status`,transactiondate;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportDateRangeActualGuestsArrival` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportDateRangeActualGuestsArrival`(
in photelid int(5),
in pStartDate varchar(20),
in pEndDate varchar(20)
)
BEGIN
select 
folio.folioid,
guests.accountid,
guests.account_type,
concat(guests.lastname,", ",guests.firstname) as GuestName,
folioschedules.roomid, 
folioschedules.roomtype,
folio.arrivalDate,
folio.DepartureDate,
folio.noOfadults as Pax,
folio.remarks,
folioschedules.todate as departure,
folioschedules.fromdate as arrival,
company.companyname,
fGetFolioBalance(folio.FolioId) as Balance,
rooms.floor
from
guests,
folioschedules left join rooms on rooms.roomid = folioschedules.roomid,
folio left join company on company.companyid = folio.companyid
where
guests.accountid = folio.accountid and
folioschedules.folioid = folio.folioid and
( date(folio.arrivaldate) >= pStartDate and date(folio.arrivaldate) <= pEndDate ) and
(folio.status = 'CHECKED IN' or folio.status = 'CHECKED OUT') and
guests.hotelid = folio.hotelid and
folioschedules.hotelid = folio.hotelid and
folio.hotelid = photelid
order by folio.arrivaldate;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportDateRangeActualGuestsDeparture` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportDateRangeActualGuestsDeparture`(
in photelid int(5),
in pStartDate varchar(20),
in pEndDate varchar(20)
)
BEGIN
select 
folio.folioid,
guests.accountid,
guests.account_type,
concat(guests.lastname,", ",guests.firstname) as GuestName,
folioschedules.roomid, 
folioschedules.roomtype,
folio.arrivalDate,
folio.DepartureDate,
folio.noOfadults as Pax,
folio.remarks,
folioschedules.todate as departure,
folioschedules.fromdate as arrival,
company.companyname,
fGetFolioBalance(folio.FolioId) as Balance,
rooms.floor
from
guests,
folioschedules left join rooms on rooms.roomid = folioschedules.roomid,
folio left join company on company.companyid = folio.companyid
where
guests.accountid = folio.accountid and
folioschedules.folioid = folio.folioid and
( date(folio.DepartureDate) >= pStartDate and date(folio.DepartureDate) <= pEndDate ) and
(folio.status = 'CHECKED IN' or folio.status = 'CHECKED OUT') and
guests.hotelid = folio.hotelid and
folioschedules.hotelid = folio.hotelid and
folio.hotelid = photelid
order by folio.arrivaldate;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportDateRangeCancelledReservations` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportDateRangeCancelledReservations`(
in pHotelID int(5),
in pStartDate date,
in pEndDate date
)
BEGIN
select 
folio.folioid,
if(folio.foliotype!='GROUP', folio.accountid, folio.companyid) as accountid,
if(folio.foliotype!='GROUP', fGetGuestName(folio.accountid), concat(folio.groupname, ' (', (if(substring(folio.companyid,1,1)='G',fGetCompanyName(folio.companyid), fGetGuestName(folio.companyid))), ')')) as GuestName,
if (folioschedules.roomid is null or folioschedules.roomid='', '', folioschedules.roomid) as roomid, 
if (folioschedules.roomid is null or folioschedules.roomid='', '', folioschedules.roomtype) as roomtype,
folio.remarks,
folio.noofadults,
if (folioschedules.roomid is null or folioschedules.roomid='', '', folioschedules.days) as days,
if (folioschedules.roomid is null or folioschedules.roomid='', '', folioschedules.rate) as rate,
folio.fromdate,
folio.todate as departure,
folio.reason_for_cancel,
folio.updatetime
from
folioschedules right join
folio on (folioschedules.folioid = folio.folioid)
where
(date(folio.updatetime) >= pStartDate and
date(folio.updatetime) <= pEndDate ) and
(folio.status = 'CANCELLED' or folio.status = 'NO SHOW') and
folio.hotelid = photelid AND foliotype!='DEPENDENT' and foliotype != 'JOINER';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportDateRangeCashierTransactions` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportDateRangeCashierTransactions`(
in pHotelId int(5),
in pStartDate date,
in pEndDate date
)
BEGIN
(
select
cashiers_logs.terminalid as Terminal,
cashiers_logs.cashierid,
cashiers_logs.shiftcode,
cashiers_logs.openingbalance,
cashiers_logs.openingadjustment,
cashiers_logs.beginningbalance,
cashiers_logs.chargeinamount,
cashiers_logs.cash,
cashiers_logs.creditcard,
cashiers_logs.cheque,	
cashiers_logs.others,
cashiers_logs.remarks,
cashiers_logs.adjustment,
cashiers_logs.netamount,
cashiers_logs.amountremitted,
cashiers_logs.updatedby,
foliotransactions.transactionDate,
foliotransactions.referenceno,
concat((select roomid from folioschedules where folioid=foliotransactions.folioid limit 1),'  ',guests.lastname,', ',guests.firstname) as TransactionSource,
foliotransactions.transactioncode,
foliotransactions.memo,
foliotransactions.`status`,
foliotransactions.acctside,
if(foliotransactions.acctside='DEBIT',foliotransactions.baseamount,0.00) as CHARGES,  
if(foliotransactions.acctside='CREDIT',foliotransactions.baseamount,0.00) as CREDIT
from 	
transactioncode,
cashiers_logs
left join foliotransactions on foliotransactions.terminalid = cashiers_logs.terminalid and foliotransactions.shiftcode = cashiers_logs.shiftcode
left join guests on guests.accountid = foliotransactions.accountid
where
foliotransactions.transactioncode = transactioncode.trancode and 
cashiers_logs.hotelid = pHotelid and
(date(foliotransactions.transactionDate) >= pStartDate and
date(foliotransactions.transactionDate) <= pEndDate ) and
cashiers_logs.type = 'CLOSE'
order by transactiondate
)
UNION(
select
nonguesttransaction.terminalID as Terminal,
nonguesttransaction.terminalID as cashierId,
nonguesttransaction.shiftCode,
0 as openingbalance,
0 as openingadjustment,
0 as beginningbalance,
0 as chargeinamount,
0 as cash,
0 as creditcard,
0 as cheque,	
0 as others,
"" as remarks,
0 as adjustment,
0 as netamount,
0 as amountremitted,
nonguesttransaction.updatedby,
nonguesttransaction.transactionDate,
nonguesttransaction.referenceNo,
concat(nonguesttransaction.roomNumber," ",nonguesttransaction.guestName) as TransactionSource,
nonguesttransaction.transactionCode,
nonguesttransaction.memo,
nonguesttransaction.statusFlag as `status`,
nonguesttransaction.acctSide,
if(nonguesttransaction.acctside='DEBIT',nonguesttransaction.baseamount,0.00) as CHARGES,  
if(nonguesttransaction.acctside='CREDIT',nonguesttransaction.baseamount,0.00) as CREDIT
from nonguesttransaction force index(primary)
where
nonguesttransaction.hotelID = pHotelId and
(date(nonguesttransaction.transactionDate) >= pStartDate and
date(nonguesttransaction.transactionDate) <= pEndDate )
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportDateRangeChargesNonGuestTransactions` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportDateRangeChargesNonGuestTransactions`(
in pStartDate date,
in pEndDate date,
in pHotelId int(4)
)
BEGIN
select 
nonguesttransaction.*,
concat(drivers.lastName," ",drivers.firstName) as Driver
from nonguesttransaction
left join transactioncode on transactioncode.tranCode = nonguesttransaction.transactioncode
left join trantypes on trantypes.trantypeid = transactioncode.tranTypeId
left join drivers on drivers.driverId = nonguesttransaction.referenceDriverId
where
date(nonguesttransaction.transactiondate) >= pStartDate and 
date(nonguesttransaction.transactiondate) <= pEndDate and
nonguesttransaction.hotelId = pHotelId AND
nonguesttransaction.statusflag = 'ACTIVE' and
(trantypes.trantypeId = 1);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportDateRangeDriversSales` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportDateRangeDriversSales`(pStartDate date, pEndDate date, pHotelid int(5))
BEGIN
select drivers.*, netAmount as commission, transactiondate, referenceNo, referenceFolioId, accountId, roomNumber, guestName from drivers, nonguesttransaction where referencedriverid=driverid and nonguesttransaction.hotelid=pHotelid and date(transactiondate) between pStartDate and pEndDate and statusflag!='VOID' order by lastname;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportDateRangeExpectedGuestsArrival` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportDateRangeExpectedGuestsArrival`(
in photelid int(5),
in pStartDate varchar(20),
in pEndDate varchar(20)
)
BEGIN
select 
concat(guests.lastname, " , ", guests.firstname) as GuestName,
guests.memo,
folioschedules.roomid,
folioschedules.roomtype,
folioschedules.todate as departure,
FOLIO.remarks,
folioschedules.fromdate as arrival,
company.companyname,
(folio.noofadults + folio.noofchild) as pax,
rooms.floor
from 
guests,
folio left join company on company.companyid = folio.companyid,
folioschedules  left join rooms on folioschedules.roomid=rooms.roomid
where 
(folio.status != 'CANCELLED' and
folio.status != 'NO SHOW' and
folio.status != 'CHECKED IN' and
folio.status != 'CHECKED OUT') and
guests.accountid = folio.accountid and
folioschedules.folioid = folio.folioid and 
( date(folioschedules.fromdate) >= pStartDate and 
date(folioschedules.fromdate) <= pEndDate) and
guests.hotelid = folio.hotelid and
folioschedules.hotelid = folio.hotelid and
folio.hotelid = photelid
order by folioschedules.roomid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportDateRangeExpectedGuestsDeparture` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportDateRangeExpectedGuestsDeparture`(
in photelid int(5),
in pStartDate date,
in pEndDate date
)
BEGIN
select 
concat(guests.lastname, " , ", guests.firstname) as GuestName,
guests.memo,
folioschedules.roomid,
folioschedules.roomtype,
folioschedules.todate as departure,
FOLIO.remarks,
folioschedules.fromdate as arrival,
company.companyname,
folio.noofadults as Pax,
rooms.floor
from 
guests,
folio left join company on company.companyid = folio.companyid,
folioschedules left join rooms on folioschedules.roomid=rooms.roomid
where 
(folio.status != 'CANCELLED' and
folio.status != 'NO SHOW') and
guests.accountid = folio.accountid and
folioschedules.folioid = folio.folioid and 
( date(folioschedules.todate) >= pStartDate and
date(folioschedules.todate) <= pEndDate ) and
guests.hotelid = folio.hotelid and
folioschedules.hotelid = folio.hotelid and
folio.hotelid = photelid
order by guests.lastname
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportDateRangeNonGuestTransactions` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportDateRangeNonGuestTransactions`(
in pStartDate date,
in pEndDate date,
in pHotelId int(4)
)
BEGIN
select 
nonguesttransaction.*,
concat(drivers.lastName," ",drivers.firstName) as Driver
from nonguesttransaction
left join drivers on drivers.driverId = nonguesttransaction.referenceDriverId
where
date(nonguesttransaction.transactiondate) >= pStartDate and 
date(nonguesttransaction.transactiondate) <= pEndDate and
nonguesttransaction.hotelId = pHotelId AND
nonguesttransaction.statusflag = 'ACTIVE';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportDateRangeOutOfOrderRooms` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportDateRangeOutOfOrderRooms`(
in pHotelId int(5),
in pStartDate date,
in pEndDate date
)
BEGIN
select distinct
roomevents.eventdate,
roomevents.roomid,
engineeringjobs.assignedperson,
engineeringjobs.startdate,
engineeringjobs.starttime,
engineeringjobs.enddate,
engineeringjobs.endtime,
engineeringservices.servicename
from 
roomevents left join
engineeringjobs on engineeringjobs.roomid = roomevents.roomid
left join engineeringservices on 
engineeringservices.enggserviceid = engineeringjobs.enggserviceid
where 
eventtype = 'ENGINEERING JOB' and
(date(eventdate) >= pStartDate and date(eventdate) <= pEndDate) and 
roomevents.hotelid = pHotelId
order by eventdate,roomid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportDateRangePaidOutNonGuestTransactions` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportDateRangePaidOutNonGuestTransactions`(
in pStartDate date,
in pEndDate date,
in pHotelId int(4)
)
BEGIN
select 
nonguesttransaction.*,
concat(drivers.lastName," ",drivers.firstName) as Driver
from nonguesttransaction
left join drivers on drivers.driverId = nonguesttransaction.referenceDriverId
where
date(nonguesttransaction.transactiondate) >= pStartDate and 
date(nonguesttransaction.transactiondate) <= pEndDate and
nonguesttransaction.hotelId = pHotelId AND
nonguesttransaction.statusflag = 'ACTIVE' and
(nonguesttransaction.transactioncode = '6000'
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportDateRangePaymentsNonGuestTransactions` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportDateRangePaymentsNonGuestTransactions`(
in pStartDate date,
in pEndDate date,
in pHotelId int(4)
)
BEGIN
select 
nonguesttransaction.*,
concat(drivers.lastName," ",drivers.firstName) as Driver
from nonguesttransaction
left join drivers on drivers.driverId = nonguesttransaction.referenceDriverId
where
date(nonguesttransaction.transactiondate) >= pStartDate and 
date(nonguesttransaction.transactiondate) <= pEndDate and
nonguesttransaction.hotelId = pHotelId AND
nonguesttransaction.statusflag = 'ACTIVE' and
(nonguesttransaction.transactioncode = '2000' or
nonguesttransaction.transactioncode = '2100' or
nonguesttransaction.transactioncode = '2200' or
nonguesttransaction.transactioncode = '2201' or
nonguesttransaction.transactioncode = '2300' or
nonguesttransaction.transactioncode = '2400' or
nonguesttransaction.transactioncode = '2500' or
nonguesttransaction.transactioncode = '2501' or
nonguesttransaction.transactioncode = '2600' or
nonguesttransaction.transactioncode = '3200' or
nonguesttransaction.transactioncode = '3300' or
nonguesttransaction.transactioncode = '4000' or
nonguesttransaction.transactioncode = '4100' or
nonguesttransaction.transactioncode = '4200'
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportDateRangeRoomOccupancyGraph` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportDateRangeRoomOccupancyGraph`(
in pHotelId int(4),
in pStartDate date,
in pEndDate date
)
BEGIN
select roomevents.eventdate,((count(distinct roomevents.roomid)/FGetTotalRooms()) * 100) as Occupancy ,roomevents.eventtype from roomevents
where (roomevents.eventtype = "IN HOUSE" or roomevents.eventtype = "RESERVATION" or roomevents.eventtype = "CHECK OUT") and
(date(roomevents.eventdate) >= pStartDate and date(roomevents.eventdate) <= pEndDate)
group by roomevents.eventdate,roomevents.eventtype
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportDateRangeSales` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportDateRangeSales`(
in pHotelid int(5),
in pStartDate date,
in pEndDate date
)
BEGIN
(
select
foliotransactions.transactiondate,
foliotransactions.folioid,
foliotransactions.referenceno, 
foliotransactions.netamount,
foliotransactions.updatetime,
foliotransactions.transactionsource,
folioschedules.updatedby,
folioschedules.roomid,
concat(transactioncode.trancode,"-",transactioncode.memo) as TRANCODE,
concat(guests.lastname,", ",guests.firstname) as GuestName
from 	foliotransactions
left join guests on guests.accountid = foliotransactions.accountid,
folioschedules,
transactioncode,
trantypes 
where 	
folioschedules.folioid = foliotransactions.folioid and
foliotransactions.transactioncode=transactioncode.trancode and 
transactioncode.trantypeid=trantypes.trantypeid and
trantypes.trantypeid = '1' and
( date(transactiondate) >= pStartDate and date(transactiondate) <= pEndDate ) and
folioschedules.hotelid = foliotransactions.hotelid and
transactioncode.hotelid = foliotransactions.hotelid and
trantypes.hotelid = foliotransactions.hotelid and
foliotransactions.hotelid = photelid and
foliotransactions.status = 'ACTIVE'
order by transactiondate
)
UNION
(
select
nonguesttransaction.transactiondate,
nonguesttransaction.referenceFolioId as folioid,
nonguesttransaction.referenceNo, 
nonguesttransaction.netamount,
nonguesttransaction.updatedDate as UPDATETIME,
nonguesttransaction.transactionSource,
nonguesttransaction.updatedby,
nonguesttransaction.roomNumber as roomid,
concat(transactioncode.trancode,"-",transactioncode.memo) as TRANCODE,
nonguesttransaction.guestName as GuestName
from 
nonguesttransaction force index(primary)
left join transactioncode on transactioncode.trancode = nonguesttransaction.transactionCode 
left join trantypes on transactioncode.trantypeid = trantypes.trantypeid
where 
nonguesttransaction.acctSide = 'DEBIT' and
trantypes.trantypeid = '1' and
( date(transactionDate) >= pStartDate and date(transactionDate) <= pEndDate ) and
nonguesttransaction.hotelid = pHotelid and
nonguesttransaction.statusflag = 'ACTIVE'
order by transactiondate
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportDateRangeSalesExecutive` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportDateRangeSalesExecutive`(pStartDate date, pEndDate date, pHotelID int(2), pSalesExecutive varchar(30))
BEGIN
if(pSalesExecutive!='ALL') then
select 
(fGetTotalFolioAmountForSalesExecutive('1', pHotelID, 'A', 'DEBIT', folioid) +
fGetFolioTransferDebitForSalesExecutive('4100', pHotelID, 'A', 'DEBIT', folioid)) -
(fGetFolioTransferDebitForSalesExecutive('4100', pHotelID, 'A', 'CREDIT', folioid) +
fGetTotalFolioAmountForSalesExecutive('7', pHotelID, 'A', 'CREDIT', folioid) +
fGetTotalFolioAmountForSalesExecutive('1', pHotelID, 'A', 'CREDIT', folioid)) as totalSales,sales_executive, folioid, if(foliotype='GROUP', concat(if(substring(folio.companyid,1,1)='G',fGetCompanyName(folio.companyid), fGetGuestName(folio.companyid)), ' [', folio.groupname, ']'), concat(fGetGuestName(folio.accountid), ' [', folio.groupname, ']')) as companyName, 
source, arrivalDate as arrival, departureDate as departure from folio where sales_executive=pSalesExecutive and folio.status='CHECKED OUT' and folio.foliotype!='JOINER' and date(departureDate)>=pStartDate and date(departureDate)<=pEndDate order by totalSales desc, sales_executive;
else
select 
(fGetTotalFolioAmountForSalesExecutive('1', pHotelID, 'A', 'DEBIT', folioid) +
fGetFolioTransferDebitForSalesExecutive('4100', pHotelID, 'A', 'DEBIT', folioid)) -
(fGetFolioTransferDebitForSalesExecutive('4100', pHotelID, 'A', 'CREDIT', folioid) +
fGetTotalFolioAmountForSalesExecutive('7', pHotelID, 'A', 'CREDIT', folioid) +
fGetTotalFolioAmountForSalesExecutive('1', pHotelID, 'A', 'CREDIT', folioid)) as totalSales,sales_executive, folioid, if(foliotype='GROUP', concat(if(substring(folio.companyid,1,1)='G',fGetCompanyName(folio.companyid), fGetGuestName(folio.companyid)), ' [', folio.groupname, ']'), concat(fGetGuestName(folio.accountid), ' [', folio.groupname, ']')) as companyName, 
source, arrivalDate as arrival, departureDate as departure from folio where folio.status='CHECKED OUT' and folio.foliotype!='JOINER' and date(departureDate)>=pStartDate and date(departureDate)<=pEndDate order by totalSales, sales_executive desc;
end if;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportDateRangeSalesProduction` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportDateRangeSalesProduction`(pFromDate date, pToDate date, pHotelID int(5))
BEGIN
select date_format(fromdate, '%d-%b-%Y') as fromDate, date_format(todate, '%d-%b-%Y') as toDate, folio.folioid, if(substring(folio.companyid,1,1)='G',fGetCompanyName(folio.companyid), fGetGuestName(folio.companyid)) as companyName, groupname, eventType, (fGetTotalFolioAmountForSalesExecutive('1', pHotelID, 'A', 'DEBIT', folio.folioid) +
fGetFolioTransferDebitForSalesExecutive('4100', pHotelID, 'A', 'DEBIT', folio.folioid)) -
(fGetFolioTransferDebitForSalesExecutive('4100', pHotelID, 'A', 'CREDIT', folio.folioid) +
fGetTotalFolioAmountForSalesExecutive('7', pHotelID, 'A', 'CREDIT', folio.folioid) +
fGetTotalFolioAmountForSalesExecutive('1', pHotelID, 'A', 'CREDIT', folio.folioid)) as packageAmount, if(folio.status='CANCELLED', 'LOST/UNREALIZED', if(folio.status='CHECKED OUT' or folio.status='CHECKED IN', 'REALIZED', folio.status)) as `status`, reason_for_cancel as reason
from folio left join event_booking_info on (folio.folioid=event_booking_info.folioid) where foliotype='GROUP' and 
date(fromdate) >= pFromDate and date(fromDate) <= pToDate
and folio.hotelid=pHotelId
order by `status`, fromdate;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportDateRangeSalesSummary` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportDateRangeSalesSummary`(
in pHotelid int(5),
in pStartDate date,
in pEndDate date
)
BEGIN
(
select transactioncode, sum(baseamount) as BaseAmount, sum(grossAmount) as GrossAmount, sum(netAmount) as NetAmount, sum(netbaseamount) as NetBaseAmount, sum(discount) as Discount, sum(govttax) as GovtTax, sum(mealamount) as MealAmount, sum(localtax) as LocalTax, sum(servicecharge) as ServiceCharge, sum(transactioncount) as TransactionCount, TransactionDescription, acctside, sum(monthtodate) as MonthToDate, sum(yeartodate) as YearToDate from
(select 
foliotransactions.transactioncode,
sum(if(foliotransactions.acctside = "CREDIT", foliotransactions.baseAmount * -1, foliotransactions.baseAmount)) as BaseAmount,
sum(if(foliotransactions.acctside = "CREDIT", foliotransactions.grossAmount * -1, foliotransactions.grossAmount)) as GrossAmount,
sum(if(foliotransactions.acctside = "CREDIT", foliotransactions.netAmount * -1, foliotransactions.netAmount)) as NetAmount,
sum(if(foliotransactions.acctside = "CREDIT", foliotransactions.netBaseAmount * -1, foliotransactions.netBaseAmount)) as NetBaseAmount,
sum(if(foliotransactions.acctside = "CREDIT", foliotransactions.discount * -1, foliotransactions.discount)) as Discount,
sum(if(foliotransactions.acctside = "CREDIT", foliotransactions.governmentTax * -1, foliotransactions.governmentTax)) as GovtTax,
sum(if(foliotransactions.acctside = "CREDIT", foliotransactions.mealAmount * -1, foliotransactions.mealAmount)) as MealAmount,
sum(if(foliotransactions.acctside = "CREDIT", foliotransactions.localtax * -1, foliotransactions.localtax)) as LocalTax,
sum(if(foliotransactions.acctside = "CREDIT", foliotransactions.servicecharge * -1, foliotransactions.servicecharge)) as ServiceCharge,
count(foliotransactions.transactioncode) as TransactionCount,
transactioncode.memo as TransactionDescription,
foliotransactions.acctside,
fGetTransactionNetBaseAmountMonthToDate(
foliotransactions.transactioncode,
foliotransactions.acctside,
transactiondate,
pHotelId
) as MonthToDate,
fGetTransactionNetBaseAmountYearToDate(
foliotransactions.transactioncode,
transactioncode.acctside,
transactiondate,
pHotelId
) as YearToDate
from
foliotransactions  force index(FolioID,SubFolio,AccountID),
transactioncode  force index(primary),
trantypes  force index(primary)
where 	
foliotransactions.transactioncode=transactioncode.trancode and 
transactioncode.trantypeid=trantypes.trantypeid and
(date(transactiondate) >= pStartDate and date(transactiondate) <= pEndDate) and
foliotransactions.status = 'ACTIVE'
group by foliotransactions.transactioncode, foliotransactions.acctside
UNION all
select 
nonguesttransaction.transactioncode,
sum(if(nonguesttransaction.acctside = "CREDIT", nonguesttransaction.baseAmount * -1, nonguesttransaction.baseAmount)) as BaseAmount,
sum(if(nonguesttransaction.acctside = "CREDIT", nonguesttransaction.grossAmount * -1, nonguesttransaction.grossAmount)) as GrossAmount,
sum(if(nonguesttransaction.acctside = "CREDIT", nonguesttransaction.netAmount * -1, nonguesttransaction.netAmount)) as NetAmount,
sum(if(nonguesttransaction.acctside = "CREDIT", nonguesttransaction.netBaseAmount * -1, nonguesttransaction.netBaseAmount)) as NetBaseAmount,
sum(if(nonguesttransaction.acctside = "CREDIT", nonguesttransaction.discount * -1, nonguesttransaction.discount)) as Discount,
sum(if(nonguesttransaction.acctside = "CREDIT", nonguesttransaction.governmentTax * -1, nonguesttransaction.governmentTax)) as GovtTax,
0 as MealAmount,
sum(if(nonguesttransaction.acctside = "CREDIT", nonguesttransaction.localtax * -1, nonguesttransaction.localtax)) as LocalTax,
sum(if(nonguesttransaction.acctside = "CREDIT", nonguesttransaction.servicecharge * -1, nonguesttransaction.servicecharge)) as ServiceCharge,
count(nonguesttransaction.transactioncode) as TransactionCount,
concat(transactioncode.memo, "-WALK IN") as TransactionDescription,
nonguesttransaction.acctside,
fGetNonGuestTransactionNetBaseAmountMonthToDate(
nonguesttransaction.transactioncode,
nonguesttransaction.acctside,
transactiondate,
pHotelId
)  as MonthToDate,
fGetNonGuestTransactionNetBaseAmountYearToDate(
nonguesttransaction.transactioncode,
transactioncode.acctside,
transactiondate,
pHotelId
)  as YearToDate
from
nonguesttransaction  force index(primary),
transactioncode force index(primary)
where 	
(date(transactiondate) >= pStartDate and date(transactiondate) <= pEndDate) and
nonguesttransaction.statusFlag = 'ACTIVE' and nonguesttransaction.transactioncode=transactioncode.trancode
group by nonguesttransaction.transactioncode,nonguesttransaction.acctside) as transactionTable
group by transactioncode order by transactioncode asc, acctside desc);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportDateRangeVoidTransactions` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportDateRangeVoidTransactions`(
in pHotelId int(4),
in pStartDate date,
in pEndDate date
)
BEGIN
(
select
foliotransactions.postingDate,
foliotransactions.transactiondate,
foliotransactions.`ReferenceNo`,
foliotransactions.`TransactionSource` as ReferenceType,
foliotransactions.`FolioID`,
concat(guests.`lastname`,", " , guests.`firstname`) as GuestName,
foliotransactions.transactioncode,
foliotransactions.`Memo`,
if(AcctSide='DEBIT',foliotransactions.netAmount,0.00) as DEBIT,
if(AcctSide='CREDIT',foliotransactions.netAmount,0.00) as CREDIT,
foliotransactions.`UPDATEDBY` as CREATEDBY,
folioschedules.roomid,
company.companyName
from
foliotransactions
left join folioschedules on folioschedules.folioid = foliotransactions.folioid
left join folio on folioschedules.folioid = folio.folioid
left join company on folio.companyid = company.companyid,
`guests`
where
foliotransactions.`AccountID`=guests.`accountid` and
( date(foliotransactions.transactiondate) >= pStartDate and 
date(foliotransactions.transactiondate) <= pEndDate ) and
foliotransactions.Status='VOID'
order by folioschedules.roomid
)
UNION
(
select
nonguesttransaction.postingDate,
nonguesttransaction.transactiondate,
nonguesttransaction.referenceNo,
nonguesttransaction.transactionSource as ReferenceType,
nonguesttransaction.referenceFolioId as FolioID,
nonguesttransaction.guestName as GuestName,
nonguesttransaction.transactioncode,
nonguesttransaction.`Memo`,
if(AcctSide='DEBIT', nonguesttransaction.netAmount,0.00) as DEBIT,
if(AcctSide='CREDIT',nonguesttransaction.netAmount,0.00) as CREDIT,
nonguesttransaction.`UPDATEDBY` as CREATEDBY,
nonguesttransaction.roomNumber as roomid,
nonguesttransaction.companyName
from
nonguesttransaction force index(primary)
where
nonguesttransaction.statusFlag = 'VOID' and
( date(nonguesttransaction.transactiondate) >= pStartDate and 
date(nonguesttransaction.transactiondate) <= pEndDate)
order by nonguesttransaction.roomNumber
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportDependentFolios` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportDependentFolios`(
in pMasterFolio varchar(30),
in pHotelId int(4)
)
BEGIN
select distinct
(folio.folioid) as DepFolioId,
(folio.noofadults+folio.noofchild) as TotalGuests,
folio.foliotype,
folio.masterfolio,
folioschedules.roomid,
folioschedules.roomtype,
folioschedules.fromdate as ARRIVALDATE,
folioschedules.todate as DEPARTUREDATE,  
concat(guests.firstname," ",guests.lastname) as GuestName,
concat(guests.street,", ",guests.city) as CityAdd,
concat(guests.country, " ",guests.zip) as CountryAdd,
transactiondate,
referenceno,
transactioncode,
foliotransactions.memo,
foliotransactions.netbaseamount,
foliotransactions.governmenttax,
foliotransactions.localtax,
foliotransactions.discount,
foliotransactions.updatedby,
if(acctside='DEBIT',baseamount,0.00) as CHARGES,  
if(acctside='CREDIT',baseamount,0.00) as CREDIT
from
guests,
folio,
folioschedules,
foliotransactions
where
guests.accountid = folio.accountid and
folioschedules.folioid = folio.folioid and
date(folioschedules.fromdate) <= curdate() and
foliotransactions.folioid = folio.folioid and
folio.masterfolio = pMasterFolio and 	
foliotransactions.status = 'ACTIVE' and
folio.hotelid = pHotelId and
foliotransactions.subfolio = 'B'
order by foliotransactions.transactiondate;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportEDRoomTransfer` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportEDRoomTransfer`(
IN photelid int(5),
in pAuditDate date
)
BEGIN
select folioid
from folioschedules 
where date(fromdate) = adddate(pAuditDate,1);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportEventRequirements` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportEventRequirements`(pFolioID varchar(30))
BEGIN
select requirementid, group_concat(description) from event_requirements where folioid=pFolioID group by requirementid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportExpectedGuestsArrival` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportExpectedGuestsArrival`(
in photelid int(5),
in pAuditDate date
)
BEGIN
select 
concat(guests.lastname, " , ", guests.firstname) as GuestName,
guests.memo,
folioschedules.roomid,
folioschedules.roomtype,
folioschedules.todate as departure,
folio.remarks,
folio.folioid,
folioschedules.fromdate as arrival,
company.companyname,
(folio.noofadults + folio.noofchild) as pax,
fGetFolioBalance(folio.FolioId) as Balance,
guests.account_type,
rooms.floor
from 
guests,
folio left join company on company.companyid = folio.companyid,
folioschedules left join rooms on rooms.roomid = folioschedules.roomid
where 
(folio.status != 'CANCELLED' and
folio.status != 'NO SHOW' and 
folio.status != 'CHECKED IN' and
folio.status != 'CHECKED OUT') and
guests.accountid = folio.accountid and
folioschedules.folioid = folio.folioid and 
date(folioschedules.fromdate) = pAuditDate and
guests.hotelid = folio.hotelid and
folioschedules.hotelid = folio.hotelid and
folio.hotelid = photelid and
folio.foliotype != 'DEPENDENT' and
folioschedules.roomtype!='FUNCTION'
order by folioschedules.roomid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportExpectedGuestsDeparture` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportExpectedGuestsDeparture`(
in photelid int(5),
in pAuditDate date
)
BEGIN
select 
folio.folioid,
concat(guests.lastname, " , ", guests.firstname) as GuestName,
guests.memo,
guests.account_type,
folioschedules.roomid,
folioschedules.roomtype,
folioschedules.todate as departure,
folio.remarks,
folioschedules.fromdate as arrival,
company.companyname,
folio.noofadults as Pax,
fGetFolioBalance(folio.FolioId) as Balance,
rooms.floor
from 
guests,
folio left join company on company.companyid = folio.companyid,
folioschedules left join rooms on rooms.roomid = folioschedules.roomid
where 
(folio.status = 'CHECKED IN' or folio.status = 'CONFIRMED' or folio.status = 'TENTATIVE') and
guests.accountid = folio.accountid and
folioschedules.folioid = folio.folioid and 
date(folioschedules.todate) = pAuditDate and
guests.hotelid = folio.hotelid and
folioschedules.hotelid = folio.hotelid and
folio.hotelid = photelid and
folio.foliotype != 'DEPENDENT' and
folioschedules.roomtype!='FUNCTION'
order by guests.lastname
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportGroupBill` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportGroupBill`(
in pFolioId varchar(20),
in pHotelId int(5)
)
BEGIN
select distinct
folio.folioid,
folio.foliotype,
if(substring(folio.companyid,1,1)='G',fGetCompanyName(folio.companyid), fGetGuestName(folio.companyid)) as companyName,
event_booking_info.contactAddress as CityAdd,
event_booking_info.contactAddress as CountryAdd,
foliotransactions.transactiondate,
foliotransactions.postingdate,
foliotransactions.referenceno,
foliotransactions.transactioncode,
foliotransactions.memo,
if(foliotransactions.summaryFlag!=0, fGetPackageName(foliotransactions.packageID), foliotransactions.memo) as packageName,
foliotransactions.netbaseamount,
foliotransactions.governmenttax,
foliotransactions.localtax,
foliotransactions.discount,
foliotransactions.updatedby,
if(acctside='DEBIT',foliotransactions.netamount,0.00) as CHARGES,  
if(acctside='CREDIT',foliotransactions.netamount,0.00) as CREDIT,
foliotransactions.summaryFlag,
foliotransactions.transactionSource
from
folio left join event_booking_info on (folio.folioid = event_booking_info.folioid)
left join foliotransactions on foliotransactions.folioid = folio.folioid 
and foliotransactions.status = 'ACTIVE' and foliotransactions.summaryFlag=0 and
((foliotransactions.transactionCode!=1000 and foliotransactions.baseAmount!=0.00) or
(foliotransactions.transactionCode=1000 and foliotransactions.baseAmount!=0.00)) and foliotransactions.subfolio='A'
where
folio.folioid = pFolioId and 	
folio.hotelid = pHotelId
order by foliotransactions.transactiondate;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportGroupBill2` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportGroupBill2`(
in pFolioId varchar(20),
in pHotelId int(5)
)
BEGIN
select 
folio.folioid,
folio.foliotype,
if(substring(folio.companyid,1,1)='G',fGetCompanyName(folio.companyid), fGetGuestName(folio.companyid)) as companyName,
event_booking_info.contactAddress as CityAdd,
event_booking_info.contactAddress as CountryAdd,
foliotransactions.transactiondate,
foliotransactions.postingdate,
foliotransactions.referenceno,
foliotransactions.packageID as transactionCode,
foliotransactions.memo,
fGetPackageName(foliotransactions.packageID) as packageName,
(select distinct sum(netbaseamount) from foliotransactions where folioid=pFolioID and foliotransactions.status = 'ACTIVE' and foliotransactions.acctside='DEBIT' and foliotransactions.summaryFlag!=0 ) as netbaseamount,
(select distinct sum(governmenttax) from foliotransactions where folioid=pFolioID and foliotransactions.status = 'ACTIVE' and foliotransactions.summaryFlag!=0 ) as governmenttax,
(select distinct sum(localtax) from foliotransactions where folioid=pFolioID and foliotransactions.status = 'ACTIVE' and foliotransactions.summaryFlag!=0 ) as localtax,
(select distinct sum(discount) from foliotransactions where folioid=pFolioID and foliotransactions.status = 'ACTIVE' and foliotransactions.summaryFlag!=0 ) as discount,
foliotransactions.updatedby,
(select distinct sum(netamount) from foliotransactions where folioid=pFolioID and acctside='DEBIT' and foliotransactions.status = 'ACTIVE' and foliotransactions.summaryFlag!=0 ) as CHARGES,  
(select distinct sum(netamount) from foliotransactions where folioid=pFolioID and acctside='CREDIT' and foliotransactions.status = 'ACTIVE' and foliotransactions.summaryFlag!=0 ) as CREDIT,
foliotransactions.summaryFlag,
foliotransactions.transactionSource,
(select distinct sum(netamount) from foliotransactions where folioid=pFolioID and foliotransactions.status = 'ACTIVE' and foliotransactions.summaryFlag!=0 ) as netamount
from
folio left join event_booking_info on (folio.folioid = event_booking_info.folioid)
left join foliotransactions on foliotransactions.folioid = folio.folioid 
and foliotransactions.status = 'ACTIVE' and foliotransactions.subfolio='A'
where
folio.folioid = pFolioId and 	
folio.hotelid = pHotelId and foliotransactions.summaryFlag!=0 
group by summaryFlag;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportGuestsLedger` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportGuestsLedger`(
in pHotelId int(5),
in pReportDate date
)
BEGIN
select
folio.folioid,
if(fGetCurrentRoomOccupied(folio.folioid,pHotelId, pReportDate) is null,fGetCurrentRoomOccupied(folio.masterfolio,pHotelId, pReportDate),fGetCurrentRoomOccupied(folio.folioid,pHotelId, pReportDate)) as RoomId,
if(folio.accountId != "", CONCAT(GUESTS.LASTNAME," , ", GUESTS.FIRSTNAME), folio.groupName) AS GuestName,
sum(if(acctside='DEBIT',foliotransactions.netamount,0)) as CHARGES,
sum(if(acctside='CREDIT',foliotransactions.netamount,0)) as PAYMENT,
folio.remarks,	
folio.status,
company.companyName as CompanyName,
date(folio.fromdate) as checkInDate,
date(folio.todate) as checkOutDate
from
folio 
left join guests on guests.accountid = folio.accountid
left join company on company.companyid = folio.companyid
left join foliotransactions on foliotransactions.folioid = folio.folioid
and foliotransactions.`status` = 'ACTIVE' and
foliotransactions.transactiondate <= pReportDate
where
folio.hotelid = pHotelId and
(folio.status = 'CHECKED IN' or folio.status = 'CONFIRMED' or folio.status = 'TENTATIVE'
or folio.status = 'CHECKED OUT') and
(date(folio.fromDate) <= pReportDate and date(folio.toDate) >= pReportDate) and folio.foliotype != 'GROUP' and folio.foliotype != 'SHARE' and folio.foliotype != 'JOINER'
group by folioid
order by roomid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportHighBalanceGuests` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportHighBalanceGuests`(
in pHotelId int(5),
in pReportDate date
)
BEGIN
select
folio.folioid,
if(fGetCurrentRoomOccupied(folio.folioid,pHotelId, pReportDate) is null,fGetCurrentRoomOccupied(folio.masterfolio,pHotelId, pReportDate),fGetCurrentRoomOccupied(folio.folioid,pHotelId, pReportDate)) as RoomId,
if(folio.accountId != "", CONCAT(GUESTS.LASTNAME," , ", GUESTS.FIRSTNAME), folio.groupName) AS GuestName,
if(folio.accountId != "", guests.threshold_value, company.threshold_value) AS CreditLimit,
fGetFolioBalance(folio.folioid) as Balance,
folio.remarks,	
folio.status,
company.companyName as CompanyName,
folio.fromdate as checkInDate,
folio.todate as checkOutDate
from
folio 
left join folioledger on folioledger.folioid = folio.folioid
left join guests on guests.accountid = folio.accountid
left join company on company.companyid = folio.companyid
where
fGetFolioBalance(folio.folioid) > 0 and
(fGetFolioBalance(folio.folioid) >= guests.threshold_value 
or fGetFolioBalance(folio.folioid) >= company.threshold_value)
and
folio.hotelid = pHotelId and
(folio.status = 'CHECKED IN' or folio.status = 'CONFIRMED' or folio.status = 'TENTATIVE'
or folio.status = 'CHECKED OUT') and
(date(folio.fromDate) <= pReportDate and date(folio.toDate) >= pReportDate) and folio.foliotype != 'SHARE'
group by folioid
order by fGetFolioBalance(folio.folioid) desc;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportHousekeepingJobs` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportHousekeepingJobs`(
in photelid int(5),
in pAuditDate date
)
BEGIN
select 
hk_housekeepingjobs.roomId,
rooms.roomtypecode,
hk_housekeepingjobs.housekeepingDate,
hk_housekeepingjobs.startTime,
hk_housekeepingjobs.endTime,
hk_housekeepingjobs.remarks,
hk_housekeepingjobs.housekeepingType,
hk_housekeepingjobs.elapsedTime,
concat(	hk_housekeepingjobs.housekeeperid, "-", hk_housekeepers.lastname,", ",hk_housekeepers.firstname) as HOUSEKEEPER,
hk_housekeepingjobs.updatedBy
from
hk_housekeepingjobs
left join hk_housekeepers on hk_housekeepers.housekeeperId = hk_housekeepingjobs.housekeeperid
left join rooms on rooms.roomid = hk_housekeepingjobs.roomId
where
hk_housekeepingjobs.housekeepingDate = pAuditDate and
hk_housekeepingjobs.hotelId = photelId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportIndividualGuestBill` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportIndividualGuestBill`(
in pfolioid varchar(20),
in photelid int(5),
in pAuditDate date
)
BEGIN
(select distinct
folio.folioid,
folio.remarks,
(folio.noofadults+folio.noofchild) as TotalGuests,
folio.foliotype,
folioschedules.roomid,
folioschedules.roomtype,
folioschedules.ratetype,
folio.arrivaldate as ARRIVALDATE,
folio.departuredate as DEPARTUREDATE,  
if(folio.foliotype='GROUP', if(substring(folio.companyid,1,1)='G',fGetCompanyName(folio.companyid), fGetGuestName(folio.companyid)), fGetGuestName(folio.accountid)) as GuestName,
if(folio.foliotype='GROUP', (select contactaddress from event_booking_info where folioid=folio.folioid), concat(guests.street,", ",guests.city)) as CityAdd,
concat(guests.country, " ",guests.zip) as CountryAdd,
foliotransactions.postingdate,
foliotransactions.transactiondate,
foliotransactions.SubFolio,
foliotransactions.referenceno,
foliotransactions.transactionsource,
foliotransactions.transactioncode,
foliotransactions.memo,
foliotransactions.netbaseamount,
foliotransactions.governmenttax,
foliotransactions.localtax,
foliotransactions.discount,
foliotransactions.grossAmount,
foliotransactions.servicecharge,
foliotransactions.updatedby,
if(foliotransactions.subfolio='A', company.companyid, fGetAccountIDOfLedger(folio.folioid, subfolio)) as companyid,
if(foliotransactions.subfolio='A', company.companyname, if(substring(fGetAccountIDOfLedger(folio.folioid, subfolio), 1, 1)='G',fGetCompanyName(fGetAccountIDOfLedger(folio.folioid, subfolio)), fGetGuestName(fGetAccountIDOfLedger(folio.folioid, subfolio)))) as companyName,
if(acctside='DEBIT',foliotransactions.netamount,0.00) as CHARGES,  
if(acctside='CREDIT',foliotransactions.netamount,0.00) as CREDIT
from
folio
left join foliotransactions on foliotransactions.folioid = folio.folioid and
foliotransactions.status = 'ACTIVE' left join company on company.companyid = folio.companyid
left join guests on guests.accountid = folio.accountid ,
(select * from folioschedules where folioid = pfolioid limit 0,1) folioschedules
where
folio.folioid = pfolioid 
and folio.hotelid = pHotelId
order by foliotransactions.transactiondate);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportIndividualGuestBillSubReport` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportIndividualGuestBillSubReport`(
in pfolioid varchar(20)
)
BEGIN
Select 
folioid,
transactioncode,
GovernmentTax,
servicecharge,
netbaseamount,
if(memo='CASH','PAYMENTS',memo) as memo,
if(acctside='DEBIT',netbaseamount,0.00) as CHARGES,  
if(acctside='CREDIT',netbaseamount,0.00) as CREDIT
from 
foliotransactions 
WHERE 
folioid=pfolioid and foliotransactions.status = 'ACTIVE';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportIndividualGuestSubReport` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportIndividualGuestSubReport`(
in pfolioid varchar(20),
in pSubFolio varchar(1)
)
BEGIN
Select 
folioid,
SubFolio,
transactioncode,
netbaseamount,
memo 
from 
foliotransactions 
WHERE 
folioid=pfolioid and SubFolio=pSubFolio;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportInHouseGroups` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportInHouseGroups`(
in photelid int(5),
in pAuditDate date
)
BEGIN
select distinct
folio.folioid,
(folio.noofadults + folio.noofchild) as noofadults,
folio.accountid,
if(substring(folio.companyid,1,1)='G',fGetCompanyName(folio.companyid), fGetGuestName(folio.companyid)) as GuestName,
event_booking_info.contactAddress as Address1,
event_booking_info.contactNumber as telephoneNo,
'' as citizenship,
folioschedules.ratetype as account_type,
folioschedules.roomid,
folioschedules.rate,
folio.remarks,
folioschedules.fromdate AS arrivaldate,
folioschedules.todate AS departuredate,
if(substring(folio.companyid,1,1)='G',fGetCompanyName(folio.companyid), folio.groupname) as companyname,
rooms.floor,
folio.folioType,
folioschedules.breakfast
from
event_booking_info,
folio,
folioschedules left join rooms on rooms.roomid = folioschedules.roomid
where
event_booking_info.folioid = folio.folioid and
folioschedules.folioid = folio.folioid and
folio.status = 'CHECKED IN' and
(pAuditDate >= date(folioschedules.todate) or pAuditDate <= date(folioschedules.todate)) and
folioschedules.hotelid = folio.hotelid and
folio.hotelid = photelid and foliotype='GROUP' group by folio.folioid
order by folioschedules.roomid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportInHouseGuestList` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportInHouseGuestList`(
in photelid int(5),
in pAuditDate date
)
BEGIN
select 	distinct
folio.folioid,
(folio.noofadults + folio.noofchild) as noofadults,
folio.accountid,
concat(guests.lastname," , ",guests.firstname) as GuestName,
concat(guests.street,", ",guests.city, ", ",guests.country) as Address1,
guests.telephoneNo,
guests.citizenship,
folioschedules.ratetype as account_type,
folioschedules.roomid,
folioschedules.rate,
folio.remarks,
folioschedules.fromdate AS arrivaldate,
folioschedules.todate AS departuredate,
if(substring(folio.companyid,1,1)='G',fGetCompanyName(folio.companyid), folio.groupname) as companyname,
rooms.floor,
folio.folioType,
folioschedules.breakfast
from
guests,
folio,
folioschedules left join rooms on rooms.roomid = folioschedules.roomid
where
guests.accountid = folio.accountid and
folioschedules.folioid = folio.folioid and
folio.status = 'CHECKED IN' and
(pAuditDate between date(folioschedules.fromdate) and date(folioschedules.todate)) and
guests.hotelid = folio.hotelid and
folioschedules.hotelid = folio.hotelid and
folio.hotelid = photelid and foliotype!='GROUP'
order by folioschedules.roomid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportInHouseGuests` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportInHouseGuests`(
in photelid int(5),
in pAuditDate date
)
BEGIN
select 	distinct
folio.folioid,
(folio.noofadults + folio.noofchild) as noofadults,
folio.accountid,
if(foliotype='GROUP', if(substring(folio.companyid,1,1)='G',fGetCompanyName(folio.companyid), fGetGuestName(folio.companyid)), concat(guests.lastname," , ",guests.firstname)) as GuestName,
concat(guests.street,", ",guests.city, ", ",guests.country) as Address1,
guests.telephoneNo,
guests.citizenship,
folioschedules.ratetype as account_type,
if(foliotype='NON-STAYING', '', folioschedules.roomid) as roomid,
folioschedules.rate,
folio.remarks,
folioschedules.fromdate AS arrivaldate,
folioschedules.todate AS departuredate,
if(substring(folio.companyid,1,1)='G', fGetCompanyName(folio.companyid), folio.groupname) as companyname,
rooms.floor,
folio.folioType,
folioschedules.breakfast
from
guests,
folio,
folioschedules left join rooms on rooms.roomid = folioschedules.roomid
where
if(foliotype='GROUP', true, guests.accountid = folio.accountid) and
if(foliotype='NON-STAYING', true, folioschedules.folioid = folio.folioid) and
folio.status = 'CHECKED IN' and
if(foliotype='NON-STAYING' or foliotype='GROUP', true, (pAuditDate between date(folioschedules.fromdate) and date(folioschedules.todate)))
group by folioid order by roomid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportMonthlyActualGuestsArrival` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportMonthlyActualGuestsArrival`(
in photelid int(5),
in pMonth int,
in pYear int
)
BEGIN
select 
folio.folioid,
guests.accountid,
guests.account_type,
concat(guests.lastname,", ",guests.firstname) as GuestName,
folioschedules.roomid, 
folioschedules.roomtype,
folio.arrivalDate,
folio.DepartureDate,
folio.noOfadults as Pax,
folio.remarks,
folioschedules.todate as departure,
folioschedules.fromdate as arrival,
company.companyname,
fGetFolioBalance(folio.FolioId) as Balance,
rooms.floor
from
guests,
folioschedules left join rooms on rooms.roomid = folioschedules.roomid,
folio left join company on company.companyid = folio.companyid
where
guests.accountid = folio.accountid and
folioschedules.folioid = folio.folioid and
(month(folio.arrivaldate) = pMonth and year(folio.arrivaldate) = pYear) and
(folio.status = 'CHECKED IN' or folio.status = 'CHECKED OUT') and
guests.hotelid = folio.hotelid and
folioschedules.hotelid = folio.hotelid and
folio.hotelid = photelid and folioschedules.roomtype!='FUNCTION';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportMonthlyActualGuestsDeparture` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportMonthlyActualGuestsDeparture`(
in photelid int(5),
in pMonth int(2),
in pYear int(4)
)
BEGIN
select 
folio.folioid,
guests.accountid,
guests.account_type,
concat(guests.lastname,", ",guests.firstname) as GuestName,
folio.remarks,
folioschedules.days,
folioschedules.roomid, folioschedules.roomtype,
folioschedules.fromdate,
date(folio.todate) as todate,
folio.arrivaldate,
folio.departuredate,
folio.noOfadults as Pax,
company.companyname,
fGetFolioBalance(folio.FolioId) as Balance,
rooms.floor
from
guests,
folioschedules left join rooms on rooms.roomid = folioschedules.roomid,
folio
left join company on company.companyid = folio.companyid
where
guests.accountid = folio.accountid and
folioschedules.folioid = folio.folioid and
(month(folio.departuredate) = pMonth and year(folio.departuredate) = pYear) and
folio.status = 'CHECKED OUT' and
guests.hotelid = folio.hotelid and
folioschedules.hotelid = folio.hotelid and
folio.hotelid = photelid and folioschedules.roomtype!='FUNCTION';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportMonthlyCancelledReservations` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportMonthlyCancelledReservations`(
in pHotelID int(5),
in pMonth int(2),
in pYear int(4)
)
BEGIN
select
folio.folioid,
if(folio.foliotype!='GROUP', folio.accountid, folio.companyid) as accountid,
if(folio.foliotype!='GROUP', fGetGuestName(folio.accountid), concat(folio.groupname, ' (', (if(substring(folio.companyid,1,1)='G',fGetCompanyName(folio.companyid), fGetGuestName(folio.companyid))), ')')) as GuestName,
if (folioschedules.roomid is null or folioschedules.roomid='', '', folioschedules.roomid) as roomid, 
if (folioschedules.roomid is null or folioschedules.roomid='', '', folioschedules.roomtype) as roomtype,
folio.remarks,
folio.noofadults,
if (folioschedules.roomid is null or folioschedules.roomid='', '', folioschedules.days) as days,
if (folioschedules.roomid is null or folioschedules.roomid='', '', folioschedules.rate) as rate,
folio.fromdate,
folio.todate as departure,
folio.reason_for_cancel,
folio.updatetime
from
folio left join folioschedules on (folioschedules.folioid = folio.folioid)
where
( month(folio.updatetime) = pMonth and
year(folio.updatetime) = pYear ) and
(folio.status = 'CANCELLED' or folio.status = 'NO SHOW') and
folio.hotelid = photelid and foliotype!='DEPENDENT' and foliotype != 'JOINER';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportMonthlyCashierTransactions` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportMonthlyCashierTransactions`(
in pHotelId int(5),
in pMonth int,
in pYear int
)
BEGIN
set sql_big_selects =1;
(
select
cashiers_logs.terminalid as Terminal,
cashiers_logs.cashierid,
cashiers_logs.shiftcode,
cashiers_logs.openingbalance,
cashiers_logs.openingadjustment,
cashiers_logs.beginningbalance,
cashiers_logs.chargeinamount,
cashiers_logs.cash,
cashiers_logs.creditcard,
cashiers_logs.cheque,	
cashiers_logs.others,
cashiers_logs.remarks,
cashiers_logs.adjustment,
cashiers_logs.netamount,
cashiers_logs.amountremitted,
cashiers_logs.updatedby,
foliotransactions.transactionDate,
foliotransactions.referenceno,
concat(folioschedules.roomid,'  ',guests.lastname,', ',guests.firstname) as TransactionSource,
foliotransactions.transactioncode,
foliotransactions.memo,
foliotransactions.`status`,
foliotransactions.acctside,
if(foliotransactions.acctside='DEBIT',foliotransactions.baseamount,0.00) as CHARGES,  
if(foliotransactions.acctside='CREDIT',foliotransactions.baseamount,0.00) as CREDIT
from 	
transactioncode force index(primary),
cashiers_logs force index(primary)
left join foliotransactions force index(folioid) on foliotransactions.terminalid = cashiers_logs.terminalid and foliotransactions.shiftcode = cashiers_logs.shiftcode
left join folioschedules force index(folioid) on folioschedules.folioid = foliotransactions.folioid
left join guests force index(primary) on guests.accountid = foliotransactions.accountid
where
foliotransactions.transactioncode = transactioncode.trancode and 
cashiers_logs.hotelid = pHotelid and
(month(foliotransactions.transactionDate) = pMonth and 
year(foliotransactions.transactionDate) = pYear) and
cashiers_logs.type = 'CLOSE'
order by transactiondate
)
UNION(
select
nonguesttransaction.terminalID as Terminal,
nonguesttransaction.terminalID as cashierId,
nonguesttransaction.shiftCode,
0 as openingbalance,
0 as openingadjustment,
0 as beginningbalance,
0 as chargeinamount,
0 as cash,
0 as creditcard,
0 as cheque,	
0 as others,
"" as remarks,
0 as adjustment,
0 as netamount,
0 as amountremitted,
nonguesttransaction.updatedby,
nonguesttransaction.transactionDate,
nonguesttransaction.referenceNo,
concat(nonguesttransaction.roomNumber," ",nonguesttransaction.guestName) as TransactionSource,
nonguesttransaction.transactionCode,
nonguesttransaction.memo,
nonguesttransaction.statusFlag as `status`,
nonguesttransaction.acctSide,
if(nonguesttransaction.acctside='DEBIT',nonguesttransaction.baseamount,0.00) as CHARGES,  
if(nonguesttransaction.acctside='CREDIT',nonguesttransaction.baseamount,0.00) as CREDIT
from nonguesttransaction
where
nonguesttransaction.hotelID = pHotelId and
(month(nonguesttransaction.transactionDate) = pMonth and 
year(nonguesttransaction.transactionDate) = pYear)
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportMonthlyCityTransferTransactions` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportMonthlyCityTransferTransactions`(
in pHotelId int(4),
in pMonth int,
in pYear int
)
BEGIN
select 
(select roomid from folioschedules where folioid=folio.folioid limit 1) as roomid,
foliotransactions.folioid,
foliotransactions.accountid,
fGetGuestName(folio.accountid) as GuestName,
folio.companyid,
if(substring(folio.companyid,1,1)='G',fGetCompanyName(folio.companyid), fGetGuestName(folio.companyid)) as companyName,
foliotransactions.postingdate,
foliotransactions.baseamount,
foliotransactions.updatedby
from foliotransactions left join folio on folio.folioid = foliotransactions.folioid
where foliotransactions.transactioncode='4200' and
(month(foliotransactions.transactiondate) = pMonth and 
year(foliotransactions.transactiondate) = pYear) and 
foliotransactions.hotelid = pHotelId
union
select roomNumber as roomID,
referenceFolioID as folioID,
accountID,
guestName,
accountID as companyID,
companyName,
postingdate,
baseamount,
updatedby
from nonguesttransaction
where transactioncode ='4200' and
(month(transactiondate) = pMonth and 
year(transactiondate) = pYear) and 
hotelid = pHotelId and
statusflag = 'ACTIVE';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportMonthlyDriversSales` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportMonthlyDriversSales`(pMonth int, pYear int, pHotelid int)
BEGIN
select drivers.*, netAmount as commission, transactiondate, referenceNo, referenceFolioId, accountId, roomNumber, guestName  from drivers, nonguesttransaction where referencedriverid=driverid and nonguesttransaction.hotelid=pHotelid and month(transactiondate) = pMonth and year(transactiondate) = pYear and statusflag!='VOID' order by lastname;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportMonthlyExecutive` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportMonthlyExecutive`(pMonth int, pYear int, pHotelID int(2), pSalesExecutive varchar(30))
BEGIN
if(pSalesExecutive!='ALL') then
select 
(fGetTotalFolioAmountForSalesExecutive('1', pHotelID, 'A', 'DEBIT', folioid) +
fGetFolioTransferDebitForSalesExecutive('4100', pHotelID, 'A', 'DEBIT', folioid)) -
(fGetFolioTransferDebitForSalesExecutive('4100', pHotelID, 'A', 'CREDIT', folioid) +
fGetTotalFolioAmountForSalesExecutive('7', pHotelID, 'A', 'CREDIT', folioid) +
fGetTotalFolioAmountForSalesExecutive('1', pHotelID, 'A', 'CREDIT', folioid)) as totalSales,sales_executive, folioid, 
if(foliotype='GROUP', concat(if(substring(folio.companyid,1,1)='G',fGetCompanyName(folio.companyid), fGetGuestName(folio.companyid)), ' [', folio.groupname, ']'), concat(fGetGuestName(folio.accountid), ' [', folio.groupname, ']')) as companyName, 
source, arrivalDate as arrival, departureDate as departure from folio where sales_executive=pSalesExecutive and folio.status='CHECKED OUT' and folio.foliotype!='JOINER' and 
month(departureDate)=pMonth and year(departureDate)=pYear
order by totalSales desc, sales_executive;
else
select 
(fGetTotalFolioAmountForSalesExecutive('1', pHotelID, 'A', 'DEBIT', folioid) +
fGetFolioTransferDebitForSalesExecutive('4100', pHotelID, 'A', 'DEBIT', folioid)) -
(fGetFolioTransferDebitForSalesExecutive('4100', pHotelID, 'A', 'CREDIT', folioid) +
fGetTotalFolioAmountForSalesExecutive('7', pHotelID, 'A', 'CREDIT', folioid) +
fGetTotalFolioAmountForSalesExecutive('1', pHotelID, 'A', 'CREDIT', folioid)) as totalSales,sales_executive, folioid, if(foliotype='GROUP', concat(if(substring(folio.companyid,1,1)='G',fGetCompanyName(folio.companyid), fGetGuestName(folio.companyid)), ' [', folio.groupname, ']'), concat(fGetGuestName(folio.accountid), ' [', folio.groupname, ']')) as companyName, source, arrivalDate as arrival, departureDate as departure from folio where folio.status='CHECKED OUT' and folio.foliotype!='JOINER' and 
month(departureDate)=pMonth and year(departureDate)=pYear order by totalSales, sales_executive desc;
end if;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportMonthlyExpectedGuestsArrival` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportMonthlyExpectedGuestsArrival`(
in photelid int(5),
in pMonth int(2),
in pYear int(4)
)
BEGIN
select 
concat(guests.lastname, " , ", guests.firstname) as GuestName,
guests.memo,
folioschedules.roomid,
folioschedules.roomtype,
folioschedules.todate as departure,
FOLIO.remarks,
folioschedules.fromdate as arrival,
company.companyname,
(folio.noofadults + folio.noofchild) as pax,
rooms.floor
from 
guests,
folio left join company on company.companyid = folio.companyid,
folioschedules  left join rooms on folioschedules.roomid=rooms.roomid
where 
(folio.status != 'CANCELLED' and
folio.status != 'NO SHOW' and
folio.status != 'CHECKED IN' and
folio.status != 'CHECKED OUT') and
guests.accountid = folio.accountid and
folioschedules.folioid = folio.folioid and 
( month(folioschedules.fromdate) = pMonth and year(folioschedules.fromdate) = pYear) and
guests.hotelid = folio.hotelid and
folioschedules.hotelid = folio.hotelid and
folio.hotelid = photelid
order by folioschedules.roomid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportMonthlyExpectedGuestsDeparture` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportMonthlyExpectedGuestsDeparture`(
in photelid int(5),
in pMonth int(2),
in pYear int(4)
)
BEGIN
select 
folio.folioid,
concat(guests.firstname,"  ",guests.lastname) as GuestName,
folioschedules.roomid,
folioschedules.roomtype,
folio.remarks,
rooms.floor
from 
guests,
folio,
folioschedules left join rooms on folioschedules.roomid=rooms.roomid
where 
guests.accountid = folio.accountid and
folio.folioid = folioschedules.folioid  and 
folio.status = 'CHECKED IN' and
( month(folioschedules.todate) = pMonth and 
year(folioschedules.todate) = pYear )
and
folio.hotelid = guests.hotelid and
folioschedules.hotelid = folio.hotelid and
folio.hotelid = pHotelID
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportMonthlyGroupDeparture` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportMonthlyGroupDeparture`(
in photelid int(5),
in pMonth int(2),
in pYear int(4))
BEGIN
select folio.folioid,
folio.companyid,
folio.accounttype,
folio.groupname as GuestName,
folioschedules.roomid,
folioschedules.roomtype,
folio.arrivaldate,
folio.departuredate,
folio.noofadults as pax,
folio.remarks,
date(folio.departuredate) as departure,
`folioschedules`.`FROMDATE` AS `arrival`,
if((substr(`folio`.`companyID`,1,1) = _latin1'G'),`hotel_test`.`fGetCompanyName`(`folio`.`companyID`),`hotel_test`.`fGetGuestName`(`folio`.`companyID`)) AS `companyname`,
`hotel_test`.`fGetFolioBalance`(`folio`.`folioID`) AS `Balance`,
`rooms`.`floor` AS `floor` 
from folio right join folioschedules on (folioschedules.FolioId = folio.folioID) left join rooms on (rooms.roomid = folioschedules.RoomID) where folio.folioType = 'GROUP' and folio.Status = 'CHECKED OUT' and
(month(folio.departuredate) = pMonth and year(folio.departuredate) = pYear) and folio.hotelid=photelid order by folio.folioID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportMonthlyMealAmount` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportMonthlyMealAmount`(
in pMonth int(5),
in pYear int(5),
in pHotelId int(5)
)
BEGIN
select 
date(foliotransactions.transactiondate) as transactiondate,
'1002' as transactioncode,
sum(if(foliotransactions.acctside = "CREDIT", foliotransactions.mealAmount * -1, foliotransactions.mealAmount)) as NetBaseAmount,
transactioncode.acctside
from
foliotransactions  force index(FolioID,SubFolio,AccountID),
transactioncode  force index(primary)
where 	
foliotransactions.transactioncode=transactioncode.trancode and 
month(foliotransactions.transactiondate) = pMonth and
year(foliotransactions.transactiondate) = pYear and
foliotransactions.status = 'ACTIVE' and foliotransactions.transactioncode='1000'
group by foliotransactions.transactioncode;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportMonthlyOutOfOrderRooms` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportMonthlyOutOfOrderRooms`(
in pHotelId int(5),
in pMonth int(2),
in pYear int(4)
)
BEGIN
select distinct
roomevents.eventdate,
roomevents.roomid,
engineeringjobs.assignedperson,
engineeringjobs.startdate,
engineeringjobs.starttime,
engineeringjobs.enddate,
engineeringjobs.endtime,
engineeringservices.servicename
from 
roomevents left join
engineeringjobs on engineeringjobs.roomid = roomevents.roomid
left join engineeringservices on 
engineeringservices.enggserviceid = engineeringjobs.enggserviceid
where 
eventtype = 'ENGINEERING JOB' and
(month(eventdate) = pMonth and year(eventdate) = pYear) and 
roomevents.hotelid = pHotelId
order by eventdate,roomid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportMonthlyRoomOccupancyGraph` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportMonthlyRoomOccupancyGraph`(
in pHotelId int(4),
in pMonth int(2),
in pYear int(4)
)
BEGIN
select roomevents.eventdate,((count(distinct roomevents.roomid)/FGetTotalRooms()) * 100) as Occupancy ,roomevents.eventtype from roomevents
where (roomevents.eventtype = "IN HOUSE" or roomevents.eventtype = "RESERVATION" or roomevents.eventtype = "CHECK OUT") and
month(roomevents.eventdate) = pMonth and year(roomevents.eventdate) = pYear
group by roomevents.eventdate,roomevents.eventtype
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportMonthlySales` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportMonthlySales`(
in pHotelid int(5),
in pMonth int(2),
in pYear int(4)
)
BEGIN
(
select
foliotransactions.transactiondate,
foliotransactions.folioid,
foliotransactions.referenceno, 
foliotransactions.netamount,
foliotransactions.updatetime,
foliotransactions.transactionsource,
folioschedules.updatedby,
folioschedules.roomid,
concat(transactioncode.trancode,"-",transactioncode.memo) as TRANCODE,
concat(guests.lastname,", ",guests.firstname) as GuestName
from 	foliotransactions
left join guests on guests.accountid = foliotransactions.accountid,
folioschedules,
transactioncode,
trantypes 
where 	
folioschedules.folioid = foliotransactions.folioid and
foliotransactions.transactioncode=transactioncode.trancode and 
transactioncode.trantypeid=trantypes.trantypeid and
trantypes.trantypeid = '1' and
( month(transactiondate) = pMonth and Year(transactiondate) = pYear) and
folioschedules.hotelid = foliotransactions.hotelid and
transactioncode.hotelid = foliotransactions.hotelid and
trantypes.hotelid = foliotransactions.hotelid and
foliotransactions.hotelid = photelid and
foliotransactions.status = 'ACTIVE'
order by transactiondate
)
UNION
(
select
nonguesttransaction.transactiondate,
nonguesttransaction.referenceFolioId as folioid,
nonguesttransaction.referenceNo, 
nonguesttransaction.netamount,
nonguesttransaction.updatedDate as updateTime,
nonguesttransaction.transactionSource,
nonguesttransaction.updatedby,
nonguesttransaction.roomNumber as roomid,
concat(transactioncode.trancode,"-",transactioncode.memo) as TRANCODE,
nonguesttransaction.guestName as GuestName
from 
nonguesttransaction force index(primary)
left join transactioncode on transactioncode.trancode = nonguesttransaction.transactionCode 
left join trantypes on transactioncode.trantypeid = trantypes.trantypeid
where 
nonguesttransaction.acctSide = 'DEBIT' and
trantypes.trantypeid = '1' and
( month(transactionDate) = pMonth and Year(transactionDate) = pYear) and
nonguesttransaction.hotelid = pHotelid and
nonguesttransaction.statusflag = 'ACTIVE'
order by transactiondate
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportMonthlySalesProduction` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportMonthlySalesProduction`(pMonth int(5), pYear int(5), pHotelID int(5))
BEGIN
select date_format(fromdate, '%d-%b-%Y') as fromDate, date_format(todate, '%d-%b-%Y') as toDate, folio.folioid, if(substring(folio.companyid,1,1)='G',fGetCompanyName(folio.companyid), fGetGuestName(folio.companyid)) as companyName, groupname, eventType, (fGetTotalFolioAmountForSalesExecutive('1', pHotelID, 'A', 'DEBIT', folio.folioid) +
fGetFolioTransferDebitForSalesExecutive('4100', pHotelID, 'A', 'DEBIT', folio.folioid)) -
(fGetFolioTransferDebitForSalesExecutive('4100', pHotelID, 'A', 'CREDIT', folio.folioid) +
fGetTotalFolioAmountForSalesExecutive('7', pHotelID, 'A', 'CREDIT', folio.folioid) +
fGetTotalFolioAmountForSalesExecutive('1', pHotelID, 'A', 'CREDIT', folio.folioid)) as packageAmount, if(folio.status='CANCELLED', 'LOST/UNREALIZED', if(folio.status='CHECKED OUT' or folio.status='CHECKED IN', 'REALIZED', folio.status)) as `status`, reason_for_cancel as reason
from folio left join event_booking_info on (folio.folioid=event_booking_info.folioid) where foliotype='GROUP' and month(fromdate)=pMonth and year(fromdate)=pYear and folio.hotelid=pHotelId
order by `status`, fromdate;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportMonthlySalesSummary` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportMonthlySalesSummary`(
in pHotelid int(5),
in pMonth int,
in pYear int
)
BEGIN
(
select transactioncode, sum(baseamount) as BaseAmount, 
sum(grossAmount) as GrossAmount, 
sum(netAmount) as NetAmount, 
sum(netbaseamount) as NetBaseAmount, 
sum(discount) as Discount, 
sum(govttax) as GovtTax, 
sum(mealamount) as MealAmount, 
sum(localtax) as LocalTax, 
sum(servicecharge) as ServiceCharge, 
sum(transactioncount) as TransactionCount, 
TransactionDescription, 
acctside, 
sum(monthtodate) as MonthToDate, 
sum(yeartodate) as YearToDate 
from
(select 
foliotransactions.transactioncode,
sum(if(foliotransactions.acctside = "CREDIT", foliotransactions.baseAmount * -1, foliotransactions.baseAmount)) as BaseAmount,
sum(if(foliotransactions.acctside = "CREDIT", foliotransactions.grossAmount * -1, foliotransactions.grossAmount)) as GrossAmount,
sum(if(foliotransactions.acctside = "CREDIT", foliotransactions.netAmount * -1, foliotransactions.netAmount)) as NetAmount,
sum(if(foliotransactions.acctside = "CREDIT", foliotransactions.netBaseAmount * -1, foliotransactions.netBaseAmount)) as NetBaseAmount,
sum(if(foliotransactions.acctside = "CREDIT", foliotransactions.discount * -1, foliotransactions.discount)) as Discount,
sum(if(foliotransactions.acctside = "CREDIT", foliotransactions.governmentTax * -1, foliotransactions.governmentTax)) as GovtTax,
sum(if(foliotransactions.acctside = "CREDIT", foliotransactions.mealAmount * -1, foliotransactions.mealAmount)) as MealAmount,
sum(if(foliotransactions.acctside = "CREDIT", foliotransactions.localtax * -1, foliotransactions.localtax)) as LocalTax,
sum(if(foliotransactions.acctside = "CREDIT", foliotransactions.servicecharge * -1, foliotransactions.servicecharge)) as ServiceCharge,
count(foliotransactions.transactioncode) as TransactionCount,
transactioncode.memo as TransactionDescription,
transactioncode.acctside,
fGetTransactionNetBaseAmountMonthToDate(
foliotransactions.transactioncode,
foliotransactions.acctside,
foliotransactions.transactionDate,
pHotelId
) as MonthToDate,
fGetTransactionNetBaseAmountYearToDate(
foliotransactions.transactioncode,
foliotransactions.acctside,
transactionDate,
pHotelId
) as YearToDate
from
foliotransactions  force index(FolioID,SubFolio,AccountID),
transactioncode  force index(primary)
where 	
foliotransactions.transactioncode=transactioncode.trancode and 
month(transactiondate) = pMonth and
year(transactiondate) = pYear and
foliotransactions.status = 'ACTIVE'
group by foliotransactions.transactioncode,foliotransactions.acctside
UNION all
select 
nonguesttransaction.transactioncode,
sum(if(nonguesttransaction.acctside = "CREDIT", nonguesttransaction.baseAmount * -1, nonguesttransaction.baseAmount)) as BaseAmount,
sum(if(nonguesttransaction.acctside = "CREDIT", nonguesttransaction.grossAmount * -1, nonguesttransaction.grossAmount)) as GrossAmount,
sum(if(nonguesttransaction.acctside = "CREDIT", nonguesttransaction.netAmount * -1, nonguesttransaction.netAmount)) as NetAmount,
sum(if(nonguesttransaction.acctside = "CREDIT", nonguesttransaction.netBaseAmount * -1, nonguesttransaction.netBaseAmount)) as NetBaseAmount,
sum(if(nonguesttransaction.acctside = "CREDIT", nonguesttransaction.discount * -1, nonguesttransaction.discount)) as Discount,
sum(if(nonguesttransaction.acctside = "CREDIT", nonguesttransaction.governmentTax * -1, nonguesttransaction.governmentTax)) as GovtTax,
0 as MealAmount,
sum(if(nonguesttransaction.acctside = "CREDIT", nonguesttransaction.localtax * -1, nonguesttransaction.localtax)) as LocalTax,
sum(if(nonguesttransaction.acctside = "CREDIT", nonguesttransaction.servicecharge * -1, nonguesttransaction.servicecharge)) as ServiceCharge,
count(nonguesttransaction.transactioncode) as TransactionCount,
concat(transactioncode.memo, "-WALK IN") as TransactionDescription,
transactioncode.acctside,
fGetNonGuestTransactionNetBaseAmountMonthToDate(
nonguesttransaction.transactioncode,
nonguesttransaction.acctside,
nonguesttransaction.transactionDate,
pHotelId
)  as MonthToDate,
fGetNonGuestTransactionNetBaseAmountYearToDate(
nonguesttransaction.transactioncode,
nonguesttransaction.acctside,
transactionDate,
pHotelId
)  as YearToDate
from
nonguesttransaction  force index(primary),
transactioncode force index(primary)
where 	
month(transactiondate) = pMonth and
year(transactiondate) = pYear and
nonguesttransaction.statusFlag = 'ACTIVE' and
nonguesttransaction.transactioncode=transactioncode.trancode
group by nonguesttransaction.transactioncode,nonguesttransaction.acctside
) as TransactionTable group by transactionCode 
order by transactioncode asc, acctside desc);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportMonthlySalesSummary1` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportMonthlySalesSummary1`(
in pHotelid int(5),
in pMonth int,
in pYear int
)
BEGIN
select transactiondate, transactioncode, sum(netbaseamount) as NetBaseAmount, acctside from
(select 
date(foliotransactions.transactiondate) as transactiondate,
foliotransactions.transactioncode,
sum(if(foliotransactions.acctside = "CREDIT", foliotransactions.netBaseAmount * -1, foliotransactions.netBaseAmount)) as NetBaseAmount,
transactioncode.acctside
from
foliotransactions  force index(FolioID,SubFolio,AccountID),
transactioncode  force index(primary),
trantypes  force index(primary)
where 	
foliotransactions.transactioncode=transactioncode.trancode and 
transactioncode.trantypeid=trantypes.trantypeid and
month(foliotransactions.transactiondate) = pMonth and
year(foliotransactions.transactiondate) = pYear and
foliotransactions.status = 'ACTIVE'
group by foliotransactions.transactioncode,foliotransactions.acctside
UNION
select 
date(nonguesttransaction.transactiondate) as transactiondate,
nonguesttransaction.transactioncode,
sum(if(nonguesttransaction.acctside = "CREDIT", nonguesttransaction.netBaseAmount * -1, nonguesttransaction.netBaseAmount)) as NetBaseAmount,
transactioncode.acctside
from
nonguesttransaction  force index(primary), transactioncode
where 	
month(nonguesttransaction.transactiondate) = pMonth and
year(nonguesttransaction.transactiondate) = pYear and
nonguesttransaction.statusFlag = 'ACTIVE' and nonguesttransaction.transactioncode=transactioncode.trancode
group by nonguesttransaction.transactioncode,nonguesttransaction.acctside
) as foliotransactions group by transactioncode, acctside order by transactioncode asc, acctside desc;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportMonthlySalesSummaryBySubAccount` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportMonthlySalesSummaryBySubAccount`(
in pHotelid int(5),
in pMonth int,
in pYear int
)
BEGIN
(
select 
foliotransactions.subaccount,
if(foliotransactions.acctside = "DEBIT",
SUM(foliotransactions.baseamount),0) as DEBIT,
if(foliotransactions.acctside = "CREDIT",
SUM(foliotransactions.baseamount),0) as CREDIT,
count(foliotransactions.transactioncode) as Trans,
concat(transactioncode.trancode," - ",transactioncode.memo) as TRANCODE,
transactioncode.acctside
from
foliotransactions  force index(FolioID,SubFolio,AccountID),
transactioncode  force index(primary),
trantypes  force index(primary)
where 	
foliotransactions.subaccount != "" and
foliotransactions.transactioncode=transactioncode.trancode and 
transactioncode.trantypeid=trantypes.trantypeid and
month(foliotransactions.transactiondate) = pMonth and
year(foliotransactions.transactiondate) = pYear
group by foliotransactions.subaccount,foliotransactions.acctside
order by foliotransactions.subaccount asc, foliotransactions.acctside desc
)
UNION
(
select 
nonguesttransaction.subaccount,
if(nonguesttransaction.acctside = "DEBIT",
SUM(nonguesttransaction.baseamount),0) as DEBIT,
if(nonguesttransaction.acctside = "CREDIT",
SUM(nonguesttransaction.baseamount),0) as CREDIT,
count(nonguesttransaction.transactioncode) as Trans,
concat(nonguesttransaction.transactionCode," - ",nonguesttransaction.memo, " - WALK IN") as TRANCODE,
nonguesttransaction.acctside
from
nonguesttransaction  force index(primary)
where 	
nonguesttransaction.subaccount != "" and
month(nonguesttransaction.transactiondate) = pMonth and
year(nonguesttransaction.transactiondate) = pYear
group by nonguesttransaction.subaccount,nonguesttransaction.acctside
order by nonguesttransaction.subaccount asc, nonguesttransaction.acctside desc
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportMonthlyTransactionRegister` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportMonthlyTransactionRegister`(
in pHotelId int(4),
in pMonth int(4),
in pYear int(4)
)
BEGIN
(
select
foliotransactions.postingDate,
foliotransactions.transactiondate,
foliotransactions.`ReferenceNo`,
foliotransactions.`TransactionSource` as ReferenceType,
foliotransactions.`FolioID`,
guests.accountid,
concat(guests.`lastname`,", " , guests.`firstname`) as GuestName,
foliotransactions.transactioncode,
foliotransactions.`Memo`,
if(AcctSide='DEBIT',foliotransactions.`netbaseamount`,0.00) as DEBIT,
if(AcctSide='CREDIT',foliotransactions.`netbaseamount`,0.00) as CREDIT,
foliotransactions.`CREATEDBY`,
(select roomid from folioschedules where folioid=foliotransactions.folioid limit 1) as roomid,
(select roomtype from folioschedules where folioid=foliotransactions.folioid limit 1) as roomtype,
if(foliotype="DEPENDENT", folio.groupname, company.companyName) as companyName,
fGetTransactionDescription(foliotransactions.transactioncode) as description
from
foliotransactions
left join folio on foliotransactions.folioid = folio.folioid
left join company on folio.companyid = company.companyid,
`guests`
where
foliotransactions.`AccountID`=guests.`accountid`
and 
month(foliotransactions.`TransactionDate`) = pMonth and
year(foliotransactions.`TransactionDate`) = pyear and
foliotransactions.Status='ACTIVE'
order by folioschedules.roomid
)
UNION
(
select 
nonguesttransaction.postingDate,
nonguesttransaction.transactiondate,
nonguesttransaction.referenceNo,
nonguesttransaction.transactionSource as ReferenceType,
nonguesttransaction.referenceFolioId as `FolioID`,
nonguesttransaction.accountId,
nonguesttransaction.guestName as GuestName,
nonguesttransaction.transactioncode,
nonguesttransaction.`Memo`,
if(AcctSide='DEBIT',nonguesttransaction.netamount,0.00) as DEBIT,
if(AcctSide='CREDIT',nonguesttransaction.netamount,0.00) as CREDIT,
nonguesttransaction.`CREATEDBY`,
nonguesttransaction.roomNumber as roomid,
"" as roomtype,
nonguesttransaction.companyName,
fGetTransactionDescription(nonguesttransaction.transactioncode) as description
from
nonguesttransaction force index(primary)
where
month(nonguesttransaction.transactionDate) = pMonth and
year(nonguesttransaction.transactionDate) = pyear
order by nonguesttransaction.roomNumber
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportMonthlyTransactions` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportMonthlyTransactions`(
in photelid int(5),
in pMonth int(4),
in pYear int(4)
)
BEGIN
select 	
foliotransactions.*,
if(foliotransactions.acctside='DEBIT',foliotransactions.baseamount,0.00) as CHARGES,  
if(foliotransactions.acctside='CREDIT',foliotransactions.baseamount,0.00) as CREDIT,
folioschedules.roomid,
concat(guests.lastname,", ",guests.firstname) as GuestName
from foliotransactions 
left join folioschedules on foliotransactions.folioid = folioschedules.folioid
left join guests on guests.accountid = foliotransactions.accountid
where
MONTH(transactiondate) = pMonth and
YEAR(transactiondate) = pYear and
foliotransactions.hotelid = photelid
order by `status`,transactiondate;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportMonthlyVoidTransactions` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportMonthlyVoidTransactions`(
in pHotelId int(4),
in pMonth int(2),
in pYear int(4)
)
BEGIN
(select
foliotransactions.postingDate,
foliotransactions.transactiondate,
foliotransactions.`ReferenceNo`,
foliotransactions.`TransactionSource` as ReferenceType,
foliotransactions.`FolioID`,
concat(guests.`lastname`,", " , guests.`firstname`) as GuestName,
foliotransactions.transactioncode,
foliotransactions.`Memo`,
if(AcctSide='DEBIT',foliotransactions.netAmount,0.00) as DEBIT,
if(AcctSide='CREDIT',foliotransactions.netAmount,0.00) as CREDIT,
foliotransactions.`UPDATEDBY` as CREATEDBY,
folioschedules.roomid,
company.companyName
from
foliotransactions
left join folioschedules on folioschedules.folioid = foliotransactions.folioid
left join folio on folioschedules.folioid = folio.folioid
left join company on folio.companyid = company.companyid,
`guests`
where
foliotransactions.`AccountID`=guests.`accountid` and
( month(foliotransactions.transactiondate) = pMonth and 
year(foliotransactions.transactiondate) = pYear) and
foliotransactions.Status='VOID'
order by folioschedules.roomid
)
UNION
(
select
nonguesttransaction.postingDate,
nonguesttransaction.transactiondate,
nonguesttransaction.referenceNo,
nonguesttransaction.transactionSource as ReferenceType,
nonguesttransaction.referenceFolioId as FolioID,
nonguesttransaction.guestName as GuestName,
nonguesttransaction.transactioncode,
nonguesttransaction.`Memo`,
if(AcctSide='DEBIT', nonguesttransaction.netAmount,0.00) as DEBIT,
if(AcctSide='CREDIT',nonguesttransaction.netAmount,0.00) as CREDIT,
nonguesttransaction.`UPDATEDBY` as CREATEDBY,
nonguesttransaction.roomNumber as roomid,
nonguesttransaction.companyName
from
nonguesttransaction force index(primary)
where
nonguesttransaction.statusFlag = 'VOID' and
( month(nonguesttransaction.transactiondate) = pMonth and 
year(nonguesttransaction.transactiondate) = pYear)
order by nonguesttransaction.roomNumber
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportOutOfOrderRooms` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportOutOfOrderRooms`(
in photelid int(5),
in pAuditDate date
)
BEGIN
select distinct
roomevents.eventdate,
roomevents.roomid,
engineeringjobs.assignedperson,
engineeringjobs.startdate,
engineeringjobs.starttime,
engineeringjobs.enddate,
engineeringjobs.endtime,
engineeringservices.servicename
from 
roomevents left join
engineeringjobs on engineeringjobs.roomid = roomevents.roomid
left join engineeringservices on 
engineeringservices.enggserviceid = engineeringjobs.enggserviceid
where 
eventtype = 'ENGINEERING JOB' and
(date(eventdate) = pAuditDate ) and 
roomevents.hotelid = pHotelId
order by eventdate,roomid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportParamCityTransferTransactions` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportParamCityTransferTransactions`(
in pHotelId int(4),
in pStartDate date,
in pEndDate date
)
BEGIN
select 
(select roomid from folioschedules where folioid=folio.folioid limit 1) as roomid,
foliotransactions.folioid,
foliotransactions.accountid,
fGetGuestName(folio.accountid) as GuestName,
folio.companyid,
if(substring(folio.companyid,1,1)='G',fGetCompanyName(folio.companyid), fGetGuestName(folio.companyid)) as companyName,
foliotransactions.postingdate,
foliotransactions.baseamount,
foliotransactions.updatedby
from foliotransactions left join folio on folio.folioid = foliotransactions.folioid
where foliotransactions.transactioncode ='4200' and
(date(foliotransactions.transactiondate) >= pStartDate and 
date(foliotransactions.transactiondate) <= pEndDate) and 
foliotransactions.hotelid = pHotelId and
foliotransactions.status = 'ACTIVE'
union
select roomNumber as roomID,
referenceFolioID as folioID,
accountID,
guestName,
accountID as companyID,
companyName,
postingdate,
baseamount,
updatedby
from nonguesttransaction
where transactioncode ='4200' and
(date(transactiondate) >= pStartDate and 
date(transactiondate) <= pEndDate) and 
hotelid = pHotelId and
statusflag = 'ACTIVE';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportParamInHouseGuestsForecast` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportParamInHouseGuestsForecast`(
in photelid int(5),
in pReportDate date
)
BEGIN
select distinct
folio.folioid,
folio.noofadults,
fGetGuestName(folio.accountid) as GuestName,
folioschedules.roomid,
folioschedules.rate,
folio.status,
folio.remarks,
folio.fromdate AS arrivaldate,
folio.todate AS departuredate,
if(substring(folio.companyid,1,1)='G',fGetCompanyName(folio.companyid), fGetGuestName(folio.companyid)) as companyName,
rooms.floor,
folio.folioType
from
folio,
folioschedules left join rooms on rooms.roomid = folioschedules.roomid
where
folioschedules.folioid = folio.folioid and
(folio.status = 'CHECKED IN' or folio.status = 'CONFIRMED' or folio.status = 'WAIT LIST' or folio.status = 'TENTATIVE' or folio.status = 'CHECKED OUT') and
if (folioschedules.roomtype = 'FUNCTION' and pReportDate <= (select auditdate from auditdatetable where meridian='AM'), ((pReportDate > date(folioschedules.todate) and folio.status!='CHECKED OUT') or (pReportDate >= date(folioschedules.fromdate) and pReportDate < date(folioschedules.todate))), (pReportDate >= date(folioschedules.fromdate) and pReportDate < date(folioschedules.todate))) and
folioschedules.hotelid = folio.hotelid and
folio.hotelid = photelid group by folioid
union 
select distinct 
roomblock.folioid,
0 as noofadults,
fGetGuestName(folio.accountid) as GuestName,
blockingdetails.roomid,
0 as rate,
'BLOCKED' as `status`,
'' as remarks,
blockingdetails.blockfrom AS arrivaldate,
blockingdetails.blockto AS departuredate,
if(substring(folio.companyid,1,1)='G',fGetCompanyName(folio.companyid), fGetGuestName(folio.companyid)) as companyName,
'' as `floor`,
'DEPENDENT' as foliotype
from roomblock, blockingdetails, folio where roomblock.blockid=blockingdetails.blockid and roomblock.folioid!='' and folio.folioid=roomblock.folioid and (pReportDate >= date(blockfrom) and pReportDate < date(blockto))
order by `status`, roomid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportParamTransactionRegister` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportParamTransactionRegister`(pHotelId int(4),
pStartDate date,
pEndDate date
)
BEGIN
(
select
foliotransactions.postingDate,
foliotransactions.transactionDate,
foliotransactions.`ReferenceNo`,
foliotransactions.`TransactionSource` as ReferenceType,
foliotransactions.`FolioID`,
if(folio.foliotype='GROUP', folio.companyid, folio.accountid) as accountid,
if(folio.foliotype='GROUP', folio.groupname, fGetGuestName(folio.accountid)) as GuestName,
if(foliotransactions.status='VOID', 'VOID',foliotransactions.transactioncode) as transactioncode,
if(foliotransactions.status='VOID', 'VOIDED TRANSACTIONS', foliotransactions.memo) as TransactionDescription,
foliotransactions.baseAmount,
if(foliotransactions.acctside='CREDIT' AND fGetTransactionCodeAcctSide(foliotransactions.transactioncode)='DEBIT', 0-foliotransactions.grossAmount,foliotransactions.grossAmount) as grossAmount,
if(foliotransactions.acctside='CREDIT' AND fGetTransactionCodeAcctSide(foliotransactions.transactioncode)='DEBIT', 0-foliotransactions.discount,foliotransactions.discount) as discount,
if(foliotransactions.acctside='CREDIT' AND fGetTransactionCodeAcctSide(foliotransactions.transactioncode)='DEBIT', 0-foliotransactions.servicecharge,foliotransactions.servicecharge) as serviceCharge,
if(foliotransactions.acctside='CREDIT' AND fGetTransactionCodeAcctSide(foliotransactions.transactioncode)='DEBIT', 0-(foliotransactions.governmentTax + 
foliotransactions.localTax),foliotransactions.governmentTax + 
foliotransactions.localTax) as Tax,
foliotransactions.governmentTax,
foliotransactions.localTax,
foliotransactions.mealAmount,
foliotransactions.`Memo`,
foliotransactions.subFolio,
foliotransactions.netAmount,
if(foliotransactions.AcctSide='DEBIT',foliotransactions.`netBaseAmount`,0.00) as DEBIT,
if(foliotransactions.AcctSide='CREDIT',foliotransactions.`netBaseAmount`,0.00) as CREDIT,
foliotransactions.`CREATEDBY`,
(select roomid from folioschedules where folioid=foliotransactions.folioid limit 1) as roomid,
(select roomtype from folioschedules where folioid=foliotransactions.folioid limit 1) as roomtype,
if(foliotype="DEPENDENT", folio.groupname, company.companyName) as companyName,
fGetTransactionDescription(foliotransactions.transactioncode) as description
from
foliotransactions
left join transactioncode on transactioncode.tranCode = foliotransactions.transactioncode
left join folio on foliotransactions.folioid = folio.folioid
left join company on folio.companyid = company.companyid
left join guests on guests.accountid = folio.accountid
where
date(foliotransactions.`TransactionDate`) >= pStartDate and 
date(foliotransactions.`TransactionDate`) <= pEndDate
)
UNION
(
select
nonguesttransaction.postingDate,
nonguesttransaction.transactionDate,
nonguesttransaction.referenceNo,
nonguesttransaction.transactionSource as ReferenceType,
nonguesttransaction.referenceFolioId as FolioId,
nonguesttransaction.accountId,
if(nonguesttransaction.guestName="","WALK-IN GUEST",nonguesttransaction.guestName) as GuestName,
if(nonguesttransaction.statusFlag='VOID', 'VOID',nonguesttransaction.transactioncode) as transactioncode,
if(nonguesttransaction.statusFlag='VOID', 'VOIDED TRANSACTIONS', nonguesttransaction.memo) as TransactionDescription,
nonguesttransaction.baseAmount,
if(nonguesttransaction.acctside='CREDIT' AND fGetTransactionCodeAcctSide(nonguesttransaction.transactioncode)='DEBIT', 0-nonguesttransaction.grossAmount,nonguesttransaction.grossAmount) as grossAmount,
if(nonguesttransaction.acctside='CREDIT' AND fGetTransactionCodeAcctSide(nonguesttransaction.transactioncode)='DEBIT', 0-nonguesttransaction.discount,nonguesttransaction.discount) as discount,
if(nonguesttransaction.acctside='CREDIT' AND fGetTransactionCodeAcctSide(nonguesttransaction.transactioncode)='DEBIT', 0-nonguesttransaction.servicecharge,nonguesttransaction.servicecharge) as serviceCharge,
if(nonguesttransaction.acctside='CREDIT' AND fGetTransactionCodeAcctSide(nonguesttransaction.transactioncode)='DEBIT', 0-(nonguesttransaction.governmentTax + 
nonguesttransaction.localTax),nonguesttransaction.governmentTax + 
nonguesttransaction.localTax) as Tax,
nonguesttransaction.governmentTax,
nonguesttransaction.localTax,
0 as mealAmount,
nonguesttransaction.memo,
"A " as subFolio,
nonguesttransaction.netAmount,
if(nonguesttransaction.AcctSide='DEBIT',nonguesttransaction.netAmount,0.00) as DEBIT,
if(nonguesttransaction.AcctSide='CREDIT',nonguesttransaction.netAmount,0.00) as CREDIT,
nonguesttransaction.CREATEDBY,
nonguesttransaction.roomNumber as roomid,
"" as roomtype,
nonguesttransaction.companyName,
fGetTransactionDescription(nonguesttransaction.transactioncode) as description
from nonguesttransaction force index(primary)
left join transactioncode on transactioncode.tranCode = nonguesttransaction.transactioncode
where
date(nonguesttransaction.transactionDate) >= pStartDate and 
date(nonguesttransaction.`TransactionDate`) <= pEndDate and
nonguesttransaction.hotelID = pHotelId
)
order by transactionCode, ReferenceType, ReferenceNo;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportRestaurantLedger` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spReportRestaurantLedger`(
in pAuditDate date,
in pHotelId int(5)
)
BEGIN
select * from restaurantLedger where `date` = pAuditdate
and hotelid = pHotelId and posttoacctng = 0;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportRoomAvailability` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportRoomAvailability`(
in photelid int(5)
)
BEGIN
select roomid,roomtypecode,stateflag,cleaningstatus,`floor` from rooms
where stateflag = 'VACANT' and hotelid = photelid
order by roomid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportRoomCleaningStatus` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportRoomCleaningStatus`(
in pAuditDate date,
in pHotelId int(4)
)
BEGIN
select 
rooms.floor,
rooms.roomid,
rooms.roomtypecode,
if(fGetRoomEngineeringJobDescription(pAuditDate,rooms.roomid) is null, rooms.cleaningstatus, "OUT OF ORDER") as cleaningstatus,
if(fGetRoomEngineeringJobDescription(pAuditDate,rooms.roomid) is null, rooms.stateflag, "-") as stateFlag,
fGetRoomEngineeringJobDescription(pAuditDate,rooms.roomid) as Remarks,
fGetRoomOccupancyStatus1(pAuditDate,rooms.roomid) as Status1,
fGetRoomOccupancyStatus2(pAuditDate,rooms.roomid) as Status2
from 
rooms
where 
rooms.stateflag <> 'DELETED' and
rooms.hotelid = photelid
order by rooms.roomid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportRoomOccupancy` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportRoomOccupancy`(
in pDateFrom date,
in pDateTo date,
in photelid int(5)
)
BEGIN
select roomevents.*,
folio.folioid,
concat(guests.lastname,", ",guests.firstname) as GUESTNAME
from 
roomevents,
folio,
guests
where 
roomevents.eventid = folio.folioid and
folio.accountid = guests.accountid and
(eventtype = 'IN HOUSE' or eventtype = 'CHECKED OUT') and 
roomevents.hotelid = photelid and
eventdate between pDateFrom and pDAteTo order by eventtype, eventid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportRoomOccupancyGraph` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportRoomOccupancyGraph`(
in pDate date
)
BEGIN
select roomevents.eventdate,((count(distinct roomevents.roomid)/FGetTotalRooms()) * 100) as Occupancy ,roomevents.eventtype from roomevents
where (roomevents.eventtype = "IN HOUSE" or roomevents.eventtype = "RESERVATION" or roomevents.eventtype = "CHECK OUT") and
date(roomevents.eventdate) = pDate
group by roomevents.eventdate,roomevents.eventtype
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportRoomRequirements` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportRoomRequirements`(pFolioID varchar(30))
BEGIN
select event_rooms.*, max(rate) as rate, days from event_rooms left join folio on (event_rooms.folioid=folio.masterfolio) left join folioschedules on (folioschedules.folioid=folio.folioid and event_rooms.roomtype=folioschedules.roomtype) where event_rooms.folioid=pFolioID group by event_rooms.roomtype;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportRoomTransfer` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportRoomTransfer`(
in photelid int(5),
in pAuditDate date
)
BEGIN
select 
folio.folioid,
concat(guests.firstname,"  ",guests.lastname) as GuestName,
folioschedules.roomid,
folioschedules.roomtype,
folio.remarks
from 
guests,
folio,
folioschedules 
where 
guests.accountid = folio.accountid and
folio.folioid = folioschedules.folioid  and 
(folio.status = 'CHECKED IN' or folio.status = 'CHECKED OUT' or folio.status = 'CONFIRMED') and
date(folioschedules.todate) = pAuditDate and
folio.hotelid = guests.hotelid and
folioschedules.hotelid = folio.hotelid and
folio.hotelid = photelid  and
exists(
select folioid
from folioschedules 
where date(fromdate) = pAuditDate and
folio.folioid = folioschedules.folioid
)
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportSales` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportSales`(
in pTrandate date,
in pHotelid int(5)
)
BEGIN
(
select
foliotransactions.transactiondate,
foliotransactions.folioid,
foliotransactions.referenceno, 
foliotransactions.netamount,
foliotransactions.updatetime,
foliotransactions.transactionsource,
folioschedules.updatedby,
folioschedules.roomid,
concat(transactioncode.trancode,"-",transactioncode.memo) as TRANCODE,
concat(guests.lastname,", ",guests.firstname) as GuestName
from 	foliotransactions
left join guests on guests.accountid = foliotransactions.accountid,
folioschedules,
transactioncode,
trantypes 
where 	
folioschedules.folioid = foliotransactions.folioid and
foliotransactions.transactioncode=transactioncode.trancode and 
transactioncode.trantypeid=trantypes.trantypeid and
trantypes.trantypeid = '1' and
date(transactiondate) = pTrandate and
folioschedules.hotelid = foliotransactions.hotelid and
transactioncode.hotelid = foliotransactions.hotelid and
trantypes.hotelid = foliotransactions.hotelid and
foliotransactions.hotelid = photelid and
foliotransactions.status = 'ACTIVE'
order by transactiondate
)
UNION
(
select
nonguesttransaction.transactiondate,
nonguesttransaction.referenceFolioId as folioid,
nonguesttransaction.referenceNo, 
nonguesttransaction.netamount,
nonguesttransaction.updatedDate,
nonguesttransaction.transactionSource,
nonguesttransaction.updatedby,
nonguesttransaction.roomNumber as roomid,
concat(transactioncode.trancode,"-",transactioncode.memo) as TRANCODE,
nonguesttransaction.guestName as GuestName
from 
nonguesttransaction force index(primary)
left join transactioncode on transactioncode.trancode = nonguesttransaction.transactionCode 
left join trantypes on transactioncode.trantypeid = trantypes.trantypeid
where 
nonguesttransaction.acctSide = 'DEBIT' and
trantypes.trantypeid = '1' and
date(transactiondate) = pTrandate and
nonguesttransaction.hotelid = pHotelid and
nonguesttransaction.statusflag = 'ACTIVE'
order by transactiondate
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportSalesAndMarketingRevenue` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportSalesAndMarketingRevenue`(
pStartDate date,
pEndDate date
)
BEGIN
select 
folio.folioid,
company.companyName,
concat(guests.firstname,' ', guests.lastname) as GuestName,
folio.status,
folioschedules.roomid,
folio.fromdate,
folio.todate,
datediff(folio.todate,folio.fromdate) as RoomNights,
folio.sales_executive,
folio.noOfAdults,
folio.noOfChild,
guests.citizenship,
folioschedules.roomtype,
folioschedules.ratetype,
sum(if(foliotransactions.transactionCode = '1000', foliotransactions.netbaseamount,0)) as '1000',
sum(if(foliotransactions.transactionCode = '1000', foliotransactions.mealAmount,0)) as 'BreakfastRevenue',
sum(if(foliotransactions.transactionCode = '1001', foliotransactions.netbaseamount,0)) as '1001',
sum(if(foliotransactions.transactionCode = '1201' and foliotransactions.subAccount != 'BANQUET', foliotransactions.netBaseAmount,0)) as '1201',
sum(if(foliotransactions.transactionCode = '1201' and foliotransactions.subAccount = 'BANQUET', foliotransactions.netBaseAmount,0)) as 'BanquetRevenue',
sum(if(foliotransactions.transactionCode = '1100', foliotransactions.netbaseamount,0)) as '1100',
sum(if(foliotransactions.transactionCode = '1205', foliotransactions.netbaseamount,0)) as '1205',
sum(if(foliotransactions.transactionCode = '1300', foliotransactions.netbaseamount,0)) as '1300',
sum(if(foliotransactions.transactionCode = '1601', foliotransactions.netbaseamount,0)) as '1601',
sum(if(foliotransactions.transactionCode = '1701', foliotransactions.netbaseamount,0)) as '1701',
sum(if(foliotransactions.transactionCode = '1302', foliotransactions.netbaseamount,0)) as '1302',
sum(if(foliotransactions.transactionCode = '1400', foliotransactions.netbaseamount,0)) as '1400',
sum(if(foliotransactions.transactionCode = '1402', foliotransactions.netbaseamount,0)) as '1402',
sum(if(foliotransactions.transactionCode = '1600', foliotransactions.netbaseamount,0)) as '1600',
sum(foliotransactions.governmentTax) as 'GovernmentTax',
sum(foliotransactions.localTax) as 'LocalTax',
sum(foliotransactions.serviceCharge) as 'ServiceCharge'
from
folio
left join company on company.companyid = folio.companyid
left join folioschedules on folioschedules.folioid = folio.folioid
left join guests on guests.accountid = folio.accountid
left join foliotransactions on foliotransactions.folioid = folio.folioid
where
((folio.fromdate between pStartDate and pEndDate) or
(folio.todate between pStartDate and pEndDate)) and
foliotype != 'JOINER' and
(folio.status = 'CHECKED IN' or folio.status = 'CHECKED OUT')
group by
folio.folioId
order by 
folio.sales_executive,
company.companyName,
folio.fromdate;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportSalesSummary` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportSalesSummary`(
in pTranDate date,
in pHotelId int(5)
)
BEGIN
select transactioncode, sum(baseamount) as BaseAmount, sum(grossAmount) as GrossAmount, sum(netAmount) as NetAmount, sum(netbaseamount) as NetBaseAmount, sum(discount) as Discount, sum(govttax) as GovtTax, sum(mealamount) as MealAmount, sum(localtax) as LocalTax, sum(servicecharge) as ServiceCharge, sum(transactioncount) as TransactionCount, TransactionDescription, acctside, sum(monthtodate) as MonthToDate, sum(yeartodate) as YearToDate from
(select 
foliotransactions.transactioncode,
sum(if(foliotransactions.acctside = "CREDIT", foliotransactions.baseAmount * -1, foliotransactions.baseAmount)) as BaseAmount,
sum(if(foliotransactions.acctside = "CREDIT", foliotransactions.grossAmount * -1, foliotransactions.grossAmount)) as GrossAmount,
sum(if(foliotransactions.acctside = "CREDIT", foliotransactions.netAmount * -1, foliotransactions.netAmount)) as NetAmount,
sum(if(foliotransactions.acctside = "CREDIT", foliotransactions.netBaseAmount * -1, foliotransactions.netBaseAmount)) as NetBaseAmount,
sum(if(foliotransactions.acctside = "CREDIT", foliotransactions.discount * -1, foliotransactions.discount)) as Discount,
sum(if(foliotransactions.acctside = "CREDIT", foliotransactions.governmentTax * -1, foliotransactions.governmentTax)) as GovtTax,
sum(if(foliotransactions.acctside = "CREDIT", foliotransactions.mealAmount * -1, foliotransactions.mealAmount)) as MealAmount,
sum(if(foliotransactions.acctside = "CREDIT", foliotransactions.localtax * -1, foliotransactions.localtax)) as LocalTax,
sum(if(foliotransactions.acctside = "CREDIT", foliotransactions.servicecharge * -1, foliotransactions.servicecharge)) as ServiceCharge,
count(foliotransactions.transactioncode) as TransactionCount,
transactioncode.memo as TransactionDescription,
foliotransactions.acctside,
fGetTransactionNetBaseAmountMonthToDate(
foliotransactions.transactioncode,
foliotransactions.acctside,
pTranDate,
pHotelId
) as MonthToDate,
fGetTransactionNetBaseAmountYearToDate(
foliotransactions.transactioncode,
transactioncode.acctside,
pTranDate,
pHotelId
) as YearToDate
from
foliotransactions  force index(FolioID,SubFolio,AccountID),
transactioncode  force index(primary)
where 	
foliotransactions.transactioncode=transactioncode.trancode and 
date(transactiondate) = pTrandate and
foliotransactions.status = 'ACTIVE'
group by foliotransactions.transactioncode
UNION all
select 
nonguesttransaction.transactioncode,
sum(if(nonguesttransaction.acctside = "CREDIT", nonguesttransaction.baseAmount * -1, nonguesttransaction.baseAmount)) as BaseAmount,
sum(if(nonguesttransaction.acctside = "CREDIT", nonguesttransaction.grossAmount * -1, nonguesttransaction.grossAmount)) as GrossAmount,
sum(if(nonguesttransaction.acctside = "CREDIT", nonguesttransaction.netAmount * -1, nonguesttransaction.netAmount)) as NetAmount,
sum(if(nonguesttransaction.acctside = "CREDIT", nonguesttransaction.netBaseAmount * -1, nonguesttransaction.netBaseAmount)) as NetBaseAmount,
sum(if(nonguesttransaction.acctside = "CREDIT", nonguesttransaction.discount * -1, nonguesttransaction.discount)) as Discount,
sum(if(nonguesttransaction.acctside = "CREDIT", nonguesttransaction.governmentTax * -1, nonguesttransaction.governmentTax)) as GovtTax,
0 as MealAmount,
sum(if(nonguesttransaction.acctside = "CREDIT", nonguesttransaction.localtax * -1, nonguesttransaction.localtax)) as LocalTax,
sum(if(nonguesttransaction.acctside = "CREDIT", nonguesttransaction.servicecharge * -1, nonguesttransaction.servicecharge)) as ServiceCharge,
count(nonguesttransaction.transactioncode) as TransactionCount,
concat(transactioncode.memo, "-WALK IN") as TransactionDescription,
nonguesttransaction.acctside,
fGetNonGuestTransactionNetBaseAmountMonthToDate(
nonguesttransaction.transactioncode,
nonguesttransaction.acctside,
pTranDate,
pHotelId
)  as MonthToDate,
fGetNonGuestTransactionNetBaseAmountYearToDate(
nonguesttransaction.transactioncode,
transactioncode.acctside,
pTranDate,
pHotelId
)  as YearToDate
from
nonguesttransaction  force index(primary),
transactioncode  force index(primary)
where 	
nonguesttransaction.transactioncode = transactioncode.trancode and 
date(transactiondate) = pTrandate and
nonguesttransaction.hotelId = pHotelId and
nonguesttransaction.statusFlag = 'ACTIVE'
group by nonguesttransaction.transactioncode
) as transactionTable group by transactioncode;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportSalesSummary1` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportSalesSummary1`(
in pTranDate date,
in pHotelId int(5)
)
BEGIN
select transactiondate, transactioncode, sum(netbaseamount) as NetBaseAmount, acctside from
(
select 
date(foliotransactions.transactiondate) as transactiondate,
'DISCOUNT' AS transactioncode,
sum(if(foliotransactions.acctside = "CREDIT", foliotransactions.discount * -1, foliotransactions.discount)) as NetBaseAmount,
transactioncode.acctside
from
foliotransactions  force index(FolioID,SubFolio,AccountID),
transactioncode  force index(primary)
where 	
foliotransactions.transactioncode=transactioncode.trancode and 
date(foliotransactions.transactiondate) = pTrandate and
foliotransactions.status = 'ACTIVE'
group by foliotransactions.transactiondate, foliotransactions.transactioncode
UNION ALL
select 
date(foliotransactions.transactiondate) as transactiondate,
'LOCAL TAX' AS transactioncode,
sum(if(foliotransactions.acctside = "CREDIT", foliotransactions.localTax * -1, foliotransactions.localTax)) as NetBaseAmount,
transactioncode.acctside
from
foliotransactions  force index(FolioID,SubFolio,AccountID),
transactioncode  force index(primary)
where 	
foliotransactions.transactioncode=transactioncode.trancode and 
date(foliotransactions.transactiondate) = pTrandate and
foliotransactions.status = 'ACTIVE'
group by foliotransactions.transactiondate, foliotransactions.transactioncode
UNION ALL
select 
date(foliotransactions.transactiondate) as transactiondate,
'SERVICE CHARGE' AS transactioncode,
sum(if(foliotransactions.acctside = "CREDIT", foliotransactions.serviceCharge * -1, foliotransactions.serviceCharge)) as NetBaseAmount,
transactioncode.acctside
from
foliotransactions  force index(FolioID,SubFolio,AccountID),
transactioncode  force index(primary)
where 	
foliotransactions.transactioncode=transactioncode.trancode and 
date(foliotransactions.transactiondate) = pTrandate and
foliotransactions.status = 'ACTIVE'
group by foliotransactions.transactiondate, foliotransactions.transactioncode
UNION ALL
select 
date(foliotransactions.transactiondate) as transactiondate,
'GOVERNMENT TAX' AS transactioncode,
sum(if(foliotransactions.acctside = "CREDIT", foliotransactions.governmentTax * -1, foliotransactions.governmentTax)) as NetBaseAmount,
transactioncode.acctside
from
foliotransactions  force index(FolioID,SubFolio,AccountID),
transactioncode  force index(primary)
where 	
foliotransactions.transactioncode=transactioncode.trancode and 
date(foliotransactions.transactiondate) = pTrandate and
foliotransactions.status = 'ACTIVE'
group by foliotransactions.transactiondate, foliotransactions.transactioncode
UNION ALL
select 
date(foliotransactions.transactiondate) as transactiondate,
foliotransactions.transactioncode,
sum(if(foliotransactions.acctside = "CREDIT", foliotransactions.netBaseAmount * -1, foliotransactions.netBaseAmount)) as NetBaseAmount,
transactioncode.acctside
from
foliotransactions  force index(FolioID,SubFolio,AccountID),
transactioncode  force index(primary)
where 	
foliotransactions.transactioncode=transactioncode.trancode and 
date(foliotransactions.transactiondate) = pTrandate and
foliotransactions.status = 'ACTIVE'
group by foliotransactions.transactiondate, foliotransactions.transactioncode
UNION ALL
select 
date(foliotransactions.transactiondate) as transactiondate,
'ROOM SALES' AS transactioncode,
sum(if(foliotransactions.acctside = "CREDIT", foliotransactions.netBaseAmount * -1, foliotransactions.netBaseAmount)) as NetBaseAmount,
transactioncode.acctside
from
foliotransactions  force index(FolioID,SubFolio,AccountID),
transactioncode  force index(primary)
where 	
foliotransactions.transactioncode=transactioncode.trancode and 
date(foliotransactions.transactiondate) = pTrandate and
foliotransactions.status = 'ACTIVE' and
(foliotransactions.transactioncode='1000' or
foliotransactions.transactioncode='1001' or
foliotransactions.transactioncode='1002')
group by foliotransactions.transactiondate
UNION ALL
select 
date(foliotransactions.transactiondate) as transactiondate,
'ROOM SALES' AS transactioncode,
sum(if(foliotransactions.acctside = "CREDIT", foliotransactions.mealAmount * -1, foliotransactions.mealAmount)) as NetBaseAmount,
transactioncode.acctside
from
foliotransactions  force index(FolioID,SubFolio,AccountID),
transactioncode  force index(primary)
where 	
foliotransactions.transactioncode=transactioncode.trancode and 
date(foliotransactions.transactiondate) = pTrandate and
foliotransactions.status = 'ACTIVE'
group by foliotransactions.transactiondate
UNION ALL
select 
date(nonguesttransaction.transactiondate) as transactiondate,
'ROOM SALES' AS transactioncode,
sum(if(nonguesttransaction.acctside = "CREDIT", nonguesttransaction.netBaseAmount * -1, nonguesttransaction.netBaseAmount)) as NetBaseAmount,
transactioncode.acctside
from
nonguesttransaction ,
transactioncode  force index(primary)
where 	
nonguesttransaction.transactioncode=transactioncode.trancode and 
date(nonguesttransaction.transactiondate) = pTrandate and
nonguesttransaction.statusflag = 'ACTIVE' and
(nonguesttransaction.transactioncode='1000' or
nonguesttransaction.transactioncode='1001' or
nonguesttransaction.transactioncode='1002')
group by nonguesttransaction.transactiondate
UNION ALL
select 
date(foliotransactions.transactiondate) as transactiondate,
'1002' AS transactioncode,
sum(if(foliotransactions.acctside = "CREDIT", foliotransactions.mealAmount * -1, foliotransactions.mealAmount)) as NetBaseAmount,
transactioncode.acctside
from
foliotransactions  force index(FolioID,SubFolio,AccountID),
transactioncode  force index(primary)
where 	
foliotransactions.transactioncode=transactioncode.trancode and 
date(foliotransactions.transactiondate) = pTrandate and
foliotransactions.status = 'ACTIVE' and
foliotransactions.transactioncode='1000'
group by foliotransactions.transactiondate
UNION all
select 
date(nonguesttransaction.transactiondate) as transactiondate,
nonguesttransaction.transactioncode,
sum(if(nonguesttransaction.acctside = "CREDIT", nonguesttransaction.netBaseAmount * -1, nonguesttransaction.netBaseAmount)) as NetBaseAmount,
transactioncode.acctside
from
nonguesttransaction  force index(primary),
transactioncode  force index(primary)
where 	
nonguesttransaction.transactioncode = transactioncode.trancode and 
date(nonguesttransaction.transactiondate) = pTrandate and
nonguesttransaction.hotelId = pHotelId and
nonguesttransaction.statusFlag = 'ACTIVE'
group by nonguesttransaction.transactiondate, nonguesttransaction.transactioncode
UNION ALL
select 
date(nonguesttransaction.transactiondate) as transactiondate,
'DISCOUNT' as transactioncode,
sum(if(nonguesttransaction.acctside = "CREDIT", nonguesttransaction.discount * -1, nonguesttransaction.discount)) as NetBaseAmount,
transactioncode.acctside
from
nonguesttransaction  force index(primary),
transactioncode  force index(primary)
where 	
nonguesttransaction.transactioncode = transactioncode.trancode and 
date(nonguesttransaction.transactiondate) = pTrandate and
nonguesttransaction.hotelId = pHotelId and
nonguesttransaction.statusFlag = 'ACTIVE'
group by nonguesttransaction.transactiondate, nonguesttransaction.transactioncode
UNION ALL
select 
date(nonguesttransaction.transactiondate) as transactiondate,
'LOCAL TAX' AS transactioncode,
sum(if(nonguesttransaction.acctside = "CREDIT", nonguesttransaction.localTax * -1, nonguesttransaction.localTax)) as NetBaseAmount,
transactioncode.acctside
from
nonguesttransaction  force index(primary),
transactioncode  force index(primary)
where 	
nonguesttransaction.transactioncode = transactioncode.trancode and 
date(nonguesttransaction.transactiondate) = pTrandate and
nonguesttransaction.hotelId = pHotelId and
nonguesttransaction.statusFlag = 'ACTIVE'
group by nonguesttransaction.transactiondate, nonguesttransaction.transactioncode
UNION ALL
select 
date(nonguesttransaction.transactiondate) as transactiondate,
'GOVERNMENT TAX' as transactioncode,
sum(if(nonguesttransaction.acctside = "CREDIT", nonguesttransaction.governmentTax * -1, nonguesttransaction.governmentTax)) as NetBaseAmount,
transactioncode.acctside
from
nonguesttransaction  force index(primary),
transactioncode  force index(primary)
where 	
nonguesttransaction.transactioncode = transactioncode.trancode and 
date(nonguesttransaction.transactiondate) = pTrandate and
nonguesttransaction.hotelId = pHotelId and
nonguesttransaction.statusFlag = 'ACTIVE'
group by nonguesttransaction.transactiondate, nonguesttransaction.transactioncode
UNION ALL
select 
date(nonguesttransaction.transactiondate) as transactiondate,
'SERVICE CHARGE' as transactioncode,
sum(if(nonguesttransaction.acctside = "CREDIT", nonguesttransaction.serviceCharge * -1, nonguesttransaction.serviceCharge)) as NetBaseAmount,
transactioncode.acctside
from
nonguesttransaction  force index(primary),
transactioncode  force index(primary)
where 	
nonguesttransaction.transactioncode = transactioncode.trancode and 
date(nonguesttransaction.transactiondate) = pTrandate and
nonguesttransaction.hotelId = pHotelId and
nonguesttransaction.statusFlag = 'ACTIVE'
group by nonguesttransaction.transactiondate, nonguesttransaction.transactioncode
) as transactionTable group by transactiondate, transactioncode order by transactiondate, transactioncode;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportSalesSummaryBySubAccount` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportSalesSummaryBySubAccount`(
in pTrandate date,
in pHotelid int(5)
)
BEGIN
select date(transDate) as transactiondate, subaccount, sum(debit) as DEBIT, count(trans) AS Trans, TRANCODE, acctside from 
(select 
date(foliotransactions.transactiondate) as transDate,
foliotransactions.subaccount,
sum(if(foliotransactions.acctside = "CREDIT", foliotransactions.netBaseAmount * -1, foliotransactions.netBaseAmount)) as DEBIT,
count(foliotransactions.transactioncode) as Trans,
concat(transactioncode.trancode," - ",transactioncode.memo) as TRANCODE,
transactioncode.acctside
from
foliotransactions  force index(FolioID,SubFolio,AccountID),
transactioncode  force index(primary),
trantypes  force index(primary)
where 	
foliotransactions.subaccount != "" and
foliotransactions.transactioncode=transactioncode.trancode and 
transactioncode.trantypeid=trantypes.trantypeid and
date(foliotransactions.transactiondate) = pTrandate and
foliotransactions.status = 'ACTIVE'
group by foliotransactions.transactiondate, foliotransactions.subaccount
UNION all
select 
date(nonguesttransaction.transactiondate) as transDate,
nonguesttransaction.subaccount,
sum(if(nonguesttransaction.acctside = "CREDIT", nonguesttransaction.netBaseAmount * -1, nonguesttransaction.netBaseAmount))  as DEBIT,
count(nonguesttransaction.transactioncode) as Trans,
concat(nonguesttransaction.transactioncode," - ",nonguesttransaction.memo , " - WALK IN") as TRANCODE,
nonguesttransaction.acctside
from
nonguesttransaction  force index(primary)
where 	
nonguesttransaction.subaccount != "" and
date(nonguesttransaction.transactiondate) = pTrandate and
hotelId = pHotelId and
nonguesttransaction.statusFlag = 'ACTIVE'
group by nonguesttransaction.transactiondate, nonguesttransaction.subaccount
) as transactionTable group by transactiondate, subaccount order by subaccount asc, acctside desc;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportTransactionRegister` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportTransactionRegister`(
pAuditDate date
)
BEGIN
(
select 
foliotransactions.postingDate,
foliotransactions.transactionDate,
foliotransactions.`ReferenceNo`,
foliotransactions.`TransactionSource` as ReferenceType,
foliotransactions.`FolioID`,
guests.accountid,
concat(guests.`lastname`,", " , guests.`firstname`) as GuestName,
if(foliotransactions.status='VOID', 'VOID',foliotransactions.transactioncode) as transactioncode,
if(foliotransactions.status='VOID', 'VOIDED TRANSACTIONS', foliotransactions.memo) as TransactionDescription,
foliotransactions.baseAmount,
if(foliotransactions.acctside='CREDIT' AND fGetTransactionCodeAcctSide(foliotransactions.transactioncode)='DEBIT', 0-foliotransactions.grossAmount,foliotransactions.grossAmount) as grossAmount,
if(foliotransactions.acctside='CREDIT' AND fGetTransactionCodeAcctSide(foliotransactions.transactioncode)='DEBIT', 0-foliotransactions.discount,foliotransactions.discount) as discount,
if(foliotransactions.acctside='CREDIT' AND fGetTransactionCodeAcctSide(foliotransactions.transactioncode)='DEBIT', 0-foliotransactions.servicecharge,foliotransactions.servicecharge) as serviceCharge,
if(foliotransactions.acctside='CREDIT' AND fGetTransactionCodeAcctSide(foliotransactions.transactioncode)='DEBIT', 0-(foliotransactions.governmentTax + 
foliotransactions.localTax),foliotransactions.governmentTax + 
foliotransactions.localTax) as Tax,
foliotransactions.mealAmount,
foliotransactions.`Memo`,
foliotransactions.subFolio,
if(foliotransactions.AcctSide='DEBIT',foliotransactions.`netBaseAmount`,0.00) as DEBIT,
if(foliotransactions.AcctSide='CREDIT',foliotransactions.`netBaseAmount`,0.00) as CREDIT,
foliotransactions.`CREATEDBY`,
(select roomid from folioschedules where folioid=foliotransactions.folioid limit 1) as roomid,
(select roomtype from folioschedules where folioid=foliotransactions.folioid limit 1) as roomtype,
if(foliotype="DEPENDENT", folio.groupname, company.companyName) as companyName,
fGetTransactionDescription(foliotransactions.transactioncode) as description
from
foliotransactions
left join transactioncode on transactioncode.tranCode = foliotransactions.transactioncode
left join folio on foliotransactions.folioid = folio.folioid
left join company on folio.companyid = company.companyid
left join guests on guests.accountid = folio.accountid
where
date(foliotransactions.`TransactionDate`) = pAuditDate
)
UNION
(
select 
nonguesttransaction.postingDate,
nonguesttransaction.transactionDate,
nonguesttransaction.referenceNo,
nonguesttransaction.transactionSource as ReferenceType,
nonguesttransaction.referenceFolioId as FolioId,
nonguesttransaction.accountId,
nonguesttransaction.guestName as GuestName,
if(nonguesttransaction.statusFlag='VOID', 'VOID',nonguesttransaction.transactioncode) as transactioncode,
if(nonguesttransaction.statusFlag='VOID', 'VOIDED TRANSACTIONS', nonguesttransaction.memo) as TransactionDescription,
nonguesttransaction.baseAmount,
if(nonguesttransaction.acctside='CREDIT' AND fGetTransactionCodeAcctSide(nonguesttransaction.transactioncode)='DEBIT', 0-nonguesttransaction.grossAmount,nonguesttransaction.grossAmount) as grossAmount,
if(nonguesttransaction.acctside='CREDIT' AND fGetTransactionCodeAcctSide(nonguesttransaction.transactioncode)='DEBIT', 0-nonguesttransaction.discount,nonguesttransaction.discount) as discount,
if(nonguesttransaction.acctside='CREDIT' AND fGetTransactionCodeAcctSide(nonguesttransaction.transactioncode)='DEBIT', 0-nonguesttransaction.servicecharge,nonguesttransaction.servicecharge) as serviceCharge,
if(nonguesttransaction.acctside='CREDIT' AND fGetTransactionCodeAcctSide(nonguesttransaction.transactioncode)='DEBIT', 0-(nonguesttransaction.governmentTax + 
nonguesttransaction.localTax),nonguesttransaction.governmentTax + 
nonguesttransaction.localTax) as Tax,
0 as mealAmount,
nonguesttransaction.memo,
"A " as subFolio,
if(nonguesttransaction.AcctSide='DEBIT',nonguesttransaction.netAmount,0.00) as DEBIT,
if(nonguesttransaction.AcctSide='CREDIT',nonguesttransaction.netAmount,0.00) as CREDIT,
nonguesttransaction.CREATEDBY,
nonguesttransaction.roomNumber as roomid,
"" as roomtype,
nonguesttransaction.companyName,
fGetTransactionDescription(nonguesttransaction.transactioncode) as description
from nonguesttransaction force index(primary)
left join transactioncode on transactioncode.tranCode = nonguesttransaction.transactioncode
where
date(nonguesttransaction.transactionDate) = pAuditDate 
)
order by transactioncode, ReferenceType, ReferenceNo;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportTransactionsDateRange` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportTransactionsDateRange`(
in photelid int(5),
in pStartDate date,
in pEndDate date
)
BEGIN
select 	
foliotransactions.*,
if(foliotransactions.acctside='DEBIT',foliotransactions.baseamount,0.00) as CHARGES,  
if(foliotransactions.acctside='CREDIT',foliotransactions.baseamount,0.00) as CREDIT,
folioschedules.roomid,
concat(guests.lastname,", ",guests.firstname) as GuestName
from foliotransactions 
left join folioschedules on foliotransactions.folioid = folioschedules.folioid
left join guests on guests.accountid = foliotransactions.accountid
where
(date(transactiondate) >= pStartDate and
date(transactiondate) <= pEndDate ) and
foliotransactions.hotelid = photelid
order by `status`,transactiondate;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportTrunkLineSummary` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportTrunkLineSummary`(
pGroupId varchar(30)
)
BEGIN
Select 
trunkgroups.PhoneNo as Trunkgroup,
concat(concat(Extension,"-"),Owner) as Trunk,
Count(*) as TotalCall,
CallType,
concat(sec_to_time(sum(time_to_sec(Duration))),'') as TotalDuration,
sum(Cost) as TotalCost,
concat(sec_to_time(Avg(time_to_sec(Duration))),'') as AvgDuration,
Avg(Cost) as AvgCost
from 
trunkgroups force index(primary),
trunklines force index(primary),
`log` force index(primary),
extension
Where 
trunklines.TrunkGroup = trunkgroups.TrunkGroupID
and log.Trunk=trunklines.TrunkNum and trunkgroups.TrunkGroupID=pGroupId
and log.Extension=pExtension
group by trunknum,CallType;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReportVoidedTransactions` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReportVoidedTransactions`(
in pReportDate date,
in pHotelId int(4)
)
BEGIN
(
select
foliotransactions.postingDate,
foliotransactions.transactiondate,
foliotransactions.`ReferenceNo`,
foliotransactions.`TransactionSource` as ReferenceType,
foliotransactions.`FolioID`,
if(folio.foliotype!='GROUP', fGetGuestName(folio.accountid), if(substring(folio.companyid,1,1)='G',fGetCompanyName(folio.companyid), fGetGuestName(folio.companyid))) as GuestName,
foliotransactions.transactioncode,
foliotransactions.`Memo`,
if(AcctSide='DEBIT',foliotransactions.netAmount,0.00) as DEBIT,
if(AcctSide='CREDIT',foliotransactions.netAmount,0.00) as CREDIT,
foliotransactions.`UPDATEDBY` as CREATEDBY,
folioschedules.roomid,
fGetCompanyName(folio.companyid) as companyName
from
foliotransactions
left join folioschedules on folioschedules.folioid = foliotransactions.folioid
left join folio on folioschedules.folioid = folio.folioid
where
date(foliotransactions.transactiondate) = pReportDate and
foliotransactions.Status='VOID'
order by folioschedules.roomid
)
UNION all
(
select
nonguesttransaction.postingDate,
nonguesttransaction.transactiondate,
nonguesttransaction.referenceNo,
nonguesttransaction.transactionSource as ReferenceType,
nonguesttransaction.referenceFolioId as FolioID,
nonguesttransaction.guestName as GuestName,
nonguesttransaction.transactioncode,
nonguesttransaction.`Memo`,
if(AcctSide='DEBIT', nonguesttransaction.netAmount,0.00) as DEBIT,
if(AcctSide='CREDIT',nonguesttransaction.netAmount,0.00) as CREDIT,
nonguesttransaction.`UPDATEDBY` as CREATEDBY,
nonguesttransaction.roomNumber as roomid,
nonguesttransaction.companyName
from
nonguesttransaction force index(primary)
where
date(nonguesttransaction.transactiondate) = pReportDate and
nonguesttransaction.statusFlag = 'VOID'
order by nonguesttransaction.roomNumber
);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spReset` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spReset`()
BEGIN
delete from accountingadjustments;
delete from accountprivileges;
delete from agentcommission;
delete from apledger;
delete from arledger;
delete from auditdatetable;
insert into auditdatetable values (date_format(date_sub(now(),INTERVAL 1 DAY),'%Y-%m-%d'),0,'PROCESSED',date_sub(now(),INTERVAL 1 DAY),'ADMIN'),(date_format(now(),'%Y-%m-%d'),0,'PM',now(),'ADMIN');
delete from blockingdetails;
delete from cardco;
update cashiers set cashierid = '1' , shiftcode = '1' , openingbalance = 0.00 , openingadjustment = 0.00, beginningbalance = 0.00, chargeinamount = 0.00, cash = 0.00, creditcard = 0.00, cheque = 0.00, others = 0.00, adjustment = 0.00, amountremitted = 0.00, netamount = 0.00, `status` = 'CLOSE';
delete from cashiers_logs;
delete from cityledger;
delete from comledger;
delete from contractammendments;
delete from creditcardledger;
delete from csledger;
delete from depledger;
delete from engineeringjobs;
delete from event_applied_rates;
delete from event_attributes;
delete from event_booking_info;
delete from event_details;
delete from event_meal_details;
delete from event_meal_requirements;
delete from event_requirements;
delete from event_room_venues;
delete from event_rooms;
delete from folio;
delete from folio_merge_history;
delete from folioinclusions;
delete from folioledger;
delete from foliopackage;
delete from folioprivilege;
delete from foliorecurringcharge;
delete from foliorouting;
delete from folioschedules;
delete from foliotransactions;
delete from hk_housekeepingjobs;
delete from hk_minibar_sales;
delete from hk_minibar_sales_details;
delete from hk_minibarsales;
delete from hk_minibarsalesdetails;
delete from hk_stepprocedures;
delete from hotelrevenue;
delete from lookuptable;
delete from nonguesttransaction;
delete from packagedetails;
delete from paymentledger;
delete from phonetransactions;
delete from restaurantledger;
delete from roomblock;
delete from roomevents;
delete from rooms where stateflag = 'DELETED';
update rooms set stateflag = 'VACANT' , cleaningstatus = 'CLEAN';
delete from salesledger;
update seq_autopost set id = 0;
update seq_enggjob set id = 0;
update seq_folio set id = 0;
update seq_housekeepingjob set id = 0;
update seq_resledger set id = 0;
delete from servicecharge;
delete from shiftendorsements;
delete from srvchrgledger;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spResetUserPassword` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spResetUserPassword`(
in pUserId varchar(100),
in pPassword varchar(50),
in pHotelId int(4),
in pUpdatedBy varchar(100)
)
BEGIN
update users 
set 
`password` = md5(pPassword),
updateTime = now(),
updatedBy = pUpdatedBy
where
UserId = pUserId and
HotelId = pHotelId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spRoomIsCharge` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spRoomIsCharge`( in pRoomid varchar(20),
in pEventDate date,
IN pEventID varchar(20),
in pHotelID int(5)
)
BEGIN
Select ChargeFlag 
from roomevents 
where roomid = proomid and
Eventdate = pEventDate and
hotelid = pHotelid and 
eventid = pEventID and
(
EventType <> 'CHECKED OUT'
or EventType<>'CANCELLED');
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spRoomOCcupancyReport` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spRoomOCcupancyReport`(
pAuditDate date
)
BEGIN
select distinct
rooms.roomid,
rooms.roomtypecode,
concat(guests.lastName, ", ",guests.FirstName) as GuestName,
folio.fromDate as ArrivalDate,
folio.toDate as DepartureDate,
folio.noofadults,
company.companyName,
folio.remarks,
FGetTotalRooms() as totalRoomCount,
fGetTotalOutOfOrderRooms(pAuditDate) as OutOfOrderRooms
from 
rooms
left join roomevents on roomevents.roomid = rooms.roomid
left join folio on folio.folioid = roomevents.eventid
left join guests on guests.accountid = folio.accountid
left join company on company.companyId = folio.companyId
left join folioschedules on folioschedules.folioid = folio.folioid
where
date(roomevents.eventdate) = pAuditDate and
roomevents.transferflag = 0 and
(folio.status = 'CHECKED IN' or folio.status = 'CHECKED OUT') and
( date(folio.fromDate) <= pAuditDate and date(folio.toDate) > pAuditDate) and
rooms.roomtypecode != 'FUNCTION'
order by rooms.roomid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spRoomTransferView` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spRoomTransferView`()
BEGIN
select folioid from folioschedules
where
departuredate = now();
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSAP_DeleteGLaccounts` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSAP_DeleteGLaccounts`(pAccountID varchar(50), pCreatedBy varchar(30))
BEGIN
update sap_glaccounts set statusFlag='DELETED', updatedBy=pCreatedBy, updatedDate=now() where accountID=pAccountID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSAP_GetAllGLaccounts` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSAP_GetAllGLaccounts`(
in pHotelID int(4)
)
BEGIN
select * from SAP_GLAccounts where statusflag!='DELETED'
order by AccountID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSAP_GetAllTemplates` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spSAP_GetAllTemplates`()
BEGIN
select ID, Name, Description, OutputExtension, Generate, CreatedBy, CreatedDate, 
UpdatedBy, UpdatedDate from `sap_template` 
where Generate = 1;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSAP_GetFolioGLMapping` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSAP_GetFolioGLMapping`()
BEGIN
select * from sap_folio_glmapping where statuflag='ACTIVE';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSAP_GetNewCustomers` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSAP_GetNewCustomers`(
pExportDate date
)
BEGIN
Select * from
(
(
select 
accountid,
lastname,
firstname,
concat(firstname, ' ',lastname) as ContactPerson,
telephoneno,
faxno,
mobileno,
concat(street,' ',city, ' ',zip, ' ',country) as Address,
createtime
from guests
where
date(createtime) > pExportDate
)
UNION ALL
(
Select 
companyid as accountid,
companyname as lastname,
'' as firstname,
ContactPerson,
contactnumber1 as telephoneno,
contactnumber2 as fax,
contactnumber3 as mobile,
concat(street1,' ',city1,' ',zip1,' ',country1) as Address,
createtime
from company
where date(createTime) > pExportDate
)
) customers 
order by createtime asc;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSAP_GetNewGuests` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSAP_GetNewGuests`(
pHotelID int(4),
pExportDate date
)
BEGIN
(select guests.*, concat(guests.firstname, " ", guests.lastname) as contactperson, concat(guests.firstname, " ", guests.lastname) as companycode, (select `value` from system_config where `key`='SAP_INDIVIDUAL_GROUPCODE') as groupCode from guests, cityledger
where
date(cityledger.date) >= pExportDate and cityledger.acctid=guests.accountid
order by guests.createtime asc)
union all
(select companyid as accountid,
companycode as accountname,
'' as title,
companyname as lastname,
'' as firstname,
'' as middlename,
'' as sex,
street1 as street,
city1 as city,
country1 as country,
zip1 as zip,
companyurl as emailaddress,
'' as citizenship,
'' as passportid,
contactnumber1 as telephoneno,
contactnumber2 as mobileno,
contactnumber3 as faxno,
'' as guestimage,
no_of_visit as noofvisits,
'' as memo,
'' as concierge,
remarks as remark,
stateflag,
company.hotelid,
company.createtime,
company.createdby,
company.updatetime,
company.updatedby,
now() as birthdate,
account_type,
card_no,
threshold_value,
total_sales_contribution,
'' as creditcardtype,
'' as creditcardno,
now() creditcardexpiry,
0 as taxexempted,
contactperson,
companycode, (select `value` from system_config where `key`='SAP_COMPANY_GROUPCODE') as groupCode from company, cityledger
where
date(cityledger.date) >= pExportDate and cityledger.acctid=company.companyid
order by company.createtime asc);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSAP_GetTemplateFields` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spSAP_GetTemplateFields`(
pTemplateID int(4)
)
BEGIN
select * from sap_templatefields
WHERE	
StatusFlag = 'ACTIVE'
AND TemplateID = pTemplateID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSAP_GetTranCodeGLaccountMapping` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSAP_GetTranCodeGLaccountMapping`(
in pTransactionCode varchar(20)
)
BEGIN
select 
sap_folio_glmapping.*, 
sap_glaccounts.description
from 
sap_folio_glmapping
left join sap_glaccounts on 
sap_glaccounts.AccountID = sap_folio_glmapping.GLAccountID 
where TranCode = pTransactionCode
order by lineno;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSAP_InsertGLaccounts` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSAP_InsertGLaccounts`(pAccountID varchar(50), pDescription varchar(200), pCostCenterCode varchar(50), pAccountNature varchar(20), pCreatedBy varchar(30))
BEGIN
insert into sap_glAccounts values(pAccountID, pDescription, pCostCenterCode, pAccountNature, 'ACTIVE', now(), pCreatedBy, now(), pCreatedBy);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSAP_ReportPostedAndUnpostedDailyHotelPayments` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSAP_ReportPostedAndUnpostedDailyHotelPayments`(
in pHotelId int(4),
in pStartDate date,
in pEndDate date
)
BEGIN
(
select
foliotransactions.postingDate,
foliotransactions.transactionDate,
foliotransactions.`ReferenceNo`,
foliotransactions.`TransactionSource`,
transactioncode.trantypeid,
foliotransactions.`FolioID`,
guests.accountid,
concat(guests.`lastname`,", " , guests.`firstname`) as GuestName,
foliotransactions.transactioncode,
if(foliotransactions.AcctSide='CREDIT',foliotransactions.`baseAmount`,
(foliotransactions.`baseAmount` * -1) ) as baseAmount,
if(foliotransactions.AcctSide='CREDIT',foliotransactions.`netBaseAmount`,
(foliotransactions.`netBaseAmount` * -1) ) as netBaseAmount,
if(foliotransactions.AcctSide='CREDIT',foliotransactions.`grossAmount`,
(foliotransactions.`grossAmount` * -1) ) as grossAmount,
if(foliotransactions.AcctSide='CREDIT',foliotransactions.`discount`,
(foliotransactions.`discount` * -1) ) as discount,
if(foliotransactions.AcctSide='CREDIT',foliotransactions.`serviceCharge`,
(foliotransactions.`serviceCharge` * -1) ) as serviceCharge,
if(foliotransactions.AcctSide='CREDIT',foliotransactions.`governmentTax`,
(foliotransactions.`governmentTax` * -1) ) as governmentTax,
if(foliotransactions.AcctSide='CREDIT',foliotransactions.`localTax`,
(foliotransactions.`localTax` * -1) ) as localTax,
if(foliotransactions.AcctSide='CREDIT',foliotransactions.`mealAmount`,
(foliotransactions.`mealAmount` * -1) ) as mealAmount,
foliotransactions.`Memo`,
foliotransactions.subFolio,
if(foliotransactions.AcctSide='CREDIT',foliotransactions.`netAmount`,
(foliotransactions.`netAmount` * -1) ) as netAmount,
if(foliotransactions.AcctSide='CREDIT',foliotransactions.`netBaseAmount`,
(foliotransactions.`netBaseAmount` * -1) ) as Amount,
foliotransactions.`CREATEDBY`,
if(substring(foliotransactions.`Memo`,-3,3) > 0,substring(foliotransactions.`Memo`,-3,3),folioschedules.roomid) as roomid,
folioschedules.roomtype,
company.companyName,
'' as REMARKS,
foliotransactions.creditcardno,
foliotransactions.chequeno,
foliotransactions.accountname,
foliotransactions.bankname,
foliotransactions.chequedate,
foliotransactions.focgrantedby,
foliotransactions.creditcardtype,
foliotransactions.approvalslip,
foliotransactions.creditcardexpiry,
concat(date(folio.arrivaldate), ' to ', date(folio.departuredate)) as daterange
from
foliotransactions
left join transactioncode on transactioncode.tranCode = foliotransactions.transactioncode
left join folioschedules on folioschedules.folioid = foliotransactions.folioid
left join folio on folioschedules.folioid = folio.folioid
left join company on folio.companyid = company.companyid
left join guests on guests.accountid = folio.accountid
where
date(foliotransactions.`TransactionDate`) >= pStartDate and 
date(foliotransactions.`TransactionDate`) <= pEndDate and
foliotransactions.status = 'ACTIVE' and
(transactioncode.tranTypeID = 2 or transactioncode.tranTypeID = 3 or transactioncode.trantypeid = 4 or transactioncode.trantypeid = 5 or transactioncode.trantypeid = 9) group by folioid, referenceno, transactionsource
)
UNION
(
select
nonguesttransaction.postingDate,
nonguesttransaction.transactionDate,
nonguesttransaction.referenceNo,
nonguesttransaction.transactionSource,
transactioncode.trantypeid,
nonguesttransaction.referenceFolioId as FolioId,
nonguesttransaction.accountId,
if(nonguesttransaction.guestName="","WALK-IN GUEST",nonguesttransaction.guestName) as GuestName,
nonguesttransaction.transactionCode,
if(nonguesttransaction.AcctSide='CREDIT',nonguesttransaction.baseAmount,
(nonguesttransaction.baseAmount * -1) ) as baseAmount,
if(nonguesttransaction.AcctSide='CREDIT',nonguesttransaction.netBaseAmount,
(nonguesttransaction.netBaseAmount * -1) ) as netBaseAmount,
if(nonguesttransaction.AcctSide='CREDIT',nonguesttransaction.grossAmount,
(nonguesttransaction.grossAmount * -1) ) as grossAmount,
if(nonguesttransaction.AcctSide='CREDIT',nonguesttransaction.discount,
(nonguesttransaction.discount * -1) ) as discount,
if(nonguesttransaction.AcctSide='CREDIT',nonguesttransaction.serviceCharge,
(nonguesttransaction.serviceCharge * -1) ) as serviceCharge,
if(nonguesttransaction.AcctSide='CREDIT',nonguesttransaction.governmentTax,
(nonguesttransaction.governmentTax * -1) ) as governmentTax,
if(nonguesttransaction.AcctSide='CREDIT',nonguesttransaction.localTax,
(nonguesttransaction.localTax * -1) ) as localTax,
0 as mealAmount,
nonguesttransaction.memo,
"A " as subFolio,
if(nonguesttransaction.AcctSide='CREDIT',nonguesttransaction.netAmount,
(nonguesttransaction.netAmount * -1) ) as netAmount,
if(nonguesttransaction.AcctSide='CREDIT',nonguesttransaction.netbaseAmount,
(nonguesttransaction.netbaseAmount * -1) ) as Amount,
nonguesttransaction.CREATEDBY,
nonguesttransaction.roomNumber as roomid,
'' as roomtype,
nonguesttransaction.companyName,
'' as REMARKS,
nonguesttransaction.creditcardno,
nonguesttransaction.chequeno,
nonguesttransaction.accountname,
nonguesttransaction.bankname,
nonguesttransaction.chequedate,
nonguesttransaction.focgrantedby,
nonguesttransaction.creditcardtype,
nonguesttransaction.approvalslip,
nonguesttransaction.creditcardexpiry,
'' as daterange
from nonguesttransaction force index(primary)
left join transactioncode on transactioncode.tranCode = nonguesttransaction.transactioncode
where
date(nonguesttransaction.transactionDate) >= pStartDate and 
date(nonguesttransaction.`TransactionDate`) <= pEndDate and
nonguesttransaction.statusFlag = 'ACTIVE' and
nonguesttransaction.hotelID = pHotelId and
(transactioncode.tranTypeID = 2 or transactioncode.tranTypeID = 3 or transactioncode.trantypeid = 4 or transactioncode.trantypeid = 5 or transactioncode.trantypeid = 9) group by folioid, referenceno, transactionsource
)
order by transactionCode, transactionSource, ReferenceNo;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSAP_RestoDataDetail` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSAP_RestoDataDetail`(pOrderID varchar(20))
BEGIN
select * from pos.`order detail` where order_id=pOrderID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSAP_RestoDataHeader` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSAP_RestoDataHeader`(pStartDate date, pEndDate date)
BEGIN
select order_id, if(customer_id='WALK-IN CUSTOMER', 'WALK-IN', accountid) as customerID, '' AS comments, order_date from pos.`order header` as OrderHeader left join folio on OrderHeader.customer_id=folio.folioid where date(OrderHeader.order_date) between pStartDate and pEndDate;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSAP_UpdateGLaccounts` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSAP_UpdateGLaccounts`(pAccountID varchar(50), pDescription varchar(200), pCostCenterCode varchar(50), pAccountNature varchar(20), pStatusFlag varchar(20), pCreatedBy varchar(30))
BEGIN
update sap_glaccounts set description=pDescription, costCenterCode=pCostCenterCode, accountNature=pAccountNature, statusFlag=pStatusFlag, updatedBy=pCreatedBy, updatedDate=now() where accountID=pAccountID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSearchAccountName` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSearchAccountName`(
in pAccountName varchar(30)
)
BEGIN
Select AccountId,AccountName,FirstName,MiddleName,LastName,Age,Sex,CitizenShip from guestS where accountname=pAccountname;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSearchGuestRefName` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSearchGuestRefName`(
in plastname varchar(30),
in  pfirstname varchar(30),
in  pmiddlename varchar(30)
)
BEGIN
Select * from guests where lastname=plastname and firstname=pfirstname and middlename=pmiddlename;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectAccountingAdjustments` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectAccountingAdjustments`()
BEGIN
select *,drivers.lastName, drivers.firstName from accountingadjustments
left join drivers on drivers.driverId = accountingadjustments.referenceDriverId
where
accountingadjustments.statusFlag = 'ACTIVE' order by postingdate;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectActiveGroup` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spSelectActiveGroup`(pRESTOID INT(5))
BEGIN
select GROUP_ID,DESCRIPTION, MAINGROUP_ID from `group` where `STATUS`='ACTIVE'
AND RESTO_ID=pRESTOID
order by group_id;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spselectactiveitems` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spselectactiveitems`(pRestoID int(10))
BEGIN
select ITEM_ID, item.GROUP_ID, MAINGROUP_ID, item.DESCRIPTION, 
UNIT,UNIT_COST, SELLING_PRICE, EVAT*100 as EVAT, SERVICE_CHARGE*100 AS SERVICE_CHARGE,
item.KITCHEN_DESIGNATION, item.availability
from item, `group` where item.group_id=group.group_id
and ITEM.resto_id=pRestoID AND GROUP.RESTO_ID=pRestoID and item.status='ACTIVE';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectActiveMainGroup` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spSelectActiveMainGroup`()
BEGIN
select id,DESCRIPTION from `main_item_group` where `STATUS`='ACTIVE'
order by id;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectActiveMenu` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spSelectActiveMenu`()
BEGIN
select 
MENU_ID,
substring(item.group_id,1,length(item.group_id)) as Group_Id,
menu.DESCRIPTION,
menu.VAT,
menu.SERVICE_CHARGE,
menu.PRICE,
menu.PICTURE 
from 
menu 
left join item on item.item_id = menu.menu_id
where menu.`STATUS`='ACTIVE' 
order by menu_id;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectAllAppliedRates` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectAllAppliedRates`()
BEGIN
select * from appliedRates where `status`='active';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectAllEndorsements` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectAllEndorsements`(
in pHotelId int(4)
)
BEGIN
set sql_big_selects = 1;
select * from shiftendorsements force index(primary)
where hotelId = pHotelId
order by logdate asc, statusFlag desc;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectAllFolio` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectAllFolio`()
BEGIN
Select folio.*,
if(folio.companyid='','',if(substring(folio.companyid,1,1)='G',fGetCompanyName(folio.companyid), fGetGuestName(folio.companyid))) as CompanyName, fGetFolioBalance(folio.folioid) as balance
from folio where folio.status!='DELETED' and folio.status!='CANCELLED' and folio.status!='CHECKED OUT' order by arrivalDate asc;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectAmenities` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectAmenities`(
in photelid int(5)
)
BEGIN
select 	amenityid,
name,
description
from amenities
where stateflag != 'DELETED' and hotelid = photelid
order by amenityid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectAmenitiesForRoom` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectAmenitiesForRoom`(
in photelid int(5)
)
BEGIN
select amenityid,name
from amenities
where (stateflag = 'ACTIVE' or stateflag = 'UNASSIGNED') AND
hotelid = photelid
order by amenityid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectBackofficeConfig` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectBackofficeConfig`(
in pHotelId int(4)
)
BEGIN
select * from back_office_config
where HOTEL_ID = pHotelId
limit 0,1;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectBlockedRooms` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectBlockedRooms`(
in pStartDate date,
in pEndDate date
)
BEGIN
select 
roomblock.blockId,
blockingdetails.roomid,
rooms.roomtypecode as RoomType,
blockingdetails.blockfrom,
blockingdetails.blockto,
roomblock.reason 
from roomblock left join blockingdetails on blockingdetails.blockid = roomblock.blockid
left join rooms on rooms.roomid = blockingdetails.roomid
where 
(
date(blockingdetails.blockfrom) between pStartDate and pEndDate or 
date(blockingdetails.blockto) between pStartDate and pEndDate or
pStartDate between date(blockfrom) and date(blockto) or
pEndDate between date(blockfrom) and date(blockto)
) and 
blockingdetails.blockfrom<pEndDate and blockto>pStartDate
order by roomid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectBlockID` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectBlockID`()
BEGIN
select blockid from roomblock
order by blockid desc
limit 0,1;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectBlocks` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectBlocks`(
in pStartDate date,
in pEndDate date
)
BEGIN
select 
roomblock.blockId,
blockingdetails.roomid,
rooms.roomtypecode as RoomType,
blockingdetails.blockfrom,
blockingdetails.blockto,
roomblock.reason 
from roomblock left join blockingdetails on blockingdetails.blockid = roomblock.blockid
left join rooms on rooms.roomid = blockingdetails.roomid
where 
( date(blockingdetails.blockfrom) >= pStartDate ) OR
( date(blockingdetails.blockto) <= pEndDate );
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectCashiers` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectCashiers`()
BEGIN
select * from cashiers;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectCashierTerminals` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectCashierTerminals`()
BEGIN
select * from Cashiers;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectCashTerminals` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectCashTerminals`(
pHotelId int(5)
)
BEGIN
select * from Cashiers where hotelid = pHotelid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectCompany` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectCompany`(
in photelid int(5)
)
BEGIN
select 
*
from company 
where stateflag <>'DELETED' and hotelid = photelid order by companyname;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectCompanyByCompanyID` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectCompanyByCompanyID`(
in pCompanyID varchar(50),
in pHotelID int(5))
BEGIN
select 
*
from 
company 
where 
CompanyID = pCompanyID and
stateflag <> 'DELETED' and 
hotelid = photelid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectCompanyByName` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectCompanyByName`(
in pCompanyName varchar(50),
in pHotelID int(5))
BEGIN
select 
*
from 
company 
where 
CompanyName = pCompanyName and
stateflag <> 'DELETED' and 
hotelid = photelid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectCompanyByNameUsingLike` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectCompanyByNameUsingLike`(
in pCompanyName varchar(50),
in pHotelID int(5))
BEGIN
select 
*
from 
company 
where 
CompanyName like pCompanyName and
stateflag <> 'DELETED' and 
hotelid = photelid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectCompanyFoliosForToolTip` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectCompanyFoliosForToolTip`(
in photelid int(5),
in pAuditDate date
)
BEGIN
select 	distinct
folio.status,
folio.folioid,
folio.foliotype,
folio.noofadults,
folio.groupname,
folio.companyid,
if(substring(folio.companyid,1,1)='G',fGetCompanyName(folio.companyid), fGetGuestName(folio.companyid)) as companyname,
event_booking_info.contactPerson,
event_booking_info.contactAddress as Address,
folioschedules.roomid,
folioschedules.rate,
folio.remarks,
folioschedules.fromdate AS arrivaldate,
folioschedules.todate AS departuredate,
folioschedules.roomtype,
event_booking_info.noOfPaxLiveIn as liveInPax,
event_booking_info.noOfPaxLiveOut as liveOutPax
from
folio force index(primary) left join event_booking_info on folio.folioid=event_booking_info.folioid,
folioschedules force index(primary)
where
folio.foliotype = 'GROUP' and
folioschedules.folioid = folio.folioid and
(folio.status = 'CHECKED IN' or folio.status = 'CONFIRMED' or folio.status='TENTATIVE')
and
( pAuditDate >= date(folioschedules.fromdate) and  pAuditDate <= date(folioschedules.todate) ) and
folioschedules.hotelid = folio.hotelid and
folio.hotelid = pHotelId
order by folioschedules.roomid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectContacts` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectContacts`(
in pHotelId int(4)
)
BEGIN
select * from contacts
where statusFlag = 'ACTIVE' and
hotelId = pHotelId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectCountries` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spSelectCountries`()
BEGIN
select * from countries;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectCurrencyCodes` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectCurrencyCodes`(
in photelid int(5)
)
BEGIN
Select * from currencycodes 
Where HOTELID=photelid AND stateFlag='ACTIVE';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectCurrentDayRoomStatus` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectCurrentDayRoomStatus`(
in pDate date,
in pHotelID int(5)
)
BEGIN
set sql_big_selects = 1;
select distinct
rooms.roomid,
rooms.roomtypecode,
rooms.cleaningstatus,
roomevents.eventtype 
from rooms use index(roomid)
left join roomevents use index(roomid,eventtype,eventdate) on 
rooms.roomid = roomevents.roomid and 
roomevents.hotelid=pHotelID and
roomevents.EventDate= pdate and 
roomevents.eventtype<>'CHECKED OUT'  and
roomevents.eventtype <> 'NO SHOW' and 
roomevents.eventtype <> 'CANCELLED' and
roomevents.transferFlag <>'1'
where
rooms.stateFlag != 'DELETED'
order by rooms.roomid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectDayEndProcessConfig` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spSelectDayEndProcessConfig`(
in pHotelId int(4)
)
BEGIN
select * from dayEndProcessConfig
where statusFlag = 'ACTIVE' and
hotelId = pHotelId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectDepartments` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectDepartments`(
in pHotelId int(5)
)
BEGIN
select * from department
where
hotelid = pHotelId and
stateflag = 'ACTIVE';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectDrivers` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectDrivers`(
in pHotelId int(4)
)
BEGIN
select * from drivers
where HOTEL_ID = pHotelId and
STATUS_FLAG = 'ACTIVE'
order by lastname, firstname;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectEngineeringJobs` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectEngineeringJobs`(
in photelid int(5)
)
BEGIN
select 	engineeringjobs.*,
engineeringservices.servicename
from 
engineeringjobs,
engineeringservices
where 
engineeringjobs.enggserviceid = engineeringservices.enggserviceid 
and engineeringjobs.stateflag <> 'DELETED' and engineeringjobs.hotelid = photelid
order by 
engineeringjobs.enggjobno;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectEngineeringServices` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectEngineeringServices`(
in photelid int(5)
)
BEGIN
select * from engineeringservices
where 
stateflag = 'ACTIVE' and hotelid = photelid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectEventPackage` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectEventPackage`(pHotelID int(5), pPackageID varchar(10))
BEGIN
select * from event_package_header where `status`='active' and hotelID=pHotelID and packageID=pPackageID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectEventPackageDetails` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectEventPackageDetails`(pPackageID bigint(20))
BEGIN
select * from event_package_detail where packageID=pPackageID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectEventPackageRequirements` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectEventPackageRequirements`(pPackageID varchar(20))
BEGIN
select * from event_package_requirement where packageID=pPackageID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectEventPackages` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectEventPackages`(pHotelID int(5))
BEGIN
select * from event_package_header where `status`='active' and hotelID=pHotelID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectFolioForRoom` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectFolioForRoom`()
BEGIN
select folio.folioid,folioschedules.roomid,folioschedules.arrivaldate,folio.status from folio,folioschedules 
where folio.folioid=folioschedules.folioid and folio.status='Checked In' order by folioid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectFolios` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectFolios`()
BEGIN
select * from folio;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectFolioTransactions` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectFolioTransactions`(in photelID int(5))
BEGIN
Select * FROM FOLIOTRANSACTIONS where hotelID =pHOtelID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectFolioTransactionsByDate` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectFolioTransactionsByDate`(pdate date)
BEGIN
select * from foliotransactions where date(trandate)=pdate;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectFolioTransactionsByMonth` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectFolioTransactionsByMonth`(pmonth int(1),
pyear int(4))
BEGIN
Select * from foliotransactions where month(trandate) =pmonth and year(trandate)=pyear; 
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectFolioTransactionsByRange` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectFolioTransactionsByRange`( pFromDate date,
pToDate date)
BEGIN
Select * from foliotransactions where (date(trandate) >= pFromDate and date(trandate)<=pToDate) and posttoledger='0';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectFolioTransactionsForBilling` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectFolioTransactionsForBilling`(
in pfolioid int(4)
)
BEGIN
select * from foliotransactions
where
folioid = pfolioid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectGetReservationList` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectGetReservationList`()
BEGIN
Select distinct folioSchedules.roomid,(roomtypes.roomtypename) as `Room Type`,
CONCAT(guest.firstname,' ',guest.Lastname) as Name,event.eventtype,
folio.accountType,folio.`status` from folio,guest,event,rooms,folioSchedules,roomtypes where 
folio.eventid=event.eventid and folio.accountid=guest.accountid
and folioSchedules.FolioId=folio.folioid and rooms.roomtypeid=roomtypes.roomtypeid and
folioSchedules.roomid=rooms.roomid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectGetRoomList` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectGetRoomList`()
BEGIN
Select room.roomid
, roomtype.name,roomtype.roomrate,(roompromo.name) as RoomPromo,roompromo.percentoff, 
roomtype.maxoccupants,room.floor, room.smokingtype, room.windows,
room.stateflag, room.amount, room.breakfastflag, room.shareflag
from `room`,roomtype,`roompromo`,`roompromoasgt` 
where room.roomtypeid=roomtype.roomtypeid and 
roompromoasgt.roompromoid=roompromo.roompromoid and roomtype.roomtypeid=roompromoasgt.roomtypeid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectGroupFolioRecurringCharges` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectGroupFolioRecurringCharges`(
in pHotelId int(4)
)
BEGIN
select 
foliorecurringcharge.TransactionCode, 
foliorecurringcharge.Memo,
foliorecurringcharge.Amount,
folio.companyId,
folio.folioid,
foliorecurringcharge.subAccount
from foliorecurringcharge,folio
where
foliorecurringcharge.hotelid = folio.hotelId and
foliorecurringcharge.folioid = folio.folioid and
folio.folioType = "GROUP" and
folio.hotelid = pHotelId and
( curdate() >= date(foliorecurringcharge.FromDate) and
curdate() <= date(foliorecurringcharge.ToDate) )
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectGuest` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectGuest`()
BEGIN
set sql_big_selects = 1;
Select * from guests force index(accountid)
WHERE 
stateflag <> 'DELETED';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectGuestByAccountID` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectGuestByAccountID`(
in pAccountID varchar(20),
in pHotelID int(5))
BEGIN
select 
*
from 
guests 
where 
accountid = pAccountID and
stateflag <> 'DELETED' and 
hotelid = photelid
order by lastname;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectGuestByName` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectGuestByName`(
in pLastName varchar(20),
in pFirstName varchar(20),
in pHotelID int(5))
BEGIN
select 
*
from 
guests 
where 
LastName = pLastName and
FirstName = pFirstName and
stateflag <> 'DELETED' and 
hotelid = photelid
order by lastname;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectGuestByNameUsingLike` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectGuestByNameUsingLike`(
in pLastName varchar(50),
in pFirstName varchar(50),
in pHotelID int(5))
BEGIN
select 
*
from 
guests 
where 
LastName like pLastName and
FirstName like pFirstName and
stateflag <> 'DELETED' and 
hotelid = photelid
order by lastname;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectGuestForToolTip` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectGuestForToolTip`(
in photelid int(5),
in pAuditDate date
)
BEGIN
select 	distinct
folio.status,
folio.folioid,
folio.foliotype,
folio.noofadults,
guests.accountid,
concat(guests.lastname," , ",guests.firstname) as GuestName,
concat(guests.street,", ",guests.city, ", ",guests.country) as Address1,
guests.telephoneNo,
guests.citizenship,
folioschedules.roomid,
folioschedules.rate,
folio.remarks,
folioschedules.fromdate AS arrivaldate,
folioschedules.todate AS departuredate,
company.companyname,
rooms.roomtypecode,
folio.source,
folio.folioETA,
folio.folioETD
from
guests force index(primary),
folio force index(primary) left join company on company.companyid = folio.companyid,
folioschedules force index(primary)
left join rooms on rooms.roomid = folioschedules.roomid
where
folio.accountid = guests.accountid and
folioschedules.folioid = folio.folioid and
(folio.status = 'CHECKED IN' or folio.status = 'CONFIRMED')and
( pAuditDate >= date(folioschedules.fromdate) and  pAuditDate <= date(folioschedules.todate) ) and
folioschedules.hotelid = folio.hotelid and
folio.hotelid = pHotelId
order by folioschedules.roomid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectGuestForToolTipCalendar` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectGuestForToolTipCalendar`(
in photelid int(5)
)
BEGIN
set sql_big_selects = 1;
select 	distinct
folio.status,
folio.folioid,
folio.foliotype,
folio.noofadults,
guests.accountid,
concat(guests.lastname," , ",guests.firstname) as GuestName,
concat(guests.street,", ",guests.city, ", ",guests.country) as Address1,
guests.telephoneNo,
guests.citizenship,
folioschedules.roomid,
folioschedules.rate,
folio.remarks,
folioschedules.fromdate AS arrivaldate,
folioschedules.todate AS departuredate,
company.companyname,
rooms.roomtypecode,
folio.source,
folio.groupname
from
folio force index(primary) 
left join guests on guests.accountid = folio.accountid
left join company on company.companyid = folio.companyid,
folioschedules force index(primary)
left join rooms on rooms.roomid = folioschedules.roomid
where
folioschedules.folioid = folio.folioid and
(folio.status = 'CHECKED IN' or folio.status = 'CONFIRMED' or folio.status = 'TENTATIVE')and
folioschedules.hotelid = folio.hotelid and
folio.hotelid = pHotelId
order by folioschedules.roomid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectGuests` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectGuests`(in pHotelID int(5))
BEGIN
select 
*
from 
guests 
where 
stateflag <> 'DELETED' and 
hotelid = photelid
order by lastname, firstname;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectHKLog` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectHKLog`()
BEGIN
Select * from hk_log;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectHotel` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectHotel`()
BEGIN
Select * from Hotel Where stateFlag='ACTIVE';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectHouseKeepers` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectHouseKeepers`(
in pHotelId int(5)
)
BEGIN
select *
from hk_housekeepers
where stateflag <> 'DELETED' and hotelId = pHotelId
order by housekeeperid
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectItemForMenuDetail` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectItemForMenuDetail`()
BEGIN
Select ITEM_ID,DESCRIPTION from item where `STATUS`='ACTIVE';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectJoinerFolioByMasterFolioID` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectJoinerFolioByMasterFolioID`(
in pFolioId varchar(50),
in pHotelId int(4)
)
BEGIN
select 
folio.*,
guests.lastname,
guests.firstname,
guests.middlename,
guests.street,
guests.city,
guests.country,
guests.citizenship,
guests.passportid
from folio
left join guests on folio.accountid = guests.accountid
where masterfolio = pFolioId
and folio.hotelid = pHotelId and
not(folio.Status = "CANCELLED" or folio.status = "CHECKED OUT" or folio.status = 'REMOVED')
and (select foliotype from folio where folioid=pFolioID) != 'GROUP';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectMenuDetails` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectMenuDetails`(
pMENU_ID varchar(10)
)
BEGIN
select `menu detail`.ITEM_ID,DESCRIPTION,QUANTITY from item,`menu detail`
where  
`menu detail`.ITEM_ID=item.ITEM_ID
and MENU_ID=pMENU_ID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectMenus` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectMenus`(
)
BEGIN
Select * from menus;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectNonGuestTransactions` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectNonGuestTransactions`(
in pAuditDate date
)
BEGIN
select *,drivers.lastName, drivers.firstName from nonguesttransaction
left join drivers on drivers.driverId = nonguesttransaction.referenceDriverId
where
date(nonguesttransaction.transactiondate) = pAuditDate and
nonguesttransaction.statusFlag = 'ACTIVE' order by postingdate;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectPackageDetails` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectPackageDetails`(
in pPackageID varchar(20),
in pHotelId int(5)
)
BEGIN
SELECT packagedetails.PackageID,packagedetails.TransactionCode,transactioncode.memo,Basis        ,PercentOff,AmountOff 
FROM 
packagedetails,
transactioncode 
WHERE
packagedetails.transactioncode = transactioncode.trancode 
AND
packagedetails.PackageID=pPackageID 
AND 	
packagedetails.HotelID=pHotelID
AND 	
packagedetails.stateFlag='ACTIVE';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectPackageHeader` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectPackageHeader`(
pHotelId int(5)
)
BEGIN
SELECT * FROM packageheader WHERE HotelID=pHotelId AND stateFlag='ACTIVE';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectPrivilegeDetails` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectPrivilegeDetails`(
in pPrivilegeID varchar(20),
in pHotelId int(5)
)
BEGIN
SELECT privilegedetails.PrivilegeID,privilegedetails.TransactionCode,transactioncode.memo,Basis        ,PercentOff,AmountOff 
FROM 
privilegedetails,
transactioncode 
WHERE
privilegedetails.transactioncode = transactioncode.trancode 
AND
privilegedetails.PrivilegeID=pPrivilegeID 
AND 	
privilegedetails.HotelID=pHotelID
AND 	
privilegedetails.stateFlag='ACTIVE';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectPrivilegeHeader` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectPrivilegeHeader`(
pHotelId int(5)
)
BEGIN
SELECT * FROM privilegeheader WHERE HotelID=pHotelId AND stateFlag='ACTIVE';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectPrivileges` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectPrivileges`(
pHotelId int(5)
)
BEGIN
Select privilegeheader.PrivilegeID,TransactionCode,Memo,Basis,PercentOff,AmountOff
From 
privilegeheader,
privilegedetails,
transactioncode
Where 
(privilegeheader.PrivilegeID=privilegedetails.PrivilegeID)
AND
(privilegedetails.TransactionCode=transactioncode.TranCode)
AND
(privilegeheader.stateFlag='ACTIVE' AND privilegeheader.HotelId=pHotelId);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectPromos` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectPromos`()
BEGIN
select promos.promoname,promos.percentoff,
promos.startdate,promos.enddate,
promos.promocode
from promos where promos.stateflag <> 'deleted'
order by promos.promocode;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectRateCodes` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectRateCodes`( in photelid int(5))
BEGIN
select *
from ratecodes where hotelid = photelid and stateflag = 'ACTIVE'
order by ratecode;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectRateTypes` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectRateTypes`(
in photelid int(5)
)
BEGIN
select 	
*
from ratetypes 
where hotelid = photelid and statusFlag != 'DELETED'
order by rateamount desc, ratecode desc, hasbreakfast asc;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectReservationList` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectReservationList`()
BEGIN
Select count(*) from folio where `status` in ('TENTATIVE','CONFIRMED');
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectRoleMenu` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectRoleMenu`(
pRoleName varchar(30),
pHotelId int(5)
)
BEGIN
Select * 
FROM 
rolemenu 
Where 
RoleName=pRoleName and 
HotelId=pHotelId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectRoles` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectRoles`(
pHotelId int(5)
)
BEGIN
Select * from Roles Where  HotelId=pHotelId and rolename!='ADMINISTRATOR';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectRoomAmenities` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectRoomAmenities`(
in proomid varchar(10),
in photelid int(5)
)
BEGIN
select roomamenities.amenityid,amenities.name
from roomamenities,amenities
where roomamenities.amenityid = amenities.amenityid and roomamenities.roomid = proomid
and roomamenities.hotelid  = photelid AND roomamenities.stateflag <> 'DELETED';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectRoomBlockForToolTip` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectRoomBlockForToolTip`(
in pHotelId int(5),
in pAuditDate date
)
BEGIN
select 
blockingdetails.roomid, 
"BLOCKING" as eventtype,
roomblock.blockid,
roomblock.reason,
date(blockingdetails.blockfrom) as FromDate,
date(blockingdetails.blockto) as ToDate,
fGetRoomStatus(blockingdetails.roomid) as cleaningStatus
from 
roomblock force index(primary) left join blockingdetails on
blockingdetails.blockid = roomblock.blockid
left join
rooms on rooms.roomid = blockingdetails.roomid 
where
rooms.roomtypecode != 'FUNCTION' and
date(blockfrom) <= pAuditDate and date(blockto) > pAuditDate and
roomblock.hotelid = pHotelId
order by blockingdetails.roomid
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectRoomByCleaningStatus` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectRoomByCleaningStatus`(
in pcleaningstatus varchar(11)
)
BEGIN
select rooms.roomid,
rooms.roomtypecode,rooms.stateflag,
rooms.cleaningstatus
from rooms
where rooms.stateflag <> 'deleted'
and rooms.cleaningstatus = pcleaningstatus;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectRoomEvent` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectRoomEvent`(
in pDate date,
in pEndDate date
)
BEGIN
set  sql_big_selects=1;
select 
if(roomevents.eventtype = 'ENGINEERING JOB',"",
concat(Guests.Lastname, ", ", Guests.Firstname)) as GuestName ,
if(roomevents.eventtype = 'ENGINEERING JOB', "" , Company.CompanyName) as Company,
folio.groupname,
folio.foliotype,
roomevents.`eventdate`,
roomevents.roomid ,
roomevents.eventtype,
roomevents.eventid,
roomevents.transferflag,
roomevents.startTime,
roomevents.endTime,
rooms.roomtypecode
from roomevents force index(`primary`) 
left join folio force index(folioid) on (roomevents.eventid = folio.folioid)
left join guests on (guests.accountid = folio.accountid)
left join company on folio.companyid = company.companyid
left join rooms on (rooms.roomid = roomevents.roomid)
where  ( roomevents.eventdate between pDate and pEndDate ) 
And roomevents.eventtype<>'CHECKED OUT' And roomevents.eventtype<>'NO SHOW' and roomevents.eventtype<>'CANCELLED'
order by roomevents.eventid,roomevents.roomid,roomevents.eventdate;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectRoomEventsForFloorOccupancy` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectRoomEventsForFloorOccupancy`(
in pHotelId int(4),
in pAuditDate date
)
BEGIN
select distinct
rooms.roomid,
rooms.floor,
rooms.xcoordinate,
rooms.ycoordinate,
roomevents.eventdate,
roomevents.eventtype 
from
rooms left join roomevents on roomevents.roomid = rooms.roomid and
roomevents.eventdate = pAuditDate and roomevents.eventtype <> "CHECKED OUT"
where
rooms.hotelid= pHotelId
order by roomid,`floor`;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectRoomId` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectRoomId`()
BEGIN
select rooms.roomid
from rooms where rooms.stateflag <> 'deleted'
order by rooms.roomid
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectRoomIDByRoomType` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectRoomIDByRoomType`(
in proomtypecode varchar(50),
in photelid int(5)
)
BEGIN
select rooms.roomid
from rooms 
where rooms.stateflag <> 'DELETED' and 
rooms.roomtypecode = proomtypecode and 
rooms.hotelid = photelid
order by rooms.roomid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectRooms` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectRooms`(
in photelid int(5)
)
BEGIN
select *
from rooms,roomtypes
where
rooms.roomtypecode = roomtypes.roomtypecode and
rooms.stateflag != 'DELETED' and 
rooms.hotelid = photelid and roomtypes.hotelid = photelid
order by roomid
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectRoomTypes` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectRoomTypes`(
in photelid int(5)
)
BEGIN
select *
from roomtypes
where roomtypes.statusflag <> 'DELETED' and hotelid = photelid
order by roomtypes.roomtypecode
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectShareFolioByMasterFolioID` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectShareFolioByMasterFolioID`(
in pFolioId varchar(50),
in pHotelId int(4)
)
BEGIN
select 
folio.*,
guests.lastname,
guests.firstname,
guests.middlename,
guests.street,
guests.city,
guests.country,
guests.citizenship,
guests.passportid
from folio
left join guests on folio.accountid = guests.accountid
where masterfolio = pFolioId
and folio.hotelid = pHotelId and
not(folio.Status = "CANCELLED" or folio.status = "CHECKED OUT" or folio.status = 'REMOVED')
and (select foliotype from folio where folioid=pFolioID)!='GROUP';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectSystemConfig` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectSystemConfig`()
BEGIN
select * from system_config;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectSystemConfiguration` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spSelectSystemConfiguration`()
BEGIN
select * from system_config where system_file = 0;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectTransactionCodes` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectTransactionCodes`(
in pHotelId int(5)
)
BEGIN
select * from transactioncode
where stateFlag = 'ACTIVE' and hotelId = pHotelId
order by trancode;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectTransactionSourceDocuments` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spSelectTransactionSourceDocuments`()
BEGIN
select * from transactionsourcedocuments where statusFlag = 'ACTIVE';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectTransactionTypes` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectTransactionTypes`(
in photelid int(5)
)
BEGIN
select * 
from 
TranTypes 
where stateflag = 'ACTIVE' and
hotelid = photelid
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectTransctioncode_SubAccount` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectTransctioncode_SubAccount`(
in pHotelId int(4)
)
BEGIN
select * from transctioncode_subaccount
where statusFlag = 'ACTIVE' and hotelId = pHotelId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectUsers` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectUsers`(
)
BEGIN
select
*
from users
where
stateflag <> 'DELETED' AND USERID!='ADMIN';
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSelectYesterdayRoomOccupancy` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSelectYesterdayRoomOccupancy`(
in pdate date
)
BEGIN
select 
rooms.roomid,
roomevents.chargeflag
from rooms 
left join roomevents on 
rooms.roomid = roomevents.roomid and 
roomevents.`eventdate`= pdate and 
(roomevents.eventtype = 'IN HOUSE' or roomevents.eventtype = 'CHECKED OUT')
order by rooms.roomid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSetActualArrival` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSetActualArrival`(
pFolioID varchar(20),
pUpdatedby varchar(20),
pHotelid int(5)
)
BEGIN
Update folio set ArrivalDate = now(),
updatedby = pUpdatedby,
updatetime = now()
where folioid = pfolioID and 
hotelid = pHotelID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSetAuditToProcessed` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSetAuditToProcessed`(
in pAuditDate varchar(15)
)
BEGIN
update auditdatetable set meridian="PROCESSED" where AuditDate=pAuditDate;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSetChildFolioStatus` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSetChildFolioStatus`(
in pMasterFolio varchar(20),
in pStatus varchar(15),
in pHotelID int(5),
in pUpdateTime dateTime,
in pReason text
)
BEGIN
Update folio set `status`=pStatus, updateTime=pUpdateTime, reason_for_cancel=pReason where masterfolio=pMasterFolio and hotelID=pHOtelID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSetChildFollioStatus` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSetChildFollioStatus`(
in pMasterFolio varchar(12),
in pStatus varchar(15)
)
BEGIN
Update folio set `status`=pStatus where masterfolio=pMasterFolio;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSetCompanyNoOfVisits` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSetCompanyNoOfVisits`(
in pCompanyId varchar(20),
in pHotelId int(4)
)
BEGIN
update company 
set NO_OF_VISIT = NO_OF_VISIT + 1 
where companyid=pCompanyId
and hotelid = pHotelId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSetEventType` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSetEventType`(
in pEventType varchar(20),
in pEventID varchar(20),
in pHOtelId int(5)
)
BEGIN
update Roomevents set eventtype=pEventType where EventID=pEventID and hotelID=pHOtelID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSetFolioScheduleType` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSetFolioScheduleType`(
in pTYpe varchar(30),
in pFolioID varchar(12),
in pHOtelID int(5)
)
BEGIN
update FolioSchedules set `type`=pType where folioId=pFolioID and hotelID =pHotelID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSetFolioTransactionStatus` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSetFolioTransactionStatus`(
in pfolioid varchar(12),
in ptrandate datetime,
in ptrancode varchar(5),
in pStatus varchar(10)
)
BEGIN
update foliotransactions set `status`=pStatus 
where folioid=pfolioid 	and transactiondate=ptrandate and transactioncode=ptrancode;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSetFolioTransactionToAudited` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSetFolioTransactionToAudited`(
in pAuditDate date,
in pHotelId int(4)
)
BEGIN
update foliotransactions 
set 
auditFlag = 1 where
date(transactionDate) = pAuditDate
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSetMasterFolio` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSetMasterFolio`(
in pMasterFolio varchar(20),
in pFolioID varchar(20),
in pHotelID int(5)
)
BEGIN
Update folio set MasterFolio=pMasterFolio
where folioID=pFolioID and hotelID=pHotelID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSetNoOfVisits` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSetNoOfVisits`(
in pAccountId varchar(20),
in pHotelId int(4)
)
BEGIN
update guests 
set noofvisits = noofvisits + 1,
ACCOUNT_TYPE = if(noofvisits >= 3, "EXECUTIVE",ACCOUNT_TYPE)
where accountid=pAccountid
and hotelid = pHotelId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSetOccupiedRoomsDirty` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSetOccupiedRoomsDirty`(
in pHotelid int(5)
)
BEGIN
update 
rooms
set 
cleaningstatus = 'DIRTY'
where 
roomtypecode != 'FUNCTION' and
stateflag = 'OCCUPIED' and
hotelid = photelid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSetPosted` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSetPosted`(in pfolioid varchar(20),in pHOtelID int(5))
BEGIN
update foliotransactions set posttoledger = "1" 
where folioid=pfolioid  and hotelid=pHOtelID;
update folioledger set posttoledger="1" 
where folioid=pfolioid  and hotelid=pHOtelID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSetRoomAsCharged` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSetRoomAsCharged`(
in proomid varchar(10),
in pdate date,
in photelid int(5)
)
BEGIN
update roomevents
set
chargeflag = 1
where
eventtype='IN HOUSE'
and	`eventdate` = pDate
and	roomid = proomid and hotelid= photelid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSetRoomCleaningStatus` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSetRoomCleaningStatus`(
in pRoomID varchar(10),
in pStateFlag varchar(20),
in pUpdatedby varchar(20),
in pHotelId int(5)
)
BEGIN
update rooms 
set 
cleaningStatus=pStateFlag,
updateTime = now(),
updatedby = pUpdatedby
where 	
roomid=pRoomID and
hotelid = photelid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSetRoomEventPosted` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spSetRoomEventPosted`(
in pFolioId varchar(20),
in pROomId varchar(20),
in pEventDate date,
in pHotelId int(4)
)
BEGIN
update roomevents
set chargeFlag = 1
where
eventId = pFolioId and
roomId = pRoomId and
eventDate = date(pEventDate) and
transferFlag = 0 and
hotelId = pHotelId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spSetRoomStateFlag` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spSetRoomStateFlag`(
in pRoomID varchar(10),
in pStateFlag varchar(20),
in pUpdatedby varchar(20),
in pHotelId int(5)
)
BEGIN
update rooms 
set 
stateflag=pStateFlag,
updateTime = now(),
updatedby = pUpdatedby
where 	
roomid=pRoomID and
hotelid = photelid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spTransferFolioTransaction` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spTransferFolioTransaction`(
in pFromFolioid varchar(20),
in pToFolioID varchar(20),
in proutecode varchar(100),
in ptrandate datetime,
in pHotelID int(5)
)
BEGIN
update foliotransactions 
set
folioid = pToFolioID,
routesequence = proutecode
where
transactiondate = ptrandate and
folioid = pFromfolioid and hotelid = photelid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateAgent` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateAgent`(
in pAgentId         int(10),
in pAddress    	text,
in pAgency         varchar(150), 
in pContactNo        varchar(50), 
in pContactPerson       varchar(100),
in pUPDATED_BY       varchar(50), 
in pHOTEL_ID         int(4)
)
BEGIN
update agents
set 
address = pAddress,
agency = pAgency, 
contactNumber = pContactNo, 
contactPerson = pContactPerson,
UPDATED_DATE = now(), 
UPDATED_BY = pUPDATED_BY
where
agentID = pAgentId and
HOTEL_ID = pHOTEL_ID
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateAllJoinerFolioStatus` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateAllJoinerFolioStatus`(
in pStatus varchar(20),
in pMasterFolio varchar(20),
in pHotelId int(4),
in pUpdatedBy varchar(50)
)
BEGIN
update folio
set
`status` = pStatus,
updatedby = pUpdatedBy,
updatetime = now()
where
MasterFolio = pMasterFolio and
hotelid = pHotelId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateAllShareFolioStatus` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateAllShareFolioStatus`(
in pStatus varchar(20),
in pMasterFolio varchar(20),
in pHotelId int(4),
in pUpdatedBy varchar(50)
)
BEGIN
update folio
set
`status` = pStatus,
updatedby = pUpdatedBy,
updatetime = now()
where
MasterFolio = pMasterFolio and
hotelid = pHotelId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateAmenity` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateAmenity`(
IN pamenityid varchar(20),
IN pname VARCHAR(50),
IN pdescription VARCHAR(50),
in photelid int(5),
in pupdatedBy varchar(50)
)
BEGIN
update amenities 
set 
name = pname,
description = pdescription,
updatetime = now(),
updatedby = pupdatedBy
where amenityid = pamenityid and hotelid = photelid; 
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateAppliedRates` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spUpdateAppliedRates`(
pAppliedRateID bigint(10),
pDescription text,
pOccupants int(5),
pHotelID int(10),
pUser varchar(20),
pRateType varchar(20))
BEGIN
update appliedRates set description=pDescription, noOfOccupants=pOccupants, updatedby=pUser, updatetime=now(), rateType=pRateType where appliedRateID=pAppliedRateID and hotelID=pHotelID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateCallCharge` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateCallCharge`(
in pCallNo int(4)
)
BEGIN
update callcharges
set PostedToFolio = 1
where
CallNo = pCallNo;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateCashier` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateCashier`(
pTerminalId          int(4),
pCashierId           varchar(10),
pShiftCode           varchar(10),
pOpeningbalance      double(12,2), 
pOpeningadjustment   double(12,2), 
pBeginningbalance    double(12,2), 
pChargeinamount      double(12,2), 
pCash     	     double(12,2), 
pCreditcard          double(12,2), 
pCheque              double(12,2), 
pOthers              double(12,2), 
pAdjustment          double(12,2),
pAmountRemitted	     double(12,2),
pNetamount           double(12,2),
pStatus              enum('OPEN','CLOSE'),
pHotelId             int(5),
pUpatedBy            varchar(20),
pRemarks	     text,
pAuditDate datetime
)
BEGIN
update `cashiers` 
set 
shiftCode = pShiftCode,
openingbalance = pOpeningbalance, 
openingadjustment = pOpeningadjustment, 
beginningbalance = pBeginningbalance, 
chargeinamount = pChargeinamount, 
cash = pCash, 
creditcard = pCreditcard, 
cheque = pCheque, 
others = pOthers, 
adjustment = pAdjustment, 
amountremitted = pAmountRemitted,
netamount =pNetamount, 
`STATUS` = pStatus,
UpdateTime = pAuditDate, 
UPDATEDBY = pUpatedBy,
Remarks = pRemarks
where
terminalid = pTerminalId and
cashierid = pCashierId and
HOTELID = pHotelId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateCashierShiftAmount` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateCashierShiftAmount`(
in pAcctside varchar(20),
in pTransactioncode varchar(20),
in pBaseamount double(12,2),
in pTerminalid int(4),
in pShiftcode int(4),
in pAuditDate date
)
BEGIN
if (pAcctside = 'CREDIT') then
case pTransactioncode
when '2000' then  
update cashiers set cash = cash + pBaseamount
where cashiers.terminalid = pTerminalid
and cashiers.shiftcode = pShiftcode and date(UPDATETIME) = pAuditDate;
when '2100' then   
update cashiers set creditcard = creditcard + pBaseamount 
where cashiers.terminalid = pTerminalid
and cashiers.shiftcode = pShiftcode and date(UPDATETIME) = pAuditDate;
when '2200' then   
update cashiers set cheque = cheque + pBaseamount
where cashiers.terminalid = pTerminalid
and cashiers.shiftcode = pShiftcode and date(UPDATETIME) = pAuditDate;
when '2300' or '4200' then    
update cashiers set chargeinamount = chargeinamount + pBaseamount
where cashiers.terminalid = pTerminalid
and cashiers.shiftcode = pShiftcode and date(UPDATETIME) = pAuditDate;
when '2600' then     
update cashiers set others = others + pBaseamount
where cashiers.terminalid = pTerminalid
and cashiers.shiftcode = pShiftcode and date(UPDATETIME) = pAuditDate;
when '2800' then     
update cashiers set others = others + pBaseamount
where cashiers.terminalid = pTerminalid
and cashiers.shiftcode = pShiftcode and date(UPDATETIME) = pAuditDate;
else
update cashiers set others = others
where cashiers.terminalid = pTerminalid
and cashiers.shiftcode = pShiftcode and date(UPDATETIME) = pAuditDate;
end case;
else
case pTransactionCode
when '6000' then
update cashiers set cash = cash - pBaseamount
where cashiers.terminalid = pTerminalid
and cashiers.shiftcode = pShiftcode and date(UPDATETIME) = pAuditDate;
when '3300' then
update cashiers set cash = cash - pBaseamount
where cashiers.terminalid = pTerminalid
and cashiers.shiftcode = pShiftcode and date(UPDATETIME) = pAuditDate;
else
update cashiers set others = others
where cashiers.terminalid = pTerminalid
and cashiers.shiftcode = pShiftcode and date(UPDATETIME) = pAuditDate;
end case;
end if;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateCashierShiftAmountVoid` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateCashierShiftAmountVoid`(
in pAcctside varchar(20),
in pTransactioncode varchar(20),
in pBaseamount double(12,2),
in pTerminalid int(4),
in pShiftcode int(4),
in pAuditDate date
)
BEGIN
if (pAcctside = 'CREDIT') then
case pTransactioncode
when '2000' then  
update cashiers set cash = cash - pBaseamount
where cashiers.terminalid = pTerminalid
and cashiers.shiftcode = pShiftcode and date(UPDATETIME) = pAuditDate;
when '2100' then   
update cashiers set creditcard = creditcard - pBaseamount 
where cashiers.terminalid = pTerminalid
and cashiers.shiftcode = pShiftcode and date(UPDATETIME) = pAuditDate;
when '2200' then   
update cashiers set cheque = cheque - pBaseamount
where cashiers.terminalid = pTerminalid
and cashiers.shiftcode = pShiftcode and date(UPDATETIME) = pAuditDate;
when '2300' then    
update cashiers set chargeinamount = chargeinamount - pBaseamount
where cashiers.terminalid = pTerminalid
and cashiers.shiftcode = pShiftcode and date(UPDATETIME) = pAuditDate;
when '2600' then     
update cashiers set others = others - pBaseamount
where cashiers.terminalid = pTerminalid
and cashiers.shiftcode = pShiftcode and date(UPDATETIME) = pAuditDate;
when '2800' then     
update cashiers set others = others - pBaseamount
where cashiers.terminalid = pTerminalid
and cashiers.shiftcode = pShiftcode and date(UPDATETIME) = pAuditDate;
when '6000' then
update cashiers set cash = cash - pBaseamount
where cashiers.terminalid = pTerminalid
and cashiers.shiftcode = pShiftcode and date(UPDATETIME) = pAuditDate;
else
update cashiers set others = others
where cashiers.terminalid = pTerminalid
and cashiers.shiftcode = pShiftcode and date(UPDATETIME) = pAuditDate;
end case;
else
case pTransactionCode
when '6000' then
update cashiers set cash = cash + pBaseamount
where cashiers.terminalid = pTerminalid
and cashiers.shiftcode = pShiftcode and date(UPDATETIME) = pAuditDate;
when '3300' then
update cashiers set cash = cash + pBaseamount
where cashiers.terminalid = pTerminalid
and cashiers.shiftcode = pShiftcode and date(UPDATETIME) = pAuditDate;
else
update cashiers set others = others
where cashiers.terminalid = pTerminalid
and cashiers.shiftcode = pShiftcode and date(UPDATETIME) = pAuditDate;
end case;
end if;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateCompanyAccount` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateCompanyAccount`(
in `pcompanyid` varchar(20),       
in `pcompanycode` varchar(50),         
in `pcompanyname` varchar(150),
in `pcompanyurl` varchar(100),                  
in `pcontactperson` varchar(200),         
in `pdesignation` varchar(200),         
in `pstreet1` varchar(50),                 
in `pcity1` varchar(50),                   
in `pcountry1` varchar(30),                
in `pzip1` varchar(10),                    
in `pstreet2` varchar(50),                 
in `pcity2` varchar(30),                   
in `pcountry2` varchar(30) ,                
in `pzip2` varchar(10) ,                    
in `pstreet3` varchar(50) ,                 
in `pcity3` varchar(30) ,                   
in `pcountry3` varchar(30) ,                
in `pzip3` varchar(10) ,                    
in `pemail1` varchar(50) ,                  
in `pemail2` varchar(50) ,                  
in `pemail3` varchar(50) ,                  
in `pcontactnumber1` varchar(15) ,          
in `pcontactnumber2` varchar(15) ,          
in `pcontactnumber3` varchar(15) ,          
in `pcontacttype1` varchar(15) ,            
in `pcontacttype2` varchar(15) ,            
in `pcontacttype3` varchar(15),
in pupdatedby varchar(20),
in photelid int(5),
in pAccount_Type varchar(100),
in pCard_No varchar(100),
in pThreshold_Value double(12,2),
in pX_DEAL_AMOUNT double(12,2),
in pRemarks text
)
BEGIN
update company 
set
`companycode` = `pcompanycode`,         
`companyname` = `pcompanyname`,
`companyurl` = `pcompanyurl`,                  
`contactperson` = `pcontactperson`,         
`designation` = `pdesignation`,          
`street1`  = `pstreet1` ,                 
`city1`  =`pcity1`,                   
`country1`  =`pcountry1` ,                
`zip1` = `pzip1` ,                    
`street2` = `pstreet2` ,                 
`city2` = `pcity2` ,                   
`country2` = `pcountry2` ,                
`zip2` = `pzip2` ,                    
`street3` = `pstreet3`,                 
`city3` = `pcity3` ,                   
`country3` = `pcountry3` ,                
`zip3` = `pzip3` ,                    
`email1` = `pemail1` ,                  
`email2` = `pemail2` ,                  
`email3` = `pemail3` ,                  
`contactnumber1` = `pcontactnumber1` ,          
`contactnumber2` = `pcontactnumber2` ,          
`contactnumber3` = `pcontactnumber3` ,          
`contacttype1` = `pcontacttype1` ,            
`contacttype2` = `pcontacttype2` ,            
`contacttype3` =`pcontacttype3`,
updatedby = pupdatedby,
updatetime = now(),
Account_Type = pAccount_Type,
Card_No = pCard_No,
Threshold_Value = pThreshold_Value,
X_DEAL_AMOUNT = pX_DEAL_AMOUNT,
Remarks = pRemarks
where
`companyid` = `pcompanyid` and 
hotelid = photelid
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateCompanyAccountTotalSales` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateCompanyAccountTotalSales`(
in pAccountId varchar(20),
in pAmount double(12,2),
in pHotelId int(4)
)
BEGIN
update company
set
TOTAL_SALES_CONTRIBUTION = TOTAL_SALES_CONTRIBUTION + pAmount
where
companyid = pAccountId and HotelId = pHotelId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateCompanyInfoFromFolio` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateCompanyInfoFromFolio`(
in `pcompanyid` varchar(20),       
in `pcompanycode` varchar(10),         
in `pcompanyname` varchar(150),
in `pcompanyurl` varchar(100),                  
in `pcontactperson` varchar(50),         
in `pdesignation` varchar(30),         
in `pstreet1` varchar(50),                 
in `pcity1` varchar(50),                   
in `pcountry1` varchar(30),                
in `pzip1` varchar(10),                    
in `pemail1` varchar(50) ,                                  
in `pcontactnumber1` varchar(15)           
)
BEGIN
update company 
set
`companycode` = `pcompanycode`,         
`companyname` = `pcompanyname`,
`companyurl` = `pcompanyurl`,                  
`contactperson` = `pcontactperson`,         
`designation` = `pdesignation`,          
`street1`  = `pstreet1` ,                 
`city1`  =`pcity1`,                   
`country1`  =`pcountry1` ,                
`zip1` = `pzip1` ,                                   
`email1` = `pemail1` ,                  
`contactnumber1` = `pcontactnumber1`           
where
`companyid` = `pcompanyid`;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateContact` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateContact`(
pId int(10),
pContactNumber  varchar(100),
pContactType    varchar(20),
pContactName    varchar(100),
pFullName       varchar(200),
pDesignation    varchar(50),
pCompany        varchar(100),
pAddress        varchar(200),
pEmailAddress   varchar(100),
pRemarks        varchar(500),
pUpdatedBy      varchar(20),
pHotelId        int(4)
)
BEGIN
update `contacts` 
set
contactNumber = pContactNumber,
contactType = pContactType,
contactName = pContactName, 
fullName = pFullName,
designation = pDesignation,
company = pCompany,
address = pAddress, 
emailAddress = pEmailAddress,
remarks = pRemarks, 
updatedBy = pUpdatedBy,
updateTime = now()
where
id = pId and hotelId = pHotelId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateCurrencyCode` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateCurrencyCode`(
pcurrencycode    varchar(10),        
pcurrency        varchar(20),        
pconversionrate  decimal(12,2), 
pHotelId	int(5),   
pUPDATEDBY       varchar(20)   
)
BEGIN
UPDATE CurrencyCodes
SET
currency=pcurrency,
conversionrate=pconversionrate,
UPDATETIME=now(),
UPDATEDBY=pUPDATEDBY
Where 
currencycode=pcurrencycode AND HOTELID=pHotelId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateDayEndProcessConfig` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spUpdateDayEndProcessConfig`(
pHotelId            int(4),
pProcessType        enum('MANUAL','SCHEDULED'),
pScheduleTime       varchar(15),
pTerminalNo         int(2),
pNotifySchedule     int(10),
pReportsToGenerate  text,
pBackUpDatabase tinyint(1),
pUpdatedBy          varchar(50)
)
BEGIN
update `dayendprocessconfig` 
set 
processType = pProcessType, 
scheduleTime = pScheduleTime, 
terminalNo = pTerminalNo, 
notifySchedule = pNotifySchedule, 
reportsToGenerate = pReportsToGenerate, 
backupDatabase = pBackUpDatabase,
updatedBy = pUpdatedBy, 
updatedDate = now()
where
hotelId = pHotelId; 
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateDepartment` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateDepartment`(
in pDeptId      varchar(20),       
in pName        varchar(100),       
in pHotelId     int(5),         
in pUpdatedBy   varchar(30)  
)
BEGIN
Update department 
set
Name=pName,UpdatedBy=pUpdatedBy,UpdateTime=now() 
Where DeptId=pDeptId and HotelId=pHotelId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateDriver` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateDriver`(
in pDriverId         int(10),
in pLicenseNumber    varchar(100),
in pLastName         varchar(50), 
in pFirstName        varchar(50), 
in pMiddleName       varchar(100),
in pUPDATED_BY       varchar(50), 
in pHOTEL_ID         int(4),
in pCompany	varchar(60),
in pCarModel	varchar(50),
in pBrand	varchar(50),
in pPlateNumber	varchar(10)
)
BEGIN
update drivers
set 
licenseNumber = pLicenseNumber,
lastName = pLastName, 
firstName = pFirstName, 
middleName = pMiddleName,
UPDATED_DATE = now(), 
UPDATED_BY = pUPDATED_BY,
company = pCompany,
carModel = pCarModel,
brand = pBrand,
plateNumber = pPlateNumber
where
driverId = pDriverId and
HOTEL_ID = pHOTEL_ID
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateEngineeringJob` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateEngineeringJob`(
in penggjobno varchar(20),
in penggserviceid varchar(20),
in passignedperson varchar(50),
in proomid varchar(10),
in pstartdate varchar(15),
in penddate varchar(15),
in pstarttime varchar(15),
in pendtime varchar(15),
in photelid int(5),
in pupdatedby varchar(20)
)
BEGIN
update engineeringjobs
set
enggserviceid = penggserviceid,
assignedperson = passignedperson,
roomid = proomid,
startdate = pstartdate,
enddate = penddate,
starttime = pstarttime,
endtime = pendtime,
updatetime = now(),
updatedby = pupdatedby
where
enggjobno = penggjobno and
hotelid = photelid
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateEngineeringService` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateEngineeringService`(
in photelid int(5),
IN penggserviceid varchar(20), 
IN pservicename VARCHAR(50), 
IN pdescription VARCHAR(100),
in pupdatedby varchar(20)
)
BEGIN
update engineeringservices 
set 
servicename = pservicename,
description=pdescription,
updatetime = now(),
updatedby = pupdatedby
where enggserviceid = penggserviceid and hotelid = photelid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateEvent` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spUpdateEvent`(pFolioID varchar(20),
pEventType varchar(40),
pLiveIn int(5),
pLiveOut int(5),
pGuaranteed int(5),
pBillingArrangement text,
pAuthorizedSignatory text,
pLobbyPosting text,
pCreatedBy varchar(20),
pHotelID int(2),
pEventPackage bigint(10),
pPackageAmount double(12,2),
pContactPerson text,
pContactAddress text,
pContactPosition varchar(200),
pContactNumber varchar(20),
pMobileNumber varchar(30),
pFaxNumber varchar(20),
pTotal double(12,2),
pEmailAdd varchar(100)
)
BEGIN
update event_booking_info set 
eventType=pEventType, 
noOfPaxLiveIn=pLiveIn, 
noOfPaxLiveOut=pLiveOut, 
noOfPaxGuaranteed=pGuaranteed, 
billingArrangement=pBillingArrangement, 
authorizedSignatory=pAuthorizedSignatory, 
lobbyPosting=pLobbyPosting, 
hotelID=pHotelID, 
updatetime=now(), 
updatedby=pCreatedBy, 
eventPackage=pEventPackage, 
packageAmount=pPackageAmount, 
contactperson=pContactperson, 
contactaddress=pContactaddress, 
contactposition=pContactposition, 
contactnumber=pContactnumber,
mobileNumber=pMobileNumber,
faxNumber=pFaxNumber,
totalEstimatedCost=pTotal,
emailAddress=pEmailAdd
where folioID=pFolioID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateEventPackage` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateEventPackage`(pPackageID bigint(20), pDescription text, pDaysApplied int(5), pEventType varchar(40), pPackageAmount double(12,2), pHotelID int(10), pUser varchar(20), pMinimumPax int, pMaximumPax int)
BEGIN
update event_package_header set description=pDescription, daysApplied=pDaysApplied, eventType=pEventType, packageAmount=pPackageAmount, updatedby= pUser, updatetime=now(), MinimumPax=pMinimumPax, MaximumPax=pMaximumPax where hotelID=pHotelID and packageID=pPackageID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateEventTypes` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateEventTypes`(
in pTypeID   	          int(10),
in pEventType    	  varchar(40), 
in pDescription 	  text,
in pUPDATED_BY      	  varchar(50),
in pBanquet		  int(2)
)
BEGIN
update event_type
set 
eventType = pEventType,
description = pDescription,
UPDATETIME = now(), 
UPDATEDBY = pUPDATED_BY,
banquetType = pBanquet
where
typeID = pTypeID ;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateFloorLayoutImage` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateFloorLayoutImage`(
in pFloorLayoutImage text,
in pFloor varchar(25),
in pHotelId int(5),
in pupdatedby varchar(20)
)
BEGIN
UPDATE floors
set
FloorLayoutImage = pFloorLayoutImage,
updatedby = pupdatedby,
updatetime = now()
where
`Floor` = pFloor
and HotelId = pHotelId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateFolio` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateFolio`(
in pHotelID            int(5),
in pFolioID            varchar(20),
in pAccountID          varchar(20),
in pFolioType          varchar(25),
in pGroupName          varchar(100),
in pAccountType        varchar(25),
in pNoOfAdults         int(2),
in pNoOfChild          int(2),
in pMasterFolio        varchar(20),
in pCompanyID          varchar(20),
in pAgentID            varchar(20),
in pSource             varchar(50),
in pFromDate           datetime,
in pToDate             datetime,
in pArrivalDate        datetime,
in pDepartureDate      datetime,
in pPackageId          varchar(20),
in pStatus             varchar(15),
in pRemarks            text,
in pTerminal_Id        varchar(20),
in pShift_Code         varchar(20),
in pSupervisor_Id      varchar(50),
in pSales_Executive    varchar(20),
in pPayment_Mode       varchar(20),
in pPurpose            varchar(20),
in pReason_For_Cancel  text,
in pTaxExempted        tinyint(1),
in pFolioETA	       varchar(10),
in pFolioETD 	       varchar(10),
in pUpdatedBy          varchar(20)
)
BEGIN
update `folio` 
set
accountID = pAccountID, 
folioType = pFolioType, 
groupName = pGroupName, 
accountType = pAccountType, 
noOfAdults = pNoOfAdults, 
noOfChild = pNoOfChild, 
masterFolio = pMasterFolio, 
companyID = pCompanyID, 
agentID = pAgentID, 
source = pSource, 
fromDate = pFromDate, 
toDate = pToDate, 
arrivalDate = pArrivalDate, 
departureDate = pDepartureDate, 
packageId = pPackageId, 
`Status` = pStatus, 
remarks = pRemarks, 
terminal_Id = pTerminal_Id, 
shift_Code = pShift_Code, 
supervisor_Id = pSupervisor_Id, 
sales_Executive = pSales_Executive, 
payment_Mode = pPayment_Mode, 
purpose = pPurpose, 
reason_For_Cancel = pReason_For_Cancel, 
taxExempted = pTaxExempted,
folioETA = pFolioETA,
folioETD = pFolioETD,
updateTime = now(), 
updatedBy = pUpdatedBy
where
hotelID = pHotelID and 
folioID = pFolioID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateFolioBalance` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateFolioBalance`(in pFolioID varchar(12))
BEGIN
update folio set balance=totalcharges-totalPayments where folioid=pFolioID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateFolioLedger` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateFolioLedger`(
in pFolioId varchar(20),
in pSubFolio varchar(1),
in pAccountid varchar(20),
in pHotelid int(5),
in pUpdatedBy varchar(20)
)
BEGIN
update folioledger
set
accountid = pAccountid,
updatetime = now(),
updatedby = pUpdatedBy
where
hotelid = pHotelid and
folioid = pFolioId and
subFolio = pSubFolio;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateFolioLedgerCharges` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateFolioLedgerCharges`(
in pfolioid varchar(20),
in photelid int(5),
in psubfolio varchar(1),
in pcharges decimal(12,2),
in pdiscount decimal(12,2),
in pgovernmenttax decimal(12,2),
in plocaltax decimal(12,2),
in pservicecharge decimal(12,2),
in pupdatedby varchar(20)
)
BEGIN
update folioledger
set 
charges = charges + pcharges,
discount = discount + pdiscount,
governmenttax = governmenttax + pgovernmenttax,
localtax = localtax + plocaltax,
servicecharge = servicecharge + pservicecharge,
balancenet = balancenet + pcharges,
updatetime = now(),
updatedby = pupdatedby
where
folioid = pfolioid and
hotelid = photelid and
subfolio = psubfolio;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateFolioLedgerChargesVOID` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateFolioLedgerChargesVOID`(
in pfolioid varchar(20),
in photelid int(5),
in psubfolio varchar(1),
in pcharges decimal(12,2),
in pdiscount decimal(12,2),
in pgovernmenttax decimal(12,2),
in plocaltax decimal(12,2),
in pservicecharge decimal(12,2),
in pupdatedby varchar(20)
)
BEGIN
update folioledger
set 
charges = charges - pcharges,
discount = discount - pdiscount,
governmenttax = governmenttax - pgovernmenttax,
localtax = localtax - plocaltax,
servicecharge = servicecharge - pservicecharge,
balancenet = balancenet - pcharges,
updatetime = now(),
updatedby = pupdatedby
where
folioid = pfolioid and
hotelid = photelid and
subfolio = psubfolio;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateFolioLedgerPayments` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateFolioLedgerPayments`(
in pfolioid varchar(20),
in photelid int(5),
in psubfolio varchar(1),
in pPayCash decimal(12,2),
in pPayCard decimal(12,2),
in pPayCheque decimal(12,2),
in pPaygiftCheque decimal(12,2),
in pbalanceforwarded decimal(12,2),
in pDiscount decimal(12,2),
in pupdatedby varchar(20),
in pLocalTax decimal(12,2),
in pGovtTax decimal (12,2),
in pServiceCharge decimal(12,2)
)
BEGIN
update folioledger
set 
paycash = paycash + pPayCash,
paycard = paycard + pPayCard,
paycheque = paycheque + pPayCheque,
paygiftcheque = PaygiftCheque + pPaygiftCheque,
balanceforwarded = balanceforwarded + pbalanceforwarded,
discount = discount + pDiscount,
balancenet = balancenet - 
(pPayCash+pPayCard+pPayCheque+pPaygiftCheque+pbalanceforwarded+pDiscount),
updatetime = now(),
updatedby = pupdatedby,
localTax = localTax - pLocalTax,
governmenttax = governmentTax - pGovtTax,
serviceCharge = serviceCharge - pServiceCharge
where
folioid = pfolioid and
hotelid = photelid and
subfolio = psubfolio;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateFolioLedgerPaymentsVOID` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateFolioLedgerPaymentsVOID`(
in pfolioid varchar(20),
in photelid int(5),
in psubfolio varchar(1),
in pPayCash decimal(12,2),
in pPayCard decimal(12,2),
in pPayCheque decimal(12,2),
in pPaygiftCheque decimal(12,2),
in pbalanceforwarded decimal(12,2),
in pDiscount decimal(12,2),
in pupdatedby varchar(20),
in pLocalTax decimal(12,2),
in pGovtTax decimal (12,2),
in pServiceCharge decimal(12,2)
)
BEGIN
update folioledger
set 
paycash = paycash - pPayCash,
paycard = paycard - pPayCard,
paycheque = paycheque - pPayCheque,
paygiftcheque = PaygiftCheque - pPaygiftCheque,
balanceforwarded = balanceforwarded - pbalanceforwarded,
discount = discount - pDiscount,
balancenet = balancenet + 
(pPayCash+pPayCard+pPayCheque+pPaygiftCheque+pbalanceforwarded+pDiscount),
updatetime = now(),
updatedby = pupdatedby,
localTax = localTax - pLocalTax,
governmenttax = governmentTax - pGovtTax,
serviceCharge = serviceCharge - pServiceCharge
where
folioid = pfolioid and
hotelid = photelid and
subfolio = psubfolio;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateFolioLedger_Merge` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateFolioLedger_Merge`(
in newAccountId varchar(20),
in oldAccountId varchar(20),
in pHotelId int(4)
)
BEGIN
update folioledger set accountId = newAccountId
where accountId = oldAccountId and
hotelId = pHotelId
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateFolioLedger_MergeCompany` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateFolioLedger_MergeCompany`(
in newAccountId varchar(20),
in oldAccountId varchar(20),
in pHotelId int(4)
)
BEGIN
update folioledger set accountId = newAccountId
where accountId = oldAccountId and
hotelId = pHotelId
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateFolioRateType` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateFolioRateType`(in pRateType varchar(25))
BEGIN
update folio set rateType=pRateType where folioID=pFolioID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateFolioSchedules` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateFolioSchedules`(    
pFolioId     varchar(20),        
pRoomID      varchar(10),        
pRoomType    varchar(80),     
pFROMDATE    datetime,          
pTODATE      datetime,         
pDays        int(3),        
pRATETYPE    varchar(25),      
pRATE        decimal(12,2),       
pBREAKFAST   varchar(20),       
pUPDATEDBY   varchar(20),
pHotelID     int(5),
pStartTime   time,
pEndTime     time,
pVenue	     text,
pSetup       text,
pRemarks     text
)
BEGIN
update folioSchedules set 
RoomType=pRoomType,
fromDATE=pfromDATE,
TODATE=pTODATE,  
Days=pDays,   
RATETYPE=pRATETYPE,    
RATE=pRATE,       
BREAKFAST=pBREAKFAST,  
updatetime=now(),
UPDATEDBY=pUPDATEDBY,
startTime=pStartTime,
endTime=pEndTime,
venue=pVenue,
setup=pSetup,
remarks=pRemarks
where folioID=pFolioID and 
RoomID=pRoomID and 
hotelID =pHotelID and
fromDate = pFromDate and
toDate = pTodate;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateFolioSchedulesEarlyCheckOut` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateFolioSchedulesEarlyCheckOut`(    
pFolioId     varchar(20),        
pRoomID      varchar(10),        
pRoomType    varchar(80),     
pFROMDATE    datetime,          
pTODATE      datetime,   
pDays        int(3),        
pRATETYPE    varchar(25),      
pRATE        decimal(12,2),       
pBREAKFAST   varchar(20),       
pUPDATEDBY   varchar(20),
pHotelID     int(5)
)
BEGIN
update 
folioSchedules 
set 
TODATE = pTODATE,  
Days = pDays,   
updatetime = now(),
UPDATEDBY = pUPDATEDBY
where 
folioID = pFolioID and 
RoomID = pRoomID and 
hotelID = pHotelID and
fromDate = pFromDate and
RoomType = pRoomType and
RATETYPE = pRATETYPE and  
RATE = pRATE and
BREAKFAST = pBREAKFAST;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateFolioStatus` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateFolioStatus`(
in pStatus varchar(15),
in pFolioID varchar(20),
in pHotelID int(5),
in pReason text,
in pUpdateTime datetime
)
BEGIN
Update folio 
set `status`=pStatus,
REASON_FOR_CANCEL = pReason,
updateTime=pUpdateTime
where folioID=pFolioID 
and hotelID=pHOtelID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateFolioStatusAndRemarks` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateFolioStatusAndRemarks`(
in pStatus varchar(15),
in pFolioID varchar(20),
in pRemarks text,
in pHotelID int(5))
BEGIN
Update folio set `status`=pStatus ,
Remarks=pRemarks
where folioID=pFolioID and hotelID=pHOtelID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateFolioStatusToCancelled` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spUpdateFolioStatusToCancelled`(
in pFolioId varchar(20),
in pReason text,
in pHotelId int(5),
in pUpdatedBy varchar(20),
in pCancelledTime datetime
)
BEGIN
Update folio 
set 
`Status` = 'CANCELLED',
REASON_FOR_CANCEL = pReason,
updatedBy = pUpdatedBy,
updateTime = pCancelledTime
where folioId = pFolioId and 
hotelId = pHotelId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateFolioStatusToCheckedIn` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spUpdateFolioStatusToCheckedIn`(
in pFolioId varchar(20),
in pHotelId int(5),
in pUpdatedBy varchar(20),
in pUpdateDate datetime
)
BEGIN
Update folio 
set 
`Status` = 'CHECKED IN',
arrivaldate = pupdatedate,
updateTime = now(),
updatedBy = pUpdatedBy
where folioId = pFolioId and 
hotelId = pHotelId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateFolioStatusToCheckedOut` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spUpdateFolioStatusToCheckedOut`(
in pFolioId varchar(20),
in pRemarks text,
in pCheckOutDate date,
in pHotelId int(5),
in pUpdatedBy varchar(20),
in pUpdateTime datetime
)
BEGIN
Update folio 
set 
`Status` = 'CHECKED OUT',
remarks = pRemarks,
departureDate = pUpdateTime,
toDate = date(pCheckOutDate),
updateTime = now(),
updatedBy = pUpdatedBy
where folioId = pFolioId and 
hotelId = pHotelId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateFolioStatusToConfirmed` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spUpdateFolioStatusToConfirmed`(
in pFolioId varchar(20),
in pHotelId int(5),
in pUpdatedBy varchar(20)
)
BEGIN
Update folio 
set 
`Status` = 'CONFIRMED',
updateTime = now(),
updatedBy = pUpdatedBy
where folioId = pFolioId and 
hotelId = pHotelId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateFolioStatusToNoShow` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spUpdateFolioStatusToNoShow`(
in pFolioId varchar(20),
in pHotelId int(5),
in pUpdatedBy varchar(20),
in pCancelledTime datetime
)
BEGIN
Update folio 
set 
`Status` = 'NO SHOW',
reason_for_cancel='NO SHOW',
updatedBy = pUpdatedBy,
updateTime=pCancelledTime
where folioId = pFolioId and 
hotelId = pHotelId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateFolioTransaction` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateFolioTransaction`(
pHotelId                 int(5),
pFolioId                 varchar(20),
pSubFolio                varchar(1),
pAccountId               varchar(20),
pTransactionDate         datetime,
pPostingDate             datetime,
pTransactionCode         varchar(20),
pSubAccount              varchar(100),
pReferenceNo             varchar(20),
pTransactionSource       varchar(20),
pMemo                    varchar(500),
pAcctSide                varchar(10),
pCurrencyCode            varchar(10),
pConversionRate          decimal(12,4),
pCurrencyAmount          decimal(12,2),
pBaseAmount              decimal(12,2),
pGrossAmount             decimal(12,2),
pDiscount                decimal(12,2),
pServiceCharge           decimal(12,2),
pServiceChargeInclusive  tinyint(1),
pGovernmentTax           decimal(12,2),
pGovernmentTaxInclusive  tinyint(1),
pLocalTax                decimal(12,2),
pLocalTaxInclusive       tinyint(1),
pNetBaseAmount           decimal(12,2),
pNetAmount               decimal(12,2),
pCreditCardNo            varchar(20),
pChequeNo                varchar(20),
pAccountName             varchar(100),
pBankName                varchar(100),
pChequeDate              date,
pFOCGrantedBy            varchar(100),
pCreditCardType          varchar(20),
pApprovalSlip            varchar(20),
pCreditCardExpiry        date,
pRouteSequence           varchar(100),
pSourceFolio             varchar(20),
pSourceSubFolio          varchar(1),
pTerminalID              varchar(10),
pShiftCode               varchar(10),
pPostToLedger            varchar(1),
pUpdatedBy               varchar(20)
)
BEGIN
update `foliotransactions` 
set
subAccount = pSubAccount, 
referenceNo = pReferenceNo, 
transactionSource = pTransactionSource, 
memo = pMemo, 
acctSide = pAcctSide, 
currencyCode = pCurrencyCode, 
conversionRate = pConversionRate, 
currencyAmount = pCurrencyAmount, 
baseAmount = pBaseAmount, 
grossAmount = pGrossAmount, 
discount = pDiscount, 
serviceCharge = pServiceCharge, 
serviceChargeInclusive = pServiceChargeInclusive, 
governmentTax = pGovernmentTax, 
governmentTaxInclusive = pGovernmentTaxInclusive, 
localTax = pLocalTax, 
localTaxInclusive = pLocalTaxInclusive, 
netBaseAmount = pNetBaseAmount, 
netAmount = pNetAmount, 
creditCardNo = pCreditCardNo, 
chequeNo = pChequeNo, 
accountName = pAccountName, 
bankName = pBankName, 
chequeDate = pChequeDate, 
FOCGrantedBy = pFOCGrantedBy, 
creditCardType = pCreditCardType, 
approvalSlip = pApprovalSlip, 
creditCardExpiry = pCreditCardExpiry, 
routeSequence = pRouteSequence, 
sourceFolio = pSourceFolio, 
sourceSubFolio = pSourceSubFolio, 
terminalID = pTerminalID, 
shiftCode = pShiftCode, 
updateTime = now(), 
updatedBy = pUpdatedBy
where
hotelId = pHotelId and
hotelId = pFolioId and
subFolio = pSubFolio and
accountId = pAccountId and
transactionDate = pTransactionDate and
postingDate = pPostingDate and
transactionCode = pTransactionCode;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateFolioTransactionForTransfer` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spUpdateFolioTransactionForTransfer`(
pFolioTransactionNo      int(20),
pFolioId                 varchar(20),
pSubFolio                varchar(1),
pAccountId               varchar(20),
pRouteSequence           varchar(100),
pSourceFolio             varchar(20),
pSourceSubFolio          varchar(1),
pUpdatedBy               varchar(20)
)
BEGIN
update foliotransactions set 
folioId = pFolioId,
subFolio = pSubFolio,
accountId = pAccountId,
routeSequence = pRouteSequence,
sourceFolio = pSourceFolio,
sourceSubFolio = pSourceSubFolio,
updateTime = now(),
updatedBy = pUpdatedBy
where
folioTransactionNo = pFolioTransactionNo;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateFolioTransactions_Merge` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateFolioTransactions_Merge`(
in newAccountId varchar(20),
in oldAccountId varchar(20),
in pHotelId int(4)
)
BEGIN
update foliotransactions set accountId = newAccountId
where accountId = oldAccountId and
hotelId = pHotelId
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateFolioTransactions_MergeCompany` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateFolioTransactions_MergeCompany`(
in newAccountId varchar(20),
in oldAccountId varchar(20),
in pHotelId int(4)
)
BEGIN
update foliotransactions set accountId = newAccountId
where accountId = oldAccountId and
hotelId = pHotelId
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateFolio_Merge` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateFolio_Merge`(
in newAccountId varchar(20),
in oldAccountId varchar(20),
in pHotelId int(4)
)
BEGIN
update folio set accountId = newAccountId
where accountId = oldAccountId and
hotelId = pHotelId
;
insert into folio_merge_history
(oldAccountId, newAccountId, 
createdBy, createdDate)
values
(oldAccountId, newAccountId, 
'USER', now());
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateFolio_MergeCompany` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateFolio_MergeCompany`(
in newAccountId varchar(20),
in oldAccountId varchar(20),
in pHotelId int(4)
)
BEGIN
update folio set companyId = newAccountId
where companyId = oldAccountId and
hotelId = pHotelId
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateFoodRequirements` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spUpdateFoodRequirements`(pFolioID varchar(20),
pEventDate datetime,
pVenue varchar(30),
pPax int(5),
pStartTime varchar(25),
pEndTime varchar(25),
pOver text,
pSetup text,
pRemarks text,
pTotalCost double(12,2),
pUser varchar(20),
pMealID int(5),
pMealType varchar(30),
pLiveIn int(5),
pLiveOut int(5))
BEGIN
update event_meal_requirements set
venue=pVenue, pax=pPax, startTime=pStartTime, endTime=pEndTime, over=pOver, setup=pSetup, remarks=pRemarks, totalMealCost=pTotalCost, updatetime=now(), updatedby=pUser,  eventDate=pEventDate, liveInPax=pLiveIn, LiveOutPax=pLiveOut where
folioID=pFolioID and mealID = pMealID and mealType=pMealType;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateGroup` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateGroup`(pGroupID bigint(20), pDescription varchar(100), pMainGroupId varchar(20), pHotelID int(10), pUser varchar(20))
BEGIN
update meal_group set description=pDescription, mainGroupId = pMainGroupId, updatedby=pUser, updatetime=now() where groupID=pGroupID and hotelID=pHotelID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateGuest` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateGuest`(
in paccountid varchar(20),
in paccountname varchar(50),
in ptitle varchar(5),
in plastname varchar(50),
in pfirstname varchar(50),
in pmiddlename varchar(50),
in psex varchar(6),
in pstreet varchar(100),
in pcity varchar(100),
in pcountry varchar(100),
in pzip varchar(10),
in pemailaddress varchar(100),
in pcitizenship varchar(100),
in ppassportid varchar(30),
in pTelephoneNo varchar(50),
in pMobileNo varchar(50),
in pFaxNo varchar(50),
in pguestImage text,
in pmemo text,
in pconcierge text,
in premarks text,
in photelid int(5),
in pupdatedby varchar(20),
in pBIRTH_DATE     date	     ,
in pACCOUNT_TYPE     varchar(50)   ,
in pCARD_NO varchar(100),
in pTHRESHOLD_VALUE double(12,2),
in pCreditCardType            varchar(50),
in pCreditCardNo              varchar(50),
in pCreditCardExpiry          varchar(10),
in pTaxExempted tinyint(1)
)
BEGIN
update guests 
set 
`accountname` = `paccountname`,             
`title` = `ptitle` ,                   
`lastname` = `plastname`,                
`firstname` = `pfirstname`,               
`middlename` = `pmiddlename`,
sex = psex,
`street` = `pstreet`,                 
`city` = `pcity`,                   
`country` = `pcountry` ,                
`zip` = `pzip`,                    
`emailaddress` =`pemailaddress`,                                                        
`citizenship` = `pcitizenship` ,            
`passportid` = `ppassportid` ,              
`telephoneNo` = `pTelephoneNo` ,          
`mobileNo` = `pmobileNo` ,          
`faxNo` = `pfaxNo` ,          
`guestImage` = `pguestImage`,
memo = pmemo,
concierge = pconcierge,
remark = premarks,
updatetime = now(),
updatedby = pupdatedby,
BIRTH_DATE = pBIRTH_DATE,
ACCOUNT_TYPE = pACCOUNT_TYPE,
CARD_NO = pCARD_NO,
THRESHOLD_VALUE = pTHRESHOLD_VALUE,
creditCardType = pCreditCardType,
creditCardNo = pCreditCardNo,
creditCardExpiry = pCreditCardExpiry,
taxExempted = pTaxExempted
where
`accountid` = `paccountid` and
hotelid = photelid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateGuestAccountTotalSales` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateGuestAccountTotalSales`(
in pAccountId varchar(20),
in pAmount double(12,2),
in pHotelId int(4)
)
BEGIN
update guests
set
TOTAL_SALES_CONTRIBUTION = TOTAL_SALES_CONTRIBUTION + pAmount,
ACCOUNT_TYPE = if(TOTAL_SALES_CONTRIBUTION >= 20000.00,"ELITE",ACCOUNT_TYPE)
where
accountid = pAccountId and HotelId = pHotelId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateHKParseFlag` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateHKParseFlag`(
pHkDate         date,    
proomid         varchar(10),    
phousekeeperid  varchar(10) ,     
pTime           time            
)
BEGIN
update hk_log 
set ParseFlag=1 
where
Hk_Date  = pHkDate and
roomid   = proomid and 
housekeeperid = phousekeeperid and
`Time`        = pTime;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateHotel` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateHotel`(
pHotelID     int(3),
pHotelName   varchar(100),
pNoOfFloors  int(5),      
pNoOfRooms   int(5),      
pUpdatedBy   varchar(20)
)
BEGIN
Update Hotel 
set
HotelName=pHotelName,
NoOfFloors=pNoOfFloors,
NoOfRooms=pNoOfRooms,
UpdatedBy=pUpdatedBy,
UpdateTime=now()
Where
HotelID=pHotelID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateHouseKeeper` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateHouseKeeper`(
in photelid int(5),
IN phousekeeperid VARCHAR(20), 
IN plastname VARCHAR(50), 
IN pfirstname VARCHAR(50), 
IN pmiddlename VARCHAR(50),
in pupdatedby varchar(20)
)
BEGIN
update hk_housekeepers
set 
lastname = plastname,
firstname = pfirstname,
middlename = pmiddlename,
updatetime = now(),
updatedby = pupdatedby
where housekeeperid = phousekeeperid and hotelid = photelid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateHouseKeepingJobDetail` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateHouseKeepingJobDetail`(
in ptimestart varchar(8),
in ptimeend varchar(8),
in proomstatus varchar(15),
in phousekeepingjobno varchar(10),
in proomid varchar(10)
)
BEGIN
update housekeepingjobdetail
set 
timestart = ptimestart,
timeend = ptimeend,
roomstatus = proomstatus 
where 
housekeepingjobno = phousekeepingjobno and roomid = proomid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateHouseKeepingLog` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateHouseKeepingLog`(IN pRoomId VARCHAR(10), IN pStatus VARCHAR(30), IN pHouseKeeperId VARCHAR(10), IN pStartTime VARCHAR(20), IN pEndTime VARCHAR(20), IN pDuration VARCHAR(20))
BEGIN
Update rooms
set
rooms.`cleaningstatus`=pStatus
WHERE
rooms.`roomid`=pRoomId;
Update hk_housekeepingjobs
set
starttime=pStartTime,
endtime=pEndTime,
elapsedtime=pDuration
where
hk_housekeepingjobs.`roomid`=pRoomId
and isFinished=0
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateItem` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateItem`(
pITEM_ID varchar(20),
pGROUP_ID varchar(20),
pDESCRIPTION varchar(100),
pUNIT varchar(10),
pUNIT_COST DECIMAL(12,2),
pPRICE decimal(12,2),
pVAT DECIMAL(12,2),
pSERVICE_CHARGE DECIMAL(12,2),
pKITCHEN_DESIGNATION varchar(100),
pUpdatedBy varchar(30),
pAVAILABILITY tinyint(1)
)
BEGIN
update item set
GROUP_ID=pGROUP_ID,
DESCRIPTION=pDESCRIPTION,
UNIT=pUNIT,
UNIT_COST=pUNIT_COST,
SELLING_PRICE=pPRICE,
EVAT=pVAT,
SERVICE_CHARGE=pSERVICE_CHARGE,
KITCHEN_DESIGNATION = pKITCHEN_DESIGNATION,
UpdatedBy=pUpdatedBy,
UpdateTime=now(),
AVAILABILITY = pAVAILABILITY
Where 
ITEM_ID=pITEM_ID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateJoinerFolioStatus` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateJoinerFolioStatus`(
in pStatus varchar(20),
in pMasterFolio varchar(20),
in pFolioId varchar(20),
in pHotelId int(4),
in pUpdatedBy varchar(50)
)
BEGIN
update folio
set
`status` = pStatus,
updatedby = pUpdatedBy,
updatetime = now()
where
MasterFolio = pMasterFolio and
hotelid = pHotelId and
FolioId = pFolioId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateJoinerFolioStatusToCheckedIn` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateJoinerFolioStatusToCheckedIn`(
in pMasterFolio varchar(20),
in pFolioId varchar(20),
in pHotelId int(4),
in pUpdatedBy varchar(50),
in pArrivalTime datetime
)
BEGIN
update folio
set
`status` = "CHECKED IN",
arrivaldate = pArrivalTime,
updatetime = now(),
updatedby = pUpdatedBy
where
masterFolio = pMasterFolio and
hotelid = pHotelId and
folioId = pFolioId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateJoinerFolioStatusToCheckedOut` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateJoinerFolioStatusToCheckedOut`(
in pMasterFolio varchar(20),
in pFolioId varchar(20),
in pCheckOutDate date,
in pHotelId int(4),
in pUpdatedBy varchar(50)
)
BEGIN
update folio
set
`status` = "CHECKED OUT",
departuredate = now(),
toDate = pCheckOutDate,
updatetime = now(),
updatedby = pUpdatedBy
where
masterFolio = pMasterFolio and
hotelid = pHotelId and
folioId = pFolioId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateLog` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateLog`(
in pCallNumber int(11)
)
BEGIN
update `callmgtsystem`.`log` 
set PostFlag = 1
where
CallNumber = pCallNumber;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateMainGroup` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateMainGroup`(
pMAINGROUP_ID VARCHAR(20),
pDESCRIPTION  varchar(100), 
pUPDATEDBY varchar(30)
)
BEGIN
update `main_item_group` set
DESCRIPTION=pDESCRIPTION,
UPDATEDBY=pUPDATEDBY,
UPDATEdTIME=now()
Where 
ID=pMAINGROUP_ID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateMealItems` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateMealItems`(pItemID varchar(30), pDescription text, pGroupID bigint(10), pUnit varchar(25), pUnitCost double(12,2), pSellingPrice double(12,2), pVat double(12,2), pServiceCharge double(12,2), pHotelID int(10), pUser varchar(20))
BEGIN
update meal_items set description=pDescription, groupID=pGroupID, unit=pUnit, unit_cost=pUnitCost, selling_price=pSellingPrice, vat=pVat, service_charge=pServiceCharge, `status`='active', updatedby=pUser, updatetime=now() where hotelID=pHotelID and itemID=pItemID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateMealMenu` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateMealMenu`(pMenuID bigint(10), pDescription text, pPrice double(12,2), pVat double(12,2), pServiceCharge double(12,2), pHotelID int(10), pUser varchar(20))
BEGIN
update meal_menu set description=pDescription, price=pPrice, vat=pVat, service_charge=pServiceCharge, updatedby=pUser, updatetime=now() where hotel_id=pHotelID and menuID=pMenuID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateMenu` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateMenu`(
pMENU_ID       varchar(10),       
pDESCRIPTION  varchar(100),   
pVAT	 	decimal(2,2),
pPRICE		decimal(12,2),
pPICTURE	varchar(200),     
pUPDATEDBY     varchar(30),
pSERVICECHARGE	decimal(12,2)
)
BEGIN
update menu
set 
DESCRIPTION=pDESCRIPTION,
UPDATEDBY=pUPDATEDBY,
UPDATETIME=now(),
VAT=pVAT,
PRICE=pPrice,
PICTURE=pPICTURE,
SERVICE_CHARGE=pSERVICECHARGE
where 
MENU_ID=pMENU_ID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateMenuRole` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateMenuRole`(
pRoleName    varchar(30),  
pMenu        varchar(50), 
pEnable      tinyint(4),  
pC           tinyint(4), 
pU           tinyint(4),  
pD           tinyint(4), 
pHotelId     int(5)    
)
BEGIN
Update rolemenu 
set 
`Enable`  =pEnable  ,
C   =pC,
U   =pU,
D   =pD
Where RoleName=pRoleName and HotelId=pHotelId and Menu =pMenu;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateNumberOfBlockedRooms` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateNumberOfBlockedRooms`(pFolioID varchar(20), pRoomType varchar(80), pNoOfRooms int(5))
BEGIN
update event_rooms set blockedRooms=blockedRooms - pNoOfRooms where folioID=pFolioID and roomType=pRoomType;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdatePackageDetails` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdatePackageDetails`(
pPackageID        varchar(20), 
pTransactionCode  varchar(20),   
pBasis            varchar(1),        
pPercentOff       decimal(2,2),   
pAmountOff        decimal(12,2),   
pHotelID          int(5),        
pUpdatedBy        varchar(20)  
)
BEGIN
UPDATE PackageDetails 
SET 
TransactionCode=pTransactionCode,
Basis=pBasis,
percentOff=pPercentOff,
AmountOff=pAmountOff,
UpdatedBy=pUpdatedBy,
UpdateTime=now()
WHERE
PackageID=pPackageID AND HotelID=pHotelID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdatePackageHeader` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdatePackageHeader`(
pPackageID    varchar(20),        
pDescription  varchar(100),          
pFromDate     datetime,           
pToDate       datetime,            
pDaysApplied  varchar(50),           
pHotelID      int(5),          
pUpdatedBy    varchar(50) 
)
BEGIN
UPDATE PackageHeader 
SET 
Description=pDescription,
FromDate=pFromDate,
ToDate=pToDate,
DaysApplied=pDaysApplied,
UpdateTime =now(),
UpdatedBy=pUpdatedBy
WHERE
PackageID=pPackageID AND HotelID=pHotelID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdatePrivilegeHeader` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdatePrivilegeHeader`(
pPrivilegeID    varchar(20),        
pDescription  varchar(100),          
pFromDate     datetime,           
pToDate       datetime,            
pDaysApplied  varchar(50),           
pHotelID      int(5),          
pUpdatedBy    varchar(50) 
)
BEGIN
UPDATE privilegeheader 
SET 
Description=pDescription,
FromDate=pFromDate,
ToDate=pToDate,
DaysApplied=pDaysApplied,
UpdateTime =now(),
UpdatedBy=pUpdatedBy
WHERE
PrivilegeID=pPrivilegeID AND HotelID=pHotelID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdatePromo` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdatePromo`(
in ppromoname varchar(20), in ppercentoff int,
in pstartdate date, in penddate date,
in ppromocode int
)
BEGIN
update promos
set	promoname = ppromoname,
percentoff = ppercentoff,
startdate = pstartdate,
enddate = penddate
where promocode = ppromocode;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateRateCode` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateRateCode`(
in pratecode varchar(10),
in pdescription varchar(30),
in pupdatedby varchar(20),
in photelid int(5)
)
BEGIN
update ratecodes
set 
description = pdescription,
updatetime = now(),
updatedby = pupdatedby
where ratecode = pratecode and hotelid = photelid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateRateType` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateRateType`(	
in proomtypecode varchar(50),
in pratecode varchar(50),
in prateamount double(13,2),
in pHasBreakfast varchar(1),
in pBreakfastAmount double(12,2),
in photelid int(5),
in pupdatedby varchar(20)
)
BEGIN
update ratetypes
set	
rateamount = prateamount,
updatedby = pupdatedby,
hasBreakfast = pHasBreakfast,
breakfastAmount = pBreakfastAmount,
updatetime = now()
where 
roomtypecode = proomtypecode and
ratecode = pratecode and
hotelid = photelid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateRefTime` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateRefTime`(in pReftime varchar(20),
in pMin int(3),
in pMax int(3)
)
BEGIN
Update referencetime set reftime = pReftime,`min` = pMin, `max`=pMax;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateRequirement` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateRequirement`(
in pRequirementID         int(10),
in pDescription    	  text, 
in pTransactionCode	  varchar(20),
in pHOTEL_ID        	  int(4),
in pUPDATED_BY      	  varchar(50)
)
BEGIN
update requirement_header
set 
requirementDescription = pDescription,
transactionCode = pTransactionCode,
UPDATETIME = now(), 
UPDATEDBY = pUPDATED_BY
where
requirementID = pRequirementID and
hotelID = pHOTEL_ID
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateRole` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateRole`(
pRoleName     varchar(30),
pDescription  varchar(100), 
pHotelId      int(5),    
pUpdatedBy    varchar(30)
)
BEGIN
Update Roles set Description=pDescription,UpdatedBy=pUpdatedBy,
UpdateTime=now()
Where HotelId=pHotelId and RoleName=pRoleName;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateRoom` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateRoom`(
in proomid varchar(10),
in photelid int(5),
in proomtypecode varchar(50),
in pfloor int(4),
in pwindows tinyint(1),
in pdirfacing varchar(10),
in padjleft varchar(10),
in padjright varchar(10),
in proomimage varchar(80),
in psmokingtype tinyint(1),
in ptelephoneNo varchar(15),
in pbedsplittable tinyint(1),
in pupdatedby varchar(20)
)
BEGIN
update rooms 
set 	
roomtypecode = proomtypecode,
`floor` = pfloor,
windows = pwindows,
dirfacing = pdirfacing,
adjleft = padjleft,
adjright = padjright,
roomimage = proomimage,
smokingtype = psmokingtype,
telephoneNo = pTelephoneNo,
bedsplittable = pbedsplittable,
updatetime = now(),
updatedby = pupdatedby
where roomid = proomid and hotelid = photelid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateRoomBlocked` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateRoomBlocked`(pBlockID int(11), pRoomID varchar(12), pBlockfrom varchar(30), pBlockTo varchar(30))
BEGIN
update blockingdetails set blockfrom=pBlockFrom, blockto=pBlockTo where blockid=pBlockID and roomid=pRoomID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateRoomCleaningStatus` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateRoomCleaningStatus`(
in pcleaningstatus varchar(11), in proomid int
)
BEGIN
update rooms set rooms.cleaningstatus = pcleaningstatus
where rooms.roomid = proomid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateRoomCoordinates` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateRoomCoordinates`(
in proomid varchar(10),
in pxcoordinate int(5),
in pycoordinate int(5),
in photelid int(5)
)
BEGIN
update rooms
set
xcoordinate = pxcoordinate,
ycoordinate = pycoordinate
where
rooms.roomid = proomid and
rooms.hotelid = photelid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateRoomEvents` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateRoomEvents`(
in pEventType varchar(20),
in pFolioID varchar(20),
in pRoomID varchar(10),
in pHotelID int(5),
in pUpdatedBy varchar(40)
)
BEGIN
update Roomevents set eventtype=pEventType,updatedby=pUpdatedBy,updatetime=now()
where EventId = pFolioID and 
roomid=pRoomID and
Hotelid = pHotelid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateRoomEventsForEarlyCheckOut` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateRoomEventsForEarlyCheckOut`(    
pFolioId     varchar(20),             
pCheckOutDate    date,          
pUPDATEDBY   varchar(20),
pHotelID     int(5)
)
BEGIN
update 
roomevents
set 
EventType = 'CANCELLED'
where 
EventId = pFolioID and 
date(eventDate) > pCheckOutDate and
hotelID = pHotelID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateRoomEventsRate` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateRoomEventsRate`(
in pFolioId varchar(20),
in pRoomId varchar(10),
in pDateTo date,
in pRoomRate double(12,2),
in pUpdatedBy varchar(20),
in pHotelId int(5)
)
BEGIN
update roomevents
set
RoomRate = pRoomRate,
Updatedby = pUpdatedBy,
UpdateTime = now()	
where
EventId = pFolioId and
RoomId = pRoomId and
EventDate <= pDateTo and
HotelId = pHotelId and
ChargeFlag = '0' and
eventType  <> "CHECKED OUT";
end */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateRoomEventsRate1` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateRoomEventsRate1`(
in pFolioId varchar(20),
in pRoomId varchar(10),
in pDateTo date,
in pRoomRate double(12,2),
in pUpdatedBy varchar(20),
in pHotelId int(5)
)
BEGIN
update roomevents
set
RoomRate = pRoomRate,
Updatedby = pUpdatedBy,
UpdateTime = now(),
TransferFlag = '1'
where
EventId = pFolioId and
RoomId = pRoomId and
EventDate = pDateTo and
HotelId = pHotelId and
eventType  <> "CHECKED OUT";
end */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateRoomRate` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateRoomRate`(
in pHotelID int(5),
in pFrom date,
in pTo date,
in pEventID varchar(20),
in pRoomID varchar (20),
in pRoomRate decimal(12,2) 
)
BEGIN
Update RoomEvents set RoomRate = pRoomRate
where RoomID = pRoomID and EventID=pEventID and 
HotelID=pHotelID and 
(date(Eventdate)>=pFrom and date(EventDate)<=pTo);
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateRoomStatus` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateRoomStatus`(
in pstateflag varchar(20),
in proomid varchar(10)
)
BEGIN
update rooms
set
stateflag = pstateflag 	
where
roomid = proomid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateRoomType` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateRoomType`(
in proomtypecode varchar(80),
in pmaxoccupants int(2),
in pnoofbeds int(2),
in pnoofadult int(2),
in pnoofchild int(2), 
in psharetype varchar(15),
in photelid int(5),
in pupdatedby varchar(20)
)
BEGIN
update roomtypes
set	
maxoccupants = pmaxoccupants,
noofadult = pnoofadult,
noofchild = pnoofchild,
noofbeds = pnoofbeds,
sharetype = psharetype,
updatedby = pupdatedby,
updatetime = now()
where roomtypecode = proomtypecode and hotelid = photelid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateSchedule_EarlyCheckOut` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateSchedule_EarlyCheckOut`(
in pFolioId  varchar(100),
in pRoomId varchar(20),
in pHotelId int(4)
)
BEGIN
update folioschedules
set
toDate = curdate(),
days = datediff(curdate(),date(FromDate))
where
FolioId = pFolioId and
RoomId = pRoomId;
update folio
set 
departuredate = curdate()
where
FolioId = pFolioId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateShareFolioStatus` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateShareFolioStatus`(
in pStatus varchar(20),
in pMasterFolio varchar(20),
in pFolioId varchar(20),
in pHotelId int(4),
in pUpdatedBy varchar(50)
)
BEGIN
update folio
set
`status` = pStatus,
updatedby = pUpdatedBy,
updatetime = now()
where
MasterFolio = pMasterFolio and
hotelid = pHotelId and
FolioId = pFolioId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateShareFolioStatusToCheckedIn` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateShareFolioStatusToCheckedIn`(
in pMasterFolio varchar(20),
in pFolioId varchar(20),
in pHotelId int(4),
in pUpdatedBy varchar(50)
)
BEGIN
update folio
set
`status` = "CHECKED IN",
arrivaldate = now(),
updatetime = now(),
updatedby = pUpdatedBy
where
masterFolio = pMasterFolio and
hotelid = pHotelId and
folioId = pFolioId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateShareFolioStatusToCheckedOut` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateShareFolioStatusToCheckedOut`(
in pMasterFolio varchar(20),
in pFolioId varchar(20),
in pCheckOutDate date,
in pHotelId int(4),
in pUpdatedBy varchar(50)
)
BEGIN
update folio
set
`status` = "CHECKED OUT",
departuredate = now(),
toDate = pCheckOutDate,
updatetime = now(),
updatedby = pUpdatedBy
where
masterFolio = pMasterFolio and
hotelid = pHotelId and
folioId = pFolioId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateShiftEndorsement` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateShiftEndorsement`(
pId                      int(10),
pEndorsementDescription  text,
pUpdatedBy               varchar(50)
)
BEGIN
update shiftendorsements set
endorsementDescription = pEndorsementDescription,
updatedBy = pUpdatedBy,
updateTime = now()
where
id = pId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateSystemConfig` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateSystemConfig`(
in pKey varchar(200),
in pValue varchar(200),
in pDescription text,
in pUser varchar(20)
)
BEGIN
update system_config
set `value` = pValue,
description = pDescription,
updated_by = pUser,
update_date = now()
where
`key` = pKey;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateSystemConfiguration` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spUpdateSystemConfiguration`(
pKEY          varchar(100),
pVALUE        varchar(200),
pDESCRIPTION  varchar(500),
pUPDATED_BY   varchar(20)
)
BEGIN
update system_config 
set `value` = pValue,
description = pDescription,
UPDATE_DATE = now(),
UPDATED_BY = pUPDATED_BY
where `key`= pKey;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateSystemConfigValue` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateSystemConfigValue`(
in pKey varchar(200),
in pValue varchar(200),
in pUser varchar(20)
)
BEGIN
update system_config
set `value` = pValue,
updated_by = pUser,
update_date = now()
where
`key` = pKey;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateTotalBlockedRooms` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateTotalBlockedRooms`(pFolioID varchar(20), pRoomType varchar(80), pNoOfRooms int(5))
BEGIN
update event_rooms set blockedRooms = pNoOfRooms 
where folioID = pFolioID 
and roomType=pRoomType;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateTotalNetAgentComm` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateTotalNetAgentComm`(
in pHotelID int(5),
in pFolioID varchar(20),
in pSubFolio varchar(1),
in pCommission decimal(12,2),
in pTotalNet decimal(12,2)
)
BEGIN
Update folioledger set AgentCommission = AgentCommission + pCommission,TotalNet =TotalNet+pTotalNet
where Folioid=pFolioID and subfolio = pSubFolio and Hotelid=pHotelID;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateTransactionCode` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateTransactionCode`(
pTranCode                  varchar(20),
pTranTypeId                varchar(20),
pMemo                      varchar(100),
pAcctSide                  varchar(10),
pServiceCharge             double(5,2),
pServiceChargeInclusive    tinyint(1),
pGovtTax                   double(5,2),
pGovtTaxInclusive          tinyint(1),
pLocalTax                  double(5,2),
pLocalTaxInclusive         tinyint(1),
pDefaultTransactionSource  varchar(100),
pDefaultAmount             double(12,2),
pWarningAmount             double(12,2),
pDepartmentId              varchar(20),
pLedger                    varchar(10),
pDebitSide                 varchar(20),
pCreditSide                varchar(20),
pHotelId                   int(5),
pUpdatedBy                 varchar(20)
)
BEGIN
update `transactioncode` 
set
tranTypeId = pTranTypeId, 
memo = pMemo, 
acctSide = pAcctSide, 
serviceCharge = pServiceCharge, 
serviceChargeInclusive = pServiceChargeInclusive, 
govtTax = pGovtTax, 
govtTaxInclusive = pGovtTaxInclusive, 
localTax = pLocalTax, 
localTaxInclusive = pLocalTaxInclusive, 
defaultTransactionSource = pDefaultTransactionSource, 
defaultAmount = pDefaultAmount,
warningAmount = pWarningAmount, 
departmentId = pDepartmentId, 
ledger = pLedger, 
debitSide = pDebitSide, 
creditSide = pCreditSide, 
updateTime = now(), 
updatedBy = pUpdatedBy
where
trancode = pTrancode and hotelId = pHotelid
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateTransactionCodeSubAccount` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spUpdateTransactionCodeSubAccount`(
pTransactionCode         varchar(20), 
pSubAccountCode          varchar(20), 
pLocalTax                double(5,2), 
pLocalTaxInclusive       tinyint(1), 
pGovernmentTax           double(5,2), 
pGovernmentTaxInclusive  tinyint(1), 
pServiceCharge           double(5,2), 
pServiceChargeInclusive  tinyint(1), 
pUpdatedBy               varchar(50), 
pHotelId                 int(4)
)
BEGIN
update `transctioncode_subaccount` 
set 
localTax = pLocalTax, 
localTaxInclusive = pLocalTaxInclusive, 
governmentTax = pGovernmentTax, 
governmentTaxInclusive = pGovernmentTaxInclusive, 
serviceCharge = pServiceCharge, 
serviceChargeInclusive = pServiceChargeInclusive, 
updatedBy = pUpdatedBy, 
updatedDate = now()
where
transactionCode = pTransactionCode and 
subAccountCode = pSubAccountCode and
hotelId = pHotelId
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateTransactionSourceDocument` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `spUpdateTransactionSourceDocument`(
in pTransactionSourceId  int(10),
in pDescription          varchar(100),
in pAbbreviation         varchar(10),
in pUpdatedBy            varchar(50)
)
BEGIN
update transactionsourcedocuments	
set 
description = pDescription,
abbreviation = pAbbreviation,
updatedDate = now(),
updatedBy = pUpdatedBy
where
transactionSourceId = pTransactionSourceId
;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateTranType` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateTranType`(
in ptrantypeid varchar(2),
in ptrantype varchar(50),
in pacctgroup varchar(20),
in pupdatedby varchar(20),
in photelid int(5)
)
BEGIN
update trantypes
set
trantype = ptrantype,
acctgroup = pacctgroup,
updatetime = now(),
updatedby = pupdatedby
where
trantypeid = ptrantypeid 
and hotelid = photelid;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spUpdateUser` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spUpdateUser`(
in pUserId           varchar(20),
in pEmployeeIdNo      varchar(20),
in pLastName          varchar(30),      
in pFirstName         varchar(30),   
in pDepartment        varchar(100),  
in pDesignation       varchar(50),
in pHotelId int(5)
)
BEGIN
update users
set       
EmployeeIdNo = pEmployeeIdNo , 
LastName = pLastName,       
FirstName = pFirstName,      
Department = pDepartment,    
Designation = pDesignation,
hotelId = pHotelId
where
UserId = pUserId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spVerifyLogin` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spVerifyLogin`(
in puserid varchar(20),
in `ppassword` varchar(20)
)
BEGIN
select 
UserId,
md5(ppassword),
EmployeeIdNo,
LastName,
FirstName,
Department,
Designation,
Stateflag,
HotelId   
from users
where
userid = puserid
and	`Password` = md5(ppassword) ;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spVoidAccountingAdjustment` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spVoidAccountingAdjustment`(
in pTransactionId int(20),
in pUpdatedBy varchar(50),
in pHotelId int(4),
in pBaseAmount double(12,2),
in pReferenceDriverId varchar(20)
)
BEGIN
update accountingadjustments
set
statusFlag = 'VOID',
referenceNo = concat(referenceNo,  "(VOID)"),
UPDATEDBY = pUpdatedBy,
UPDATEDDATE = now()
where
transactionId = pTransactionId and
hotelID = pHotelId;
update drivers set totalCommission = totalCommission - if(pReferenceDriverId != "", pBaseAmount,0)
where driverId = pReferenceDriverId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spVoidFolioTransaction` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spVoidFolioTransaction`(
in pFolioTransactionNo int(20),
in pUpdatedby varchar(20)
)
BEGIN
update foliotransactions
set 
`status` = "VOID",
ReferenceNo = concat(ReferenceNo,"(VOID)"),
updatedby = pupdatedby,
updatetime = now()
where
folioTransactionNo = pFolioTransactionNo;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `spVoidNonGuestTransaction` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `spVoidNonGuestTransaction`(
in pTransactionId int(20),
in pUpdatedBy varchar(50),
in pHotelId int(4),
in pBaseAmount double(12,2),
in pReferenceDriverId varchar(20)
)
BEGIN
update nonguesttransaction
set
statusFlag = 'VOID',
referenceNo = concat(referenceNo,  "(VOID)"),
UPDATEDBY = pUpdatedBy,
UPDATEDDATE = now()
where
transactionId = pTransactionId and
hotelID = pHotelId;
update drivers set totalCommission = totalCommission - if(pReferenceDriverId != "", pBaseAmount,0)
where driverId = pReferenceDriverId;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
/*!50003 DROP PROCEDURE IF EXISTS `test` */;;
/*!50003 SET SESSION SQL_MODE="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER"*/;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `test`(
in whereCondition varchar(50)
)
BEGIN
select * from folio 
where whereCondition;
END */;;
/*!50003 SET SESSION SQL_MODE=@OLD_SQL_MODE*/;;
DELIMITER ;

--
-- Final view structure for view `guestnoofvisit`
--

/*!50001 DROP TABLE IF EXISTS `guestnoofvisit`*/;
/*!50001 DROP VIEW IF EXISTS `guestnoofvisit`*/;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`%` SQL SECURITY DEFINER */
/*!50001 VIEW `guestnoofvisit` AS (select `folio`.`accountID` AS `accountid`,count(0) AS `total` from `folio` where ((`folio`.`accountID` is not null) and (`folio`.`accountID` <> _latin1'')) group by `folio`.`accountID`) */;

--
-- Final view structure for view `vwbanquetcontractdetails`
--

/*!50001 DROP TABLE IF EXISTS `vwbanquetcontractdetails`*/;
/*!50001 DROP VIEW IF EXISTS `vwbanquetcontractdetails`*/;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `vwbanquetcontractdetails` AS (select `event_requirements`.`folioID` AS `folioID`,`event_requirements`.`requirementID` AS `requirementID`,`event_requirements`.`description` AS `description`,`event_requirements`.`transactionCode` AS `transactionCode`,`event_requirements`.`remarks` AS `remarks`,`event_requirements`.`CREATETIME` AS `CREATETIME`,`event_requirements`.`CREATEDBY` AS `CREATEDBY`,`event_requirements`.`UPDATETIME` AS `UPDATETIME`,`event_requirements`.`UPDATEDBY` AS `UPDATEDBY` from `event_requirements`) */;

--
-- Final view structure for view `vwbanquetcontractmeals`
--

/*!50001 DROP TABLE IF EXISTS `vwbanquetcontractmeals`*/;
/*!50001 DROP VIEW IF EXISTS `vwbanquetcontractmeals`*/;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `vwbanquetcontractmeals` AS (select cast(`event_meal_requirements`.`eventDate` as date) AS `mealDate`,`hotel_test`.`fGetLiveInSnacks`(`event_meal_requirements`.`folioID`,cast(`event_meal_requirements`.`eventDate` as date)) AS `fGetLiveInSnacks(folioid, date(eventDate))`,`hotel_test`.`fGetLiveOutSnacks`(`event_meal_requirements`.`folioID`,cast(`event_meal_requirements`.`eventDate` as date)) AS `fGetLiveOutSnacks(folioid,date(eventDate))`,`hotel_test`.`fGetLiveInMeals`(`event_meal_requirements`.`folioID`,cast(`event_meal_requirements`.`eventDate` as date)) AS `fGetLiveInMeals(folioid, date(eventDate))`,`hotel_test`.`fGetLiveOutMeals`(`event_meal_requirements`.`folioID`,cast(`event_meal_requirements`.`eventDate` as date)) AS `fGetLiveOutMeals(folioid,date(eventDate))`,concat(`event_meal_requirements`.`liveInPax`,_latin1' pax') AS `liveInPax`,concat(`event_meal_requirements`.`liveOutPax`,_latin1' pax') AS `liveOutPax`,`hotel_test`.`fGetLiveOutTotal`(`event_meal_requirements`.`folioID`,cast(`event_meal_requirements`.`eventDate` as date)) AS `fGetLiveOutTotal(folioid)`,`event_meal_requirements`.`folioID` AS `folioid` from `event_meal_requirements` group by cast(`event_meal_requirements`.`eventDate` as date),`event_meal_requirements`.`folioID`) */;

--
-- Final view structure for view `vwbanquetcontractrooms`
--

/*!50001 DROP TABLE IF EXISTS `vwbanquetcontractrooms`*/;
/*!50001 DROP VIEW IF EXISTS `vwbanquetcontractrooms`*/;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `vwbanquetcontractrooms` AS (select `folio`.`masterFolio` AS `folioid`,`folioschedules`.`FROMDATE` AS `fromDate`,`folioschedules`.`TODATE` AS `toDate`,if((`folioschedules`.`RATETYPE` <> _latin1'APPLIED'),`folioschedules`.`RoomType`,`appliedrates`.`description`) AS `roomtype`,concat(count(distinct `folioschedules`.`FolioId`),_latin1' rm(s).') AS `qty`,if((`folioschedules`.`RATETYPE` = _latin1'APPLIED'),concat(_latin1'P ',(`folioschedules`.`RATE` + `hotel_test`.`fGetMealrates`(`folio`.`masterFolio`)),_latin1'/pax/day'),concat(_latin1'P ',`folioschedules`.`RATE`,_latin1'/pax/day')) AS `rate`,_latin1'ROOM REQUIREMENTS' AS `header` from ((`folio` join `folioschedules`) join `appliedrates`) where ((`folio`.`folioID` = `folioschedules`.`FolioId`) and (`folio`.`noOfAdults` = `appliedrates`.`noOfOccupants`) and (`folio`.`folioType` = _latin1'DEPENDENT')) group by `folioschedules`.`FROMDATE`,`folioschedules`.`RATE`) union all (select `roomblock`.`FolioId` AS `folioid`,cast(`blockingdetails`.`blockfrom` as datetime) AS `fromDate`,cast(`blockingdetails`.`blockto` as datetime) AS `toDate`,(select `appliedrates`.`description` AS `description` from `appliedrates` where ((`appliedrates`.`noOfOccupants` = (select (`event_rooms`.`noOfPax` / `event_rooms`.`noOfRooms`) AS `noOfPax/noOfRooms` from `event_rooms` where ((`event_rooms`.`folioID` = `roomblock`.`FolioId`) and (`event_rooms`.`roomType` = (select `rooms`.`roomtypecode` AS `roomtypecode` from `rooms` where (`rooms`.`roomid` = `blockingdetails`.`roomid`)))))) and (`appliedrates`.`rateType` = _latin1'ROOM RATES'))) AS `roomtype`,concat(count(`blockingdetails`.`roomid`),_latin1' rm(s).') AS `qty`,concat(_latin1'P ',(`hotel_test`.`fGetMealRates`(`roomblock`.`FolioId`) + `hotel_test`.`fGetRoomRates`(`roomblock`.`FolioId`,`hotel_test`.`fGetNumberOfPax`(`roomblock`.`FolioId`,(select `rooms`.`roomtypecode` AS `roomtypecode` from `rooms` where (`rooms`.`roomid` = `blockingdetails`.`roomid`))))),_latin1'/pax/day') AS `rate`,_latin1'ROOM REQUIREMENTS' AS `header` from (`roomblock` join `blockingdetails`) where ((`roomblock`.`Blockid` = `blockingdetails`.`blockid`) and (`roomblock`.`FolioId` <> _latin1'')) group by cast(`blockingdetails`.`blockfrom` as datetime),(select `appliedrates`.`description` AS `description` from `appliedrates` where ((`appliedrates`.`noOfOccupants` = (select (`event_rooms`.`noOfPax` / `event_rooms`.`noOfRooms`) AS `noOfPax/noOfRooms` from `event_rooms` where ((`event_rooms`.`folioID` = `roomblock`.`FolioId`) and (`event_rooms`.`roomType` = (select `rooms`.`roomtypecode` AS `roomtypecode` from `rooms` where (`rooms`.`roomid` = `blockingdetails`.`roomid`)))))) and (`appliedrates`.`rateType` = _latin1'ROOM RATES'))),`roomblock`.`FolioId` order by `folioid`) */;

--
-- Final view structure for view `vwbookingsheetfoodandbev`
--

/*!50001 DROP TABLE IF EXISTS `vwbookingsheetfoodandbev`*/;
/*!50001 DROP VIEW IF EXISTS `vwbookingsheetfoodandbev`*/;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `vwbookingsheetfoodandbev` AS (select `event_meal_details`.`id` AS `id`,`event_meal_requirements`.`folioID` AS `folioID`,`event_meal_requirements`.`eventDate` AS `eventDate`,`event_meal_requirements`.`venue` AS `venue`,(`event_meal_requirements`.`liveInPax` + `event_meal_requirements`.`liveOutPax`) AS `pax`,`event_meal_requirements`.`startTime` AS `startTime`,`event_meal_requirements`.`endTime` AS `endTime`,`event_meal_requirements`.`over` AS `over`,`event_meal_requirements`.`setup` AS `setup`,`event_meal_requirements`.`remarks` AS `remarks`,`event_meal_requirements`.`totalMealCost` AS `totalMealCost`,`event_meal_requirements`.`CREATETIME` AS `CREATETIME`,`event_meal_requirements`.`CREATEDBY` AS `CREATEDBY`,`event_meal_requirements`.`UPDATETIME` AS `UPDATETIME`,`event_meal_requirements`.`UPDATEDBY` AS `UPDATEDBY`,`event_meal_requirements`.`mealID` AS `mealID`,`event_meal_requirements`.`mealType` AS `mealType`,`event_meal_requirements`.`liveInPax` AS `liveInPax`,`event_meal_requirements`.`liveOutPax` AS `liveOutPax`,`event_meal_details`.`menuItemCode` AS `menuitemcode`,`event_meal_details`.`description` AS `description`,`event_meal_details`.`remarks` AS `mealRemarks`,_utf8'FOOD AND BEVERAGE ARRANGEMENTS' AS `header`,if((`hotel_test`.`fGetBanquetType`(`event_meal_requirements`.`folioID`) = _latin1'1'),_latin1'Min. Pax : ',_latin1'Live In Pax : ') AS `liveInHeader`,if((`hotel_test`.`fGetBanquetType`(`event_meal_requirements`.`folioID`) = _latin1'1'),_latin1'Max. Pax : ',_latin1'Live Out Pax : ') AS `liveOutHeader`,(select `system_config`.`VALUE` AS `value` from `system_config` where (`system_config`.`KEY` = _latin1'NEW_PAGE_AFTER_MEAL_DATE')) AS `newDateAfterMeal` from (`event_meal_requirements` join `event_meal_details`) where (`event_meal_details`.`mealID` = `event_meal_requirements`.`mealID`) order by `event_meal_details`.`id`) */;

--
-- Final view structure for view `vwbookingsheetmain`
--

/*!50001 DROP TABLE IF EXISTS `vwbookingsheetmain`*/;
/*!50001 DROP VIEW IF EXISTS `vwbookingsheetmain`*/;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `vwbookingsheetmain` AS (select distinct `folio`.`folioID` AS `folioid`,`folio`.`groupName` AS `groupname`,`event_booking_info`.`eventType` AS `eventtype`,`folio`.`fromDate` AS `fromdate`,`event_booking_info`.`contactAddress` AS `contactaddress`,`event_booking_info`.`contactPerson` AS `contactperson`,`event_booking_info`.`contactPosition` AS `contactposition`,`event_booking_info`.`contactNumber` AS `contactNumber`,`event_booking_info`.`faxNumber` AS `faxNumber`,`event_booking_info`.`mobileNumber` AS `mobilenumber`,if((substr(`folio`.`companyID`,1,1) = _latin1'G'),`hotel_test`.`fGetCompanyName`(`folio`.`companyID`),`hotel_test`.`fGetGuestName`(`folio`.`companyID`)) AS `company`,`folio`.`Status` AS `status`,if(((select `folioschedules`.`RoomID` AS `roomid` from `folioschedules` where ((`folioschedules`.`FolioId` = `folio`.`folioID`) and (`folioschedules`.`RoomType` = _latin1'FUNCTION') and (`folioschedules`.`RoomID` <> _latin1'')) limit 1) <> _latin1''),concat(_latin1'Function From : ',(select concat(min(date_format(`folioschedules`.`FROMDATE`,_latin1'%d-%b-%Y')),_utf8' ',`folioschedules`.`startTime`) AS `min(date_format(fromdate, '%d-%b-%Y'))` from `folioschedules` where ((`folioschedules`.`FolioId` = `folio`.`folioID`) and (`folioschedules`.`RoomType` = _latin1'FUNCTION') and (`folioschedules`.`RoomID` <> _latin1'')))),_latin1'') AS `functionDateFrom`,if(((select `folioschedules`.`RoomID` AS `roomid` from `folioschedules` where ((`folioschedules`.`FolioId` = `folio`.`folioID`) and (`folioschedules`.`RoomType` = _latin1'FUNCTION') and (`folioschedules`.`RoomID` <> _latin1'')) limit 1) <> _latin1''),concat(_latin1'Function To     : ',(select concat(max(date_format(`folioschedules`.`TODATE`,_latin1'%d-%b-%Y')),_utf8' ',`folioschedules`.`endTime`) AS `max(date_format(todate,             '%d-%b-%Y'))` from `folioschedules` where ((`folioschedules`.`FolioId` = `folio`.`folioID`) and (`folioschedules`.`RoomType` = _latin1'FUNCTION') and (`folioschedules`.`RoomID` <> _latin1'')))),_latin1'') AS `functionDateTo`,if(((select `event_type`.`banquetType` AS `banquetType` from `event_type` where (`event_type`.`eventType` = `event_booking_info`.`eventType`)) = 0),concat(_latin1'Live In             :  ',`event_booking_info`.`noOfPaxLiveIn`),concat(_latin1'Minimum Pax     :  ',`event_booking_info`.`noOfPaxLiveIn`)) AS `noofpaxlivein`,if(((select `event_type`.`banquetType` AS `banquetType` from `event_type` where (`event_type`.`eventType` = `event_booking_info`.`eventType`)) = 0),concat(_latin1'Live Out          :  ',`event_booking_info`.`noOfPaxLiveOut`),concat(_latin1'Maximum Pax    :  ',`event_booking_info`.`noOfPaxLiveOut`)) AS `noofpaxliveout`,`folio`.`remarks` AS `remarks`,`hotel_test`.`fGetSalesExecutive`(`folio`.`sales_Executive`) AS `sales_Executive`,`event_booking_info`.`authorizedSignatory` AS `authorizedSignatory` from (`event_booking_info` join `folio`) where (`folio`.`folioID` = `event_booking_info`.`folioID`)) */;

--
-- Final view structure for view `vwbookingsheetmaintenance`
--

/*!50001 DROP TABLE IF EXISTS `vwbookingsheetmaintenance`*/;
/*!50001 DROP VIEW IF EXISTS `vwbookingsheetmaintenance`*/;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `vwbookingsheetmaintenance` AS (select `event_requirements`.`folioID` AS `folioID`,`event_requirements`.`requirementID` AS `requirementID`,`event_requirements`.`description` AS `description`,`event_requirements`.`transactionCode` AS `transactionCode`,`event_requirements`.`remarks` AS `remarks`,`event_requirements`.`CREATETIME` AS `CREATETIME`,`event_requirements`.`CREATEDBY` AS `CREATEDBY`,`event_requirements`.`UPDATETIME` AS `UPDATETIME`,`event_requirements`.`UPDATEDBY` AS `UPDATEDBY` from `event_requirements`) */;

--
-- Final view structure for view `vwbookingsheetrooms`
--

/*!50001 DROP TABLE IF EXISTS `vwbookingsheetrooms`*/;
/*!50001 DROP VIEW IF EXISTS `vwbookingsheetrooms`*/;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `vwbookingsheetrooms` AS (select `event_rooms`.`folioID` AS `folioid`,sum(`event_rooms`.`noOfRooms`) AS `noOfRooms`,`event_rooms`.`guaranteedRooms` AS `guaranteedRooms`,`event_rooms`.`guaranteedPax` AS `noOfPax`,sum(`event_rooms`.`noOfPax`) AS `guaranteedPax`,`event_rooms`.`remarks` AS `remarks`,`folio`.`arrivalDate` AS `arrivaldate`,`folio`.`departureDate` AS `departuredate`,`folio`.`folioETA` AS `folioeta`,`folio`.`folioETD` AS `folioetd`,`hotel_test`.`fGetBlockedRooms`(`folio`.`folioID`) AS `blockedrooms`,(select group_concat(distinct `folioschedules`.`RoomID` separator ', ') AS `group_concat(distinct ``folioschedules``.``RoomID`` separator ', ')` from `folioschedules` where ((`folioschedules`.`FolioId` = `folio`.`folioID`) and (`folio`.`masterFolio` = `folio`.`folioID`))) AS `reservedrooms` from ((`event_rooms` join `folio`) join `event_booking_info`) where ((`event_rooms`.`folioID` = `folio`.`folioID`) and (`event_booking_info`.`folioID` = `folio`.`folioID`)) group by `event_rooms`.`folioID`) */;

--
-- Final view structure for view `vwbookingsheetweddingdetails`
--

/*!50001 DROP TABLE IF EXISTS `vwbookingsheetweddingdetails`*/;
/*!50001 DROP VIEW IF EXISTS `vwbookingsheetweddingdetails`*/;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `vwbookingsheetweddingdetails` AS (select distinct `event_details`.`folioID` AS `folioID`,`event_details`.`eventDetailHeader` AS `eventDetailHeader`,`event_details`.`description` AS `description`,`event_details`.`CREATETIME` AS `CREATETIME`,`event_details`.`CREATEDBY` AS `CREATEDBY`,`event_details`.`UPDATETIME` AS `UPDATETIME`,`event_details`.`UPDATEDBY` AS `UPDATEDBY`,_utf8'EVENT DETAILS' AS `header` from (`event_details` join `event_booking_info`) where (`event_details`.`folioID` = `event_booking_info`.`folioID`)) */;

--
-- Final view structure for view `vwcancelledgroups`
--

/*!50001 DROP TABLE IF EXISTS `vwcancelledgroups`*/;
/*!50001 DROP VIEW IF EXISTS `vwcancelledgroups`*/;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `vwcancelledgroups` AS (select `event_rooms`.`roomType` AS `roomtype`,concat(`event_rooms`.`blockedRooms`,_latin1'/',`event_rooms`.`noOfRooms`,_latin1' rooms') AS `rooms`,`event_rooms`.`folioID` AS `folioid`,`event_rooms`.`noOfRooms` AS `noOfrooms`,`event_rooms`.`blockedRooms` AS `blockedRooms` from `event_rooms` where (`event_rooms`.`noOfRooms` > 0)) */;

--
-- Final view structure for view `vweventtransactions`
--

/*!50001 DROP TABLE IF EXISTS `vweventtransactions`*/;
/*!50001 DROP VIEW IF EXISTS `vweventtransactions`*/;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `vweventtransactions` AS (select `foliorecurringcharge`.`HotelID` AS `HotelID`,`foliorecurringcharge`.`FolioID` AS `FolioID`,`foliorecurringcharge`.`TransactionCode` AS `TransactionCode`,`foliorecurringcharge`.`Memo` AS `Memo`,`foliorecurringcharge`.`Amount` AS `Amount`,`foliorecurringcharge`.`FromDate` AS `FromDate`,`foliorecurringcharge`.`Todate` AS `Todate`,`foliorecurringcharge`.`CreateTime` AS `CreateTime`,`foliorecurringcharge`.`CreatedBy` AS `CreatedBy`,`foliorecurringcharge`.`UpdateTime` AS `UpdateTime`,`foliorecurringcharge`.`UpdatedBy` AS `UpdatedBy`,`foliorecurringcharge`.`summaryFlag` AS `summaryFlag`,`foliorecurringcharge`.`packageID` AS `packageID`,`foliorecurringcharge`.`subAccount` AS `subAccount` from `foliorecurringcharge`) */;

--
-- Final view structure for view `vwfoliodependentrooms`
--

/*!50001 DROP TABLE IF EXISTS `vwfoliodependentrooms`*/;
/*!50001 DROP VIEW IF EXISTS `vwfoliodependentrooms`*/;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `vwfoliodependentrooms` AS (select distinct `event_rooms`.`roomReqID` AS `roomReqID`,`event_rooms`.`folioID` AS `folioID`,`event_rooms`.`roomType` AS `roomType`,`event_rooms`.`noOfPax` AS `noOfPax`,`event_rooms`.`guaranteedPax` AS `guaranteedPax`,`event_rooms`.`noOfRooms` AS `noOfRooms`,`event_rooms`.`guaranteedRooms` AS `guaranteedRooms`,`event_rooms`.`blockedRooms` AS `blockedRooms`,`event_rooms`.`remarks` AS `remarks`,`event_rooms`.`CREATEDBY` AS `CREATEDBY`,`event_rooms`.`CREATETIME` AS `CREATETIME`,`event_rooms`.`UPDATEDBY` AS `UPDATEDBY`,`event_rooms`.`UPDATETIME` AS `UPDATETIME`,max(`folioschedules`.`RATE`) AS `rate`,`folioschedules`.`Days` AS `days`,cast(`folioschedules`.`FROMDATE` as date) AS `fromdate`,cast(`folioschedules`.`TODATE` as date) AS `todate` from ((`folio` join `folioschedules`) join `event_rooms`) where ((`folio`.`folioID` = `folioschedules`.`FolioId`) and (`folio`.`masterFolio` = `event_rooms`.`folioID`)) group by `folioschedules`.`RoomType`) union (select distinct `roomblock`.`Blockid` AS `roomreqid`,`roomblock`.`FolioId` AS `folioid`,(select `rooms`.`roomtypecode` AS `roomtypecode` from `rooms` where (`rooms`.`roomid` = `blockingdetails`.`roomid`)) AS `roomtype`,count(`blockingdetails`.`roomid`) AS `noofpax`,count(`blockingdetails`.`roomid`) AS `guaranteedpax`,count(`blockingdetails`.`roomid`) AS `noofrooms`,count(`blockingdetails`.`roomid`) AS `guaranteedrooms`,count(`blockingdetails`.`roomid`) AS `blockedrooms`,_latin1'' AS `remarks`,`roomblock`.`CREATEDBY` AS `createdby`,`roomblock`.`CREATETIME` AS `createtime`,`roomblock`.`UPDATEDBY` AS `updatedby`,`roomblock`.`UPDATETIME` AS `updatetime`,0 AS `rate`,0 AS `days`,`blockingdetails`.`blockfrom` AS `fromdate`,`blockingdetails`.`blockto` AS `todate` from (`roomblock` join `blockingdetails`) where (`roomblock`.`Blockid` = `blockingdetails`.`blockid`) group by (select `rooms`.`roomtypecode` AS `roomtypecode` from `rooms` where (`rooms`.`roomid` = `blockingdetails`.`roomid`))) */;

--
-- Final view structure for view `vwfolioeventrequirements`
--

/*!50001 DROP TABLE IF EXISTS `vwfolioeventrequirements`*/;
/*!50001 DROP VIEW IF EXISTS `vwfolioeventrequirements`*/;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `vwfolioeventrequirements` AS (select `event_requirements`.`folioID` AS `folioid`,`event_requirements`.`requirementID` AS `requirementid`,group_concat(`event_requirements`.`description` separator ',') AS `description` from `event_requirements` group by `event_requirements`.`requirementID` order by `event_requirements`.`folioID`) */;

--
-- Final view structure for view `vwfoodandbevsheet`
--

/*!50001 DROP TABLE IF EXISTS `vwfoodandbevsheet`*/;
/*!50001 DROP VIEW IF EXISTS `vwfoodandbevsheet`*/;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `vwfoodandbevsheet` AS (select distinct `event_meal_requirements`.`folioID` AS `folioID`,`event_meal_requirements`.`eventDate` AS `eventDate`,`event_meal_requirements`.`venue` AS `venue`,`event_meal_requirements`.`pax` AS `pax`,`event_meal_requirements`.`startTime` AS `startTime`,`event_meal_requirements`.`endTime` AS `endTime`,`event_meal_requirements`.`over` AS `over`,`event_meal_requirements`.`setup` AS `setup`,`event_meal_requirements`.`remarks` AS `remarks`,`event_meal_requirements`.`totalMealCost` AS `totalMealCost`,`event_meal_requirements`.`liveInPax` AS `liveInPax`,`event_meal_requirements`.`liveOutPax` AS `liveOutPax`,group_concat(distinct `event_meal_requirements`.`mealType` order by cast(`event_meal_requirements`.`startTime` as time) ASC separator ', ') AS `mealType` from (`event_meal_requirements` join `event_meal_details`) where (`event_meal_details`.`mealID` = `event_meal_requirements`.`mealID`) group by `event_meal_requirements`.`folioID`,`event_meal_requirements`.`eventDate` order by `event_meal_requirements`.`eventDate`) */;

--
-- Final view structure for view `vwgroupactualarrival`
--

/*!50001 DROP TABLE IF EXISTS `vwgroupactualarrival`*/;
/*!50001 DROP VIEW IF EXISTS `vwgroupactualarrival`*/;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `vwgroupactualarrival` AS (select `folio`.`folioID` AS `folioid`,`folio`.`companyID` AS `companyid`,`folio`.`accountType` AS `accounttype`,`folio`.`groupName` AS `GuestName`,`folioschedules`.`RoomID` AS `roomid`,`folioschedules`.`RoomType` AS `roomtype`,`folio`.`arrivalDate` AS `arrivalDate`,`folio`.`departureDate` AS `DepartureDate`,`folio`.`noOfAdults` AS `Pax`,`folio`.`remarks` AS `remarks`,`folioschedules`.`TODATE` AS `departure`,`folioschedules`.`FROMDATE` AS `arrival`,if((substr(`folio`.`companyID`,1,1) = _latin1'G'),`hotel_test`.`fGetCompanyName`(`folio`.`companyID`),`hotel_test`.`fGetGuestName`(`folio`.`companyID`)) AS `companyname`,`hotel_test`.`fGetFolioBalance`(`folio`.`folioID`) AS `Balance`,`rooms`.`floor` AS `floor` from ((`folioschedules` left join `rooms` on((`rooms`.`roomid` = `folioschedules`.`RoomID`))) join `folio`) where ((`folioschedules`.`FolioId` = `folio`.`folioID`) and (`folio`.`folioType` = _latin1'GROUP') and (`folio`.`Status` = _latin1'CHECKED IN') and (`folioschedules`.`HOTELID` = `folio`.`hotelID`)) order by `folio`.`folioID`) */;

--
-- Final view structure for view `vwgroupactualdeparture`
--

/*!50001 DROP TABLE IF EXISTS `vwgroupactualdeparture`*/;
/*!50001 DROP VIEW IF EXISTS `vwgroupactualdeparture`*/;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `vwgroupactualdeparture` AS (select `folio`.`folioID` AS `folioid`,`folio`.`companyID` AS `companyid`,`folio`.`accountType` AS `accounttype`,`folio`.`groupName` AS `GuestName`,`folioschedules`.`RoomID` AS `roomid`,`folioschedules`.`RoomType` AS `roomtype`,`folio`.`arrivalDate` AS `arrivalDate`,`folio`.`departureDate` AS `DepartureDate`,`folio`.`noOfAdults` AS `Pax`,`folio`.`remarks` AS `remarks`,cast(`folio`.`toDate` as date) AS `departure`,`folioschedules`.`FROMDATE` AS `arrival`,if((substr(`folio`.`companyID`,1,1) = _latin1'G'),`hotel_test`.`fGetCompanyName`(`folio`.`companyID`),`hotel_test`.`fGetGuestName`(`folio`.`companyID`)) AS `companyname`,`hotel_test`.`fGetFolioBalance`(`folio`.`folioID`) AS `Balance`,`rooms`.`floor` AS `floor` from ((`folio` left join `folioschedules` on((`folioschedules`.`FolioId` = `folio`.`folioID`))) left join `rooms` on((`rooms`.`roomid` = `folioschedules`.`RoomID`))) where ((`folio`.`folioType` = _latin1'GROUP') and (`folio`.`Status` = _latin1'CHECKED OUT')) order by `folio`.`folioID`) */;

--
-- Final view structure for view `vwgroupbookingdropdown`
--

/*!50001 DROP TABLE IF EXISTS `vwgroupbookingdropdown`*/;
/*!50001 DROP VIEW IF EXISTS `vwgroupbookingdropdown`*/;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `vwgroupbookingdropdown` AS (select `groupbookingdropdown`.`ID` AS `ID`,`groupbookingdropdown`.`FieldName` AS `FieldName`,`groupbookingdropdown`.`Value` AS `Value`,`groupbookingdropdown`.`StatusFlag` AS `StatusFlag`,`groupbookingdropdown`.`CreatedDate` AS `CreatedDate`,`groupbookingdropdown`.`CreatedBy` AS `CreatedBy`,`groupbookingdropdown`.`UpdatedDate` AS `UpdatedDate`,`groupbookingdropdown`.`UpdatedBy` AS `UpdatedBy`,`event_booking_info`.`billingArrangement` AS `billingArrangement`,`event_booking_info`.`folioID` AS `folioid` from (`groupbookingdropdown` join `event_booking_info`)) */;

--
-- Final view structure for view `vwgroupexpectcheckinblockings`
--

/*!50001 DROP TABLE IF EXISTS `vwgroupexpectcheckinblockings`*/;
/*!50001 DROP VIEW IF EXISTS `vwgroupexpectcheckinblockings`*/;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`%` SQL SECURITY DEFINER */
/*!50001 VIEW `vwgroupexpectcheckinblockings` AS (select distinct `roomblock`.`FolioId` AS `folioid`,`roomblock`.`FolioId` AS `masterfolio`,(select `folio`.`folioType` AS `foliotype` from `folio` where (`folio`.`folioID` = `roomblock`.`FolioId`)) AS `foliotype`,(select `folio`.`groupName` AS `groupname` from `folio` where (`folio`.`folioID` = `roomblock`.`FolioId`)) AS `groupname`,_latin1'' AS `companyname`,`blockingdetails`.`roomid` AS `room`,cast(`blockingdetails`.`blockfrom` as date) AS `blockfrom`,cast(`blockingdetails`.`blockto` as date) AS `blockto`,0 AS `totalPax`,(select date_format(`folio`.`fromDate`,_latin1'%c/%d/%y') AS `date_format(fromdate,'%c/%d/%y')` from `folio` where (`folio`.`folioID` = `roomblock`.`FolioId`)) AS `groupArrivalDate`,(select date_format(`folio`.`toDate`,_latin1'%c/%d/%y') AS `date_format(todate,'%c/%d/%y')` from `folio` where (`folio`.`folioID` = `roomblock`.`FolioId`)) AS `groupDepartureDate`,_latin1'' AS `groupAccountType`,_latin1'BLOCKING' AS `status`,(select distinct `rooms`.`roomtypecode` AS `roomtypecode` from `rooms` where (`rooms`.`roomid` = `blockingdetails`.`roomid`)) AS `roomType` from (`roomblock` join `blockingdetails`) where (`roomblock`.`Blockid` = `blockingdetails`.`blockid`)) */;

--
-- Final view structure for view `vwgroupexpectedcheckin`
--

/*!50001 DROP TABLE IF EXISTS `vwgroupexpectedcheckin`*/;
/*!50001 DROP VIEW IF EXISTS `vwgroupexpectedcheckin`*/;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`%` SQL SECURITY DEFINER */
/*!50001 VIEW `vwgroupexpectedcheckin` AS (select distinct `folio`.`folioID` AS `folioid`,if((`folio`.`folioType` = _latin1'GROUP'),`folio`.`folioID`,`folio`.`masterFolio`) AS `masterfolio`,`folio`.`folioType` AS `foliotype`,`folio`.`groupName` AS `groupname`,if((`folio`.`folioType` = _latin1'DEPENDENT'),`hotel_test`.`fGetMasterFolioCompany`(`folio`.`masterFolio`),if((substr(`folio`.`companyID`,1,1) = _latin1'G'),`hotel_test`.`fGetCompanyName`(`folio`.`companyID`),`hotel_test`.`fGetGuestName`(`folio`.`companyID`))) AS `companyName`,if((`folio`.`folioType` = _latin1'GROUP'),`folioschedules`.`RoomID`,_latin1'NONE') AS `grouproom`,`folioschedules`.`RoomID` AS `room`,cast(`folioschedules`.`FROMDATE` as date) AS `blockfrom`,cast(`folioschedules`.`TODATE` as date) AS `blockto`,if((`folio`.`folioType` = _latin1'DEPENDENT'),`hotel_test`.`fGetGroupTotalPax`(`folio`.`masterFolio`),`hotel_test`.`fGetGroupTotalPax`(`folio`.`folioID`)) AS `totalPax`,if((`folio`.`folioType` = _latin1'DEPENDENT'),cast(`hotel_test`.`fGetGroupArrivalDate`(`folio`.`masterFolio`) as date),cast(`folio`.`fromDate` as date)) AS `groupArrivalDate`,if((`folio`.`folioType` = _latin1'DEPENDENT'),cast(`hotel_test`.`fGetGroupDepartureDate`(`folio`.`masterFolio`) as date),cast(`folio`.`toDate` as date)) AS `groupDepartureDate`,if((`folio`.`folioType` = _latin1'DEPENDENT'),`hotel_test`.`fGetGroupAccountType`(`folio`.`masterFolio`),`folio`.`accountType`) AS `groupAccountType`,`folio`.`Status` AS `status`,(select distinct `rooms`.`roomtypecode` AS `roomtypecode` from `rooms` where (`rooms`.`roomid` = `folioschedules`.`RoomID`)) AS `roomtype` from (`folio` left join `folioschedules` on((`folio`.`folioID` = `folioschedules`.`FolioId`))) where (((`folio`.`folioType` = _latin1'GROUP') or (`folio`.`folioType` = _latin1'DEPENDENT')) and (`folio`.`Status` <> _latin1'NO SHOW') and (`folio`.`Status` <> _latin1'CHECKED OUT') and (`folio`.`Status` <> _latin1'CANCELLED') and (`folio`.`Status` <> _latin1'CHECKED IN'))) union all (select distinct `roomblock`.`FolioId` AS `folioid`,`roomblock`.`FolioId` AS `masterfolio`,_latin1'DEPENDENT' AS `foliotype`,(select `folio`.`groupName` AS `groupname` from `folio` where (`folio`.`folioID` = `roomblock`.`FolioId`)) AS `groupname`,`hotel_test`.`fGetMasterFolioCompany`(`roomblock`.`FolioId`) AS `companyname`,if(((select `folioschedules`.`RoomID` AS `roomid` from `folioschedules` where (`folioschedules`.`FolioId` = `roomblock`.`FolioId`) limit 1) <> _latin1''),(select `folioschedules`.`RoomID` AS `roomid` from `folioschedules` where (`folioschedules`.`FolioId` = `roomblock`.`FolioId`) limit 1),_latin1'NONE') AS `grouproom`,`blockingdetails`.`roomid` AS `room`,cast(`blockingdetails`.`blockfrom` as date) AS `blockfrom`,cast(`blockingdetails`.`blockto` as date) AS `blockto`,0 AS `totalPax`,(select cast(`folio`.`fromDate` as date) AS `fromdate` from `folio` where (`folio`.`folioID` = `roomblock`.`FolioId`)) AS `groupArrivalDate`,(select cast(`folio`.`toDate` as date) AS `todate` from `folio` where (`folio`.`folioID` = `roomblock`.`FolioId`)) AS `groupDepartureDate`,`hotel_test`.`fGetGroupAccountType`(`roomblock`.`FolioId`) AS `groupAccountType`,_latin1'BLOCKED' AS `status`,(select distinct `rooms`.`roomtypecode` AS `roomtypecode` from `rooms` where (`rooms`.`roomid` = `blockingdetails`.`roomid`)) AS `roomType` from (`roomblock` join `blockingdetails`) where (`roomblock`.`Blockid` = `blockingdetails`.`blockid`)) */;

--
-- Final view structure for view `vwgroupexpectedcheckout`
--

/*!50001 DROP TABLE IF EXISTS `vwgroupexpectedcheckout`*/;
/*!50001 DROP VIEW IF EXISTS `vwgroupexpectedcheckout`*/;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`%` SQL SECURITY DEFINER */
/*!50001 VIEW `vwgroupexpectedcheckout` AS (select distinct `folio`.`folioID` AS `folioid`,if((`folio`.`folioType` = _latin1'GROUP'),`folio`.`folioID`,`folio`.`masterFolio`) AS `masterfolio`,`folio`.`folioType` AS `foliotype`,`folio`.`groupName` AS `groupname`,if((`folio`.`folioType` = _latin1'DEPENDENT'),`hotel_test`.`fGetMasterFolioCompany`(`folio`.`masterFolio`),if((substr(`folio`.`companyID`,1,1) = _latin1'G'),`hotel_test`.`fGetCompanyName`(`folio`.`companyID`),`hotel_test`.`fGetGuestName`(`folio`.`companyID`))) AS `companyName`,if((`folio`.`folioType` = _latin1'GROUP'),`folioschedules`.`RoomID`,_latin1'NONE') AS `grouproom`,`folioschedules`.`RoomID` AS `room`,cast(`folioschedules`.`FROMDATE` as date) AS `blockfrom`,cast(`folioschedules`.`TODATE` as date) AS `blockto`,if((`folio`.`folioType` = _latin1'DEPENDENT'),`hotel_test`.`fGetGroupTotalPax`(`folio`.`masterFolio`),`hotel_test`.`fGetGroupTotalPax`(`folio`.`folioID`)) AS `totalPax`,if((`folio`.`folioType` = _latin1'DEPENDENT'),`hotel_test`.`fGetGroupArrivalDate`(`folio`.`masterFolio`),`folio`.`fromDate`) AS `groupArrivalDate`,if((`folio`.`folioType` = _latin1'DEPENDENT'),`hotel_test`.`fGetGroupDepartureDate`(`folio`.`masterFolio`),`folio`.`toDate`) AS `groupDepartureDate`,if((`folio`.`folioType` = _latin1'DEPENDENT'),`hotel_test`.`fGetGroupAccountType`(`folio`.`masterFolio`),`folio`.`accountType`) AS `groupAccountType`,`folio`.`Status` AS `status`,(select distinct `rooms`.`roomtypecode` AS `roomtypecode` from `rooms` where (`rooms`.`roomid` = `folioschedules`.`RoomID`)) AS `roomtype` from (`folio` left join `folioschedules` on((`folio`.`folioID` = `folioschedules`.`FolioId`))) where (((`folio`.`folioType` = _latin1'GROUP') or (`folio`.`folioType` = _latin1'DEPENDENT')) and (`folio`.`Status` <> _latin1'NO SHOW') and (`folio`.`Status` <> _latin1'CHECKED OUT') and (`folio`.`Status` <> _latin1'CANCELLED'))) union all (select distinct `roomblock`.`FolioId` AS `folioid`,`roomblock`.`FolioId` AS `masterfolio`,_latin1'DEPENDENT' AS `foliotype`,(select `folio`.`groupName` AS `groupname` from `folio` where (`folio`.`folioID` = `roomblock`.`FolioId`)) AS `groupname`,_latin1'' AS `companyname`,if(((select `folioschedules`.`RoomID` AS `roomid` from `folioschedules` where (`folioschedules`.`FolioId` = `roomblock`.`FolioId`) limit 1) <> _latin1''),(select `folioschedules`.`RoomID` AS `roomid` from `folioschedules` where (`folioschedules`.`FolioId` = `roomblock`.`FolioId`) limit 1),_latin1'NONE') AS `grouproom`,`blockingdetails`.`roomid` AS `room`,`blockingdetails`.`blockfrom` AS `blockfrom`,`blockingdetails`.`blockto` AS `blockto`,0 AS `totalPax`,(select `folio`.`fromDate` AS `cast(fromdate as datetime)` from `folio` where (`folio`.`folioID` = `roomblock`.`FolioId`)) AS `groupArrivalDate`,(select `folio`.`toDate` AS `cast(todate as datetime)` from `folio` where (`folio`.`folioID` = `roomblock`.`FolioId`)) AS `groupDepartureDate`,`hotel_test`.`fGetGroupAccountType`(`roomblock`.`FolioId`) AS `groupAccountType`,_latin1'BLOCKED' AS `status`,(select distinct `rooms`.`roomtypecode` AS `roomtypecode` from `rooms` where (`rooms`.`roomid` = `blockingdetails`.`roomid`)) AS `roomType` from (`roomblock` join `blockingdetails`) where (`roomblock`.`Blockid` = `blockingdetails`.`blockid`)) */;

--
-- Final view structure for view `vwgroupinclusions`
--

/*!50001 DROP TABLE IF EXISTS `vwgroupinclusions`*/;
/*!50001 DROP VIEW IF EXISTS `vwgroupinclusions`*/;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `vwgroupinclusions` AS (select distinct 1 AS `hotelid`,`event_requirements`.`folioID` AS `folioid`,`event_requirements`.`description` AS `memo`,`event_requirements`.`CREATEDBY` AS `createdby`,`event_requirements`.`CREATETIME` AS `createtime`,`event_requirements`.`UPDATEDBY` AS `updatedby`,`event_requirements`.`UPDATETIME` AS `updatetime` from `event_requirements` where (lcase(`event_requirements`.`requirementID`) like _latin1'%inclusions%')) */;

--
-- Final view structure for view `vwjoinerfolios`
--

/*!50001 DROP TABLE IF EXISTS `vwjoinerfolios`*/;
/*!50001 DROP VIEW IF EXISTS `vwjoinerfolios`*/;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `vwjoinerfolios` AS (select `folio`.`folioID` AS `folioid`,`folio`.`accountID` AS `accountid`,`folio`.`folioType` AS `foliotype`,`hotel_test`.`fGetGuestName`(`folio`.`accountID`) AS `guestName`,`folio`.`masterFolio` AS `masterfolio`,`folio`.`Status` AS `folioStatus` from `folio` where (`folio`.`folioType` = _latin1'JOINER')) */;

--
-- Final view structure for view `vwmealrequirements`
--

/*!50001 DROP TABLE IF EXISTS `vwmealrequirements`*/;
/*!50001 DROP VIEW IF EXISTS `vwmealrequirements`*/;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`%` SQL SECURITY DEFINER */
/*!50001 VIEW `vwmealrequirements` AS (select `event_meal_requirements`.`folioID` AS `folioid`,cast(`event_meal_requirements`.`eventDate` as date) AS `mealDate`,`hotel_test`.`fGetLiveInSnacks`(`event_meal_requirements`.`folioID`,cast(`event_meal_requirements`.`eventDate` as date)) AS `fGetLiveInSnacks(folioid, date(eventDate))`,`hotel_test`.`fGetLiveOutSnacks`(`event_meal_requirements`.`folioID`,cast(`event_meal_requirements`.`eventDate` as date)) AS `fGetLiveOutSnacks(folioid, date(eventDate))`,`hotel_test`.`fGetLiveInMeals`(`event_meal_requirements`.`folioID`,cast(`event_meal_requirements`.`eventDate` as date)) AS `fGetLiveInMeals(folioid, date(eventDate))`,`hotel_test`.`fGetLiveOutMeals`(`event_meal_requirements`.`folioID`,cast(`event_meal_requirements`.`eventDate` as date)) AS `fGetLiveOutMeals(folioid,date(eventDate))`,concat(max(`event_meal_requirements`.`liveInPax`),_latin1' pax') AS `liveInPax`,concat(max(`event_meal_requirements`.`liveOutPax`),_latin1' pax') AS `liveOutPax`,`hotel_test`.`fGetLiveOutTotal`(`event_meal_requirements`.`folioID`,cast(`event_meal_requirements`.`eventDate` as date)) AS `fGetLiveOutTotal(folioid,)` from `event_meal_requirements` where (`event_meal_requirements`.`folioID` = `event_meal_requirements`.`folioID`) group by cast(`event_meal_requirements`.`eventDate` as date)) */;

--
-- Final view structure for view `vwroomrequirements`
--

/*!50001 DROP TABLE IF EXISTS `vwroomrequirements`*/;
/*!50001 DROP VIEW IF EXISTS `vwroomrequirements`*/;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `vwroomrequirements` AS select distinct `event_rooms`.`roomReqID` AS `roomReqID`,`event_rooms`.`folioID` AS `folioID`,`event_rooms`.`roomType` AS `roomType`,`event_rooms`.`noOfPax` AS `noOfPax`,`event_rooms`.`guaranteedPax` AS `guaranteedPax`,`event_rooms`.`noOfRooms` AS `noOfRooms`,`event_rooms`.`guaranteedRooms` AS `guaranteedRooms`,`event_rooms`.`blockedRooms` AS `blockedRooms`,`event_rooms`.`remarks` AS `remarks`,`event_rooms`.`CREATEDBY` AS `CREATEDBY`,`event_rooms`.`CREATETIME` AS `CREATETIME`,`event_rooms`.`UPDATEDBY` AS `UPDATEDBY`,`event_rooms`.`UPDATETIME` AS `UPDATETIME`,max(`folioschedules`.`RATE`) AS `rate`,`folioschedules`.`Days` AS `days` from ((`folio` join `folioschedules`) join `event_rooms`) where ((`folio`.`folioID` = `folioschedules`.`FolioId`) and (`folio`.`masterFolio` = `event_rooms`.`folioID`)) group by `folioschedules`.`RoomType` */;

--
-- Final view structure for view `vwweddingdetails`
--

/*!50001 DROP TABLE IF EXISTS `vwweddingdetails`*/;
/*!50001 DROP VIEW IF EXISTS `vwweddingdetails`*/;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`%` SQL SECURITY DEFINER */
/*!50001 VIEW `vwweddingdetails` AS (select distinct `event_details`.`folioID` AS `folioid`,`event_details`.`eventDetailHeader` AS `eventDetailHeader`,`event_details`.`description` AS `description`,_latin1'WEDDING RECEPTION' AS `header` from (`event_details` join `event_booking_info`) where (((`event_booking_info`.`eventType` like _latin1'%WEDDING%') or (`event_booking_info`.`eventType` like _latin1'%NUPTIAL%')) and (`event_booking_info`.`folioID` = `event_details`.`folioID`) and ((`event_details`.`eventDetailHeader` <> _latin1'') or isnull(`event_details`.`eventDetailHeader`)))) */;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2010-10-13 10:28:41
